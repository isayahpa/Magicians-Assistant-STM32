
MagiciansAssistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  08006d98  08006d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074cc  080074cc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080074cc  080074cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074d4  080074d4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074d4  080074d4  000174d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074d8  080074d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080074dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000068  08007544  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08007544  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001203b  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000253e  00000000  00000000  00032116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  00034658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd1  00000000  00000000  000355a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027beb  00000000  00000000  00036171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000133c7  00000000  00000000  0005dd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eee50  00000000  00000000  00071123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004910  00000000  00000000  0015ff74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  00164884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d80 	.word	0x08006d80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006d80 	.word	0x08006d80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <initArducam>:

/* Notes:
 * The chip select signal should always be LOW during the SPI read or write bus cycle
 * Add printf() prototype from main into here if printing doesn't work
 */
void initArducam(ArducamController* pCtrl, I2C_HandleTypeDef* pHI2C, SPI_HandleTypeDef* pHSPI, GPIO_TypeDef* pGPIOPort, uint16_t pinNo){
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
 8000578:	603b      	str	r3, [r7, #0]
	printf("Initializing ArduCam\n");
 800057a:	481f      	ldr	r0, [pc, #124]	; (80005f8 <initArducam+0x8c>)
 800057c:	f005 fd26 	bl	8005fcc <puts>
	pCtrl->pI2CHandle = pHI2C;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	601a      	str	r2, [r3, #0]
	pCtrl->pSPIHandle = pHSPI;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	605a      	str	r2, [r3, #4]
	pCtrl->status = HAL_OK;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2200      	movs	r2, #0
 8000590:	721a      	strb	r2, [r3, #8]
	pCtrl -> pGPIOPort = pGPIOPort;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	60da      	str	r2, [r3, #12]
	pCtrl -> pinNo = pinNo;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	8b3a      	ldrh	r2, [r7, #24]
 800059c:	821a      	strh	r2, [r3, #16]

	if(HAL_I2C_IsDeviceReady(pHI2C, I2C_ADDR_WRITE, 1, HAL_MAX_DELAY) == HAL_OK){
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	2201      	movs	r2, #1
 80005a4:	2160      	movs	r1, #96	; 0x60
 80005a6:	68b8      	ldr	r0, [r7, #8]
 80005a8:	f001 fde4 	bl	8002174 <HAL_I2C_IsDeviceReady>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d10c      	bne.n	80005cc <initArducam+0x60>
		resetCam(pCtrl);
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f000 f9de 	bl	8000974 <resetCam>

		setDefaultSettings(pCtrl);
 80005b8:	68f8      	ldr	r0, [r7, #12]
 80005ba:	f000 f9b5 	bl	8000928 <setDefaultSettings>
		flushFIFO(pCtrl);
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f000 fa26 	bl	8000a10 <flushFIFO>

		printStatus(pCtrl);
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f000 fbb5 	bl	8000d34 <printStatus>
 80005ca:	e002      	b.n	80005d2 <initArducam+0x66>
	} else {
		printf("Arducam I2C Wasn't Ready Yet\n");
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <initArducam+0x90>)
 80005ce:	f005 fcfd 	bl	8005fcc <puts>
	}

	if(pCtrl->status != HAL_OK){
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	7a1b      	ldrb	r3, [r3, #8]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d006      	beq.n	80005e8 <initArducam+0x7c>
		printf("Arducam Init Fail | Status = 0x%02X\n", pCtrl->status);
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	7a1b      	ldrb	r3, [r3, #8]
 80005de:	4619      	mov	r1, r3
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <initArducam+0x94>)
 80005e2:	f005 fc85 	bl	8005ef0 <iprintf>
	} else {
		printf("Arducam Init Success!\n");
	}

}
 80005e6:	e002      	b.n	80005ee <initArducam+0x82>
		printf("Arducam Init Success!\n");
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <initArducam+0x98>)
 80005ea:	f005 fcef 	bl	8005fcc <puts>
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	08006d98 	.word	0x08006d98
 80005fc:	08006db0 	.word	0x08006db0
 8000600:	08006dd0 	.word	0x08006dd0
 8000604:	08006df8 	.word	0x08006df8

08000608 <i2cRegWrite>:
//
/*To Write over i2c:
* Request I2C_ADDR_WRITE -> Send Cam Register Address (left shift device addr's by 1) -> Send Data bytes
*/

void i2cRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t *pData, uint16_t size){
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	607a      	str	r2, [r7, #4]
 8000612:	461a      	mov	r2, r3
 8000614:	460b      	mov	r3, r1
 8000616:	72fb      	strb	r3, [r7, #11]
 8000618:	4613      	mov	r3, r2
 800061a:	813b      	strh	r3, [r7, #8]
	printf("Writing 0x%04X to Reg 0x%02X\n", *pData, reg);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	7afb      	ldrb	r3, [r7, #11]
 8000624:	461a      	mov	r2, r3
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <i2cRegWrite+0x64>)
 8000628:	f005 fc62 	bl	8005ef0 <iprintf>
	//printf("Before T1: %x\n", pCtrl->status);
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, &reg, (uint16_t) 1, CAM_TIMEOUT);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	f107 020b 	add.w	r2, r7, #11
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	2160      	movs	r1, #96	; 0x60
 800063c:	f001 fb8c 	bl	8001d58 <HAL_I2C_Master_Transmit>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	721a      	strb	r2, [r3, #8]
	//printf("After T1: %x\n", pCtrl->status);
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, pData, (uint16_t) size, CAM_TIMEOUT);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	893b      	ldrh	r3, [r7, #8]
 800064e:	2264      	movs	r2, #100	; 0x64
 8000650:	9200      	str	r2, [sp, #0]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	2160      	movs	r1, #96	; 0x60
 8000656:	f001 fb7f 	bl	8001d58 <HAL_I2C_Master_Transmit>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	721a      	strb	r2, [r3, #8]
	//printf("After T2: %x\n", pCtrl->status);
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	08006e10 	.word	0x08006e10

08000670 <i2cRegRead>:

/*To Read over i2c:
	* To I2C_ADDR_WRITE: Write the Register You want to read from
	* To I2C_ADDR_READ: Read as much data as you want
*/
void i2cRegRead(ArducamController* pCtrl, uint8_t reg, uint8_t *pBuffer, uint16_t size){
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af02      	add	r7, sp, #8
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	607a      	str	r2, [r7, #4]
 800067a:	461a      	mov	r2, r3
 800067c:	460b      	mov	r3, r1
 800067e:	72fb      	strb	r3, [r7, #11]
 8000680:	4613      	mov	r3, r2
 8000682:	813b      	strh	r3, [r7, #8]
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, &reg, 1, CAM_TIMEOUT);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	f107 020b 	add.w	r2, r7, #11
 800068c:	2364      	movs	r3, #100	; 0x64
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2301      	movs	r3, #1
 8000692:	2160      	movs	r1, #96	; 0x60
 8000694:	f001 fb60 	bl	8001d58 <HAL_I2C_Master_Transmit>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	721a      	strb	r2, [r3, #8]
	//printf("After T1: %x\n", pCtrl->status);
	pCtrl->status = HAL_I2C_Master_Receive(pCtrl->pI2CHandle, I2C_ADDR_READ, pBuffer, size, CAM_TIMEOUT);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	893b      	ldrh	r3, [r7, #8]
 80006a6:	2264      	movs	r2, #100	; 0x64
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	2161      	movs	r1, #97	; 0x61
 80006ae:	f001 fc6b 	bl	8001f88 <HAL_I2C_Master_Receive>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	721a      	strb	r2, [r3, #8]
	//printf("After R1: %x\n", pCtrl->status);
	printf("Read 0x%02X from 0x%02X\n", *pBuffer, reg);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	7afb      	ldrb	r3, [r7, #11]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <i2cRegRead+0x64>)
 80006c6:	f005 fc13 	bl	8005ef0 <iprintf>
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	08006e30 	.word	0x08006e30

080006d8 <i2cWriteMultiple>:

void i2cWriteMultiple(ArducamController* pCtrl, const struct SensorReg *regList){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
	struct SensorReg *current = (struct SensorReg *) regList;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	60fb      	str	r3, [r7, #12]

	while(current->addr != 0xFF || current->val != 0xFF){
 80006e6:	e00a      	b.n	80006fe <i2cWriteMultiple+0x26>
		i2cRegWrite(pCtrl, current->addr, &(current->val), 1);
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	7819      	ldrb	r1, [r3, #0]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	2301      	movs	r3, #1
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff88 	bl	8000608 <i2cRegWrite>
		current++;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3302      	adds	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
	while(current->addr != 0xFF || current->val != 0xFF){
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2bff      	cmp	r3, #255	; 0xff
 8000704:	d1f0      	bne.n	80006e8 <i2cWriteMultiple+0x10>
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	2bff      	cmp	r3, #255	; 0xff
 800070c:	d1ec      	bne.n	80006e8 <i2cWriteMultiple+0x10>
	}

}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <spiRegWrite>:

void spiRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t *pData, uint16_t size){
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	461a      	mov	r2, r3
 8000724:	460b      	mov	r3, r1
 8000726:	72fb      	strb	r3, [r7, #11]
 8000728:	4613      	mov	r3, r2
 800072a:	813b      	strh	r3, [r7, #8]
	printf("Writing 0x%02X to %02X\n", *pData, reg);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	7afb      	ldrb	r3, [r7, #11]
 8000734:	461a      	mov	r2, r3
 8000736:	4814      	ldr	r0, [pc, #80]	; (8000788 <spiRegWrite+0x70>)
 8000738:	f005 fbda 	bl	8005ef0 <iprintf>
	enable(pCtrl); // CS Pin Set LOW
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f000 f9fd 	bl	8000b3c <enable>
	//HAL_Delay(CAM_TIMEOUT);
	uint8_t cmdByte = reg | SPI_WRITE_MASK; // a 1 followed by Reg addr, to write to reg
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000748:	b2db      	uxtb	r3, r3
 800074a:	75fb      	strb	r3, [r7, #23]

	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, &cmdByte, 1, CAM_TIMEOUT);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6858      	ldr	r0, [r3, #4]
 8000750:	f107 0117 	add.w	r1, r7, #23
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	2201      	movs	r2, #1
 8000758:	f003 fd01 	bl	800415e <HAL_SPI_Transmit>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	721a      	strb	r2, [r3, #8]
	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, pData, size, CAM_TIMEOUT);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6858      	ldr	r0, [r3, #4]
 8000768:	893a      	ldrh	r2, [r7, #8]
 800076a:	2364      	movs	r3, #100	; 0x64
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	f003 fcf6 	bl	800415e <HAL_SPI_Transmit>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	721a      	strb	r2, [r3, #8]

	disable(pCtrl);
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f000 f9ee 	bl	8000b5c <disable>
}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	08006e4c 	.word	0x08006e4c

0800078c <spiRegRead>:

void spiRegRead(ArducamController* pCtrl, uint8_t reg, uint8_t *pBuffer, uint16_t size){
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af02      	add	r7, sp, #8
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	461a      	mov	r2, r3
 8000798:	460b      	mov	r3, r1
 800079a:	72fb      	strb	r3, [r7, #11]
 800079c:	4613      	mov	r3, r2
 800079e:	813b      	strh	r3, [r7, #8]
	enable(pCtrl);
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f000 f9cb 	bl	8000b3c <enable>
	//HAL_Delay(CAM_TIMEOUT);
	uint8_t cmdByte = reg & SPI_READ_MASK; // a 0 followed by register to read
 80007a6:	7afb      	ldrb	r3, [r7, #11]
 80007a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	75fb      	strb	r3, [r7, #23]
	uint8_t dummyByte = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	75bb      	strb	r3, [r7, #22]
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &cmdByte, pBuffer, 1, CAM_TIMEOUT);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	6858      	ldr	r0, [r3, #4]
 80007b8:	f107 0117 	add.w	r1, r7, #23
 80007bc:	2364      	movs	r3, #100	; 0x64
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2301      	movs	r3, #1
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	f003 ff77 	bl	80046b6 <HAL_SPI_TransmitReceive>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	721a      	strb	r2, [r3, #8]
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &dummyByte, pBuffer, size, CAM_TIMEOUT);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	6858      	ldr	r0, [r3, #4]
 80007d4:	893b      	ldrh	r3, [r7, #8]
 80007d6:	f107 0116 	add.w	r1, r7, #22
 80007da:	2264      	movs	r2, #100	; 0x64
 80007dc:	9200      	str	r2, [sp, #0]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	f003 ff69 	bl	80046b6 <HAL_SPI_TransmitReceive>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	721a      	strb	r2, [r3, #8]
	//pCtrl->status = HAL_SPI_Receive(pCtrl->pSPIHandle, pBuffer, size, CAM_TIMEOUT);
	disable(pCtrl);
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	f000 f9b5 	bl	8000b5c <disable>
	printf("Read 0x%02X from %02X\n", *pBuffer, reg);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	4619      	mov	r1, r3
 80007f8:	7afb      	ldrb	r3, [r7, #11]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4803      	ldr	r0, [pc, #12]	; (800080c <spiRegRead+0x80>)
 80007fe:	f005 fb77 	bl	8005ef0 <iprintf>
}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	08006e64 	.word	0x08006e64

08000810 <isFIFOReady>:

//Returns FIFO 'finished' flag. 0 -> FIFO is busy, 1 -> capture is finished

int isFIFOReady(ArducamController* pCtrl){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	uint8_t registerData = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	72fb      	strb	r3, [r7, #11]
	i2cRegRead(pCtrl, FIFO_STATUS_REG, &registerData, 1);
 800081c:	f107 020b 	add.w	r2, r7, #11
 8000820:	2301      	movs	r3, #1
 8000822:	2141      	movs	r1, #65	; 0x41
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ff23 	bl	8000670 <i2cRegRead>
	int isFinished = checkBit(registerData, 3);
 800082a:	7afb      	ldrb	r3, [r7, #11]
 800082c:	2103      	movs	r1, #3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fa9e 	bl	8000d70 <checkBit>
 8000834:	60f8      	str	r0, [r7, #12]
	printf("FIFO Ready Flag : %d\n", isFinished);
 8000836:	68f9      	ldr	r1, [r7, #12]
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <isFIFOReady+0x38>)
 800083a:	f005 fb59 	bl	8005ef0 <iprintf>
	return isFinished;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	08006e7c 	.word	0x08006e7c

0800084c <singleCapture>:
‘1’ to bit[1] to start a capture sequence. And then polling bit[3] which is the capture done flag by
sending command code 0x41. After capture is done, user have to clear the capture done flag by
sending command code 0x41 and write ‘1’ into bit[0] before next capture command.*/

//Returns a pointer to the picture data
void singleCapture(ArducamController* pCtrl, uint8_t **ppBuffer, FILE *pPicFile){
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
		printf("Starting Capture\n");
 8000858:	482d      	ldr	r0, [pc, #180]	; (8000910 <singleCapture+0xc4>)
 800085a:	f005 fbb7 	bl	8005fcc <puts>
		setCaptureFlag(pCtrl);
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f000 f910 	bl	8000a84 <setCaptureFlag>
		while(!isFIFOReady(pCtrl)); // Wait 'til Finished Flag is set
 8000864:	bf00      	nop
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f7ff ffd2 	bl	8000810 <isFIFOReady>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0f9      	beq.n	8000866 <singleCapture+0x1a>
		printf("FIFO Write Finished!\n");
 8000872:	4828      	ldr	r0, [pc, #160]	; (8000914 <singleCapture+0xc8>)
 8000874:	f005 fbaa 	bl	8005fcc <puts>

		//uint32_t fifoLength = getFIFOLength(pCtrl);
		//uint32_t transmissionSize = 0;
		//if(fifoLength >= 4096){ transmissionSize = 4096; } else { transmissionSize = fifoLength; } //4096 looks like the max amount of data

		int bufferSize = 4096;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	613b      	str	r3, [r7, #16]
		*ppBuffer = calloc(bufferSize, sizeof(uint8_t));
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	2101      	movs	r1, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f005 f89c 	bl	80059c0 <calloc>
 8000888:	4603      	mov	r3, r0
 800088a:	461a      	mov	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	601a      	str	r2, [r3, #0]
		burstReadFIFO(pCtrl, *ppBuffer);
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f000 f88c 	bl	80009b4 <burstReadFIFO>

		printf("Capture Complete!\n");
 800089c:	481e      	ldr	r0, [pc, #120]	; (8000918 <singleCapture+0xcc>)
 800089e:	f005 fb95 	bl	8005fcc <puts>
		printf("Picture Buffer: \n");
 80008a2:	481e      	ldr	r0, [pc, #120]	; (800091c <singleCapture+0xd0>)
 80008a4:	f005 fb92 	bl	8005fcc <puts>

		for(int i = 0; i < bufferSize; i++){
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e01d      	b.n	80008ea <singleCapture+0x9e>
			printf("%0x02X", *ppBuffer[i]);
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	4413      	add	r3, r2
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4818      	ldr	r0, [pc, #96]	; (8000920 <singleCapture+0xd4>)
 80008be:	f005 fb17 	bl	8005ef0 <iprintf>
			if(!(i % 10)){printf("\n");}
 80008c2:	6979      	ldr	r1, [r7, #20]
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <singleCapture+0xd8>)
 80008c6:	fb83 2301 	smull	r2, r3, r3, r1
 80008ca:	109a      	asrs	r2, r3, #2
 80008cc:	17cb      	asrs	r3, r1, #31
 80008ce:	1ad2      	subs	r2, r2, r3
 80008d0:	4613      	mov	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	1aca      	subs	r2, r1, r3
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d102      	bne.n	80008e4 <singleCapture+0x98>
 80008de:	200a      	movs	r0, #10
 80008e0:	f005 fb18 	bl	8005f14 <putchar>
		for(int i = 0; i < bufferSize; i++){
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	3301      	adds	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	dbdd      	blt.n	80008ae <singleCapture+0x62>
		}

		if(pPicFile != NULL){
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d006      	beq.n	8000906 <singleCapture+0xba>
			fwrite((const void *)*ppBuffer, sizeof(uint8_t), bufferSize, pPicFile);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2101      	movs	r1, #1
 8000902:	f005 fae7 	bl	8005ed4 <fwrite>
		}
}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	08006ed0 	.word	0x08006ed0
 8000914:	08006ee4 	.word	0x08006ee4
 8000918:	08006efc 	.word	0x08006efc
 800091c:	08006f10 	.word	0x08006f10
 8000920:	08006f24 	.word	0x08006f24
 8000924:	66666667 	.word	0x66666667

08000928 <setDefaultSettings>:


void setDefaultSettings(ArducamController* pCtrl){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	printf("Configuring Default Settings\n");
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <setDefaultSettings+0x3c>)
 8000932:	f005 fb4b 	bl	8005fcc <puts>
	i2cWriteMultiple(pCtrl, OV2640_QVGA);
 8000936:	490c      	ldr	r1, [pc, #48]	; (8000968 <setDefaultSettings+0x40>)
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fecd 	bl	80006d8 <i2cWriteMultiple>
	i2cWriteMultiple(pCtrl, OV2640_JPEG_INIT);
 800093e:	490b      	ldr	r1, [pc, #44]	; (800096c <setDefaultSettings+0x44>)
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fec9 	bl	80006d8 <i2cWriteMultiple>
	i2cWriteMultiple(pCtrl, OV2640_640x480_JPEG);
 8000946:	490a      	ldr	r1, [pc, #40]	; (8000970 <setDefaultSettings+0x48>)
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fec5 	bl	80006d8 <i2cWriteMultiple>
	flushFIFO(pCtrl);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f85e 	bl	8000a10 <flushFIFO>
	setNCaptureFrames(pCtrl, 1);
 8000954:	2101      	movs	r1, #1
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f8a5 	bl	8000aa6 <setNCaptureFrames>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	08006f2c 	.word	0x08006f2c
 8000968:	080070f8 	.word	0x080070f8
 800096c:	0800727c 	.word	0x0800727c
 8000970:	080073fc 	.word	0x080073fc

08000974 <resetCam>:

//Resets the CPLD
void resetCam(ArducamController* pCtrl){
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0x80;
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0x07, &cmd, 1);
 8000980:	f107 020f 	add.w	r2, r7, #15
 8000984:	2301      	movs	r3, #1
 8000986:	2107      	movs	r1, #7
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff fe3d 	bl	8000608 <i2cRegWrite>
	HAL_Delay(CAM_TIMEOUT);
 800098e:	2064      	movs	r0, #100	; 0x64
 8000990:	f000 fe7a 	bl	8001688 <HAL_Delay>
	cmd = 0x00;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0x07, &cmd, 1);
 8000998:	f107 020f 	add.w	r2, r7, #15
 800099c:	2301      	movs	r3, #1
 800099e:	2107      	movs	r1, #7
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff fe31 	bl	8000608 <i2cRegWrite>
	HAL_Delay(CAM_TIMEOUT);
 80009a6:	2064      	movs	r0, #100	; 0x64
 80009a8:	f000 fe6e 	bl	8001688 <HAL_Delay>
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <burstReadFIFO>:


//I think i'll need to ignore the first dummy byte
void burstReadFIFO(ArducamController *pCtrl, uint8_t *pBuffer){
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	enable(pCtrl);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f000 f8bc 	bl	8000b3c <enable>
	uint8_t cmd = FIFO_BURST_READ;
 80009c4:	233c      	movs	r3, #60	; 0x3c
 80009c6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &cmd, pBuffer, 1, HAL_MAX_DELAY);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6858      	ldr	r0, [r3, #4]
 80009cc:	f107 010f 	add.w	r1, r7, #15
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2301      	movs	r3, #1
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	f003 fe6c 	bl	80046b6 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(pCtrl->pSPIHandle, pBuffer, getFIFOLength(pCtrl), HAL_MAX_DELAY);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685c      	ldr	r4, [r3, #4]
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 f87a 	bl	8000adc <getFIFOLength>
 80009e8:	4603      	mov	r3, r0
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	6839      	ldr	r1, [r7, #0]
 80009f2:	4620      	mov	r0, r4
 80009f4:	f003 fd28 	bl	8004448 <HAL_SPI_Receive>
	HAL_Delay(1000); // Just making sure all the data makes it through
 80009f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fc:	f000 fe44 	bl	8001688 <HAL_Delay>
	disable(pCtrl);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 f8ab 	bl	8000b5c <disable>
}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
	...

08000a10 <flushFIFO>:

void flushFIFO(ArducamController* pCtrl){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	printf("Flushing FIFO\n");
 8000a18:	4807      	ldr	r0, [pc, #28]	; (8000a38 <flushFIFO+0x28>)
 8000a1a:	f005 fad7 	bl	8005fcc <puts>
	clearFIFOFlag(pCtrl);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 f80e 	bl	8000a40 <clearFIFOFlag>
	printf("Reseting FIFO Pointers\n");
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <flushFIFO+0x2c>)
 8000a26:	f005 fad1 	bl	8005fcc <puts>
	resetFIFOPointers(pCtrl);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 f819 	bl	8000a62 <resetFIFOPointers>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	08006f4c 	.word	0x08006f4c
 8000a3c:	08006f5c 	.word	0x08006f5c

08000a40 <clearFIFOFlag>:

void clearFIFOFlag(ArducamController* pCtrl){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_FLAG_CLR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 8000a4c:	f107 020f 	add.w	r2, r7, #15
 8000a50:	2301      	movs	r3, #1
 8000a52:	2104      	movs	r1, #4
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fe5f 	bl	8000718 <spiRegWrite>
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <resetFIFOPointers>:

void resetFIFOPointers(ArducamController* pCtrl){
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_PTR_CLR;
 8000a6a:	2330      	movs	r3, #48	; 0x30
 8000a6c:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 8000a6e:	f107 020f 	add.w	r2, r7, #15
 8000a72:	2301      	movs	r3, #1
 8000a74:	2104      	movs	r1, #4
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fe4e 	bl	8000718 <spiRegWrite>
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <setCaptureFlag>:

void setCaptureFlag(ArducamController* pCtrl){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = SET_CAPTURE_FLAG;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 8000a90:	f107 020f 	add.w	r2, r7, #15
 8000a94:	2301      	movs	r3, #1
 8000a96:	2104      	movs	r1, #4
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fe3d 	bl	8000718 <spiRegWrite>
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <setNCaptureFrames>:

void setNCaptureFrames(ArducamController* pCtrl, int n){
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]
	uint8_t cmd = 0b00000001;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	73fb      	strb	r3, [r7, #15]
	if((0 < n) && (n <= 7)){ cmd = (uint8_t) n; }
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	dd05      	ble.n	8000ac6 <setNCaptureFrames+0x20>
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	2b07      	cmp	r3, #7
 8000abe:	dc02      	bgt.n	8000ac6 <setNCaptureFrames+0x20>
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	73fb      	strb	r3, [r7, #15]

	spiRegWrite(pCtrl, CAPTURE_CONTROL_REG, &cmd, 1);
 8000ac6:	f107 020f 	add.w	r2, r7, #15
 8000aca:	2301      	movs	r3, #1
 8000acc:	2101      	movs	r1, #1
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff fe22 	bl	8000718 <spiRegWrite>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <getFIFOLength>:

//How we find the number of bytes the FIFO is holding (for burst reading)
uint32_t getFIFOLength(ArducamController *pCtrl){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	uint32_t reg0, reg1, reg2 = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
	uint32_t fifoLength = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

	spiRegRead(pCtrl, FIFO_BYTE0, (uint8_t*) &reg0, 1);
 8000aec:	f107 0210 	add.w	r2, r7, #16
 8000af0:	2301      	movs	r3, #1
 8000af2:	2142      	movs	r1, #66	; 0x42
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fe49 	bl	800078c <spiRegRead>
	spiRegRead(pCtrl, FIFO_BYTE1, (uint8_t*) &reg1, 1);
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	2301      	movs	r3, #1
 8000b00:	2143      	movs	r1, #67	; 0x43
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fe42 	bl	800078c <spiRegRead>
	spiRegRead(pCtrl, FIFO_BYTE2, (uint8_t*) &reg2, 1);
 8000b08:	f107 0208 	add.w	r2, r7, #8
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	2144      	movs	r1, #68	; 0x44
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fe3b 	bl	800078c <spiRegRead>
	reg2 = reg2 & 0x7F;
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b1c:	60bb      	str	r3, [r7, #8]

	fifoLength = ((reg2 << 16) | (reg1 << 8) | reg0) & 0x007FFFFF;
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	041a      	lsls	r2, r3, #16
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	431a      	orrs	r2, r3
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000b30:	617b      	str	r3, [r7, #20]
	return fifoLength;
 8000b32:	697b      	ldr	r3, [r7, #20]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <enable>:

void enable(ArducamController* pCtrl){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->pinNo, GPIO_PIN_RESET);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68d8      	ldr	r0, [r3, #12]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	8a1b      	ldrh	r3, [r3, #16]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f001 f84e 	bl	8001bf0 <HAL_GPIO_WritePin>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <disable>:

void disable(ArducamController* pCtrl){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->pinNo, GPIO_PIN_SET);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68d8      	ldr	r0, [r3, #12]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	8a1b      	ldrh	r3, [r3, #16]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f001 f83e 	bl	8001bf0 <HAL_GPIO_WritePin>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <registerDump>:

//Prints all of the relevant registers in the Arducam
void registerDump(ArducamController* pCtrl){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	uint8_t data;
	printf("*******Register Table:*******\n");
 8000b84:	4860      	ldr	r0, [pc, #384]	; (8000d08 <registerDump+0x18c>)
 8000b86:	f005 fa21 	bl	8005fcc <puts>
	printf("(I2C Read)\n");
 8000b8a:	4860      	ldr	r0, [pc, #384]	; (8000d0c <registerDump+0x190>)
 8000b8c:	f005 fa1e 	bl	8005fcc <puts>
	i2cRegRead(pCtrl, TEST_REGISTER, &data, 1);
 8000b90:	f107 020f 	add.w	r2, r7, #15
 8000b94:	2301      	movs	r3, #1
 8000b96:	2100      	movs	r1, #0
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fd69 	bl	8000670 <i2cRegRead>
	printf("Test Register: 0x%02X\n", data);
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	485b      	ldr	r0, [pc, #364]	; (8000d10 <registerDump+0x194>)
 8000ba4:	f005 f9a4 	bl	8005ef0 <iprintf>
	i2cRegRead(pCtrl, CAPTURE_CONTROL_REG, &data, 1);
 8000ba8:	f107 020f 	add.w	r2, r7, #15
 8000bac:	2301      	movs	r3, #1
 8000bae:	2101      	movs	r1, #1
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fd5d 	bl	8000670 <i2cRegRead>
	printf("Capture Control Register: 0x%02X\n", data);
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4856      	ldr	r0, [pc, #344]	; (8000d14 <registerDump+0x198>)
 8000bbc:	f005 f998 	bl	8005ef0 <iprintf>
	i2cRegRead(pCtrl, FIFO_CONTROL_REG, &data, 1);
 8000bc0:	f107 020f 	add.w	r2, r7, #15
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff fd51 	bl	8000670 <i2cRegRead>
	printf("FIFO Control Register: 0x%02X\n", data);
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4851      	ldr	r0, [pc, #324]	; (8000d18 <registerDump+0x19c>)
 8000bd4:	f005 f98c 	bl	8005ef0 <iprintf>
	i2cRegRead(pCtrl, FIFO_SINGLE_READ_CMD, &data, 1);
 8000bd8:	f107 020f 	add.w	r2, r7, #15
 8000bdc:	2301      	movs	r3, #1
 8000bde:	213d      	movs	r1, #61	; 0x3d
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fd45 	bl	8000670 <i2cRegRead>
	printf("FIFO Single Read Register: 0x%02X\n", data);
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	4619      	mov	r1, r3
 8000bea:	484c      	ldr	r0, [pc, #304]	; (8000d1c <registerDump+0x1a0>)
 8000bec:	f005 f980 	bl	8005ef0 <iprintf>
	i2cRegRead(pCtrl, FIFO_STATUS_REG, &data, 1);
 8000bf0:	f107 020f 	add.w	r2, r7, #15
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	2141      	movs	r1, #65	; 0x41
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fd39 	bl	8000670 <i2cRegRead>
	printf("FIFO Status Register: 0x%02X\n", data);
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	4619      	mov	r1, r3
 8000c02:	4847      	ldr	r0, [pc, #284]	; (8000d20 <registerDump+0x1a4>)
 8000c04:	f005 f974 	bl	8005ef0 <iprintf>
	i2cRegRead(pCtrl, FIFO_BYTE0, &data, 1);
 8000c08:	f107 020f 	add.w	r2, r7, #15
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	2142      	movs	r1, #66	; 0x42
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff fd2d 	bl	8000670 <i2cRegRead>
	printf("FIFO Byte 0: 0x%02X\n", data);
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4842      	ldr	r0, [pc, #264]	; (8000d24 <registerDump+0x1a8>)
 8000c1c:	f005 f968 	bl	8005ef0 <iprintf>
	i2cRegRead(pCtrl, FIFO_BYTE1, &data, 1);
 8000c20:	f107 020f 	add.w	r2, r7, #15
 8000c24:	2301      	movs	r3, #1
 8000c26:	2143      	movs	r1, #67	; 0x43
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff fd21 	bl	8000670 <i2cRegRead>
	printf("FIFO Byte 1: 0x%02X\n", data);
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	4619      	mov	r1, r3
 8000c32:	483d      	ldr	r0, [pc, #244]	; (8000d28 <registerDump+0x1ac>)
 8000c34:	f005 f95c 	bl	8005ef0 <iprintf>
	i2cRegRead(pCtrl, FIFO_BYTE2, &data, 1);
 8000c38:	f107 020f 	add.w	r2, r7, #15
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	2144      	movs	r1, #68	; 0x44
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fd15 	bl	8000670 <i2cRegRead>
	printf("FIFO Byte 2: 0x%02X\n", data);
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4838      	ldr	r0, [pc, #224]	; (8000d2c <registerDump+0x1b0>)
 8000c4c:	f005 f950 	bl	8005ef0 <iprintf>

	printf("(SPI Read)\n");
 8000c50:	4837      	ldr	r0, [pc, #220]	; (8000d30 <registerDump+0x1b4>)
 8000c52:	f005 f9bb 	bl	8005fcc <puts>
	spiRegRead(pCtrl, TEST_REGISTER, &data, 1);
 8000c56:	f107 020f 	add.w	r2, r7, #15
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff fd94 	bl	800078c <spiRegRead>
	printf("Test Register: 0x%02X\n", data);
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	4619      	mov	r1, r3
 8000c68:	4829      	ldr	r0, [pc, #164]	; (8000d10 <registerDump+0x194>)
 8000c6a:	f005 f941 	bl	8005ef0 <iprintf>
	spiRegRead(pCtrl, CAPTURE_CONTROL_REG, &data, 1);
 8000c6e:	f107 020f 	add.w	r2, r7, #15
 8000c72:	2301      	movs	r3, #1
 8000c74:	2101      	movs	r1, #1
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff fd88 	bl	800078c <spiRegRead>
	printf("Capture Control Register: 0x%02X\n", data);
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4824      	ldr	r0, [pc, #144]	; (8000d14 <registerDump+0x198>)
 8000c82:	f005 f935 	bl	8005ef0 <iprintf>
	spiRegRead(pCtrl, FIFO_CONTROL_REG, &data, 1);
 8000c86:	f107 020f 	add.w	r2, r7, #15
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fd7c 	bl	800078c <spiRegRead>
	printf("FIFO Control Register: 0x%02X\n", data);
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	4619      	mov	r1, r3
 8000c98:	481f      	ldr	r0, [pc, #124]	; (8000d18 <registerDump+0x19c>)
 8000c9a:	f005 f929 	bl	8005ef0 <iprintf>
	//spiRegRead(pCtrl, FIFO_SINGLE_READ_REG, &data, 1);
	//printf("FIFO Single Read Register: %x\n", data);
	spiRegRead(pCtrl, FIFO_STATUS_REG, &data, 1);
 8000c9e:	f107 020f 	add.w	r2, r7, #15
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	2141      	movs	r1, #65	; 0x41
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff fd70 	bl	800078c <spiRegRead>
	printf("FIFO Status Register: 0x%02X\n", data);
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	481b      	ldr	r0, [pc, #108]	; (8000d20 <registerDump+0x1a4>)
 8000cb2:	f005 f91d 	bl	8005ef0 <iprintf>
	spiRegRead(pCtrl, FIFO_BYTE0, &data, 1);
 8000cb6:	f107 020f 	add.w	r2, r7, #15
 8000cba:	2301      	movs	r3, #1
 8000cbc:	2142      	movs	r1, #66	; 0x42
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fd64 	bl	800078c <spiRegRead>
	printf("FIFO Byte 0: 0x%02X\n", data);
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4816      	ldr	r0, [pc, #88]	; (8000d24 <registerDump+0x1a8>)
 8000cca:	f005 f911 	bl	8005ef0 <iprintf>
	spiRegRead(pCtrl, FIFO_BYTE1, &data, 1);
 8000cce:	f107 020f 	add.w	r2, r7, #15
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	2143      	movs	r1, #67	; 0x43
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fd58 	bl	800078c <spiRegRead>
	printf("FIFO Byte 1: 0x%02X\n", data);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <registerDump+0x1ac>)
 8000ce2:	f005 f905 	bl	8005ef0 <iprintf>
	spiRegRead(pCtrl, FIFO_BYTE2, &data, 1);
 8000ce6:	f107 020f 	add.w	r2, r7, #15
 8000cea:	2301      	movs	r3, #1
 8000cec:	2144      	movs	r1, #68	; 0x44
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fd4c 	bl	800078c <spiRegRead>
	printf("FIFO Byte 2: 0x%02X\n", data);
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <registerDump+0x1b0>)
 8000cfa:	f005 f8f9 	bl	8005ef0 <iprintf>

}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	08006f74 	.word	0x08006f74
 8000d0c:	08006f94 	.word	0x08006f94
 8000d10:	08006fa0 	.word	0x08006fa0
 8000d14:	08006fb8 	.word	0x08006fb8
 8000d18:	08006fdc 	.word	0x08006fdc
 8000d1c:	08006ffc 	.word	0x08006ffc
 8000d20:	08007020 	.word	0x08007020
 8000d24:	08007040 	.word	0x08007040
 8000d28:	08007058 	.word	0x08007058
 8000d2c:	08007070 	.word	0x08007070
 8000d30:	08007088 	.word	0x08007088

08000d34 <printStatus>:

void printStatus(ArducamController* pCtrl){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	printf("**********Status Report**********\n");
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <printStatus+0x30>)
 8000d3e:	f005 f945 	bl	8005fcc <puts>
	printf("Arducam Status: %x\n", pCtrl->status);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7a1b      	ldrb	r3, [r3, #8]
 8000d46:	4619      	mov	r1, r3
 8000d48:	4807      	ldr	r0, [pc, #28]	; (8000d68 <printStatus+0x34>)
 8000d4a:	f005 f8d1 	bl	8005ef0 <iprintf>
	registerDump(pCtrl);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff14 	bl	8000b7c <registerDump>
	printf("*******************************\n");
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <printStatus+0x38>)
 8000d56:	f005 f939 	bl	8005fcc <puts>

}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	08007094 	.word	0x08007094
 8000d68:	080070b8 	.word	0x080070b8
 8000d6c:	080070cc 	.word	0x080070cc

08000d70 <checkBit>:
#include "helpers.h"


//Returns the value of the bit at index in num
//Ex: checkBit(0x05, 2) == 2
int checkBit(unsigned char num, int index){
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
	return (int) ((num >> index) & 0x01);
 8000d7c:	79fa      	ldrb	r2, [r7, #7]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	fa42 f303 	asr.w	r3, r2, r3
 8000d84:	f003 0301 	and.w	r3, r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(pHuart, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <__io_putchar+0x24>)
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	1d39      	adds	r1, r7, #4
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	2201      	movs	r2, #1
 8000da8:	f004 f8b2 	bl	8004f10 <HAL_UART_Transmit>
  return ch;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000084 	.word	0x20000084

08000dbc <initHelpers>:

void initHelpers(UART_HandleTypeDef* pUHandle){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	pHuart = pUHandle;
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <initHelpers+0x1c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000084 	.word	0x20000084

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de2:	f000 fbd5 	bl	8001590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de6:	f000 f82d 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dea:	f000 f92b 	bl	8001044 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dee:	f000 f87b 	bl	8000ee8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000df2:	f000 f8b9 	bl	8000f68 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000df6:	f000 f8f5 	bl	8000fe4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Initialize Helper Functions
  initHelpers(&huart2);
 8000dfa:	480d      	ldr	r0, [pc, #52]	; (8000e30 <main+0x54>)
 8000dfc:	f7ff ffde 	bl	8000dbc <initHelpers>


  //Initialize the Arducam
  //ArducamController* pArducam = malloc(sizeof(ArducamController));
  ArducamController arducam;
  initArducam(&arducam, &hi2c1, &hspi1, CAM_CS_GPIO_Port, CAM_CS_Pin);
 8000e00:	f107 0008 	add.w	r0, r7, #8
 8000e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e0e:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <main+0x58>)
 8000e10:	4909      	ldr	r1, [pc, #36]	; (8000e38 <main+0x5c>)
 8000e12:	f7ff fbab 	bl	800056c <initArducam>

  uint8_t *pictureBuffer;
  FILE *pPicFile = fopen("capture", "w");
 8000e16:	4909      	ldr	r1, [pc, #36]	; (8000e3c <main+0x60>)
 8000e18:	4809      	ldr	r0, [pc, #36]	; (8000e40 <main+0x64>)
 8000e1a:	f004 ffe7 	bl	8005dec <fopen>
 8000e1e:	61f8      	str	r0, [r7, #28]
  singleCapture(&arducam, &pictureBuffer, pPicFile);
 8000e20:	1d39      	adds	r1, r7, #4
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fd0f 	bl	800084c <singleCapture>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <main+0x52>
 8000e30:	20000140 	.word	0x20000140
 8000e34:	200000dc 	.word	0x200000dc
 8000e38:	20000088 	.word	0x20000088
 8000e3c:	080070ec 	.word	0x080070ec
 8000e40:	080070f0 	.word	0x080070f0

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b096      	sub	sp, #88	; 0x58
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	2244      	movs	r2, #68	; 0x44
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f005 fa3a 	bl	80062cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e6a:	f001 fdc3 	bl	80029f4 <HAL_PWREx_ControlVoltageScaling>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e74:	f000 f94e 	bl	8001114 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e82:	2310      	movs	r3, #16
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e86:	2302      	movs	r3, #2
 8000e88:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 14;
 8000e92:	230e      	movs	r3, #14
 8000e94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e96:	2307      	movs	r3, #7
 8000e98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fdfa 	bl	8002aa0 <HAL_RCC_OscConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000eb2:	f000 f92f 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000ebe:	23a0      	movs	r3, #160	; 0xa0
 8000ec0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 f9c2 	bl	8003258 <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000eda:	f000 f91b 	bl	8001114 <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3758      	adds	r7, #88	; 0x58
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <MX_I2C1_Init+0x78>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101926;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000ef4:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <MX_I2C1_Init+0x7c>)
 8000ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f22:	480e      	ldr	r0, [pc, #56]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f24:	f000 fe7c 	bl	8001c20 <HAL_I2C_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f2e:	f000 f8f1 	bl	8001114 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f36:	f001 fcb7 	bl	80028a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f40:	f000 f8e8 	bl	8001114 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f44:	2100      	movs	r1, #0
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f48:	f001 fcf9 	bl	800293e <HAL_I2CEx_ConfigDigitalFilter>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f52:	f000 f8df 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000088 	.word	0x20000088
 8000f60:	40005400 	.word	0x40005400
 8000f64:	00101926 	.word	0x00101926

08000f68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <MX_SPI1_Init+0x78>)
 8000f70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fc8:	f003 f826 	bl	8004018 <HAL_SPI_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fd2:	f000 f89f 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200000dc 	.word	0x200000dc
 8000fe0:	40013000 	.word	0x40013000

08000fe4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_USART2_UART_Init+0x58>)
 8000fea:	4a15      	ldr	r2, [pc, #84]	; (8001040 <MX_USART2_UART_Init+0x5c>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_USART2_UART_Init+0x58>)
 8000ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART2_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_USART2_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART2_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART2_UART_Init+0x58>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART2_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART2_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART2_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART2_UART_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART2_UART_Init+0x58>)
 8001028:	f003 ff24 	bl	8004e74 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001032:	f000 f86f 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000140 	.word	0x20000140
 8001040:	40004400 	.word	0x40004400

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b2c      	ldr	r3, [pc, #176]	; (800110c <MX_GPIO_Init+0xc8>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a2b      	ldr	r2, [pc, #172]	; (800110c <MX_GPIO_Init+0xc8>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b29      	ldr	r3, [pc, #164]	; (800110c <MX_GPIO_Init+0xc8>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <MX_GPIO_Init+0xc8>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a25      	ldr	r2, [pc, #148]	; (800110c <MX_GPIO_Init+0xc8>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <MX_GPIO_Init+0xc8>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <MX_GPIO_Init+0xc8>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a1f      	ldr	r2, [pc, #124]	; (800110c <MX_GPIO_Init+0xc8>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_GPIO_Init+0xc8>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_GPIO_Init+0xc8>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a19      	ldr	r2, [pc, #100]	; (800110c <MX_GPIO_Init+0xc8>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_GPIO_Init+0xc8>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_CS_GPIO_Port, CAM_CS_Pin, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c4:	f000 fd94 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_GPIO_Init+0xcc>)
 80010e0:	f000 fbdc 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_CS_Pin */
  GPIO_InitStruct.Pin = CAM_CS_Pin;
 80010e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_CS_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001100:	f000 fbcc 	bl	800189c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40021000 	.word	0x40021000
 8001110:	48000800 	.word	0x48000800

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	e7fe      	b.n	800111c <Error_Handler+0x8>
	...

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_MspInit+0x44>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_MspInit+0x44>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6613      	str	r3, [r2, #96]	; 0x60
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_MspInit+0x44>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_MspInit+0x44>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x44>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0ac      	sub	sp, #176	; 0xb0
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2288      	movs	r2, #136	; 0x88
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f005 f89f 	bl	80062cc <memset>
  if(hi2c->Instance==I2C1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a21      	ldr	r2, [pc, #132]	; (8001218 <HAL_I2C_MspInit+0xb0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d13b      	bne.n	8001210 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001198:	2340      	movs	r3, #64	; 0x40
 800119a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800119c:	2300      	movs	r3, #0
 800119e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 fa7b 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011b0:	f7ff ffb0 	bl	8001114 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_I2C_MspInit+0xb4>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	4a18      	ldr	r2, [pc, #96]	; (800121c <HAL_I2C_MspInit+0xb4>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_I2C_MspInit+0xb4>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d4:	2312      	movs	r3, #18
 80011d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e6:	2304      	movs	r3, #4
 80011e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011f0:	4619      	mov	r1, r3
 80011f2:	480b      	ldr	r0, [pc, #44]	; (8001220 <HAL_I2C_MspInit+0xb8>)
 80011f4:	f000 fb52 	bl	800189c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_I2C_MspInit+0xb4>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_I2C_MspInit+0xb4>)
 80011fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001202:	6593      	str	r3, [r2, #88]	; 0x58
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_I2C_MspInit+0xb4>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001210:	bf00      	nop
 8001212:	37b0      	adds	r7, #176	; 0xb0
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40005400 	.word	0x40005400
 800121c:	40021000 	.word	0x40021000
 8001220:	48000400 	.word	0x48000400

08001224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_SPI_MspInit+0x7c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d128      	bne.n	8001298 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <HAL_SPI_MspInit+0x80>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <HAL_SPI_MspInit+0x80>)
 800124c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001250:	6613      	str	r3, [r2, #96]	; 0x60
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_SPI_MspInit+0x80>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_SPI_MspInit+0x80>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_SPI_MspInit+0x80>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_SPI_MspInit+0x80>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001276:	23e0      	movs	r3, #224	; 0xe0
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001286:	2305      	movs	r3, #5
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f000 fb02 	bl	800189c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40013000 	.word	0x40013000
 80012a4:	40021000 	.word	0x40021000

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0ac      	sub	sp, #176	; 0xb0
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2288      	movs	r2, #136	; 0x88
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 ffff 	bl	80062cc <memset>
  if(huart->Instance==USART2)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a21      	ldr	r2, [pc, #132]	; (8001358 <HAL_UART_MspInit+0xb0>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d13b      	bne.n	8001350 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012d8:	2302      	movs	r3, #2
 80012da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012dc:	2300      	movs	r3, #0
 80012de:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 f9db 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012f0:	f7ff ff10 	bl	8001114 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_UART_MspInit+0xb4>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	4a18      	ldr	r2, [pc, #96]	; (800135c <HAL_UART_MspInit+0xb4>)
 80012fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_UART_MspInit+0xb4>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <HAL_UART_MspInit+0xb4>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001310:	4a12      	ldr	r2, [pc, #72]	; (800135c <HAL_UART_MspInit+0xb4>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_UART_MspInit+0xb4>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001324:	230c      	movs	r3, #12
 8001326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800133c:	2307      	movs	r3, #7
 800133e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f000 faa6 	bl	800189c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001350:	bf00      	nop
 8001352:	37b0      	adds	r7, #176	; 0xb0
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40004400 	.word	0x40004400
 800135c:	40021000 	.word	0x40021000

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 f94c 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	e00a      	b.n	80013dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c6:	f3af 8000 	nop.w
 80013ca:	4601      	mov	r1, r0
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	60ba      	str	r2, [r7, #8]
 80013d2:	b2ca      	uxtb	r2, r1
 80013d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dbf0      	blt.n	80013c6 <_read+0x12>
  }

  return len;
 80013e4:	687b      	ldr	r3, [r7, #4]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	e009      	b.n	8001414 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	60ba      	str	r2, [r7, #8]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fcc3 	bl	8000d94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	dbf1      	blt.n	8001400 <_write+0x12>
  }
  return len;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_close>:

int _close(int file)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800144e:	605a      	str	r2, [r3, #4]
  return 0;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_isatty>:

int _isatty(int file)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_open>:

int _open(char *path, int flags, ...)
{
 800148e:	b40e      	push	{r1, r2, r3}
 8001490:	b480      	push	{r7}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	b003      	add	sp, #12
 80014a8:	4770      	bx	lr
	...

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f004 ff66 	bl	80063ac <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20018000 	.word	0x20018000
 800150c:	00000400 	.word	0x00000400
 8001510:	200001c8 	.word	0x200001c8
 8001514:	20000320 	.word	0x20000320

08001518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <SystemInit+0x20>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <SystemInit+0x20>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800153c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001574 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001540:	f7ff ffea 	bl	8001518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <LoopForever+0x6>)
  ldr r1, =_edata
 8001546:	490d      	ldr	r1, [pc, #52]	; (800157c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <LoopForever+0xe>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800155c:	4c0a      	ldr	r4, [pc, #40]	; (8001588 <LoopForever+0x16>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156a:	f004 ff25 	bl	80063b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800156e:	f7ff fc35 	bl	8000ddc <main>

08001572 <LoopForever>:

LoopForever:
    b LoopForever
 8001572:	e7fe      	b.n	8001572 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001574:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001580:	080074dc 	.word	0x080074dc
  ldr r2, =_sbss
 8001584:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001588:	2000031c 	.word	0x2000031c

0800158c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC1_2_IRQHandler>
	...

08001590 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_Init+0x3c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_Init+0x3c>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a6:	2003      	movs	r0, #3
 80015a8:	f000 f944 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ac:	2000      	movs	r0, #0
 80015ae:	f000 f80f 	bl	80015d0 <HAL_InitTick>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	71fb      	strb	r3, [r7, #7]
 80015bc:	e001      	b.n	80015c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015be:	f7ff fdaf 	bl	8001120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015c2:	79fb      	ldrb	r3, [r7, #7]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40022000 	.word	0x40022000

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_InitTick+0x6c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d023      	beq.n	800162c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_InitTick+0x70>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_InitTick+0x6c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f941 	bl	8001882 <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10f      	bne.n	8001626 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d809      	bhi.n	8001620 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f000 f919 	bl	800184a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_InitTick+0x74>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e007      	b.n	8001630 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e004      	b.n	8001630 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	e001      	b.n	8001630 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000008 	.word	0x20000008
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008
 800166c:	200001cc 	.word	0x200001cc

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200001cc 	.word	0x200001cc

08001688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff ffee 	bl	8001670 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d005      	beq.n	80016ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_Delay+0x44>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ae:	bf00      	nop
 80016b0:	f7ff ffde 	bl	8001670 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d8f7      	bhi.n	80016b0 <HAL_Delay+0x28>
  {
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	; (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f7ff ff8e 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff47 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff5c 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff8e 	bl	8001788 <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5d 	bl	8001734 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffb0 	bl	80017f0 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018aa:	e17f      	b.n	8001bac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2101      	movs	r1, #1
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8171 	beq.w	8001ba6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d005      	beq.n	80018dc <HAL_GPIO_Init+0x40>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d130      	bne.n	800193e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001912:	2201      	movs	r2, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	f003 0201 	and.w	r2, r3, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b03      	cmp	r3, #3
 8001948:	d118      	bne.n	800197c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001950:	2201      	movs	r2, #1
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	f003 0201 	and.w	r2, r3, #1
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b03      	cmp	r3, #3
 8001986:	d017      	beq.n	80019b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d123      	bne.n	8001a0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	6939      	ldr	r1, [r7, #16]
 8001a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80ac 	beq.w	8001ba6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	; (8001bcc <HAL_GPIO_Init+0x330>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a52:	4a5e      	ldr	r2, [pc, #376]	; (8001bcc <HAL_GPIO_Init+0x330>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5a:	4b5c      	ldr	r3, [pc, #368]	; (8001bcc <HAL_GPIO_Init+0x330>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a66:	4a5a      	ldr	r2, [pc, #360]	; (8001bd0 <HAL_GPIO_Init+0x334>)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a90:	d025      	beq.n	8001ade <HAL_GPIO_Init+0x242>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4f      	ldr	r2, [pc, #316]	; (8001bd4 <HAL_GPIO_Init+0x338>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01f      	beq.n	8001ada <HAL_GPIO_Init+0x23e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4e      	ldr	r2, [pc, #312]	; (8001bd8 <HAL_GPIO_Init+0x33c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x23a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4d      	ldr	r2, [pc, #308]	; (8001bdc <HAL_GPIO_Init+0x340>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x236>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4c      	ldr	r2, [pc, #304]	; (8001be0 <HAL_GPIO_Init+0x344>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x232>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4b      	ldr	r2, [pc, #300]	; (8001be4 <HAL_GPIO_Init+0x348>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x22e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4a      	ldr	r2, [pc, #296]	; (8001be8 <HAL_GPIO_Init+0x34c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x22a>
 8001ac2:	2306      	movs	r3, #6
 8001ac4:	e00c      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e00a      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001aca:	2305      	movs	r3, #5
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001af0:	4937      	ldr	r1, [pc, #220]	; (8001bd0 <HAL_GPIO_Init+0x334>)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001afe:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_GPIO_Init+0x350>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b22:	4a32      	ldr	r2, [pc, #200]	; (8001bec <HAL_GPIO_Init+0x350>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_GPIO_Init+0x350>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b4c:	4a27      	ldr	r2, [pc, #156]	; (8001bec <HAL_GPIO_Init+0x350>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_GPIO_Init+0x350>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b76:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_GPIO_Init+0x350>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_GPIO_Init+0x350>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ba0:	4a12      	ldr	r2, [pc, #72]	; (8001bec <HAL_GPIO_Init+0x350>)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f47f ae78 	bne.w	80018ac <HAL_GPIO_Init+0x10>
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	48000400 	.word	0x48000400
 8001bd8:	48000800 	.word	0x48000800
 8001bdc:	48000c00 	.word	0x48000c00
 8001be0:	48001000 	.word	0x48001000
 8001be4:	48001400 	.word	0x48001400
 8001be8:	48001800 	.word	0x48001800
 8001bec:	40010400 	.word	0x40010400

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e08d      	b.n	8001d4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fa8e 	bl	8001168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2224      	movs	r2, #36	; 0x24
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	e006      	b.n	8001ca8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ca6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d108      	bne.n	8001cc2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	e007      	b.n	8001cd2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69d9      	ldr	r1, [r3, #28]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1a      	ldr	r2, [r3, #32]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	461a      	mov	r2, r3
 8001d64:	460b      	mov	r3, r1
 8001d66:	817b      	strh	r3, [r7, #10]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	f040 80fd 	bne.w	8001f74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_I2C_Master_Transmit+0x30>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e0f6      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x21e>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d90:	f7ff fc6e 	bl	8001670 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2319      	movs	r3, #25
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 fb13 	bl	80023ce <I2C_WaitOnFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0e1      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2221      	movs	r2, #33	; 0x21
 8001db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	893a      	ldrh	r2, [r7, #8]
 8001dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2bff      	cmp	r3, #255	; 0xff
 8001de2:	d906      	bls.n	8001df2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	22ff      	movs	r2, #255	; 0xff
 8001de8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001dea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e007      	b.n	8001e02 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001dfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e00:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d024      	beq.n	8001e54 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	8979      	ldrh	r1, [r7, #10]
 8001e46:	4b4e      	ldr	r3, [pc, #312]	; (8001f80 <HAL_I2C_Master_Transmit+0x228>)
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 fcf9 	bl	8002844 <I2C_TransferConfig>
 8001e52:	e066      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	8979      	ldrh	r1, [r7, #10]
 8001e5c:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <HAL_I2C_Master_Transmit+0x228>)
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fcee 	bl	8002844 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e68:	e05b      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	6a39      	ldr	r1, [r7, #32]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 fafc 	bl	800246c <I2C_WaitOnTXISFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e07b      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d034      	beq.n	8001f22 <HAL_I2C_Master_Transmit+0x1ca>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d130      	bne.n	8001f22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 fa7f 	bl	80023ce <I2C_WaitOnFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e04d      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2bff      	cmp	r3, #255	; 0xff
 8001ee2:	d90e      	bls.n	8001f02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	22ff      	movs	r2, #255	; 0xff
 8001ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	8979      	ldrh	r1, [r7, #10]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fca2 	bl	8002844 <I2C_TransferConfig>
 8001f00:	e00f      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	8979      	ldrh	r1, [r7, #10]
 8001f14:	2300      	movs	r3, #0
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 fc91 	bl	8002844 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d19e      	bne.n	8001e6a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	6a39      	ldr	r1, [r7, #32]
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fae2 	bl	80024fa <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e01a      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2220      	movs	r2, #32
 8001f46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_I2C_Master_Transmit+0x22c>)
 8001f54:	400b      	ands	r3, r1
 8001f56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e000      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
  }
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	80002000 	.word	0x80002000
 8001f84:	fe00e800 	.word	0xfe00e800

08001f88 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	461a      	mov	r2, r3
 8001f94:	460b      	mov	r3, r1
 8001f96:	817b      	strh	r3, [r7, #10]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	f040 80db 	bne.w	8002160 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_I2C_Master_Receive+0x30>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e0d4      	b.n	8002162 <HAL_I2C_Master_Receive+0x1da>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fc0:	f7ff fb56 	bl	8001670 <HAL_GetTick>
 8001fc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2319      	movs	r3, #25
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f9fb 	bl	80023ce <I2C_WaitOnFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0bf      	b.n	8002162 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2222      	movs	r2, #34	; 0x22
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2210      	movs	r2, #16
 8001fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	893a      	ldrh	r2, [r7, #8]
 8002002:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	2bff      	cmp	r3, #255	; 0xff
 8002012:	d90e      	bls.n	8002032 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	22ff      	movs	r2, #255	; 0xff
 8002018:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	b2da      	uxtb	r2, r3
 8002020:	8979      	ldrh	r1, [r7, #10]
 8002022:	4b52      	ldr	r3, [pc, #328]	; (800216c <HAL_I2C_Master_Receive+0x1e4>)
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fc0a 	bl	8002844 <I2C_TransferConfig>
 8002030:	e06d      	b.n	800210e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	b2da      	uxtb	r2, r3
 8002042:	8979      	ldrh	r1, [r7, #10]
 8002044:	4b49      	ldr	r3, [pc, #292]	; (800216c <HAL_I2C_Master_Receive+0x1e4>)
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fbf9 	bl	8002844 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002052:	e05c      	b.n	800210e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	6a39      	ldr	r1, [r7, #32]
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 fa91 	bl	8002580 <I2C_WaitOnRXNEFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e07c      	b.n	8002162 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d034      	beq.n	800210e <HAL_I2C_Master_Receive+0x186>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d130      	bne.n	800210e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2200      	movs	r2, #0
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f989 	bl	80023ce <I2C_WaitOnFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e04d      	b.n	8002162 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2bff      	cmp	r3, #255	; 0xff
 80020ce:	d90e      	bls.n	80020ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	22ff      	movs	r2, #255	; 0xff
 80020d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	8979      	ldrh	r1, [r7, #10]
 80020de:	2300      	movs	r3, #0
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fbac 	bl	8002844 <I2C_TransferConfig>
 80020ec:	e00f      	b.n	800210e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	8979      	ldrh	r1, [r7, #10]
 8002100:	2300      	movs	r3, #0
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fb9b 	bl	8002844 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d19d      	bne.n	8002054 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	6a39      	ldr	r1, [r7, #32]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f9ec 	bl	80024fa <I2C_WaitOnSTOPFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e01a      	b.n	8002162 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2220      	movs	r2, #32
 8002132:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_I2C_Master_Receive+0x1e8>)
 8002140:	400b      	ands	r3, r1
 8002142:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	e000      	b.n	8002162 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002160:	2302      	movs	r3, #2
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	80002400 	.word	0x80002400
 8002170:	fe00e800 	.word	0xfe00e800

08002174 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af02      	add	r7, sp, #8
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	460b      	mov	r3, r1
 8002182:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b20      	cmp	r3, #32
 8002192:	f040 80f3 	bne.w	800237c <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a4:	d101      	bne.n	80021aa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
 80021a8:	e0e9      	b.n	800237e <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_I2C_IsDeviceReady+0x44>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e0e2      	b.n	800237e <HAL_I2C_IsDeviceReady+0x20a>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2224      	movs	r2, #36	; 0x24
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_I2C_IsDeviceReady+0x72>
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021e4:	e006      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x80>
 80021e6:	897b      	ldrh	r3, [r7, #10]
 80021e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021f0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80021fa:	f7ff fa39 	bl	8001670 <HAL_GetTick>
 80021fe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b20      	cmp	r3, #32
 800220c:	bf0c      	ite	eq
 800220e:	2301      	moveq	r3, #1
 8002210:	2300      	movne	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b10      	cmp	r3, #16
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800222c:	e034      	b.n	8002298 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d01a      	beq.n	800226c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002236:	f7ff fa1b 	bl	8001670 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <HAL_I2C_IsDeviceReady+0xd8>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10f      	bne.n	800226c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e088      	b.n	800237e <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b20      	cmp	r3, #32
 8002278:	bf0c      	ite	eq
 800227a:	2301      	moveq	r3, #1
 800227c:	2300      	movne	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b10      	cmp	r3, #16
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002298:	7ffb      	ldrb	r3, [r7, #31]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <HAL_I2C_IsDeviceReady+0x130>
 800229e:	7fbb      	ldrb	r3, [r7, #30]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0c4      	beq.n	800222e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d01a      	beq.n	80022e8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2200      	movs	r2, #0
 80022ba:	2120      	movs	r1, #32
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f886 	bl	80023ce <I2C_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e058      	b.n	800237e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2220      	movs	r2, #32
 80022d2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e04a      	b.n	800237e <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	2120      	movs	r1, #32
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f86b 	bl	80023ce <I2C_WaitOnFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e03d      	b.n	800237e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2210      	movs	r2, #16
 8002308:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2220      	movs	r2, #32
 8002310:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	d118      	bne.n	800234c <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002328:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	2120      	movs	r1, #32
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f84a 	bl	80023ce <I2C_WaitOnFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e01c      	b.n	800237e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2220      	movs	r2, #32
 800234a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3301      	adds	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	429a      	cmp	r2, r3
 8002358:	f63f af39 	bhi.w	80021ce <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b02      	cmp	r3, #2
 800239a:	d103      	bne.n	80023a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2200      	movs	r2, #0
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d007      	beq.n	80023c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	619a      	str	r2, [r3, #24]
  }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023de:	e031      	b.n	8002444 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e6:	d02d      	beq.n	8002444 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e8:	f7ff f942 	bl	8001670 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d302      	bcc.n	80023fe <I2C_WaitOnFlagUntilTimeout+0x30>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d122      	bne.n	8002444 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4013      	ands	r3, r2
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	429a      	cmp	r2, r3
 800240c:	bf0c      	ite	eq
 800240e:	2301      	moveq	r3, #1
 8002410:	2300      	movne	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	429a      	cmp	r2, r3
 800241a:	d113      	bne.n	8002444 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	f043 0220 	orr.w	r2, r3, #32
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e00f      	b.n	8002464 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4013      	ands	r3, r2
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	429a      	cmp	r2, r3
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	429a      	cmp	r2, r3
 8002460:	d0be      	beq.n	80023e0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002478:	e033      	b.n	80024e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f900 	bl	8002684 <I2C_IsErrorOccurred>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e031      	b.n	80024f2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d025      	beq.n	80024e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002496:	f7ff f8eb 	bl	8001670 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d302      	bcc.n	80024ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d11a      	bne.n	80024e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d013      	beq.n	80024e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f043 0220 	orr.w	r2, r3, #32
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e007      	b.n	80024f2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d1c4      	bne.n	800247a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002506:	e02f      	b.n	8002568 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f8b9 	bl	8002684 <I2C_IsErrorOccurred>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e02d      	b.n	8002578 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251c:	f7ff f8a8 	bl	8001670 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	429a      	cmp	r2, r3
 800252a:	d302      	bcc.n	8002532 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d11a      	bne.n	8002568 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b20      	cmp	r3, #32
 800253e:	d013      	beq.n	8002568 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f043 0220 	orr.w	r2, r3, #32
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e007      	b.n	8002578 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b20      	cmp	r3, #32
 8002574:	d1c8      	bne.n	8002508 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800258c:	e06b      	b.n	8002666 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f876 	bl	8002684 <I2C_IsErrorOccurred>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e069      	b.n	8002676 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d138      	bne.n	8002622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d105      	bne.n	80025ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e055      	b.n	8002676 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d107      	bne.n	80025e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2210      	movs	r2, #16
 80025de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2204      	movs	r2, #4
 80025e4:	645a      	str	r2, [r3, #68]	; 0x44
 80025e6:	e002      	b.n	80025ee <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2220      	movs	r2, #32
 80025f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002602:	400b      	ands	r3, r1
 8002604:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e029      	b.n	8002676 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002622:	f7ff f825 	bl	8001670 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d116      	bne.n	8002666 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b04      	cmp	r3, #4
 8002644:	d00f      	beq.n	8002666 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f043 0220 	orr.w	r2, r3, #32
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e007      	b.n	8002676 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b04      	cmp	r3, #4
 8002672:	d18c      	bne.n	800258e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	fe00e800 	.word	0xfe00e800

08002684 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d068      	beq.n	8002782 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2210      	movs	r2, #16
 80026b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026b8:	e049      	b.n	800274e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d045      	beq.n	800274e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026c2:	f7fe ffd5 	bl	8001670 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d302      	bcc.n	80026d8 <I2C_IsErrorOccurred+0x54>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d13a      	bne.n	800274e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026fa:	d121      	bne.n	8002740 <I2C_IsErrorOccurred+0xbc>
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002702:	d01d      	beq.n	8002740 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	2b20      	cmp	r3, #32
 8002708:	d01a      	beq.n	8002740 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002718:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800271a:	f7fe ffa9 	bl	8001670 <HAL_GetTick>
 800271e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002720:	e00e      	b.n	8002740 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002722:	f7fe ffa5 	bl	8001670 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b19      	cmp	r3, #25
 800272e:	d907      	bls.n	8002740 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	f043 0320 	orr.w	r3, r3, #32
 8002736:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800273e:	e006      	b.n	800274e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b20      	cmp	r3, #32
 800274c:	d1e9      	bne.n	8002722 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b20      	cmp	r3, #32
 800275a:	d003      	beq.n	8002764 <I2C_IsErrorOccurred+0xe0>
 800275c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0aa      	beq.n	80026ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002768:	2b00      	cmp	r3, #0
 800276a:	d103      	bne.n	8002774 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2220      	movs	r2, #32
 8002772:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	f043 0302 	orr.w	r3, r3, #2
 80027de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01c      	beq.n	8002832 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7ff fdc4 	bl	8002386 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <I2C_IsErrorOccurred+0x1bc>)
 800280a:	400b      	ands	r3, r1
 800280c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	431a      	orrs	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002836:	4618      	mov	r0, r3
 8002838:	3728      	adds	r7, #40	; 0x28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	fe00e800 	.word	0xfe00e800

08002844 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	817b      	strh	r3, [r7, #10]
 8002852:	4613      	mov	r3, r2
 8002854:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002856:	897b      	ldrh	r3, [r7, #10]
 8002858:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800285c:	7a7b      	ldrb	r3, [r7, #9]
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002864:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	4313      	orrs	r3, r2
 800286e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002872:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	0d5b      	lsrs	r3, r3, #21
 800287e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <I2C_TransferConfig+0x60>)
 8002884:	430b      	orrs	r3, r1
 8002886:	43db      	mvns	r3, r3
 8002888:	ea02 0103 	and.w	r1, r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	03ff63ff 	.word	0x03ff63ff

080028a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d138      	bne.n	8002930 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e032      	b.n	8002932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2224      	movs	r2, #36	; 0x24
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b20      	cmp	r3, #32
 8002952:	d139      	bne.n	80029c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800295e:	2302      	movs	r3, #2
 8002960:	e033      	b.n	80029ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2224      	movs	r2, #36	; 0x24
 800296e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002990:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40007000 	.word	0x40007000

080029f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a02:	d130      	bne.n	8002a66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a10:	d038      	beq.n	8002a84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a1a:	4a1e      	ldr	r2, [pc, #120]	; (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a22:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2232      	movs	r2, #50	; 0x32
 8002a28:	fb02 f303 	mul.w	r3, r2, r3
 8002a2c:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0c9b      	lsrs	r3, r3, #18
 8002a34:	3301      	adds	r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a38:	e002      	b.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a40:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4c:	d102      	bne.n	8002a54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f2      	bne.n	8002a3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a60:	d110      	bne.n	8002a84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e00f      	b.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a72:	d007      	beq.n	8002a84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a7c:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40007000 	.word	0x40007000
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	431bde83 	.word	0x431bde83

08002aa0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e3ca      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab2:	4b97      	ldr	r3, [pc, #604]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002abc:	4b94      	ldr	r3, [pc, #592]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80e4 	beq.w	8002c9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <HAL_RCC_OscConfig+0x4a>
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	f040 808b 	bne.w	8002bf8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	f040 8087 	bne.w	8002bf8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aea:	4b89      	ldr	r3, [pc, #548]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_RCC_OscConfig+0x62>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e3a2      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	4b82      	ldr	r3, [pc, #520]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <HAL_RCC_OscConfig+0x7c>
 8002b12:	4b7f      	ldr	r3, [pc, #508]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b1a:	e005      	b.n	8002b28 <HAL_RCC_OscConfig+0x88>
 8002b1c:	4b7c      	ldr	r3, [pc, #496]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d223      	bcs.n	8002b74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fd55 	bl	80035e0 <RCC_SetFlashLatencyFromMSIRange>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e383      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b40:	4b73      	ldr	r3, [pc, #460]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a72      	ldr	r2, [pc, #456]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b46:	f043 0308 	orr.w	r3, r3, #8
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b70      	ldr	r3, [pc, #448]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	496d      	ldr	r1, [pc, #436]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b5e:	4b6c      	ldr	r3, [pc, #432]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	4968      	ldr	r1, [pc, #416]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
 8002b72:	e025      	b.n	8002bc0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b74:	4b66      	ldr	r3, [pc, #408]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a65      	ldr	r2, [pc, #404]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	f043 0308 	orr.w	r3, r3, #8
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4960      	ldr	r1, [pc, #384]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b92:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	495b      	ldr	r1, [pc, #364]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fd15 	bl	80035e0 <RCC_SetFlashLatencyFromMSIRange>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e343      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bc0:	f000 fc4a 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b52      	ldr	r3, [pc, #328]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	4950      	ldr	r1, [pc, #320]	; (8002d14 <HAL_RCC_OscConfig+0x274>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bdc:	4a4e      	ldr	r2, [pc, #312]	; (8002d18 <HAL_RCC_OscConfig+0x278>)
 8002bde:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002be0:	4b4e      	ldr	r3, [pc, #312]	; (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fcf3 	bl	80015d0 <HAL_InitTick>
 8002bea:	4603      	mov	r3, r0
 8002bec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d052      	beq.n	8002c9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	e327      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d032      	beq.n	8002c66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c00:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a42      	ldr	r2, [pc, #264]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fd30 	bl	8001670 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c14:	f7fe fd2c 	bl	8001670 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e310      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c26:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c32:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a36      	ldr	r2, [pc, #216]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4931      	ldr	r1, [pc, #196]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c50:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	492c      	ldr	r1, [pc, #176]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
 8002c64:	e01a      	b.n	8002c9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c66:	4b2a      	ldr	r3, [pc, #168]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a29      	ldr	r2, [pc, #164]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c72:	f7fe fcfd 	bl	8001670 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c7a:	f7fe fcf9 	bl	8001670 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e2dd      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c8c:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f0      	bne.n	8002c7a <HAL_RCC_OscConfig+0x1da>
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d074      	beq.n	8002d92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d005      	beq.n	8002cba <HAL_RCC_OscConfig+0x21a>
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	d10e      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d10b      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d064      	beq.n	8002d90 <HAL_RCC_OscConfig+0x2f0>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d160      	bne.n	8002d90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e2ba      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x24a>
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	e026      	b.n	8002d38 <HAL_RCC_OscConfig+0x298>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf2:	d115      	bne.n	8002d20 <HAL_RCC_OscConfig+0x280>
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a02      	ldr	r2, [pc, #8]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	e014      	b.n	8002d38 <HAL_RCC_OscConfig+0x298>
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	08007450 	.word	0x08007450
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000004 	.word	0x20000004
 8002d20:	4ba0      	ldr	r3, [pc, #640]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a9f      	ldr	r2, [pc, #636]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b9d      	ldr	r3, [pc, #628]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a9c      	ldr	r2, [pc, #624]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d013      	beq.n	8002d68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe fc96 	bl	8001670 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d48:	f7fe fc92 	bl	8001670 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e276      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d5a:	4b92      	ldr	r3, [pc, #584]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x2a8>
 8002d66:	e014      	b.n	8002d92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe fc82 	bl	8001670 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d70:	f7fe fc7e 	bl	8001670 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e262      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d82:	4b88      	ldr	r3, [pc, #544]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x2d0>
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d060      	beq.n	8002e60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_OscConfig+0x310>
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d119      	bne.n	8002dde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d116      	bne.n	8002dde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002db0:	4b7c      	ldr	r3, [pc, #496]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x328>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e23f      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	4b76      	ldr	r3, [pc, #472]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	4973      	ldr	r1, [pc, #460]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ddc:	e040      	b.n	8002e60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d023      	beq.n	8002e2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de6:	4b6f      	ldr	r3, [pc, #444]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6e      	ldr	r2, [pc, #440]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe fc3d 	bl	8001670 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfa:	f7fe fc39 	bl	8001670 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e21d      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e0c:	4b65      	ldr	r3, [pc, #404]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e18:	4b62      	ldr	r3, [pc, #392]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	061b      	lsls	r3, r3, #24
 8002e26:	495f      	ldr	r1, [pc, #380]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
 8002e2c:	e018      	b.n	8002e60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a5c      	ldr	r2, [pc, #368]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fc19 	bl	8001670 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e42:	f7fe fc15 	bl	8001670 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1f9      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e54:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f0      	bne.n	8002e42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d03c      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01c      	beq.n	8002eae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e74:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7a:	4a4a      	ldr	r2, [pc, #296]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe fbf4 	bl	8001670 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fbf0 	bl	8001670 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1d4      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e9e:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ef      	beq.n	8002e8c <HAL_RCC_OscConfig+0x3ec>
 8002eac:	e01b      	b.n	8002ee6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eae:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb4:	4a3b      	ldr	r2, [pc, #236]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fbd7 	bl	8001670 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7fe fbd3 	bl	8001670 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e1b7      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed8:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ef      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80a6 	beq.w	8003040 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10d      	bne.n	8002f20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f04:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f10:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <HAL_RCC_OscConfig+0x508>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d118      	bne.n	8002f5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <HAL_RCC_OscConfig+0x508>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <HAL_RCC_OscConfig+0x508>)
 8002f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f38:	f7fe fb9a 	bl	8001670 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f40:	f7fe fb96 	bl	8001670 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e17a      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_RCC_OscConfig+0x508>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d108      	bne.n	8002f78 <HAL_RCC_OscConfig+0x4d8>
 8002f66:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f76:	e029      	b.n	8002fcc <HAL_RCC_OscConfig+0x52c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b05      	cmp	r3, #5
 8002f7e:	d115      	bne.n	8002fac <HAL_RCC_OscConfig+0x50c>
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	4a03      	ldr	r2, [pc, #12]	; (8002fa4 <HAL_RCC_OscConfig+0x504>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fa0:	e014      	b.n	8002fcc <HAL_RCC_OscConfig+0x52c>
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	4b9c      	ldr	r3, [pc, #624]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	4a9b      	ldr	r2, [pc, #620]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fbc:	4b98      	ldr	r3, [pc, #608]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	4a97      	ldr	r2, [pc, #604]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8002fc4:	f023 0304 	bic.w	r3, r3, #4
 8002fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d016      	beq.n	8003002 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fb4c 	bl	8001670 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fb48 	bl	8001670 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e12a      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff2:	4b8b      	ldr	r3, [pc, #556]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ed      	beq.n	8002fdc <HAL_RCC_OscConfig+0x53c>
 8003000:	e015      	b.n	800302e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003002:	f7fe fb35 	bl	8001670 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fe fb31 	bl	8001670 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e113      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003020:	4b7f      	ldr	r3, [pc, #508]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ed      	bne.n	800300a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302e:	7ffb      	ldrb	r3, [r7, #31]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d105      	bne.n	8003040 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003034:	4b7a      	ldr	r3, [pc, #488]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	4a79      	ldr	r2, [pc, #484]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 800303a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80fe 	beq.w	8003246 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	2b02      	cmp	r3, #2
 8003050:	f040 80d0 	bne.w	80031f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003054:	4b72      	ldr	r3, [pc, #456]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f003 0203 	and.w	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	429a      	cmp	r2, r3
 8003066:	d130      	bne.n	80030ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	3b01      	subs	r3, #1
 8003074:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d127      	bne.n	80030ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d11f      	bne.n	80030ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003094:	2a07      	cmp	r2, #7
 8003096:	bf14      	ite	ne
 8003098:	2201      	movne	r2, #1
 800309a:	2200      	moveq	r2, #0
 800309c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309e:	4293      	cmp	r3, r2
 80030a0:	d113      	bne.n	80030ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	3b01      	subs	r3, #1
 80030b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d109      	bne.n	80030ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	3b01      	subs	r3, #1
 80030c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d06e      	beq.n	80031a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	d069      	beq.n	80031a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030d0:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030dc:	4b50      	ldr	r3, [pc, #320]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0ad      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030ec:	4b4c      	ldr	r3, [pc, #304]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a4b      	ldr	r2, [pc, #300]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 80030f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f8:	f7fe faba 	bl	8001670 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe fab6 	bl	8001670 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e09a      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003112:	4b43      	ldr	r3, [pc, #268]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800311e:	4b40      	ldr	r3, [pc, #256]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	4b40      	ldr	r3, [pc, #256]	; (8003224 <HAL_RCC_OscConfig+0x784>)
 8003124:	4013      	ands	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800312e:	3a01      	subs	r2, #1
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	4311      	orrs	r1, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003138:	0212      	lsls	r2, r2, #8
 800313a:	4311      	orrs	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003140:	0852      	lsrs	r2, r2, #1
 8003142:	3a01      	subs	r2, #1
 8003144:	0552      	lsls	r2, r2, #21
 8003146:	4311      	orrs	r1, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800314c:	0852      	lsrs	r2, r2, #1
 800314e:	3a01      	subs	r2, #1
 8003150:	0652      	lsls	r2, r2, #25
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003158:	0912      	lsrs	r2, r2, #4
 800315a:	0452      	lsls	r2, r2, #17
 800315c:	430a      	orrs	r2, r1
 800315e:	4930      	ldr	r1, [pc, #192]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8003160:	4313      	orrs	r3, r2
 8003162:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003164:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a2d      	ldr	r2, [pc, #180]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 800316a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003170:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a2a      	ldr	r2, [pc, #168]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8003176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800317c:	f7fe fa78 	bl	8001670 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7fe fa74 	bl	8001670 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e058      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003196:	4b22      	ldr	r3, [pc, #136]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031a2:	e050      	b.n	8003246 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e04f      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d148      	bne.n	8003246 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031b4:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a19      	ldr	r2, [pc, #100]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 80031ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031c0:	4b17      	ldr	r3, [pc, #92]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4a16      	ldr	r2, [pc, #88]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 80031c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031cc:	f7fe fa50 	bl	8001670 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d4:	f7fe fa4c 	bl	8001670 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e030      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e6:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x734>
 80031f2:	e028      	b.n	8003246 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d023      	beq.n	8003242 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <HAL_RCC_OscConfig+0x780>)
 8003200:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7fe fa33 	bl	8001670 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800320c:	e00c      	b.n	8003228 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320e:	f7fe fa2f 	bl	8001670 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d905      	bls.n	8003228 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e013      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
 8003220:	40021000 	.word	0x40021000
 8003224:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_OscConfig+0x7b0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1ec      	bne.n	800320e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCC_OscConfig+0x7b0>)
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	4905      	ldr	r1, [pc, #20]	; (8003250 <HAL_RCC_OscConfig+0x7b0>)
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_RCC_OscConfig+0x7b4>)
 800323c:	4013      	ands	r3, r2
 800323e:	60cb      	str	r3, [r1, #12]
 8003240:	e001      	b.n	8003246 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	feeefffc 	.word	0xfeeefffc

08003258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0e7      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800326c:	4b75      	ldr	r3, [pc, #468]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d910      	bls.n	800329c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b72      	ldr	r3, [pc, #456]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 0207 	bic.w	r2, r3, #7
 8003282:	4970      	ldr	r1, [pc, #448]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b6e      	ldr	r3, [pc, #440]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0cf      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d010      	beq.n	80032ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	4b66      	ldr	r3, [pc, #408]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d908      	bls.n	80032ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b63      	ldr	r3, [pc, #396]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4960      	ldr	r1, [pc, #384]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d04c      	beq.n	8003370 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032de:	4b5a      	ldr	r3, [pc, #360]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d121      	bne.n	800332e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0a6      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f6:	4b54      	ldr	r3, [pc, #336]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d115      	bne.n	800332e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e09a      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800330e:	4b4e      	ldr	r3, [pc, #312]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e08e      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331e:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e086      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800332e:	4b46      	ldr	r3, [pc, #280]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 0203 	bic.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4943      	ldr	r1, [pc, #268]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003340:	f7fe f996 	bl	8001670 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	e00a      	b.n	800335e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f7fe f992 	bl	8001670 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	; 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e06e      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 020c 	and.w	r2, r3, #12
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	429a      	cmp	r2, r3
 800336e:	d1eb      	bne.n	8003348 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d010      	beq.n	800339e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	4b31      	ldr	r3, [pc, #196]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003388:	429a      	cmp	r2, r3
 800338a:	d208      	bcs.n	800339e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b2e      	ldr	r3, [pc, #184]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	492b      	ldr	r1, [pc, #172]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800339e:	4b29      	ldr	r3, [pc, #164]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d210      	bcs.n	80033ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 0207 	bic.w	r2, r3, #7
 80033b4:	4923      	ldr	r1, [pc, #140]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_RCC_ClockConfig+0x1ec>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d001      	beq.n	80033ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e036      	b.n	800343c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033da:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	4918      	ldr	r1, [pc, #96]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4910      	ldr	r1, [pc, #64]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003408:	4313      	orrs	r3, r2
 800340a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800340c:	f000 f824 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_RCC_ClockConfig+0x1f0>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	490b      	ldr	r1, [pc, #44]	; (800344c <HAL_RCC_ClockConfig+0x1f4>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
 8003428:	4a09      	ldr	r2, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1f8>)
 800342a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1fc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe f8cd 	bl	80015d0 <HAL_InitTick>
 8003436:	4603      	mov	r3, r0
 8003438:	72fb      	strb	r3, [r7, #11]

  return status;
 800343a:	7afb      	ldrb	r3, [r7, #11]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40022000 	.word	0x40022000
 8003448:	40021000 	.word	0x40021000
 800344c:	08007450 	.word	0x08007450
 8003450:	20000000 	.word	0x20000000
 8003454:	20000004 	.word	0x20000004

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	b089      	sub	sp, #36	; 0x24
 800345c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003466:	4b3e      	ldr	r3, [pc, #248]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003470:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x34>
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d121      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d11e      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800348c:	4b34      	ldr	r3, [pc, #208]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003498:	4b31      	ldr	r3, [pc, #196]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 800349a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	e005      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034a8:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034b4:	4a2b      	ldr	r2, [pc, #172]	; (8003564 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10d      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d102      	bne.n	80034d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034d0:	4b25      	ldr	r3, [pc, #148]	; (8003568 <HAL_RCC_GetSysClockFreq+0x110>)
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	e004      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034dc:	4b23      	ldr	r3, [pc, #140]	; (800356c <HAL_RCC_GetSysClockFreq+0x114>)
 80034de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	d134      	bne.n	8003550 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034e6:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d003      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0xa6>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d003      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0xac>
 80034fc:	e005      	b.n	800350a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <HAL_RCC_GetSysClockFreq+0x110>)
 8003500:	617b      	str	r3, [r7, #20]
      break;
 8003502:	e005      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_RCC_GetSysClockFreq+0x114>)
 8003506:	617b      	str	r3, [r7, #20]
      break;
 8003508:	e002      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	617b      	str	r3, [r7, #20]
      break;
 800350e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003510:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	3301      	adds	r3, #1
 800351c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	fb03 f202 	mul.w	r2, r3, r2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	0e5b      	lsrs	r3, r3, #25
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	3301      	adds	r3, #1
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003550:	69bb      	ldr	r3, [r7, #24]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
 8003564:	08007468 	.word	0x08007468
 8003568:	00f42400 	.word	0x00f42400
 800356c:	007a1200 	.word	0x007a1200

08003570 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_RCC_GetHCLKFreq+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000000 	.word	0x20000000

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800358c:	f7ff fff0 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4904      	ldr	r1, [pc, #16]	; (80035b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	08007460 	.word	0x08007460

080035b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035b8:	f7ff ffda 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0adb      	lsrs	r3, r3, #11
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4904      	ldr	r1, [pc, #16]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08007460 	.word	0x08007460

080035e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035ec:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035f8:	f7ff f9ee 	bl	80029d8 <HAL_PWREx_GetVoltageRange>
 80035fc:	6178      	str	r0, [r7, #20]
 80035fe:	e014      	b.n	800362a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003600:	4b25      	ldr	r3, [pc, #148]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	4a24      	ldr	r2, [pc, #144]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360a:	6593      	str	r3, [r2, #88]	; 0x58
 800360c:	4b22      	ldr	r3, [pc, #136]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003618:	f7ff f9de 	bl	80029d8 <HAL_PWREx_GetVoltageRange>
 800361c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800361e:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	4a1d      	ldr	r2, [pc, #116]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003630:	d10b      	bne.n	800364a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d919      	bls.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2ba0      	cmp	r3, #160	; 0xa0
 800363c:	d902      	bls.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800363e:	2302      	movs	r3, #2
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	e013      	b.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003644:	2301      	movs	r3, #1
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	e010      	b.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d902      	bls.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003650:	2303      	movs	r3, #3
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	e00a      	b.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d102      	bne.n	8003662 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800365c:	2302      	movs	r3, #2
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	e004      	b.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b70      	cmp	r3, #112	; 0x70
 8003666:	d101      	bne.n	800366c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003668:	2301      	movs	r3, #1
 800366a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 0207 	bic.w	r2, r3, #7
 8003674:	4909      	ldr	r1, [pc, #36]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800367c:	4b07      	ldr	r3, [pc, #28]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000
 800369c:	40022000 	.word	0x40022000

080036a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a8:	2300      	movs	r3, #0
 80036aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036ac:	2300      	movs	r3, #0
 80036ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d041      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036c4:	d02a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036ca:	d824      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d0:	d008      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d6:	d81e      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e0:	d010      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036e2:	e018      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036e4:	4b86      	ldr	r3, [pc, #536]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a85      	ldr	r2, [pc, #532]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036f0:	e015      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fabb 	bl	8003c74 <RCCEx_PLLSAI1_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003702:	e00c      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3320      	adds	r3, #32
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fba6 	bl	8003e5c <RCCEx_PLLSAI2_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003714:	e003      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	74fb      	strb	r3, [r7, #19]
      break;
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800371c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003724:	4b76      	ldr	r3, [pc, #472]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003732:	4973      	ldr	r1, [pc, #460]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800373a:	e001      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d041      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003750:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003754:	d02a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003756:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800375a:	d824      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800375c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003760:	d008      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003766:	d81e      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800376c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003770:	d010      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003772:	e018      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003774:	4b62      	ldr	r3, [pc, #392]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4a61      	ldr	r2, [pc, #388]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003780:	e015      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3304      	adds	r3, #4
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fa73 	bl	8003c74 <RCCEx_PLLSAI1_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003792:	e00c      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3320      	adds	r3, #32
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fb5e 	bl	8003e5c <RCCEx_PLLSAI2_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037a4:	e003      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	74fb      	strb	r3, [r7, #19]
      break;
 80037aa:	e000      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037b4:	4b52      	ldr	r3, [pc, #328]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037c2:	494f      	ldr	r1, [pc, #316]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037ca:	e001      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80a0 	beq.w	800391e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037de:	2300      	movs	r3, #0
 80037e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037e2:	4b47      	ldr	r3, [pc, #284]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037f2:	2300      	movs	r3, #0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00d      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	4b41      	ldr	r3, [pc, #260]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	4a40      	ldr	r2, [pc, #256]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	6593      	str	r3, [r2, #88]	; 0x58
 8003804:	4b3e      	ldr	r3, [pc, #248]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003810:	2301      	movs	r3, #1
 8003812:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003814:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a3a      	ldr	r2, [pc, #232]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800381a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003820:	f7fd ff26 	bl	8001670 <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003826:	e009      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003828:	f7fd ff22 	bl	8001670 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d902      	bls.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	74fb      	strb	r3, [r7, #19]
        break;
 800383a:	e005      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800383c:	4b31      	ldr	r3, [pc, #196]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ef      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d15c      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800384e:	4b2c      	ldr	r3, [pc, #176]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003858:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01f      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	429a      	cmp	r2, r3
 800386a:	d019      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800386c:	4b24      	ldr	r3, [pc, #144]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003876:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003878:	4b21      	ldr	r3, [pc, #132]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	4a20      	ldr	r2, [pc, #128]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003898:	4a19      	ldr	r2, [pc, #100]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fd fee1 	bl	8001670 <HAL_GetTick>
 80038ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b0:	e00b      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fd fedd 	bl	8001670 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d902      	bls.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	74fb      	strb	r3, [r7, #19]
            break;
 80038c8:	e006      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ec      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ee:	4904      	ldr	r1, [pc, #16]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038f6:	e009      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	74bb      	strb	r3, [r7, #18]
 80038fc:	e006      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038fe:	bf00      	nop
 8003900:	40021000 	.word	0x40021000
 8003904:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800390c:	7c7b      	ldrb	r3, [r7, #17]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d105      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003912:	4b9e      	ldr	r3, [pc, #632]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	4a9d      	ldr	r2, [pc, #628]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800392a:	4b98      	ldr	r3, [pc, #608]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	f023 0203 	bic.w	r2, r3, #3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	4994      	ldr	r1, [pc, #592]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800394c:	4b8f      	ldr	r3, [pc, #572]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f023 020c 	bic.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	498c      	ldr	r1, [pc, #560]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800396e:	4b87      	ldr	r3, [pc, #540]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003974:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	4983      	ldr	r1, [pc, #524]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003990:	4b7e      	ldr	r3, [pc, #504]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	497b      	ldr	r1, [pc, #492]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039b2:	4b76      	ldr	r3, [pc, #472]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c0:	4972      	ldr	r1, [pc, #456]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039d4:	4b6d      	ldr	r3, [pc, #436]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e2:	496a      	ldr	r1, [pc, #424]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f6:	4b65      	ldr	r3, [pc, #404]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	4961      	ldr	r1, [pc, #388]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a18:	4b5c      	ldr	r3, [pc, #368]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a26:	4959      	ldr	r1, [pc, #356]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a3a:	4b54      	ldr	r3, [pc, #336]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	4950      	ldr	r1, [pc, #320]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a5c:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	4948      	ldr	r1, [pc, #288]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a7e:	4b43      	ldr	r3, [pc, #268]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	493f      	ldr	r1, [pc, #252]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d028      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aa0:	4b3a      	ldr	r3, [pc, #232]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aae:	4937      	ldr	r1, [pc, #220]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003abe:	d106      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac0:	4b32      	ldr	r3, [pc, #200]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a31      	ldr	r2, [pc, #196]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aca:	60d3      	str	r3, [r2, #12]
 8003acc:	e011      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ad6:	d10c      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	2101      	movs	r1, #1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f8c8 	bl	8003c74 <RCCEx_PLLSAI1_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d028      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003afe:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	491f      	ldr	r1, [pc, #124]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b1c:	d106      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	4a1a      	ldr	r2, [pc, #104]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b28:	60d3      	str	r3, [r2, #12]
 8003b2a:	e011      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f899 	bl	8003c74 <RCCEx_PLLSAI1_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d02b      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6a:	4908      	ldr	r1, [pc, #32]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b7a:	d109      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b7c:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4a02      	ldr	r2, [pc, #8]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b86:	60d3      	str	r3, [r2, #12]
 8003b88:	e014      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 f867 	bl	8003c74 <RCCEx_PLLSAI1_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003baa:	7cfb      	ldrb	r3, [r7, #19]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d02f      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bce:	4928      	ldr	r1, [pc, #160]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bde:	d10d      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	2102      	movs	r1, #2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f844 	bl	8003c74 <RCCEx_PLLSAI1_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bf0:	7cfb      	ldrb	r3, [r7, #19]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d014      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bf6:	7cfb      	ldrb	r3, [r7, #19]
 8003bf8:	74bb      	strb	r3, [r7, #18]
 8003bfa:	e011      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3320      	adds	r3, #32
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f925 	bl	8003e5c <RCCEx_PLLSAI2_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c3a:	490d      	ldr	r1, [pc, #52]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c5e:	4904      	ldr	r1, [pc, #16]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c66:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000

08003c74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c82:	4b75      	ldr	r3, [pc, #468]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d018      	beq.n	8003cc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c8e:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0203 	and.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d10d      	bne.n	8003cba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ca6:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	091b      	lsrs	r3, r3, #4
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d047      	beq.n	8003d4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
 8003cbe:	e044      	b.n	8003d4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d018      	beq.n	8003cfa <RCCEx_PLLSAI1_Config+0x86>
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d825      	bhi.n	8003d18 <RCCEx_PLLSAI1_Config+0xa4>
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d002      	beq.n	8003cd6 <RCCEx_PLLSAI1_Config+0x62>
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d009      	beq.n	8003ce8 <RCCEx_PLLSAI1_Config+0x74>
 8003cd4:	e020      	b.n	8003d18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cd6:	4b60      	ldr	r3, [pc, #384]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d11d      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce6:	e01a      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce8:	4b5b      	ldr	r3, [pc, #364]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d116      	bne.n	8003d22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf8:	e013      	b.n	8003d22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cfa:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10f      	bne.n	8003d26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d06:	4b54      	ldr	r3, [pc, #336]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d16:	e006      	b.n	8003d26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d1c:	e004      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e002      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d22:	bf00      	nop
 8003d24:	e000      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10d      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d2e:	4b4a      	ldr	r3, [pc, #296]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	430b      	orrs	r3, r1
 8003d44:	4944      	ldr	r1, [pc, #272]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d17d      	bne.n	8003e4c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d50:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a40      	ldr	r2, [pc, #256]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5c:	f7fd fc88 	bl	8001670 <HAL_GetTick>
 8003d60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d62:	e009      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d64:	f7fd fc84 	bl	8001670 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d902      	bls.n	8003d78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	73fb      	strb	r3, [r7, #15]
        break;
 8003d76:	e005      	b.n	8003d84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d78:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ef      	bne.n	8003d64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d160      	bne.n	8003e4c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d111      	bne.n	8003db4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d90:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6892      	ldr	r2, [r2, #8]
 8003da0:	0211      	lsls	r1, r2, #8
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68d2      	ldr	r2, [r2, #12]
 8003da6:	0912      	lsrs	r2, r2, #4
 8003da8:	0452      	lsls	r2, r2, #17
 8003daa:	430a      	orrs	r2, r1
 8003dac:	492a      	ldr	r1, [pc, #168]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	610b      	str	r3, [r1, #16]
 8003db2:	e027      	b.n	8003e04 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d112      	bne.n	8003de0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dba:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6892      	ldr	r2, [r2, #8]
 8003dca:	0211      	lsls	r1, r2, #8
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6912      	ldr	r2, [r2, #16]
 8003dd0:	0852      	lsrs	r2, r2, #1
 8003dd2:	3a01      	subs	r2, #1
 8003dd4:	0552      	lsls	r2, r2, #21
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	491f      	ldr	r1, [pc, #124]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	610b      	str	r3, [r1, #16]
 8003dde:	e011      	b.n	8003e04 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003de0:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003de8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6892      	ldr	r2, [r2, #8]
 8003df0:	0211      	lsls	r1, r2, #8
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6952      	ldr	r2, [r2, #20]
 8003df6:	0852      	lsrs	r2, r2, #1
 8003df8:	3a01      	subs	r2, #1
 8003dfa:	0652      	lsls	r2, r2, #25
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	4916      	ldr	r1, [pc, #88]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e04:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7fd fc2e 	bl	8001670 <HAL_GetTick>
 8003e14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e16:	e009      	b.n	8003e2c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e18:	f7fd fc2a 	bl	8001670 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d902      	bls.n	8003e2c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	73fb      	strb	r3, [r7, #15]
          break;
 8003e2a:	e005      	b.n	8003e38 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ef      	beq.n	8003e18 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	4904      	ldr	r1, [pc, #16]	; (8003e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000

08003e5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e6a:	4b6a      	ldr	r3, [pc, #424]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d018      	beq.n	8003ea8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e76:	4b67      	ldr	r3, [pc, #412]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0203 	and.w	r2, r3, #3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d10d      	bne.n	8003ea2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
       ||
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e8e:	4b61      	ldr	r3, [pc, #388]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	091b      	lsrs	r3, r3, #4
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d047      	beq.n	8003f32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
 8003ea6:	e044      	b.n	8003f32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d018      	beq.n	8003ee2 <RCCEx_PLLSAI2_Config+0x86>
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d825      	bhi.n	8003f00 <RCCEx_PLLSAI2_Config+0xa4>
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d002      	beq.n	8003ebe <RCCEx_PLLSAI2_Config+0x62>
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d009      	beq.n	8003ed0 <RCCEx_PLLSAI2_Config+0x74>
 8003ebc:	e020      	b.n	8003f00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ebe:	4b55      	ldr	r3, [pc, #340]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d11d      	bne.n	8003f06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ece:	e01a      	b.n	8003f06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ed0:	4b50      	ldr	r3, [pc, #320]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d116      	bne.n	8003f0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee0:	e013      	b.n	8003f0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ee2:	4b4c      	ldr	r3, [pc, #304]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10f      	bne.n	8003f0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eee:	4b49      	ldr	r3, [pc, #292]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003efe:	e006      	b.n	8003f0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
      break;
 8003f04:	e004      	b.n	8003f10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f06:	bf00      	nop
 8003f08:	e002      	b.n	8003f10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f0a:	bf00      	nop
 8003f0c:	e000      	b.n	8003f10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10d      	bne.n	8003f32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f16:	4b3f      	ldr	r3, [pc, #252]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6819      	ldr	r1, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	4939      	ldr	r1, [pc, #228]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d167      	bne.n	8004008 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f38:	4b36      	ldr	r3, [pc, #216]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a35      	ldr	r2, [pc, #212]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f44:	f7fd fb94 	bl	8001670 <HAL_GetTick>
 8003f48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f4a:	e009      	b.n	8003f60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f4c:	f7fd fb90 	bl	8001670 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d902      	bls.n	8003f60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f5e:	e005      	b.n	8003f6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f60:	4b2c      	ldr	r3, [pc, #176]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ef      	bne.n	8003f4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d14a      	bne.n	8004008 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d111      	bne.n	8003f9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f78:	4b26      	ldr	r3, [pc, #152]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6892      	ldr	r2, [r2, #8]
 8003f88:	0211      	lsls	r1, r2, #8
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68d2      	ldr	r2, [r2, #12]
 8003f8e:	0912      	lsrs	r2, r2, #4
 8003f90:	0452      	lsls	r2, r2, #17
 8003f92:	430a      	orrs	r2, r1
 8003f94:	491f      	ldr	r1, [pc, #124]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	614b      	str	r3, [r1, #20]
 8003f9a:	e011      	b.n	8003fc0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6892      	ldr	r2, [r2, #8]
 8003fac:	0211      	lsls	r1, r2, #8
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6912      	ldr	r2, [r2, #16]
 8003fb2:	0852      	lsrs	r2, r2, #1
 8003fb4:	3a01      	subs	r2, #1
 8003fb6:	0652      	lsls	r2, r2, #25
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	4916      	ldr	r1, [pc, #88]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fc0:	4b14      	ldr	r3, [pc, #80]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a13      	ldr	r2, [pc, #76]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fcc:	f7fd fb50 	bl	8001670 <HAL_GetTick>
 8003fd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fd2:	e009      	b.n	8003fe8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fd4:	f7fd fb4c 	bl	8001670 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d902      	bls.n	8003fe8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	73fb      	strb	r3, [r7, #15]
          break;
 8003fe6:	e005      	b.n	8003ff4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0ef      	beq.n	8003fd4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	4904      	ldr	r1, [pc, #16]	; (8004014 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004004:	4313      	orrs	r3, r2
 8004006:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000

08004018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e095      	b.n	8004156 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d108      	bne.n	8004044 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403a:	d009      	beq.n	8004050 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	61da      	str	r2, [r3, #28]
 8004042:	e005      	b.n	8004050 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd f8da 	bl	8001224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004086:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004090:	d902      	bls.n	8004098 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e002      	b.n	800409e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800409c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040a6:	d007      	beq.n	80040b8 <HAL_SPI_Init+0xa0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	ea42 0103 	orr.w	r1, r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	0c1b      	lsrs	r3, r3, #16
 8004114:	f003 0204 	and.w	r2, r3, #4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004134:	ea42 0103 	orr.w	r1, r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b088      	sub	sp, #32
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_SPI_Transmit+0x22>
 800417c:	2302      	movs	r3, #2
 800417e:	e15f      	b.n	8004440 <HAL_SPI_Transmit+0x2e2>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004188:	f7fd fa72 	bl	8001670 <HAL_GetTick>
 800418c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d002      	beq.n	80041a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800419e:	2302      	movs	r3, #2
 80041a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041a2:	e148      	b.n	8004436 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_SPI_Transmit+0x52>
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041b4:	e13f      	b.n	8004436 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2203      	movs	r2, #3
 80041ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	88fa      	ldrh	r2, [r7, #6]
 80041ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	88fa      	ldrh	r2, [r7, #6]
 80041d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004200:	d10f      	bne.n	8004222 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004210:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004220:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d007      	beq.n	8004240 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800423e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004248:	d94f      	bls.n	80042ea <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <HAL_SPI_Transmit+0xfa>
 8004252:	8afb      	ldrh	r3, [r7, #22]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d142      	bne.n	80042de <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	881a      	ldrh	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	1c9a      	adds	r2, r3, #2
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800427c:	e02f      	b.n	80042de <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b02      	cmp	r3, #2
 800428a:	d112      	bne.n	80042b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	881a      	ldrh	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	1c9a      	adds	r2, r3, #2
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042b0:	e015      	b.n	80042de <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042b2:	f7fd f9dd 	bl	8001670 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d803      	bhi.n	80042ca <HAL_SPI_Transmit+0x16c>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c8:	d102      	bne.n	80042d0 <HAL_SPI_Transmit+0x172>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d106      	bne.n	80042de <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80042dc:	e0ab      	b.n	8004436 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ca      	bne.n	800427e <HAL_SPI_Transmit+0x120>
 80042e8:	e080      	b.n	80043ec <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_SPI_Transmit+0x19a>
 80042f2:	8afb      	ldrh	r3, [r7, #22]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d174      	bne.n	80043e2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d912      	bls.n	8004328 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	881a      	ldrh	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	1c9a      	adds	r2, r3, #2
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b02      	subs	r3, #2
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004326:	e05c      	b.n	80043e2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	7812      	ldrb	r2, [r2, #0]
 8004334:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800434e:	e048      	b.n	80043e2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b02      	cmp	r3, #2
 800435c:	d12b      	bne.n	80043b6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d912      	bls.n	800438e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	881a      	ldrh	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	1c9a      	adds	r2, r3, #2
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b02      	subs	r3, #2
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800438c:	e029      	b.n	80043e2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	330c      	adds	r3, #12
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043b4:	e015      	b.n	80043e2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043b6:	f7fd f95b 	bl	8001670 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d803      	bhi.n	80043ce <HAL_SPI_Transmit+0x270>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d102      	bne.n	80043d4 <HAL_SPI_Transmit+0x276>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80043e0:	e029      	b.n	8004436 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1b1      	bne.n	8004350 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fcf9 	bl	8004de8 <SPI_EndRxTxTransaction>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e003      	b.n	8004436 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800443e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3720      	adds	r7, #32
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	d002      	beq.n	800446e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004468:	2302      	movs	r3, #2
 800446a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800446c:	e11a      	b.n	80046a4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004476:	d112      	bne.n	800449e <HAL_SPI_Receive+0x56>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10e      	bne.n	800449e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2204      	movs	r2, #4
 8004484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f90e 	bl	80046b6 <HAL_SPI_TransmitReceive>
 800449a:	4603      	mov	r3, r0
 800449c:	e107      	b.n	80046ae <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_SPI_Receive+0x64>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e100      	b.n	80046ae <HAL_SPI_Receive+0x266>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b4:	f7fd f8dc 	bl	8001670 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_SPI_Receive+0x7e>
 80044c0:	88fb      	ldrh	r3, [r7, #6]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044ca:	e0eb      	b.n	80046a4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2204      	movs	r2, #4
 80044d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	88fa      	ldrh	r2, [r7, #6]
 80044e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	88fa      	ldrh	r2, [r7, #6]
 80044ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004516:	d908      	bls.n	800452a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	e007      	b.n	800453a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004538:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004542:	d10f      	bne.n	8004564 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004552:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004562:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d007      	beq.n	8004582 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004580:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800458a:	d86f      	bhi.n	800466c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800458c:	e034      	b.n	80045f8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b01      	cmp	r3, #1
 800459a:	d117      	bne.n	80045cc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f103 020c 	add.w	r2, r3, #12
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80045ca:	e015      	b.n	80045f8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045cc:	f7fd f850 	bl	8001670 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d803      	bhi.n	80045e4 <HAL_SPI_Receive+0x19c>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d102      	bne.n	80045ea <HAL_SPI_Receive+0x1a2>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80045f6:	e055      	b.n	80046a4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1c4      	bne.n	800458e <HAL_SPI_Receive+0x146>
 8004604:	e038      	b.n	8004678 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d115      	bne.n	8004640 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	b292      	uxth	r2, r2
 8004620:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	1c9a      	adds	r2, r3, #2
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800463e:	e015      	b.n	800466c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004640:	f7fd f816 	bl	8001670 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d803      	bhi.n	8004658 <HAL_SPI_Receive+0x210>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d102      	bne.n	800465e <HAL_SPI_Receive+0x216>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800466a:	e01b      	b.n	80046a4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1c6      	bne.n	8004606 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	6839      	ldr	r1, [r7, #0]
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fb5b 	bl	8004d38 <SPI_EndRxTransaction>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	75fb      	strb	r3, [r7, #23]
 800469a:	e003      	b.n	80046a4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08a      	sub	sp, #40	; 0x28
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046c4:	2301      	movs	r3, #1
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_SPI_TransmitReceive+0x26>
 80046d8:	2302      	movs	r3, #2
 80046da:	e20a      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x43c>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046e4:	f7fc ffc4 	bl	8001670 <HAL_GetTick>
 80046e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80046f8:	887b      	ldrh	r3, [r7, #2]
 80046fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80046fc:	887b      	ldrh	r3, [r7, #2]
 80046fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004700:	7efb      	ldrb	r3, [r7, #27]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d00e      	beq.n	8004724 <HAL_SPI_TransmitReceive+0x6e>
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470c:	d106      	bne.n	800471c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <HAL_SPI_TransmitReceive+0x66>
 8004716:	7efb      	ldrb	r3, [r7, #27]
 8004718:	2b04      	cmp	r3, #4
 800471a:	d003      	beq.n	8004724 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800471c:	2302      	movs	r3, #2
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004722:	e1e0      	b.n	8004ae6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_SPI_TransmitReceive+0x80>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_SPI_TransmitReceive+0x80>
 8004730:	887b      	ldrh	r3, [r7, #2]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d103      	bne.n	800473e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800473c:	e1d3      	b.n	8004ae6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b04      	cmp	r3, #4
 8004748:	d003      	beq.n	8004752 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2205      	movs	r2, #5
 800474e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	887a      	ldrh	r2, [r7, #2]
 8004762:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	887a      	ldrh	r2, [r7, #2]
 800476a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	887a      	ldrh	r2, [r7, #2]
 8004778:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	887a      	ldrh	r2, [r7, #2]
 800477e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004794:	d802      	bhi.n	800479c <HAL_SPI_TransmitReceive+0xe6>
 8004796:	8a3b      	ldrh	r3, [r7, #16]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d908      	bls.n	80047ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047aa:	605a      	str	r2, [r3, #4]
 80047ac:	e007      	b.n	80047be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d007      	beq.n	80047dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047e4:	f240 8081 	bls.w	80048ea <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_SPI_TransmitReceive+0x140>
 80047f0:	8a7b      	ldrh	r3, [r7, #18]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d16d      	bne.n	80048d2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	881a      	ldrh	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	1c9a      	adds	r2, r3, #2
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800481a:	e05a      	b.n	80048d2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d11b      	bne.n	8004862 <HAL_SPI_TransmitReceive+0x1ac>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d016      	beq.n	8004862 <HAL_SPI_TransmitReceive+0x1ac>
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	2b01      	cmp	r3, #1
 8004838:	d113      	bne.n	8004862 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	881a      	ldrh	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	1c9a      	adds	r2, r3, #2
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d11c      	bne.n	80048aa <HAL_SPI_TransmitReceive+0x1f4>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d016      	beq.n	80048aa <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	b292      	uxth	r2, r2
 8004888:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	1c9a      	adds	r2, r3, #2
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048a6:	2301      	movs	r3, #1
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048aa:	f7fc fee1 	bl	8001670 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d80b      	bhi.n	80048d2 <HAL_SPI_TransmitReceive+0x21c>
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d007      	beq.n	80048d2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80048d0:	e109      	b.n	8004ae6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d19f      	bne.n	800481c <HAL_SPI_TransmitReceive+0x166>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d199      	bne.n	800481c <HAL_SPI_TransmitReceive+0x166>
 80048e8:	e0e3      	b.n	8004ab2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_SPI_TransmitReceive+0x244>
 80048f2:	8a7b      	ldrh	r3, [r7, #18]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	f040 80cf 	bne.w	8004a98 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d912      	bls.n	800492a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	881a      	ldrh	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	1c9a      	adds	r2, r3, #2
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b02      	subs	r3, #2
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004928:	e0b6      	b.n	8004a98 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	7812      	ldrb	r2, [r2, #0]
 8004936:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004950:	e0a2      	b.n	8004a98 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b02      	cmp	r3, #2
 800495e:	d134      	bne.n	80049ca <HAL_SPI_TransmitReceive+0x314>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d02f      	beq.n	80049ca <HAL_SPI_TransmitReceive+0x314>
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	2b01      	cmp	r3, #1
 800496e:	d12c      	bne.n	80049ca <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	d912      	bls.n	80049a0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	881a      	ldrh	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	1c9a      	adds	r2, r3, #2
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b02      	subs	r3, #2
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800499e:	e012      	b.n	80049c6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	7812      	ldrb	r2, [r2, #0]
 80049ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d148      	bne.n	8004a6a <HAL_SPI_TransmitReceive+0x3b4>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d042      	beq.n	8004a6a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d923      	bls.n	8004a38 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	b292      	uxth	r2, r2
 80049fc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	1c9a      	adds	r2, r3, #2
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b02      	subs	r3, #2
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d81f      	bhi.n	8004a66 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	e016      	b.n	8004a66 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f103 020c 	add.w	r2, r3, #12
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	7812      	ldrb	r2, [r2, #0]
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a66:	2301      	movs	r3, #1
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a6a:	f7fc fe01 	bl	8001670 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d803      	bhi.n	8004a82 <HAL_SPI_TransmitReceive+0x3cc>
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d102      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x3d2>
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d107      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004a96:	e026      	b.n	8004ae6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f47f af57 	bne.w	8004952 <HAL_SPI_TransmitReceive+0x29c>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f47f af50 	bne.w	8004952 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f996 	bl	8004de8 <SPI_EndRxTxTransaction>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004adc:	e003      	b.n	8004ae6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3728      	adds	r7, #40	; 0x28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b0c:	f7fc fdb0 	bl	8001670 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	4413      	add	r3, r2
 8004b1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b1c:	f7fc fda8 	bl	8001670 <HAL_GetTick>
 8004b20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b22:	4b39      	ldr	r3, [pc, #228]	; (8004c08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	015b      	lsls	r3, r3, #5
 8004b28:	0d1b      	lsrs	r3, r3, #20
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	fb02 f303 	mul.w	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b32:	e054      	b.n	8004bde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	d050      	beq.n	8004bde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b3c:	f7fc fd98 	bl	8001670 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d902      	bls.n	8004b52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d13d      	bne.n	8004bce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6a:	d111      	bne.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b74:	d004      	beq.n	8004b80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7e:	d107      	bne.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b98:	d10f      	bne.n	8004bba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e017      	b.n	8004bfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4013      	ands	r3, r2
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	bf0c      	ite	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	2300      	movne	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d19b      	bne.n	8004b34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000000 	.word	0x20000000

08004c0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c1e:	f7fc fd27 	bl	8001670 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c2e:	f7fc fd1f 	bl	8001670 <HAL_GetTick>
 8004c32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c3c:	4b3d      	ldr	r3, [pc, #244]	; (8004d34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	00da      	lsls	r2, r3, #3
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	0d1b      	lsrs	r3, r3, #20
 8004c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c54:	e060      	b.n	8004d18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c5c:	d107      	bne.n	8004c6e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d050      	beq.n	8004d18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c76:	f7fc fcfb 	bl	8001670 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d902      	bls.n	8004c8c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d13d      	bne.n	8004d08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ca4:	d111      	bne.n	8004cca <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cae:	d004      	beq.n	8004cba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb8:	d107      	bne.n	8004cca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd2:	d10f      	bne.n	8004cf4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e010      	b.n	8004d2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4013      	ands	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d196      	bne.n	8004c56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3728      	adds	r7, #40	; 0x28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000000 	.word	0x20000000

08004d38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d4c:	d111      	bne.n	8004d72 <SPI_EndRxTransaction+0x3a>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d56:	d004      	beq.n	8004d62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d60:	d107      	bne.n	8004d72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2180      	movs	r1, #128	; 0x80
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff febd 	bl	8004afc <SPI_WaitFlagStateUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8c:	f043 0220 	orr.w	r2, r3, #32
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e023      	b.n	8004de0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da0:	d11d      	bne.n	8004dde <SPI_EndRxTransaction+0xa6>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004daa:	d004      	beq.n	8004db6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db4:	d113      	bne.n	8004dde <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7ff ff22 	bl	8004c0c <SPI_WaitFifoStateUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd2:	f043 0220 	orr.w	r2, r3, #32
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e000      	b.n	8004de0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f7ff ff03 	bl	8004c0c <SPI_WaitFifoStateUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e10:	f043 0220 	orr.w	r2, r3, #32
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e027      	b.n	8004e6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2200      	movs	r2, #0
 8004e24:	2180      	movs	r1, #128	; 0x80
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7ff fe68 	bl	8004afc <SPI_WaitFlagStateUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e014      	b.n	8004e6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7ff fedc 	bl	8004c0c <SPI_WaitFifoStateUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5e:	f043 0220 	orr.w	r2, r3, #32
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e000      	b.n	8004e6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e040      	b.n	8004f08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fc fa06 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2224      	movs	r2, #36	; 0x24
 8004ea0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fb6a 	bl	8005594 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f8af 	bl	8005024 <UART_SetConfig>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e01b      	b.n	8004f08 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fbe9 	bl	80056d8 <UART_CheckIdleState>
 8004f06:	4603      	mov	r3, r0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	; 0x28
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d178      	bne.n	800501a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_UART_Transmit+0x24>
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e071      	b.n	800501c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2221      	movs	r2, #33	; 0x21
 8004f44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f46:	f7fc fb93 	bl	8001670 <HAL_GetTick>
 8004f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	88fa      	ldrh	r2, [r7, #6]
 8004f50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	88fa      	ldrh	r2, [r7, #6]
 8004f58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f64:	d108      	bne.n	8004f78 <HAL_UART_Transmit+0x68>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d104      	bne.n	8004f78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e003      	b.n	8004f80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f80:	e030      	b.n	8004fe4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2180      	movs	r1, #128	; 0x80
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 fc4b 	bl	8005828 <UART_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d004      	beq.n	8004fa2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e03c      	b.n	800501c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	881a      	ldrh	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fb4:	b292      	uxth	r2, r2
 8004fb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	3302      	adds	r3, #2
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	e008      	b.n	8004fd2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	781a      	ldrb	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	b292      	uxth	r2, r2
 8004fca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1c8      	bne.n	8004f82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2140      	movs	r1, #64	; 0x40
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fc14 	bl	8005828 <UART_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d004      	beq.n	8005010 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e005      	b.n	800501c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800501a:	2302      	movs	r3, #2
  }
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005028:	b08a      	sub	sp, #40	; 0x28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	431a      	orrs	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	431a      	orrs	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	4313      	orrs	r3, r2
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4ba4      	ldr	r3, [pc, #656]	; (80052e4 <UART_SetConfig+0x2c0>)
 8005054:	4013      	ands	r3, r2
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800505c:	430b      	orrs	r3, r1
 800505e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a99      	ldr	r2, [pc, #612]	; (80052e8 <UART_SetConfig+0x2c4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d004      	beq.n	8005090 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508c:	4313      	orrs	r3, r2
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a0:	430a      	orrs	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a90      	ldr	r2, [pc, #576]	; (80052ec <UART_SetConfig+0x2c8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d126      	bne.n	80050fc <UART_SetConfig+0xd8>
 80050ae:	4b90      	ldr	r3, [pc, #576]	; (80052f0 <UART_SetConfig+0x2cc>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d81b      	bhi.n	80050f4 <UART_SetConfig+0xd0>
 80050bc:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <UART_SetConfig+0xa0>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	080050d5 	.word	0x080050d5
 80050c8:	080050e5 	.word	0x080050e5
 80050cc:	080050dd 	.word	0x080050dd
 80050d0:	080050ed 	.word	0x080050ed
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050da:	e116      	b.n	800530a <UART_SetConfig+0x2e6>
 80050dc:	2302      	movs	r3, #2
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e2:	e112      	b.n	800530a <UART_SetConfig+0x2e6>
 80050e4:	2304      	movs	r3, #4
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ea:	e10e      	b.n	800530a <UART_SetConfig+0x2e6>
 80050ec:	2308      	movs	r3, #8
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f2:	e10a      	b.n	800530a <UART_SetConfig+0x2e6>
 80050f4:	2310      	movs	r3, #16
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fa:	e106      	b.n	800530a <UART_SetConfig+0x2e6>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a7c      	ldr	r2, [pc, #496]	; (80052f4 <UART_SetConfig+0x2d0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d138      	bne.n	8005178 <UART_SetConfig+0x154>
 8005106:	4b7a      	ldr	r3, [pc, #488]	; (80052f0 <UART_SetConfig+0x2cc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f003 030c 	and.w	r3, r3, #12
 8005110:	2b0c      	cmp	r3, #12
 8005112:	d82d      	bhi.n	8005170 <UART_SetConfig+0x14c>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0xf8>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	08005151 	.word	0x08005151
 8005120:	08005171 	.word	0x08005171
 8005124:	08005171 	.word	0x08005171
 8005128:	08005171 	.word	0x08005171
 800512c:	08005161 	.word	0x08005161
 8005130:	08005171 	.word	0x08005171
 8005134:	08005171 	.word	0x08005171
 8005138:	08005171 	.word	0x08005171
 800513c:	08005159 	.word	0x08005159
 8005140:	08005171 	.word	0x08005171
 8005144:	08005171 	.word	0x08005171
 8005148:	08005171 	.word	0x08005171
 800514c:	08005169 	.word	0x08005169
 8005150:	2300      	movs	r3, #0
 8005152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005156:	e0d8      	b.n	800530a <UART_SetConfig+0x2e6>
 8005158:	2302      	movs	r3, #2
 800515a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515e:	e0d4      	b.n	800530a <UART_SetConfig+0x2e6>
 8005160:	2304      	movs	r3, #4
 8005162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005166:	e0d0      	b.n	800530a <UART_SetConfig+0x2e6>
 8005168:	2308      	movs	r3, #8
 800516a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516e:	e0cc      	b.n	800530a <UART_SetConfig+0x2e6>
 8005170:	2310      	movs	r3, #16
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005176:	e0c8      	b.n	800530a <UART_SetConfig+0x2e6>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a5e      	ldr	r2, [pc, #376]	; (80052f8 <UART_SetConfig+0x2d4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d125      	bne.n	80051ce <UART_SetConfig+0x1aa>
 8005182:	4b5b      	ldr	r3, [pc, #364]	; (80052f0 <UART_SetConfig+0x2cc>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005188:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800518c:	2b30      	cmp	r3, #48	; 0x30
 800518e:	d016      	beq.n	80051be <UART_SetConfig+0x19a>
 8005190:	2b30      	cmp	r3, #48	; 0x30
 8005192:	d818      	bhi.n	80051c6 <UART_SetConfig+0x1a2>
 8005194:	2b20      	cmp	r3, #32
 8005196:	d00a      	beq.n	80051ae <UART_SetConfig+0x18a>
 8005198:	2b20      	cmp	r3, #32
 800519a:	d814      	bhi.n	80051c6 <UART_SetConfig+0x1a2>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <UART_SetConfig+0x182>
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d008      	beq.n	80051b6 <UART_SetConfig+0x192>
 80051a4:	e00f      	b.n	80051c6 <UART_SetConfig+0x1a2>
 80051a6:	2300      	movs	r3, #0
 80051a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ac:	e0ad      	b.n	800530a <UART_SetConfig+0x2e6>
 80051ae:	2302      	movs	r3, #2
 80051b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b4:	e0a9      	b.n	800530a <UART_SetConfig+0x2e6>
 80051b6:	2304      	movs	r3, #4
 80051b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051bc:	e0a5      	b.n	800530a <UART_SetConfig+0x2e6>
 80051be:	2308      	movs	r3, #8
 80051c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c4:	e0a1      	b.n	800530a <UART_SetConfig+0x2e6>
 80051c6:	2310      	movs	r3, #16
 80051c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051cc:	e09d      	b.n	800530a <UART_SetConfig+0x2e6>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a4a      	ldr	r2, [pc, #296]	; (80052fc <UART_SetConfig+0x2d8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d125      	bne.n	8005224 <UART_SetConfig+0x200>
 80051d8:	4b45      	ldr	r3, [pc, #276]	; (80052f0 <UART_SetConfig+0x2cc>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051e2:	2bc0      	cmp	r3, #192	; 0xc0
 80051e4:	d016      	beq.n	8005214 <UART_SetConfig+0x1f0>
 80051e6:	2bc0      	cmp	r3, #192	; 0xc0
 80051e8:	d818      	bhi.n	800521c <UART_SetConfig+0x1f8>
 80051ea:	2b80      	cmp	r3, #128	; 0x80
 80051ec:	d00a      	beq.n	8005204 <UART_SetConfig+0x1e0>
 80051ee:	2b80      	cmp	r3, #128	; 0x80
 80051f0:	d814      	bhi.n	800521c <UART_SetConfig+0x1f8>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <UART_SetConfig+0x1d8>
 80051f6:	2b40      	cmp	r3, #64	; 0x40
 80051f8:	d008      	beq.n	800520c <UART_SetConfig+0x1e8>
 80051fa:	e00f      	b.n	800521c <UART_SetConfig+0x1f8>
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005202:	e082      	b.n	800530a <UART_SetConfig+0x2e6>
 8005204:	2302      	movs	r3, #2
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520a:	e07e      	b.n	800530a <UART_SetConfig+0x2e6>
 800520c:	2304      	movs	r3, #4
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005212:	e07a      	b.n	800530a <UART_SetConfig+0x2e6>
 8005214:	2308      	movs	r3, #8
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521a:	e076      	b.n	800530a <UART_SetConfig+0x2e6>
 800521c:	2310      	movs	r3, #16
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005222:	e072      	b.n	800530a <UART_SetConfig+0x2e6>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a35      	ldr	r2, [pc, #212]	; (8005300 <UART_SetConfig+0x2dc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d12a      	bne.n	8005284 <UART_SetConfig+0x260>
 800522e:	4b30      	ldr	r3, [pc, #192]	; (80052f0 <UART_SetConfig+0x2cc>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800523c:	d01a      	beq.n	8005274 <UART_SetConfig+0x250>
 800523e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005242:	d81b      	bhi.n	800527c <UART_SetConfig+0x258>
 8005244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005248:	d00c      	beq.n	8005264 <UART_SetConfig+0x240>
 800524a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800524e:	d815      	bhi.n	800527c <UART_SetConfig+0x258>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <UART_SetConfig+0x238>
 8005254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005258:	d008      	beq.n	800526c <UART_SetConfig+0x248>
 800525a:	e00f      	b.n	800527c <UART_SetConfig+0x258>
 800525c:	2300      	movs	r3, #0
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005262:	e052      	b.n	800530a <UART_SetConfig+0x2e6>
 8005264:	2302      	movs	r3, #2
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526a:	e04e      	b.n	800530a <UART_SetConfig+0x2e6>
 800526c:	2304      	movs	r3, #4
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005272:	e04a      	b.n	800530a <UART_SetConfig+0x2e6>
 8005274:	2308      	movs	r3, #8
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e046      	b.n	800530a <UART_SetConfig+0x2e6>
 800527c:	2310      	movs	r3, #16
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e042      	b.n	800530a <UART_SetConfig+0x2e6>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <UART_SetConfig+0x2c4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d13a      	bne.n	8005304 <UART_SetConfig+0x2e0>
 800528e:	4b18      	ldr	r3, [pc, #96]	; (80052f0 <UART_SetConfig+0x2cc>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005298:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800529c:	d01a      	beq.n	80052d4 <UART_SetConfig+0x2b0>
 800529e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052a2:	d81b      	bhi.n	80052dc <UART_SetConfig+0x2b8>
 80052a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a8:	d00c      	beq.n	80052c4 <UART_SetConfig+0x2a0>
 80052aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ae:	d815      	bhi.n	80052dc <UART_SetConfig+0x2b8>
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <UART_SetConfig+0x298>
 80052b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b8:	d008      	beq.n	80052cc <UART_SetConfig+0x2a8>
 80052ba:	e00f      	b.n	80052dc <UART_SetConfig+0x2b8>
 80052bc:	2300      	movs	r3, #0
 80052be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c2:	e022      	b.n	800530a <UART_SetConfig+0x2e6>
 80052c4:	2302      	movs	r3, #2
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ca:	e01e      	b.n	800530a <UART_SetConfig+0x2e6>
 80052cc:	2304      	movs	r3, #4
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d2:	e01a      	b.n	800530a <UART_SetConfig+0x2e6>
 80052d4:	2308      	movs	r3, #8
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052da:	e016      	b.n	800530a <UART_SetConfig+0x2e6>
 80052dc:	2310      	movs	r3, #16
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e2:	e012      	b.n	800530a <UART_SetConfig+0x2e6>
 80052e4:	efff69f3 	.word	0xefff69f3
 80052e8:	40008000 	.word	0x40008000
 80052ec:	40013800 	.word	0x40013800
 80052f0:	40021000 	.word	0x40021000
 80052f4:	40004400 	.word	0x40004400
 80052f8:	40004800 	.word	0x40004800
 80052fc:	40004c00 	.word	0x40004c00
 8005300:	40005000 	.word	0x40005000
 8005304:	2310      	movs	r3, #16
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a9f      	ldr	r2, [pc, #636]	; (800558c <UART_SetConfig+0x568>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d17a      	bne.n	800540a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005318:	2b08      	cmp	r3, #8
 800531a:	d824      	bhi.n	8005366 <UART_SetConfig+0x342>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0x300>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005349 	.word	0x08005349
 8005328:	08005367 	.word	0x08005367
 800532c:	08005351 	.word	0x08005351
 8005330:	08005367 	.word	0x08005367
 8005334:	08005357 	.word	0x08005357
 8005338:	08005367 	.word	0x08005367
 800533c:	08005367 	.word	0x08005367
 8005340:	08005367 	.word	0x08005367
 8005344:	0800535f 	.word	0x0800535f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005348:	f7fe f91e 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 800534c:	61f8      	str	r0, [r7, #28]
        break;
 800534e:	e010      	b.n	8005372 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005350:	4b8f      	ldr	r3, [pc, #572]	; (8005590 <UART_SetConfig+0x56c>)
 8005352:	61fb      	str	r3, [r7, #28]
        break;
 8005354:	e00d      	b.n	8005372 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005356:	f7fe f87f 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 800535a:	61f8      	str	r0, [r7, #28]
        break;
 800535c:	e009      	b.n	8005372 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005362:	61fb      	str	r3, [r7, #28]
        break;
 8005364:	e005      	b.n	8005372 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005370:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80fb 	beq.w	8005570 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	4613      	mov	r3, r2
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	4413      	add	r3, r2
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	429a      	cmp	r2, r3
 8005388:	d305      	bcc.n	8005396 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	429a      	cmp	r2, r3
 8005394:	d903      	bls.n	800539e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800539c:	e0e8      	b.n	8005570 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	2200      	movs	r2, #0
 80053a2:	461c      	mov	r4, r3
 80053a4:	4615      	mov	r5, r2
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	022b      	lsls	r3, r5, #8
 80053b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053b4:	0222      	lsls	r2, r4, #8
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	6849      	ldr	r1, [r1, #4]
 80053ba:	0849      	lsrs	r1, r1, #1
 80053bc:	2000      	movs	r0, #0
 80053be:	4688      	mov	r8, r1
 80053c0:	4681      	mov	r9, r0
 80053c2:	eb12 0a08 	adds.w	sl, r2, r8
 80053c6:	eb43 0b09 	adc.w	fp, r3, r9
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053d8:	4650      	mov	r0, sl
 80053da:	4659      	mov	r1, fp
 80053dc:	f7fa ff48 	bl	8000270 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4613      	mov	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ee:	d308      	bcc.n	8005402 <UART_SetConfig+0x3de>
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053f6:	d204      	bcs.n	8005402 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	60da      	str	r2, [r3, #12]
 8005400:	e0b6      	b.n	8005570 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005408:	e0b2      	b.n	8005570 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005412:	d15e      	bne.n	80054d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005418:	2b08      	cmp	r3, #8
 800541a:	d828      	bhi.n	800546e <UART_SetConfig+0x44a>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0x400>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	08005449 	.word	0x08005449
 8005428:	08005451 	.word	0x08005451
 800542c:	08005459 	.word	0x08005459
 8005430:	0800546f 	.word	0x0800546f
 8005434:	0800545f 	.word	0x0800545f
 8005438:	0800546f 	.word	0x0800546f
 800543c:	0800546f 	.word	0x0800546f
 8005440:	0800546f 	.word	0x0800546f
 8005444:	08005467 	.word	0x08005467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005448:	f7fe f89e 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 800544c:	61f8      	str	r0, [r7, #28]
        break;
 800544e:	e014      	b.n	800547a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005450:	f7fe f8b0 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8005454:	61f8      	str	r0, [r7, #28]
        break;
 8005456:	e010      	b.n	800547a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005458:	4b4d      	ldr	r3, [pc, #308]	; (8005590 <UART_SetConfig+0x56c>)
 800545a:	61fb      	str	r3, [r7, #28]
        break;
 800545c:	e00d      	b.n	800547a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545e:	f7fd fffb 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8005462:	61f8      	str	r0, [r7, #28]
        break;
 8005464:	e009      	b.n	800547a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546a:	61fb      	str	r3, [r7, #28]
        break;
 800546c:	e005      	b.n	800547a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d077      	beq.n	8005570 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	005a      	lsls	r2, r3, #1
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	441a      	add	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	fbb2 f3f3 	udiv	r3, r2, r3
 8005494:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b0f      	cmp	r3, #15
 800549a:	d916      	bls.n	80054ca <UART_SetConfig+0x4a6>
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a2:	d212      	bcs.n	80054ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f023 030f 	bic.w	r3, r3, #15
 80054ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	085b      	lsrs	r3, r3, #1
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	8afb      	ldrh	r3, [r7, #22]
 80054bc:	4313      	orrs	r3, r2
 80054be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	8afa      	ldrh	r2, [r7, #22]
 80054c6:	60da      	str	r2, [r3, #12]
 80054c8:	e052      	b.n	8005570 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054d0:	e04e      	b.n	8005570 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d827      	bhi.n	800552a <UART_SetConfig+0x506>
 80054da:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0x4bc>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	08005505 	.word	0x08005505
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	08005515 	.word	0x08005515
 80054ec:	0800552b 	.word	0x0800552b
 80054f0:	0800551b 	.word	0x0800551b
 80054f4:	0800552b 	.word	0x0800552b
 80054f8:	0800552b 	.word	0x0800552b
 80054fc:	0800552b 	.word	0x0800552b
 8005500:	08005523 	.word	0x08005523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005504:	f7fe f840 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8005508:	61f8      	str	r0, [r7, #28]
        break;
 800550a:	e014      	b.n	8005536 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800550c:	f7fe f852 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8005510:	61f8      	str	r0, [r7, #28]
        break;
 8005512:	e010      	b.n	8005536 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005514:	4b1e      	ldr	r3, [pc, #120]	; (8005590 <UART_SetConfig+0x56c>)
 8005516:	61fb      	str	r3, [r7, #28]
        break;
 8005518:	e00d      	b.n	8005536 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800551a:	f7fd ff9d 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 800551e:	61f8      	str	r0, [r7, #28]
        break;
 8005520:	e009      	b.n	8005536 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005526:	61fb      	str	r3, [r7, #28]
        break;
 8005528:	e005      	b.n	8005536 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005534:	bf00      	nop
    }

    if (pclk != 0U)
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d019      	beq.n	8005570 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	085a      	lsrs	r2, r3, #1
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	441a      	add	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b0f      	cmp	r3, #15
 8005554:	d909      	bls.n	800556a <UART_SetConfig+0x546>
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555c:	d205      	bcs.n	800556a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60da      	str	r2, [r3, #12]
 8005568:	e002      	b.n	8005570 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800557c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005580:	4618      	mov	r0, r3
 8005582:	3728      	adds	r7, #40	; 0x28
 8005584:	46bd      	mov	sp, r7
 8005586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800558a:	bf00      	nop
 800558c:	40008000 	.word	0x40008000
 8005590:	00f42400 	.word	0x00f42400

08005594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01a      	beq.n	80056aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005692:	d10a      	bne.n	80056aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b098      	sub	sp, #96	; 0x60
 80056dc:	af02      	add	r7, sp, #8
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056e8:	f7fb ffc2 	bl	8001670 <HAL_GetTick>
 80056ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d12e      	bne.n	800575a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005704:	2200      	movs	r2, #0
 8005706:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f88c 	bl	8005828 <UART_WaitOnFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d021      	beq.n	800575a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572a:	653b      	str	r3, [r7, #80]	; 0x50
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005734:	647b      	str	r3, [r7, #68]	; 0x44
 8005736:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800573a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e6      	bne.n	8005716 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e062      	b.n	8005820 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b04      	cmp	r3, #4
 8005766:	d149      	bne.n	80057fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005770:	2200      	movs	r2, #0
 8005772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f856 	bl	8005828 <UART_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d03c      	beq.n	80057fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	623b      	str	r3, [r7, #32]
   return(result);
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a0:	633b      	str	r3, [r7, #48]	; 0x30
 80057a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e6      	bne.n	8005782 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3308      	adds	r3, #8
 80057ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0301 	bic.w	r3, r3, #1
 80057ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3308      	adds	r3, #8
 80057d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057d4:	61fa      	str	r2, [r7, #28]
 80057d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	69b9      	ldr	r1, [r7, #24]
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	617b      	str	r3, [r7, #20]
   return(result);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e5      	bne.n	80057b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e011      	b.n	8005820 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3758      	adds	r7, #88	; 0x58
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	4613      	mov	r3, r2
 8005836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005838:	e049      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005840:	d045      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005842:	f7fb ff15 	bl	8001670 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	429a      	cmp	r2, r3
 8005850:	d302      	bcc.n	8005858 <UART_WaitOnFlagUntilTimeout+0x30>
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e048      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b00      	cmp	r3, #0
 8005868:	d031      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d110      	bne.n	800589a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2208      	movs	r2, #8
 800587e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f838 	bl	80058f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2208      	movs	r2, #8
 800588a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e029      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a8:	d111      	bne.n	80058ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f81e 	bl	80058f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e00f      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4013      	ands	r3, r2
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d0a6      	beq.n	800583a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b095      	sub	sp, #84	; 0x54
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591c:	643b      	str	r3, [r7, #64]	; 0x40
 800591e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005922:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e6      	bne.n	80058fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3308      	adds	r3, #8
 8005936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	64bb      	str	r3, [r7, #72]	; 0x48
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3308      	adds	r3, #8
 800594e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005950:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005968:	2b01      	cmp	r3, #1
 800596a:	d118      	bne.n	800599e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	60bb      	str	r3, [r7, #8]
   return(result);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f023 0310 	bic.w	r3, r3, #16
 8005980:	647b      	str	r3, [r7, #68]	; 0x44
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6979      	ldr	r1, [r7, #20]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	613b      	str	r3, [r7, #16]
   return(result);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e6      	bne.n	800596c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80059b2:	bf00      	nop
 80059b4:	3754      	adds	r7, #84	; 0x54
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <calloc>:
 80059c0:	4b02      	ldr	r3, [pc, #8]	; (80059cc <calloc+0xc>)
 80059c2:	460a      	mov	r2, r1
 80059c4:	4601      	mov	r1, r0
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	f000 b802 	b.w	80059d0 <_calloc_r>
 80059cc:	20000064 	.word	0x20000064

080059d0 <_calloc_r>:
 80059d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059d2:	fba1 2402 	umull	r2, r4, r1, r2
 80059d6:	b94c      	cbnz	r4, 80059ec <_calloc_r+0x1c>
 80059d8:	4611      	mov	r1, r2
 80059da:	9201      	str	r2, [sp, #4]
 80059dc:	f000 f82e 	bl	8005a3c <_malloc_r>
 80059e0:	9a01      	ldr	r2, [sp, #4]
 80059e2:	4605      	mov	r5, r0
 80059e4:	b930      	cbnz	r0, 80059f4 <_calloc_r+0x24>
 80059e6:	4628      	mov	r0, r5
 80059e8:	b003      	add	sp, #12
 80059ea:	bd30      	pop	{r4, r5, pc}
 80059ec:	220c      	movs	r2, #12
 80059ee:	6002      	str	r2, [r0, #0]
 80059f0:	2500      	movs	r5, #0
 80059f2:	e7f8      	b.n	80059e6 <_calloc_r+0x16>
 80059f4:	4621      	mov	r1, r4
 80059f6:	f000 fc69 	bl	80062cc <memset>
 80059fa:	e7f4      	b.n	80059e6 <_calloc_r+0x16>

080059fc <sbrk_aligned>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	4e0e      	ldr	r6, [pc, #56]	; (8005a38 <sbrk_aligned+0x3c>)
 8005a00:	460c      	mov	r4, r1
 8005a02:	6831      	ldr	r1, [r6, #0]
 8005a04:	4605      	mov	r5, r0
 8005a06:	b911      	cbnz	r1, 8005a0e <sbrk_aligned+0x12>
 8005a08:	f000 fcae 	bl	8006368 <_sbrk_r>
 8005a0c:	6030      	str	r0, [r6, #0]
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4628      	mov	r0, r5
 8005a12:	f000 fca9 	bl	8006368 <_sbrk_r>
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	d00a      	beq.n	8005a30 <sbrk_aligned+0x34>
 8005a1a:	1cc4      	adds	r4, r0, #3
 8005a1c:	f024 0403 	bic.w	r4, r4, #3
 8005a20:	42a0      	cmp	r0, r4
 8005a22:	d007      	beq.n	8005a34 <sbrk_aligned+0x38>
 8005a24:	1a21      	subs	r1, r4, r0
 8005a26:	4628      	mov	r0, r5
 8005a28:	f000 fc9e 	bl	8006368 <_sbrk_r>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d101      	bne.n	8005a34 <sbrk_aligned+0x38>
 8005a30:	f04f 34ff 	mov.w	r4, #4294967295
 8005a34:	4620      	mov	r0, r4
 8005a36:	bd70      	pop	{r4, r5, r6, pc}
 8005a38:	200001d4 	.word	0x200001d4

08005a3c <_malloc_r>:
 8005a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a40:	1ccd      	adds	r5, r1, #3
 8005a42:	f025 0503 	bic.w	r5, r5, #3
 8005a46:	3508      	adds	r5, #8
 8005a48:	2d0c      	cmp	r5, #12
 8005a4a:	bf38      	it	cc
 8005a4c:	250c      	movcc	r5, #12
 8005a4e:	2d00      	cmp	r5, #0
 8005a50:	4607      	mov	r7, r0
 8005a52:	db01      	blt.n	8005a58 <_malloc_r+0x1c>
 8005a54:	42a9      	cmp	r1, r5
 8005a56:	d905      	bls.n	8005a64 <_malloc_r+0x28>
 8005a58:	230c      	movs	r3, #12
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	2600      	movs	r6, #0
 8005a5e:	4630      	mov	r0, r6
 8005a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005b38 <_malloc_r+0xfc>
 8005a68:	f000 f868 	bl	8005b3c <__malloc_lock>
 8005a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a70:	461c      	mov	r4, r3
 8005a72:	bb5c      	cbnz	r4, 8005acc <_malloc_r+0x90>
 8005a74:	4629      	mov	r1, r5
 8005a76:	4638      	mov	r0, r7
 8005a78:	f7ff ffc0 	bl	80059fc <sbrk_aligned>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	4604      	mov	r4, r0
 8005a80:	d155      	bne.n	8005b2e <_malloc_r+0xf2>
 8005a82:	f8d8 4000 	ldr.w	r4, [r8]
 8005a86:	4626      	mov	r6, r4
 8005a88:	2e00      	cmp	r6, #0
 8005a8a:	d145      	bne.n	8005b18 <_malloc_r+0xdc>
 8005a8c:	2c00      	cmp	r4, #0
 8005a8e:	d048      	beq.n	8005b22 <_malloc_r+0xe6>
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	4631      	mov	r1, r6
 8005a94:	4638      	mov	r0, r7
 8005a96:	eb04 0903 	add.w	r9, r4, r3
 8005a9a:	f000 fc65 	bl	8006368 <_sbrk_r>
 8005a9e:	4581      	cmp	r9, r0
 8005aa0:	d13f      	bne.n	8005b22 <_malloc_r+0xe6>
 8005aa2:	6821      	ldr	r1, [r4, #0]
 8005aa4:	1a6d      	subs	r5, r5, r1
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f7ff ffa7 	bl	80059fc <sbrk_aligned>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d037      	beq.n	8005b22 <_malloc_r+0xe6>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	442b      	add	r3, r5
 8005ab6:	6023      	str	r3, [r4, #0]
 8005ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d038      	beq.n	8005b32 <_malloc_r+0xf6>
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	42a2      	cmp	r2, r4
 8005ac4:	d12b      	bne.n	8005b1e <_malloc_r+0xe2>
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	605a      	str	r2, [r3, #4]
 8005aca:	e00f      	b.n	8005aec <_malloc_r+0xb0>
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	1b52      	subs	r2, r2, r5
 8005ad0:	d41f      	bmi.n	8005b12 <_malloc_r+0xd6>
 8005ad2:	2a0b      	cmp	r2, #11
 8005ad4:	d917      	bls.n	8005b06 <_malloc_r+0xca>
 8005ad6:	1961      	adds	r1, r4, r5
 8005ad8:	42a3      	cmp	r3, r4
 8005ada:	6025      	str	r5, [r4, #0]
 8005adc:	bf18      	it	ne
 8005ade:	6059      	strne	r1, [r3, #4]
 8005ae0:	6863      	ldr	r3, [r4, #4]
 8005ae2:	bf08      	it	eq
 8005ae4:	f8c8 1000 	streq.w	r1, [r8]
 8005ae8:	5162      	str	r2, [r4, r5]
 8005aea:	604b      	str	r3, [r1, #4]
 8005aec:	4638      	mov	r0, r7
 8005aee:	f104 060b 	add.w	r6, r4, #11
 8005af2:	f000 f829 	bl	8005b48 <__malloc_unlock>
 8005af6:	f026 0607 	bic.w	r6, r6, #7
 8005afa:	1d23      	adds	r3, r4, #4
 8005afc:	1af2      	subs	r2, r6, r3
 8005afe:	d0ae      	beq.n	8005a5e <_malloc_r+0x22>
 8005b00:	1b9b      	subs	r3, r3, r6
 8005b02:	50a3      	str	r3, [r4, r2]
 8005b04:	e7ab      	b.n	8005a5e <_malloc_r+0x22>
 8005b06:	42a3      	cmp	r3, r4
 8005b08:	6862      	ldr	r2, [r4, #4]
 8005b0a:	d1dd      	bne.n	8005ac8 <_malloc_r+0x8c>
 8005b0c:	f8c8 2000 	str.w	r2, [r8]
 8005b10:	e7ec      	b.n	8005aec <_malloc_r+0xb0>
 8005b12:	4623      	mov	r3, r4
 8005b14:	6864      	ldr	r4, [r4, #4]
 8005b16:	e7ac      	b.n	8005a72 <_malloc_r+0x36>
 8005b18:	4634      	mov	r4, r6
 8005b1a:	6876      	ldr	r6, [r6, #4]
 8005b1c:	e7b4      	b.n	8005a88 <_malloc_r+0x4c>
 8005b1e:	4613      	mov	r3, r2
 8005b20:	e7cc      	b.n	8005abc <_malloc_r+0x80>
 8005b22:	230c      	movs	r3, #12
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	4638      	mov	r0, r7
 8005b28:	f000 f80e 	bl	8005b48 <__malloc_unlock>
 8005b2c:	e797      	b.n	8005a5e <_malloc_r+0x22>
 8005b2e:	6025      	str	r5, [r4, #0]
 8005b30:	e7dc      	b.n	8005aec <_malloc_r+0xb0>
 8005b32:	605b      	str	r3, [r3, #4]
 8005b34:	deff      	udf	#255	; 0xff
 8005b36:	bf00      	nop
 8005b38:	200001d0 	.word	0x200001d0

08005b3c <__malloc_lock>:
 8005b3c:	4801      	ldr	r0, [pc, #4]	; (8005b44 <__malloc_lock+0x8>)
 8005b3e:	f000 bc61 	b.w	8006404 <__retarget_lock_acquire_recursive>
 8005b42:	bf00      	nop
 8005b44:	20000318 	.word	0x20000318

08005b48 <__malloc_unlock>:
 8005b48:	4801      	ldr	r0, [pc, #4]	; (8005b50 <__malloc_unlock+0x8>)
 8005b4a:	f000 bc5c 	b.w	8006406 <__retarget_lock_release_recursive>
 8005b4e:	bf00      	nop
 8005b50:	20000318 	.word	0x20000318

08005b54 <std>:
 8005b54:	2300      	movs	r3, #0
 8005b56:	b510      	push	{r4, lr}
 8005b58:	4604      	mov	r4, r0
 8005b5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b62:	6083      	str	r3, [r0, #8]
 8005b64:	8181      	strh	r1, [r0, #12]
 8005b66:	6643      	str	r3, [r0, #100]	; 0x64
 8005b68:	81c2      	strh	r2, [r0, #14]
 8005b6a:	6183      	str	r3, [r0, #24]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	2208      	movs	r2, #8
 8005b70:	305c      	adds	r0, #92	; 0x5c
 8005b72:	f000 fbab 	bl	80062cc <memset>
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <std+0x58>)
 8005b78:	6263      	str	r3, [r4, #36]	; 0x24
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <std+0x5c>)
 8005b7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <std+0x60>)
 8005b80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b82:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <std+0x64>)
 8005b84:	6323      	str	r3, [r4, #48]	; 0x30
 8005b86:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <std+0x68>)
 8005b88:	6224      	str	r4, [r4, #32]
 8005b8a:	429c      	cmp	r4, r3
 8005b8c:	d006      	beq.n	8005b9c <std+0x48>
 8005b8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b92:	4294      	cmp	r4, r2
 8005b94:	d002      	beq.n	8005b9c <std+0x48>
 8005b96:	33d0      	adds	r3, #208	; 0xd0
 8005b98:	429c      	cmp	r4, r3
 8005b9a:	d105      	bne.n	8005ba8 <std+0x54>
 8005b9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba4:	f000 bc2c 	b.w	8006400 <__retarget_lock_init_recursive>
 8005ba8:	bd10      	pop	{r4, pc}
 8005baa:	bf00      	nop
 8005bac:	08005fdd 	.word	0x08005fdd
 8005bb0:	08005fff 	.word	0x08005fff
 8005bb4:	08006037 	.word	0x08006037
 8005bb8:	0800605b 	.word	0x0800605b
 8005bbc:	200001d8 	.word	0x200001d8

08005bc0 <stdio_exit_handler>:
 8005bc0:	4a02      	ldr	r2, [pc, #8]	; (8005bcc <stdio_exit_handler+0xc>)
 8005bc2:	4903      	ldr	r1, [pc, #12]	; (8005bd0 <stdio_exit_handler+0x10>)
 8005bc4:	4803      	ldr	r0, [pc, #12]	; (8005bd4 <stdio_exit_handler+0x14>)
 8005bc6:	f000 b91b 	b.w	8005e00 <_fwalk_sglue>
 8005bca:	bf00      	nop
 8005bcc:	2000000c 	.word	0x2000000c
 8005bd0:	08006b55 	.word	0x08006b55
 8005bd4:	20000018 	.word	0x20000018

08005bd8 <cleanup_stdio>:
 8005bd8:	6841      	ldr	r1, [r0, #4]
 8005bda:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <cleanup_stdio+0x34>)
 8005bdc:	4299      	cmp	r1, r3
 8005bde:	b510      	push	{r4, lr}
 8005be0:	4604      	mov	r4, r0
 8005be2:	d001      	beq.n	8005be8 <cleanup_stdio+0x10>
 8005be4:	f000 ffb6 	bl	8006b54 <_fflush_r>
 8005be8:	68a1      	ldr	r1, [r4, #8]
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <cleanup_stdio+0x38>)
 8005bec:	4299      	cmp	r1, r3
 8005bee:	d002      	beq.n	8005bf6 <cleanup_stdio+0x1e>
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f000 ffaf 	bl	8006b54 <_fflush_r>
 8005bf6:	68e1      	ldr	r1, [r4, #12]
 8005bf8:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <cleanup_stdio+0x3c>)
 8005bfa:	4299      	cmp	r1, r3
 8005bfc:	d004      	beq.n	8005c08 <cleanup_stdio+0x30>
 8005bfe:	4620      	mov	r0, r4
 8005c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c04:	f000 bfa6 	b.w	8006b54 <_fflush_r>
 8005c08:	bd10      	pop	{r4, pc}
 8005c0a:	bf00      	nop
 8005c0c:	200001d8 	.word	0x200001d8
 8005c10:	20000240 	.word	0x20000240
 8005c14:	200002a8 	.word	0x200002a8

08005c18 <global_stdio_init.part.0>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <global_stdio_init.part.0+0x30>)
 8005c1c:	4c0b      	ldr	r4, [pc, #44]	; (8005c4c <global_stdio_init.part.0+0x34>)
 8005c1e:	4a0c      	ldr	r2, [pc, #48]	; (8005c50 <global_stdio_init.part.0+0x38>)
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	4620      	mov	r0, r4
 8005c24:	2200      	movs	r2, #0
 8005c26:	2104      	movs	r1, #4
 8005c28:	f7ff ff94 	bl	8005b54 <std>
 8005c2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c30:	2201      	movs	r2, #1
 8005c32:	2109      	movs	r1, #9
 8005c34:	f7ff ff8e 	bl	8005b54 <std>
 8005c38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c42:	2112      	movs	r1, #18
 8005c44:	f7ff bf86 	b.w	8005b54 <std>
 8005c48:	20000310 	.word	0x20000310
 8005c4c:	200001d8 	.word	0x200001d8
 8005c50:	08005bc1 	.word	0x08005bc1

08005c54 <__sfp_lock_acquire>:
 8005c54:	4801      	ldr	r0, [pc, #4]	; (8005c5c <__sfp_lock_acquire+0x8>)
 8005c56:	f000 bbd5 	b.w	8006404 <__retarget_lock_acquire_recursive>
 8005c5a:	bf00      	nop
 8005c5c:	20000319 	.word	0x20000319

08005c60 <__sfp_lock_release>:
 8005c60:	4801      	ldr	r0, [pc, #4]	; (8005c68 <__sfp_lock_release+0x8>)
 8005c62:	f000 bbd0 	b.w	8006406 <__retarget_lock_release_recursive>
 8005c66:	bf00      	nop
 8005c68:	20000319 	.word	0x20000319

08005c6c <__sfp>:
 8005c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c70:	4607      	mov	r7, r0
 8005c72:	f7ff ffef 	bl	8005c54 <__sfp_lock_acquire>
 8005c76:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <__sfp+0x9c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	b90b      	cbnz	r3, 8005c80 <__sfp+0x14>
 8005c7c:	f7ff ffcc 	bl	8005c18 <global_stdio_init.part.0>
 8005c80:	4e22      	ldr	r6, [pc, #136]	; (8005d0c <__sfp+0xa0>)
 8005c82:	f04f 0804 	mov.w	r8, #4
 8005c86:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	d50f      	bpl.n	8005cae <__sfp+0x42>
 8005c8e:	6835      	ldr	r5, [r6, #0]
 8005c90:	2d00      	cmp	r5, #0
 8005c92:	d137      	bne.n	8005d04 <__sfp+0x98>
 8005c94:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f7ff fecf 	bl	8005a3c <_malloc_r>
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	bb30      	cbnz	r0, 8005cf0 <__sfp+0x84>
 8005ca2:	6030      	str	r0, [r6, #0]
 8005ca4:	f7ff ffdc 	bl	8005c60 <__sfp_lock_release>
 8005ca8:	230c      	movs	r3, #12
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	e01b      	b.n	8005ce6 <__sfp+0x7a>
 8005cae:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cb2:	b9dd      	cbnz	r5, 8005cec <__sfp+0x80>
 8005cb4:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <__sfp+0xa4>)
 8005cb6:	60e3      	str	r3, [r4, #12]
 8005cb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cbc:	6665      	str	r5, [r4, #100]	; 0x64
 8005cbe:	f000 fb9f 	bl	8006400 <__retarget_lock_init_recursive>
 8005cc2:	f7ff ffcd 	bl	8005c60 <__sfp_lock_release>
 8005cc6:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cca:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cce:	6025      	str	r5, [r4, #0]
 8005cd0:	61a5      	str	r5, [r4, #24]
 8005cd2:	2208      	movs	r2, #8
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cda:	f000 faf7 	bl	80062cc <memset>
 8005cde:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ce2:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cec:	3468      	adds	r4, #104	; 0x68
 8005cee:	e7cc      	b.n	8005c8a <__sfp+0x1e>
 8005cf0:	e9c0 5800 	strd	r5, r8, [r0]
 8005cf4:	300c      	adds	r0, #12
 8005cf6:	60a0      	str	r0, [r4, #8]
 8005cf8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	f000 fae5 	bl	80062cc <memset>
 8005d02:	6034      	str	r4, [r6, #0]
 8005d04:	6836      	ldr	r6, [r6, #0]
 8005d06:	e7be      	b.n	8005c86 <__sfp+0x1a>
 8005d08:	20000310 	.word	0x20000310
 8005d0c:	2000000c 	.word	0x2000000c
 8005d10:	ffff0001 	.word	0xffff0001

08005d14 <__sinit>:
 8005d14:	b510      	push	{r4, lr}
 8005d16:	4604      	mov	r4, r0
 8005d18:	f7ff ff9c 	bl	8005c54 <__sfp_lock_acquire>
 8005d1c:	6a23      	ldr	r3, [r4, #32]
 8005d1e:	b11b      	cbz	r3, 8005d28 <__sinit+0x14>
 8005d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d24:	f7ff bf9c 	b.w	8005c60 <__sfp_lock_release>
 8005d28:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <__sinit+0x28>)
 8005d2a:	6223      	str	r3, [r4, #32]
 8005d2c:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <__sinit+0x2c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1f5      	bne.n	8005d20 <__sinit+0xc>
 8005d34:	f7ff ff70 	bl	8005c18 <global_stdio_init.part.0>
 8005d38:	e7f2      	b.n	8005d20 <__sinit+0xc>
 8005d3a:	bf00      	nop
 8005d3c:	08005bd9 	.word	0x08005bd9
 8005d40:	20000310 	.word	0x20000310

08005d44 <_fopen_r>:
 8005d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d46:	460f      	mov	r7, r1
 8005d48:	4611      	mov	r1, r2
 8005d4a:	aa01      	add	r2, sp, #4
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	f000 ff29 	bl	8006ba4 <__sflags>
 8005d52:	4606      	mov	r6, r0
 8005d54:	b918      	cbnz	r0, 8005d5e <_fopen_r+0x1a>
 8005d56:	2400      	movs	r4, #0
 8005d58:	4620      	mov	r0, r4
 8005d5a:	b003      	add	sp, #12
 8005d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f7ff ff84 	bl	8005c6c <__sfp>
 8005d64:	4604      	mov	r4, r0
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d0f5      	beq.n	8005d56 <_fopen_r+0x12>
 8005d6a:	4639      	mov	r1, r7
 8005d6c:	9a01      	ldr	r2, [sp, #4]
 8005d6e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8005d72:	4628      	mov	r0, r5
 8005d74:	f000 fad4 	bl	8006320 <_open_r>
 8005d78:	1e07      	subs	r7, r0, #0
 8005d7a:	da09      	bge.n	8005d90 <_fopen_r+0x4c>
 8005d7c:	2500      	movs	r5, #0
 8005d7e:	f7ff ff69 	bl	8005c54 <__sfp_lock_acquire>
 8005d82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d84:	81a5      	strh	r5, [r4, #12]
 8005d86:	f000 fb3c 	bl	8006402 <__retarget_lock_close_recursive>
 8005d8a:	f7ff ff69 	bl	8005c60 <__sfp_lock_release>
 8005d8e:	e7e2      	b.n	8005d56 <_fopen_r+0x12>
 8005d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d92:	07db      	lsls	r3, r3, #31
 8005d94:	d405      	bmi.n	8005da2 <_fopen_r+0x5e>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	0598      	lsls	r0, r3, #22
 8005d9a:	d402      	bmi.n	8005da2 <_fopen_r+0x5e>
 8005d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d9e:	f000 fb31 	bl	8006404 <__retarget_lock_acquire_recursive>
 8005da2:	4b0e      	ldr	r3, [pc, #56]	; (8005ddc <_fopen_r+0x98>)
 8005da4:	6263      	str	r3, [r4, #36]	; 0x24
 8005da6:	4b0e      	ldr	r3, [pc, #56]	; (8005de0 <_fopen_r+0x9c>)
 8005da8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005daa:	4b0e      	ldr	r3, [pc, #56]	; (8005de4 <_fopen_r+0xa0>)
 8005dac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dae:	05f1      	lsls	r1, r6, #23
 8005db0:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <_fopen_r+0xa4>)
 8005db2:	81e7      	strh	r7, [r4, #14]
 8005db4:	81a6      	strh	r6, [r4, #12]
 8005db6:	6224      	str	r4, [r4, #32]
 8005db8:	6323      	str	r3, [r4, #48]	; 0x30
 8005dba:	d505      	bpl.n	8005dc8 <_fopen_r+0x84>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f000 f81a 	bl	8005dfc <_fseek_r>
 8005dc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dca:	07da      	lsls	r2, r3, #31
 8005dcc:	d4c4      	bmi.n	8005d58 <_fopen_r+0x14>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	059b      	lsls	r3, r3, #22
 8005dd2:	d4c1      	bmi.n	8005d58 <_fopen_r+0x14>
 8005dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dd6:	f000 fb16 	bl	8006406 <__retarget_lock_release_recursive>
 8005dda:	e7bd      	b.n	8005d58 <_fopen_r+0x14>
 8005ddc:	08005fdd 	.word	0x08005fdd
 8005de0:	08005fff 	.word	0x08005fff
 8005de4:	08006037 	.word	0x08006037
 8005de8:	0800605b 	.word	0x0800605b

08005dec <fopen>:
 8005dec:	4b02      	ldr	r3, [pc, #8]	; (8005df8 <fopen+0xc>)
 8005dee:	460a      	mov	r2, r1
 8005df0:	4601      	mov	r1, r0
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	f7ff bfa6 	b.w	8005d44 <_fopen_r>
 8005df8:	20000064 	.word	0x20000064

08005dfc <_fseek_r>:
 8005dfc:	f000 b9c6 	b.w	800618c <_fseeko_r>

08005e00 <_fwalk_sglue>:
 8005e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e04:	4607      	mov	r7, r0
 8005e06:	4688      	mov	r8, r1
 8005e08:	4614      	mov	r4, r2
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e10:	f1b9 0901 	subs.w	r9, r9, #1
 8005e14:	d505      	bpl.n	8005e22 <_fwalk_sglue+0x22>
 8005e16:	6824      	ldr	r4, [r4, #0]
 8005e18:	2c00      	cmp	r4, #0
 8005e1a:	d1f7      	bne.n	8005e0c <_fwalk_sglue+0xc>
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e22:	89ab      	ldrh	r3, [r5, #12]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d907      	bls.n	8005e38 <_fwalk_sglue+0x38>
 8005e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	d003      	beq.n	8005e38 <_fwalk_sglue+0x38>
 8005e30:	4629      	mov	r1, r5
 8005e32:	4638      	mov	r0, r7
 8005e34:	47c0      	blx	r8
 8005e36:	4306      	orrs	r6, r0
 8005e38:	3568      	adds	r5, #104	; 0x68
 8005e3a:	e7e9      	b.n	8005e10 <_fwalk_sglue+0x10>

08005e3c <_fwrite_r>:
 8005e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e40:	9c08      	ldr	r4, [sp, #32]
 8005e42:	468a      	mov	sl, r1
 8005e44:	4690      	mov	r8, r2
 8005e46:	fb02 f903 	mul.w	r9, r2, r3
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	b118      	cbz	r0, 8005e56 <_fwrite_r+0x1a>
 8005e4e:	6a03      	ldr	r3, [r0, #32]
 8005e50:	b90b      	cbnz	r3, 8005e56 <_fwrite_r+0x1a>
 8005e52:	f7ff ff5f 	bl	8005d14 <__sinit>
 8005e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e58:	07dd      	lsls	r5, r3, #31
 8005e5a:	d405      	bmi.n	8005e68 <_fwrite_r+0x2c>
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	0598      	lsls	r0, r3, #22
 8005e60:	d402      	bmi.n	8005e68 <_fwrite_r+0x2c>
 8005e62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e64:	f000 face 	bl	8006404 <__retarget_lock_acquire_recursive>
 8005e68:	89a3      	ldrh	r3, [r4, #12]
 8005e6a:	0719      	lsls	r1, r3, #28
 8005e6c:	d516      	bpl.n	8005e9c <_fwrite_r+0x60>
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	b1a3      	cbz	r3, 8005e9c <_fwrite_r+0x60>
 8005e72:	2500      	movs	r5, #0
 8005e74:	454d      	cmp	r5, r9
 8005e76:	d01f      	beq.n	8005eb8 <_fwrite_r+0x7c>
 8005e78:	68a7      	ldr	r7, [r4, #8]
 8005e7a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8005e7e:	3f01      	subs	r7, #1
 8005e80:	2f00      	cmp	r7, #0
 8005e82:	60a7      	str	r7, [r4, #8]
 8005e84:	da04      	bge.n	8005e90 <_fwrite_r+0x54>
 8005e86:	69a3      	ldr	r3, [r4, #24]
 8005e88:	429f      	cmp	r7, r3
 8005e8a:	db0f      	blt.n	8005eac <_fwrite_r+0x70>
 8005e8c:	290a      	cmp	r1, #10
 8005e8e:	d00d      	beq.n	8005eac <_fwrite_r+0x70>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	6022      	str	r2, [r4, #0]
 8005e96:	7019      	strb	r1, [r3, #0]
 8005e98:	3501      	adds	r5, #1
 8005e9a:	e7eb      	b.n	8005e74 <_fwrite_r+0x38>
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f000 f91c 	bl	80060dc <__swsetup_r>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d0e4      	beq.n	8005e72 <_fwrite_r+0x36>
 8005ea8:	2500      	movs	r5, #0
 8005eaa:	e005      	b.n	8005eb8 <_fwrite_r+0x7c>
 8005eac:	4622      	mov	r2, r4
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f000 f8d7 	bl	8006062 <__swbuf_r>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d1ef      	bne.n	8005e98 <_fwrite_r+0x5c>
 8005eb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eba:	07da      	lsls	r2, r3, #31
 8005ebc:	d405      	bmi.n	8005eca <_fwrite_r+0x8e>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	059b      	lsls	r3, r3, #22
 8005ec2:	d402      	bmi.n	8005eca <_fwrite_r+0x8e>
 8005ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ec6:	f000 fa9e 	bl	8006406 <__retarget_lock_release_recursive>
 8005eca:	fbb5 f0f8 	udiv	r0, r5, r8
 8005ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005ed4 <fwrite>:
 8005ed4:	b507      	push	{r0, r1, r2, lr}
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	460a      	mov	r2, r1
 8005edc:	4601      	mov	r1, r0
 8005ede:	4803      	ldr	r0, [pc, #12]	; (8005eec <fwrite+0x18>)
 8005ee0:	6800      	ldr	r0, [r0, #0]
 8005ee2:	f7ff ffab 	bl	8005e3c <_fwrite_r>
 8005ee6:	b003      	add	sp, #12
 8005ee8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005eec:	20000064 	.word	0x20000064

08005ef0 <iprintf>:
 8005ef0:	b40f      	push	{r0, r1, r2, r3}
 8005ef2:	b507      	push	{r0, r1, r2, lr}
 8005ef4:	4906      	ldr	r1, [pc, #24]	; (8005f10 <iprintf+0x20>)
 8005ef6:	ab04      	add	r3, sp, #16
 8005ef8:	6808      	ldr	r0, [r1, #0]
 8005efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005efe:	6881      	ldr	r1, [r0, #8]
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	f000 faf7 	bl	80064f4 <_vfiprintf_r>
 8005f06:	b003      	add	sp, #12
 8005f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f0c:	b004      	add	sp, #16
 8005f0e:	4770      	bx	lr
 8005f10:	20000064 	.word	0x20000064

08005f14 <putchar>:
 8005f14:	4b02      	ldr	r3, [pc, #8]	; (8005f20 <putchar+0xc>)
 8005f16:	4601      	mov	r1, r0
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	6882      	ldr	r2, [r0, #8]
 8005f1c:	f000 beda 	b.w	8006cd4 <_putc_r>
 8005f20:	20000064 	.word	0x20000064

08005f24 <_puts_r>:
 8005f24:	6a03      	ldr	r3, [r0, #32]
 8005f26:	b570      	push	{r4, r5, r6, lr}
 8005f28:	6884      	ldr	r4, [r0, #8]
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	460e      	mov	r6, r1
 8005f2e:	b90b      	cbnz	r3, 8005f34 <_puts_r+0x10>
 8005f30:	f7ff fef0 	bl	8005d14 <__sinit>
 8005f34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f36:	07db      	lsls	r3, r3, #31
 8005f38:	d405      	bmi.n	8005f46 <_puts_r+0x22>
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	0598      	lsls	r0, r3, #22
 8005f3e:	d402      	bmi.n	8005f46 <_puts_r+0x22>
 8005f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f42:	f000 fa5f 	bl	8006404 <__retarget_lock_acquire_recursive>
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	0719      	lsls	r1, r3, #28
 8005f4a:	d513      	bpl.n	8005f74 <_puts_r+0x50>
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	b18b      	cbz	r3, 8005f74 <_puts_r+0x50>
 8005f50:	3e01      	subs	r6, #1
 8005f52:	68a3      	ldr	r3, [r4, #8]
 8005f54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	60a3      	str	r3, [r4, #8]
 8005f5c:	b9e9      	cbnz	r1, 8005f9a <_puts_r+0x76>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	da2e      	bge.n	8005fc0 <_puts_r+0x9c>
 8005f62:	4622      	mov	r2, r4
 8005f64:	210a      	movs	r1, #10
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 f87b 	bl	8006062 <__swbuf_r>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d007      	beq.n	8005f80 <_puts_r+0x5c>
 8005f70:	250a      	movs	r5, #10
 8005f72:	e007      	b.n	8005f84 <_puts_r+0x60>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 f8b0 	bl	80060dc <__swsetup_r>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d0e7      	beq.n	8005f50 <_puts_r+0x2c>
 8005f80:	f04f 35ff 	mov.w	r5, #4294967295
 8005f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f86:	07da      	lsls	r2, r3, #31
 8005f88:	d405      	bmi.n	8005f96 <_puts_r+0x72>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	059b      	lsls	r3, r3, #22
 8005f8e:	d402      	bmi.n	8005f96 <_puts_r+0x72>
 8005f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f92:	f000 fa38 	bl	8006406 <__retarget_lock_release_recursive>
 8005f96:	4628      	mov	r0, r5
 8005f98:	bd70      	pop	{r4, r5, r6, pc}
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da04      	bge.n	8005fa8 <_puts_r+0x84>
 8005f9e:	69a2      	ldr	r2, [r4, #24]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	dc06      	bgt.n	8005fb2 <_puts_r+0x8e>
 8005fa4:	290a      	cmp	r1, #10
 8005fa6:	d004      	beq.n	8005fb2 <_puts_r+0x8e>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	6022      	str	r2, [r4, #0]
 8005fae:	7019      	strb	r1, [r3, #0]
 8005fb0:	e7cf      	b.n	8005f52 <_puts_r+0x2e>
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	f000 f854 	bl	8006062 <__swbuf_r>
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d1c9      	bne.n	8005f52 <_puts_r+0x2e>
 8005fbe:	e7df      	b.n	8005f80 <_puts_r+0x5c>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	250a      	movs	r5, #10
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	6022      	str	r2, [r4, #0]
 8005fc8:	701d      	strb	r5, [r3, #0]
 8005fca:	e7db      	b.n	8005f84 <_puts_r+0x60>

08005fcc <puts>:
 8005fcc:	4b02      	ldr	r3, [pc, #8]	; (8005fd8 <puts+0xc>)
 8005fce:	4601      	mov	r1, r0
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	f7ff bfa7 	b.w	8005f24 <_puts_r>
 8005fd6:	bf00      	nop
 8005fd8:	20000064 	.word	0x20000064

08005fdc <__sread>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	460c      	mov	r4, r1
 8005fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe4:	f000 f9ae 	bl	8006344 <_read_r>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	bfab      	itete	ge
 8005fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fee:	89a3      	ldrhlt	r3, [r4, #12]
 8005ff0:	181b      	addge	r3, r3, r0
 8005ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ff6:	bfac      	ite	ge
 8005ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ffa:	81a3      	strhlt	r3, [r4, #12]
 8005ffc:	bd10      	pop	{r4, pc}

08005ffe <__swrite>:
 8005ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006002:	461f      	mov	r7, r3
 8006004:	898b      	ldrh	r3, [r1, #12]
 8006006:	05db      	lsls	r3, r3, #23
 8006008:	4605      	mov	r5, r0
 800600a:	460c      	mov	r4, r1
 800600c:	4616      	mov	r6, r2
 800600e:	d505      	bpl.n	800601c <__swrite+0x1e>
 8006010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006014:	2302      	movs	r3, #2
 8006016:	2200      	movs	r2, #0
 8006018:	f000 f970 	bl	80062fc <_lseek_r>
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	4632      	mov	r2, r6
 800602a:	463b      	mov	r3, r7
 800602c:	4628      	mov	r0, r5
 800602e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006032:	f000 b9a9 	b.w	8006388 <_write_r>

08006036 <__sseek>:
 8006036:	b510      	push	{r4, lr}
 8006038:	460c      	mov	r4, r1
 800603a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603e:	f000 f95d 	bl	80062fc <_lseek_r>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	bf15      	itete	ne
 8006048:	6560      	strne	r0, [r4, #84]	; 0x54
 800604a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800604e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006052:	81a3      	strheq	r3, [r4, #12]
 8006054:	bf18      	it	ne
 8006056:	81a3      	strhne	r3, [r4, #12]
 8006058:	bd10      	pop	{r4, pc}

0800605a <__sclose>:
 800605a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605e:	f000 b93d 	b.w	80062dc <_close_r>

08006062 <__swbuf_r>:
 8006062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006064:	460e      	mov	r6, r1
 8006066:	4614      	mov	r4, r2
 8006068:	4605      	mov	r5, r0
 800606a:	b118      	cbz	r0, 8006074 <__swbuf_r+0x12>
 800606c:	6a03      	ldr	r3, [r0, #32]
 800606e:	b90b      	cbnz	r3, 8006074 <__swbuf_r+0x12>
 8006070:	f7ff fe50 	bl	8005d14 <__sinit>
 8006074:	69a3      	ldr	r3, [r4, #24]
 8006076:	60a3      	str	r3, [r4, #8]
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	071a      	lsls	r2, r3, #28
 800607c:	d525      	bpl.n	80060ca <__swbuf_r+0x68>
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	b31b      	cbz	r3, 80060ca <__swbuf_r+0x68>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	6922      	ldr	r2, [r4, #16]
 8006086:	1a98      	subs	r0, r3, r2
 8006088:	6963      	ldr	r3, [r4, #20]
 800608a:	b2f6      	uxtb	r6, r6
 800608c:	4283      	cmp	r3, r0
 800608e:	4637      	mov	r7, r6
 8006090:	dc04      	bgt.n	800609c <__swbuf_r+0x3a>
 8006092:	4621      	mov	r1, r4
 8006094:	4628      	mov	r0, r5
 8006096:	f000 fd5d 	bl	8006b54 <_fflush_r>
 800609a:	b9e0      	cbnz	r0, 80060d6 <__swbuf_r+0x74>
 800609c:	68a3      	ldr	r3, [r4, #8]
 800609e:	3b01      	subs	r3, #1
 80060a0:	60a3      	str	r3, [r4, #8]
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	6022      	str	r2, [r4, #0]
 80060a8:	701e      	strb	r6, [r3, #0]
 80060aa:	6962      	ldr	r2, [r4, #20]
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d004      	beq.n	80060bc <__swbuf_r+0x5a>
 80060b2:	89a3      	ldrh	r3, [r4, #12]
 80060b4:	07db      	lsls	r3, r3, #31
 80060b6:	d506      	bpl.n	80060c6 <__swbuf_r+0x64>
 80060b8:	2e0a      	cmp	r6, #10
 80060ba:	d104      	bne.n	80060c6 <__swbuf_r+0x64>
 80060bc:	4621      	mov	r1, r4
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 fd48 	bl	8006b54 <_fflush_r>
 80060c4:	b938      	cbnz	r0, 80060d6 <__swbuf_r+0x74>
 80060c6:	4638      	mov	r0, r7
 80060c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ca:	4621      	mov	r1, r4
 80060cc:	4628      	mov	r0, r5
 80060ce:	f000 f805 	bl	80060dc <__swsetup_r>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d0d5      	beq.n	8006082 <__swbuf_r+0x20>
 80060d6:	f04f 37ff 	mov.w	r7, #4294967295
 80060da:	e7f4      	b.n	80060c6 <__swbuf_r+0x64>

080060dc <__swsetup_r>:
 80060dc:	b538      	push	{r3, r4, r5, lr}
 80060de:	4b2a      	ldr	r3, [pc, #168]	; (8006188 <__swsetup_r+0xac>)
 80060e0:	4605      	mov	r5, r0
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	460c      	mov	r4, r1
 80060e6:	b118      	cbz	r0, 80060f0 <__swsetup_r+0x14>
 80060e8:	6a03      	ldr	r3, [r0, #32]
 80060ea:	b90b      	cbnz	r3, 80060f0 <__swsetup_r+0x14>
 80060ec:	f7ff fe12 	bl	8005d14 <__sinit>
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060f6:	0718      	lsls	r0, r3, #28
 80060f8:	d422      	bmi.n	8006140 <__swsetup_r+0x64>
 80060fa:	06d9      	lsls	r1, r3, #27
 80060fc:	d407      	bmi.n	800610e <__swsetup_r+0x32>
 80060fe:	2309      	movs	r3, #9
 8006100:	602b      	str	r3, [r5, #0]
 8006102:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006106:	81a3      	strh	r3, [r4, #12]
 8006108:	f04f 30ff 	mov.w	r0, #4294967295
 800610c:	e034      	b.n	8006178 <__swsetup_r+0x9c>
 800610e:	0758      	lsls	r0, r3, #29
 8006110:	d512      	bpl.n	8006138 <__swsetup_r+0x5c>
 8006112:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006114:	b141      	cbz	r1, 8006128 <__swsetup_r+0x4c>
 8006116:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800611a:	4299      	cmp	r1, r3
 800611c:	d002      	beq.n	8006124 <__swsetup_r+0x48>
 800611e:	4628      	mov	r0, r5
 8006120:	f000 f972 	bl	8006408 <_free_r>
 8006124:	2300      	movs	r3, #0
 8006126:	6363      	str	r3, [r4, #52]	; 0x34
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800612e:	81a3      	strh	r3, [r4, #12]
 8006130:	2300      	movs	r3, #0
 8006132:	6063      	str	r3, [r4, #4]
 8006134:	6923      	ldr	r3, [r4, #16]
 8006136:	6023      	str	r3, [r4, #0]
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	f043 0308 	orr.w	r3, r3, #8
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	6923      	ldr	r3, [r4, #16]
 8006142:	b94b      	cbnz	r3, 8006158 <__swsetup_r+0x7c>
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800614a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800614e:	d003      	beq.n	8006158 <__swsetup_r+0x7c>
 8006150:	4621      	mov	r1, r4
 8006152:	4628      	mov	r0, r5
 8006154:	f000 fd82 	bl	8006c5c <__smakebuf_r>
 8006158:	89a0      	ldrh	r0, [r4, #12]
 800615a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800615e:	f010 0301 	ands.w	r3, r0, #1
 8006162:	d00a      	beq.n	800617a <__swsetup_r+0x9e>
 8006164:	2300      	movs	r3, #0
 8006166:	60a3      	str	r3, [r4, #8]
 8006168:	6963      	ldr	r3, [r4, #20]
 800616a:	425b      	negs	r3, r3
 800616c:	61a3      	str	r3, [r4, #24]
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	b943      	cbnz	r3, 8006184 <__swsetup_r+0xa8>
 8006172:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006176:	d1c4      	bne.n	8006102 <__swsetup_r+0x26>
 8006178:	bd38      	pop	{r3, r4, r5, pc}
 800617a:	0781      	lsls	r1, r0, #30
 800617c:	bf58      	it	pl
 800617e:	6963      	ldrpl	r3, [r4, #20]
 8006180:	60a3      	str	r3, [r4, #8]
 8006182:	e7f4      	b.n	800616e <__swsetup_r+0x92>
 8006184:	2000      	movs	r0, #0
 8006186:	e7f7      	b.n	8006178 <__swsetup_r+0x9c>
 8006188:	20000064 	.word	0x20000064

0800618c <_fseeko_r>:
 800618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006190:	460c      	mov	r4, r1
 8006192:	4617      	mov	r7, r2
 8006194:	461d      	mov	r5, r3
 8006196:	4606      	mov	r6, r0
 8006198:	b118      	cbz	r0, 80061a2 <_fseeko_r+0x16>
 800619a:	6a03      	ldr	r3, [r0, #32]
 800619c:	b90b      	cbnz	r3, 80061a2 <_fseeko_r+0x16>
 800619e:	f7ff fdb9 	bl	8005d14 <__sinit>
 80061a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061a4:	07d9      	lsls	r1, r3, #31
 80061a6:	d405      	bmi.n	80061b4 <_fseeko_r+0x28>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	059a      	lsls	r2, r3, #22
 80061ac:	d402      	bmi.n	80061b4 <_fseeko_r+0x28>
 80061ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061b0:	f000 f928 	bl	8006404 <__retarget_lock_acquire_recursive>
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80061ba:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80061be:	d103      	bne.n	80061c8 <_fseeko_r+0x3c>
 80061c0:	4621      	mov	r1, r4
 80061c2:	4630      	mov	r0, r6
 80061c4:	f000 fcc6 	bl	8006b54 <_fflush_r>
 80061c8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80061cc:	f1b8 0f00 	cmp.w	r8, #0
 80061d0:	d109      	bne.n	80061e6 <_fseeko_r+0x5a>
 80061d2:	231d      	movs	r3, #29
 80061d4:	6033      	str	r3, [r6, #0]
 80061d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061d8:	07d9      	lsls	r1, r3, #31
 80061da:	d56e      	bpl.n	80062ba <_fseeko_r+0x12e>
 80061dc:	f04f 35ff 	mov.w	r5, #4294967295
 80061e0:	4628      	mov	r0, r5
 80061e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e6:	2d01      	cmp	r5, #1
 80061e8:	d036      	beq.n	8006258 <_fseeko_r+0xcc>
 80061ea:	f035 0302 	bics.w	r3, r5, #2
 80061ee:	d162      	bne.n	80062b6 <_fseeko_r+0x12a>
 80061f0:	6923      	ldr	r3, [r4, #16]
 80061f2:	b91b      	cbnz	r3, 80061fc <_fseeko_r+0x70>
 80061f4:	4621      	mov	r1, r4
 80061f6:	4630      	mov	r0, r6
 80061f8:	f000 fd30 	bl	8006c5c <__smakebuf_r>
 80061fc:	4621      	mov	r1, r4
 80061fe:	4630      	mov	r0, r6
 8006200:	f000 fca8 	bl	8006b54 <_fflush_r>
 8006204:	2800      	cmp	r0, #0
 8006206:	d1e6      	bne.n	80061d6 <_fseeko_r+0x4a>
 8006208:	6a21      	ldr	r1, [r4, #32]
 800620a:	462b      	mov	r3, r5
 800620c:	463a      	mov	r2, r7
 800620e:	4630      	mov	r0, r6
 8006210:	47c0      	blx	r8
 8006212:	3001      	adds	r0, #1
 8006214:	d0df      	beq.n	80061d6 <_fseeko_r+0x4a>
 8006216:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006218:	b141      	cbz	r1, 800622c <_fseeko_r+0xa0>
 800621a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800621e:	4299      	cmp	r1, r3
 8006220:	d002      	beq.n	8006228 <_fseeko_r+0x9c>
 8006222:	4630      	mov	r0, r6
 8006224:	f000 f8f0 	bl	8006408 <_free_r>
 8006228:	2300      	movs	r3, #0
 800622a:	6363      	str	r3, [r4, #52]	; 0x34
 800622c:	6923      	ldr	r3, [r4, #16]
 800622e:	6023      	str	r3, [r4, #0]
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	2600      	movs	r6, #0
 8006234:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8006238:	6066      	str	r6, [r4, #4]
 800623a:	81a3      	strh	r3, [r4, #12]
 800623c:	2208      	movs	r2, #8
 800623e:	4631      	mov	r1, r6
 8006240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006244:	f000 f842 	bl	80062cc <memset>
 8006248:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800624a:	f015 0501 	ands.w	r5, r5, #1
 800624e:	d13b      	bne.n	80062c8 <_fseeko_r+0x13c>
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	059b      	lsls	r3, r3, #22
 8006254:	d4c4      	bmi.n	80061e0 <_fseeko_r+0x54>
 8006256:	e021      	b.n	800629c <_fseeko_r+0x110>
 8006258:	4621      	mov	r1, r4
 800625a:	4630      	mov	r0, r6
 800625c:	f000 fc7a 	bl	8006b54 <_fflush_r>
 8006260:	89a2      	ldrh	r2, [r4, #12]
 8006262:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006266:	d00c      	beq.n	8006282 <_fseeko_r+0xf6>
 8006268:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800626a:	89a3      	ldrh	r3, [r4, #12]
 800626c:	075a      	lsls	r2, r3, #29
 800626e:	d519      	bpl.n	80062a4 <_fseeko_r+0x118>
 8006270:	6863      	ldr	r3, [r4, #4]
 8006272:	1aed      	subs	r5, r5, r3
 8006274:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006276:	b10b      	cbz	r3, 800627c <_fseeko_r+0xf0>
 8006278:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800627a:	1aed      	subs	r5, r5, r3
 800627c:	442f      	add	r7, r5
 800627e:	2500      	movs	r5, #0
 8006280:	e7b6      	b.n	80061f0 <_fseeko_r+0x64>
 8006282:	462b      	mov	r3, r5
 8006284:	6a21      	ldr	r1, [r4, #32]
 8006286:	4630      	mov	r0, r6
 8006288:	47c0      	blx	r8
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	4605      	mov	r5, r0
 800628e:	d1ec      	bne.n	800626a <_fseeko_r+0xde>
 8006290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006292:	07d8      	lsls	r0, r3, #31
 8006294:	d4a2      	bmi.n	80061dc <_fseeko_r+0x50>
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	0599      	lsls	r1, r3, #22
 800629a:	d49f      	bmi.n	80061dc <_fseeko_r+0x50>
 800629c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800629e:	f000 f8b2 	bl	8006406 <__retarget_lock_release_recursive>
 80062a2:	e79d      	b.n	80061e0 <_fseeko_r+0x54>
 80062a4:	0718      	lsls	r0, r3, #28
 80062a6:	d5e9      	bpl.n	800627c <_fseeko_r+0xf0>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0e6      	beq.n	800627c <_fseeko_r+0xf0>
 80062ae:	6922      	ldr	r2, [r4, #16]
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	441d      	add	r5, r3
 80062b4:	e7e2      	b.n	800627c <_fseeko_r+0xf0>
 80062b6:	2316      	movs	r3, #22
 80062b8:	e78c      	b.n	80061d4 <_fseeko_r+0x48>
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	059a      	lsls	r2, r3, #22
 80062be:	d48d      	bmi.n	80061dc <_fseeko_r+0x50>
 80062c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062c2:	f000 f8a0 	bl	8006406 <__retarget_lock_release_recursive>
 80062c6:	e789      	b.n	80061dc <_fseeko_r+0x50>
 80062c8:	4635      	mov	r5, r6
 80062ca:	e789      	b.n	80061e0 <_fseeko_r+0x54>

080062cc <memset>:
 80062cc:	4402      	add	r2, r0
 80062ce:	4603      	mov	r3, r0
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d100      	bne.n	80062d6 <memset+0xa>
 80062d4:	4770      	bx	lr
 80062d6:	f803 1b01 	strb.w	r1, [r3], #1
 80062da:	e7f9      	b.n	80062d0 <memset+0x4>

080062dc <_close_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4d06      	ldr	r5, [pc, #24]	; (80062f8 <_close_r+0x1c>)
 80062e0:	2300      	movs	r3, #0
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	602b      	str	r3, [r5, #0]
 80062e8:	f7fb f89d 	bl	8001426 <_close>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_close_r+0x1a>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_close_r+0x1a>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	20000314 	.word	0x20000314

080062fc <_lseek_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d07      	ldr	r5, [pc, #28]	; (800631c <_lseek_r+0x20>)
 8006300:	4604      	mov	r4, r0
 8006302:	4608      	mov	r0, r1
 8006304:	4611      	mov	r1, r2
 8006306:	2200      	movs	r2, #0
 8006308:	602a      	str	r2, [r5, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	f7fb f8b2 	bl	8001474 <_lseek>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	d102      	bne.n	800631a <_lseek_r+0x1e>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	b103      	cbz	r3, 800631a <_lseek_r+0x1e>
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	bd38      	pop	{r3, r4, r5, pc}
 800631c:	20000314 	.word	0x20000314

08006320 <_open_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4d07      	ldr	r5, [pc, #28]	; (8006340 <_open_r+0x20>)
 8006324:	4604      	mov	r4, r0
 8006326:	4608      	mov	r0, r1
 8006328:	4611      	mov	r1, r2
 800632a:	2200      	movs	r2, #0
 800632c:	602a      	str	r2, [r5, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	f7fb f8ad 	bl	800148e <_open>
 8006334:	1c43      	adds	r3, r0, #1
 8006336:	d102      	bne.n	800633e <_open_r+0x1e>
 8006338:	682b      	ldr	r3, [r5, #0]
 800633a:	b103      	cbz	r3, 800633e <_open_r+0x1e>
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	bd38      	pop	{r3, r4, r5, pc}
 8006340:	20000314 	.word	0x20000314

08006344 <_read_r>:
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4d07      	ldr	r5, [pc, #28]	; (8006364 <_read_r+0x20>)
 8006348:	4604      	mov	r4, r0
 800634a:	4608      	mov	r0, r1
 800634c:	4611      	mov	r1, r2
 800634e:	2200      	movs	r2, #0
 8006350:	602a      	str	r2, [r5, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	f7fb f82e 	bl	80013b4 <_read>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d102      	bne.n	8006362 <_read_r+0x1e>
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	b103      	cbz	r3, 8006362 <_read_r+0x1e>
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	20000314 	.word	0x20000314

08006368 <_sbrk_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4d06      	ldr	r5, [pc, #24]	; (8006384 <_sbrk_r+0x1c>)
 800636c:	2300      	movs	r3, #0
 800636e:	4604      	mov	r4, r0
 8006370:	4608      	mov	r0, r1
 8006372:	602b      	str	r3, [r5, #0]
 8006374:	f7fb f89a 	bl	80014ac <_sbrk>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d102      	bne.n	8006382 <_sbrk_r+0x1a>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	b103      	cbz	r3, 8006382 <_sbrk_r+0x1a>
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	20000314 	.word	0x20000314

08006388 <_write_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4d07      	ldr	r5, [pc, #28]	; (80063a8 <_write_r+0x20>)
 800638c:	4604      	mov	r4, r0
 800638e:	4608      	mov	r0, r1
 8006390:	4611      	mov	r1, r2
 8006392:	2200      	movs	r2, #0
 8006394:	602a      	str	r2, [r5, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	f7fb f829 	bl	80013ee <_write>
 800639c:	1c43      	adds	r3, r0, #1
 800639e:	d102      	bne.n	80063a6 <_write_r+0x1e>
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	b103      	cbz	r3, 80063a6 <_write_r+0x1e>
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	bd38      	pop	{r3, r4, r5, pc}
 80063a8:	20000314 	.word	0x20000314

080063ac <__errno>:
 80063ac:	4b01      	ldr	r3, [pc, #4]	; (80063b4 <__errno+0x8>)
 80063ae:	6818      	ldr	r0, [r3, #0]
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20000064 	.word	0x20000064

080063b8 <__libc_init_array>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	4d0d      	ldr	r5, [pc, #52]	; (80063f0 <__libc_init_array+0x38>)
 80063bc:	4c0d      	ldr	r4, [pc, #52]	; (80063f4 <__libc_init_array+0x3c>)
 80063be:	1b64      	subs	r4, r4, r5
 80063c0:	10a4      	asrs	r4, r4, #2
 80063c2:	2600      	movs	r6, #0
 80063c4:	42a6      	cmp	r6, r4
 80063c6:	d109      	bne.n	80063dc <__libc_init_array+0x24>
 80063c8:	4d0b      	ldr	r5, [pc, #44]	; (80063f8 <__libc_init_array+0x40>)
 80063ca:	4c0c      	ldr	r4, [pc, #48]	; (80063fc <__libc_init_array+0x44>)
 80063cc:	f000 fcd8 	bl	8006d80 <_init>
 80063d0:	1b64      	subs	r4, r4, r5
 80063d2:	10a4      	asrs	r4, r4, #2
 80063d4:	2600      	movs	r6, #0
 80063d6:	42a6      	cmp	r6, r4
 80063d8:	d105      	bne.n	80063e6 <__libc_init_array+0x2e>
 80063da:	bd70      	pop	{r4, r5, r6, pc}
 80063dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e0:	4798      	blx	r3
 80063e2:	3601      	adds	r6, #1
 80063e4:	e7ee      	b.n	80063c4 <__libc_init_array+0xc>
 80063e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ea:	4798      	blx	r3
 80063ec:	3601      	adds	r6, #1
 80063ee:	e7f2      	b.n	80063d6 <__libc_init_array+0x1e>
 80063f0:	080074d4 	.word	0x080074d4
 80063f4:	080074d4 	.word	0x080074d4
 80063f8:	080074d4 	.word	0x080074d4
 80063fc:	080074d8 	.word	0x080074d8

08006400 <__retarget_lock_init_recursive>:
 8006400:	4770      	bx	lr

08006402 <__retarget_lock_close_recursive>:
 8006402:	4770      	bx	lr

08006404 <__retarget_lock_acquire_recursive>:
 8006404:	4770      	bx	lr

08006406 <__retarget_lock_release_recursive>:
 8006406:	4770      	bx	lr

08006408 <_free_r>:
 8006408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800640a:	2900      	cmp	r1, #0
 800640c:	d044      	beq.n	8006498 <_free_r+0x90>
 800640e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006412:	9001      	str	r0, [sp, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f1a1 0404 	sub.w	r4, r1, #4
 800641a:	bfb8      	it	lt
 800641c:	18e4      	addlt	r4, r4, r3
 800641e:	f7ff fb8d 	bl	8005b3c <__malloc_lock>
 8006422:	4a1e      	ldr	r2, [pc, #120]	; (800649c <_free_r+0x94>)
 8006424:	9801      	ldr	r0, [sp, #4]
 8006426:	6813      	ldr	r3, [r2, #0]
 8006428:	b933      	cbnz	r3, 8006438 <_free_r+0x30>
 800642a:	6063      	str	r3, [r4, #4]
 800642c:	6014      	str	r4, [r2, #0]
 800642e:	b003      	add	sp, #12
 8006430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006434:	f7ff bb88 	b.w	8005b48 <__malloc_unlock>
 8006438:	42a3      	cmp	r3, r4
 800643a:	d908      	bls.n	800644e <_free_r+0x46>
 800643c:	6825      	ldr	r5, [r4, #0]
 800643e:	1961      	adds	r1, r4, r5
 8006440:	428b      	cmp	r3, r1
 8006442:	bf01      	itttt	eq
 8006444:	6819      	ldreq	r1, [r3, #0]
 8006446:	685b      	ldreq	r3, [r3, #4]
 8006448:	1949      	addeq	r1, r1, r5
 800644a:	6021      	streq	r1, [r4, #0]
 800644c:	e7ed      	b.n	800642a <_free_r+0x22>
 800644e:	461a      	mov	r2, r3
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	b10b      	cbz	r3, 8006458 <_free_r+0x50>
 8006454:	42a3      	cmp	r3, r4
 8006456:	d9fa      	bls.n	800644e <_free_r+0x46>
 8006458:	6811      	ldr	r1, [r2, #0]
 800645a:	1855      	adds	r5, r2, r1
 800645c:	42a5      	cmp	r5, r4
 800645e:	d10b      	bne.n	8006478 <_free_r+0x70>
 8006460:	6824      	ldr	r4, [r4, #0]
 8006462:	4421      	add	r1, r4
 8006464:	1854      	adds	r4, r2, r1
 8006466:	42a3      	cmp	r3, r4
 8006468:	6011      	str	r1, [r2, #0]
 800646a:	d1e0      	bne.n	800642e <_free_r+0x26>
 800646c:	681c      	ldr	r4, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	6053      	str	r3, [r2, #4]
 8006472:	440c      	add	r4, r1
 8006474:	6014      	str	r4, [r2, #0]
 8006476:	e7da      	b.n	800642e <_free_r+0x26>
 8006478:	d902      	bls.n	8006480 <_free_r+0x78>
 800647a:	230c      	movs	r3, #12
 800647c:	6003      	str	r3, [r0, #0]
 800647e:	e7d6      	b.n	800642e <_free_r+0x26>
 8006480:	6825      	ldr	r5, [r4, #0]
 8006482:	1961      	adds	r1, r4, r5
 8006484:	428b      	cmp	r3, r1
 8006486:	bf04      	itt	eq
 8006488:	6819      	ldreq	r1, [r3, #0]
 800648a:	685b      	ldreq	r3, [r3, #4]
 800648c:	6063      	str	r3, [r4, #4]
 800648e:	bf04      	itt	eq
 8006490:	1949      	addeq	r1, r1, r5
 8006492:	6021      	streq	r1, [r4, #0]
 8006494:	6054      	str	r4, [r2, #4]
 8006496:	e7ca      	b.n	800642e <_free_r+0x26>
 8006498:	b003      	add	sp, #12
 800649a:	bd30      	pop	{r4, r5, pc}
 800649c:	200001d0 	.word	0x200001d0

080064a0 <__sfputc_r>:
 80064a0:	6893      	ldr	r3, [r2, #8]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	b410      	push	{r4}
 80064a8:	6093      	str	r3, [r2, #8]
 80064aa:	da08      	bge.n	80064be <__sfputc_r+0x1e>
 80064ac:	6994      	ldr	r4, [r2, #24]
 80064ae:	42a3      	cmp	r3, r4
 80064b0:	db01      	blt.n	80064b6 <__sfputc_r+0x16>
 80064b2:	290a      	cmp	r1, #10
 80064b4:	d103      	bne.n	80064be <__sfputc_r+0x1e>
 80064b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ba:	f7ff bdd2 	b.w	8006062 <__swbuf_r>
 80064be:	6813      	ldr	r3, [r2, #0]
 80064c0:	1c58      	adds	r0, r3, #1
 80064c2:	6010      	str	r0, [r2, #0]
 80064c4:	7019      	strb	r1, [r3, #0]
 80064c6:	4608      	mov	r0, r1
 80064c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <__sfputs_r>:
 80064ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d0:	4606      	mov	r6, r0
 80064d2:	460f      	mov	r7, r1
 80064d4:	4614      	mov	r4, r2
 80064d6:	18d5      	adds	r5, r2, r3
 80064d8:	42ac      	cmp	r4, r5
 80064da:	d101      	bne.n	80064e0 <__sfputs_r+0x12>
 80064dc:	2000      	movs	r0, #0
 80064de:	e007      	b.n	80064f0 <__sfputs_r+0x22>
 80064e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e4:	463a      	mov	r2, r7
 80064e6:	4630      	mov	r0, r6
 80064e8:	f7ff ffda 	bl	80064a0 <__sfputc_r>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d1f3      	bne.n	80064d8 <__sfputs_r+0xa>
 80064f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064f4 <_vfiprintf_r>:
 80064f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f8:	460d      	mov	r5, r1
 80064fa:	b09d      	sub	sp, #116	; 0x74
 80064fc:	4614      	mov	r4, r2
 80064fe:	4698      	mov	r8, r3
 8006500:	4606      	mov	r6, r0
 8006502:	b118      	cbz	r0, 800650c <_vfiprintf_r+0x18>
 8006504:	6a03      	ldr	r3, [r0, #32]
 8006506:	b90b      	cbnz	r3, 800650c <_vfiprintf_r+0x18>
 8006508:	f7ff fc04 	bl	8005d14 <__sinit>
 800650c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800650e:	07d9      	lsls	r1, r3, #31
 8006510:	d405      	bmi.n	800651e <_vfiprintf_r+0x2a>
 8006512:	89ab      	ldrh	r3, [r5, #12]
 8006514:	059a      	lsls	r2, r3, #22
 8006516:	d402      	bmi.n	800651e <_vfiprintf_r+0x2a>
 8006518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800651a:	f7ff ff73 	bl	8006404 <__retarget_lock_acquire_recursive>
 800651e:	89ab      	ldrh	r3, [r5, #12]
 8006520:	071b      	lsls	r3, r3, #28
 8006522:	d501      	bpl.n	8006528 <_vfiprintf_r+0x34>
 8006524:	692b      	ldr	r3, [r5, #16]
 8006526:	b99b      	cbnz	r3, 8006550 <_vfiprintf_r+0x5c>
 8006528:	4629      	mov	r1, r5
 800652a:	4630      	mov	r0, r6
 800652c:	f7ff fdd6 	bl	80060dc <__swsetup_r>
 8006530:	b170      	cbz	r0, 8006550 <_vfiprintf_r+0x5c>
 8006532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006534:	07dc      	lsls	r4, r3, #31
 8006536:	d504      	bpl.n	8006542 <_vfiprintf_r+0x4e>
 8006538:	f04f 30ff 	mov.w	r0, #4294967295
 800653c:	b01d      	add	sp, #116	; 0x74
 800653e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006542:	89ab      	ldrh	r3, [r5, #12]
 8006544:	0598      	lsls	r0, r3, #22
 8006546:	d4f7      	bmi.n	8006538 <_vfiprintf_r+0x44>
 8006548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800654a:	f7ff ff5c 	bl	8006406 <__retarget_lock_release_recursive>
 800654e:	e7f3      	b.n	8006538 <_vfiprintf_r+0x44>
 8006550:	2300      	movs	r3, #0
 8006552:	9309      	str	r3, [sp, #36]	; 0x24
 8006554:	2320      	movs	r3, #32
 8006556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800655a:	f8cd 800c 	str.w	r8, [sp, #12]
 800655e:	2330      	movs	r3, #48	; 0x30
 8006560:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006714 <_vfiprintf_r+0x220>
 8006564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006568:	f04f 0901 	mov.w	r9, #1
 800656c:	4623      	mov	r3, r4
 800656e:	469a      	mov	sl, r3
 8006570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006574:	b10a      	cbz	r2, 800657a <_vfiprintf_r+0x86>
 8006576:	2a25      	cmp	r2, #37	; 0x25
 8006578:	d1f9      	bne.n	800656e <_vfiprintf_r+0x7a>
 800657a:	ebba 0b04 	subs.w	fp, sl, r4
 800657e:	d00b      	beq.n	8006598 <_vfiprintf_r+0xa4>
 8006580:	465b      	mov	r3, fp
 8006582:	4622      	mov	r2, r4
 8006584:	4629      	mov	r1, r5
 8006586:	4630      	mov	r0, r6
 8006588:	f7ff ffa1 	bl	80064ce <__sfputs_r>
 800658c:	3001      	adds	r0, #1
 800658e:	f000 80a9 	beq.w	80066e4 <_vfiprintf_r+0x1f0>
 8006592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006594:	445a      	add	r2, fp
 8006596:	9209      	str	r2, [sp, #36]	; 0x24
 8006598:	f89a 3000 	ldrb.w	r3, [sl]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 80a1 	beq.w	80066e4 <_vfiprintf_r+0x1f0>
 80065a2:	2300      	movs	r3, #0
 80065a4:	f04f 32ff 	mov.w	r2, #4294967295
 80065a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ac:	f10a 0a01 	add.w	sl, sl, #1
 80065b0:	9304      	str	r3, [sp, #16]
 80065b2:	9307      	str	r3, [sp, #28]
 80065b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065b8:	931a      	str	r3, [sp, #104]	; 0x68
 80065ba:	4654      	mov	r4, sl
 80065bc:	2205      	movs	r2, #5
 80065be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c2:	4854      	ldr	r0, [pc, #336]	; (8006714 <_vfiprintf_r+0x220>)
 80065c4:	f7f9 fe04 	bl	80001d0 <memchr>
 80065c8:	9a04      	ldr	r2, [sp, #16]
 80065ca:	b9d8      	cbnz	r0, 8006604 <_vfiprintf_r+0x110>
 80065cc:	06d1      	lsls	r1, r2, #27
 80065ce:	bf44      	itt	mi
 80065d0:	2320      	movmi	r3, #32
 80065d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065d6:	0713      	lsls	r3, r2, #28
 80065d8:	bf44      	itt	mi
 80065da:	232b      	movmi	r3, #43	; 0x2b
 80065dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065e0:	f89a 3000 	ldrb.w	r3, [sl]
 80065e4:	2b2a      	cmp	r3, #42	; 0x2a
 80065e6:	d015      	beq.n	8006614 <_vfiprintf_r+0x120>
 80065e8:	9a07      	ldr	r2, [sp, #28]
 80065ea:	4654      	mov	r4, sl
 80065ec:	2000      	movs	r0, #0
 80065ee:	f04f 0c0a 	mov.w	ip, #10
 80065f2:	4621      	mov	r1, r4
 80065f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065f8:	3b30      	subs	r3, #48	; 0x30
 80065fa:	2b09      	cmp	r3, #9
 80065fc:	d94d      	bls.n	800669a <_vfiprintf_r+0x1a6>
 80065fe:	b1b0      	cbz	r0, 800662e <_vfiprintf_r+0x13a>
 8006600:	9207      	str	r2, [sp, #28]
 8006602:	e014      	b.n	800662e <_vfiprintf_r+0x13a>
 8006604:	eba0 0308 	sub.w	r3, r0, r8
 8006608:	fa09 f303 	lsl.w	r3, r9, r3
 800660c:	4313      	orrs	r3, r2
 800660e:	9304      	str	r3, [sp, #16]
 8006610:	46a2      	mov	sl, r4
 8006612:	e7d2      	b.n	80065ba <_vfiprintf_r+0xc6>
 8006614:	9b03      	ldr	r3, [sp, #12]
 8006616:	1d19      	adds	r1, r3, #4
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	9103      	str	r1, [sp, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	bfbb      	ittet	lt
 8006620:	425b      	neglt	r3, r3
 8006622:	f042 0202 	orrlt.w	r2, r2, #2
 8006626:	9307      	strge	r3, [sp, #28]
 8006628:	9307      	strlt	r3, [sp, #28]
 800662a:	bfb8      	it	lt
 800662c:	9204      	strlt	r2, [sp, #16]
 800662e:	7823      	ldrb	r3, [r4, #0]
 8006630:	2b2e      	cmp	r3, #46	; 0x2e
 8006632:	d10c      	bne.n	800664e <_vfiprintf_r+0x15a>
 8006634:	7863      	ldrb	r3, [r4, #1]
 8006636:	2b2a      	cmp	r3, #42	; 0x2a
 8006638:	d134      	bne.n	80066a4 <_vfiprintf_r+0x1b0>
 800663a:	9b03      	ldr	r3, [sp, #12]
 800663c:	1d1a      	adds	r2, r3, #4
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	9203      	str	r2, [sp, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	bfb8      	it	lt
 8006646:	f04f 33ff 	movlt.w	r3, #4294967295
 800664a:	3402      	adds	r4, #2
 800664c:	9305      	str	r3, [sp, #20]
 800664e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006724 <_vfiprintf_r+0x230>
 8006652:	7821      	ldrb	r1, [r4, #0]
 8006654:	2203      	movs	r2, #3
 8006656:	4650      	mov	r0, sl
 8006658:	f7f9 fdba 	bl	80001d0 <memchr>
 800665c:	b138      	cbz	r0, 800666e <_vfiprintf_r+0x17a>
 800665e:	9b04      	ldr	r3, [sp, #16]
 8006660:	eba0 000a 	sub.w	r0, r0, sl
 8006664:	2240      	movs	r2, #64	; 0x40
 8006666:	4082      	lsls	r2, r0
 8006668:	4313      	orrs	r3, r2
 800666a:	3401      	adds	r4, #1
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006672:	4829      	ldr	r0, [pc, #164]	; (8006718 <_vfiprintf_r+0x224>)
 8006674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006678:	2206      	movs	r2, #6
 800667a:	f7f9 fda9 	bl	80001d0 <memchr>
 800667e:	2800      	cmp	r0, #0
 8006680:	d03f      	beq.n	8006702 <_vfiprintf_r+0x20e>
 8006682:	4b26      	ldr	r3, [pc, #152]	; (800671c <_vfiprintf_r+0x228>)
 8006684:	bb1b      	cbnz	r3, 80066ce <_vfiprintf_r+0x1da>
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	3307      	adds	r3, #7
 800668a:	f023 0307 	bic.w	r3, r3, #7
 800668e:	3308      	adds	r3, #8
 8006690:	9303      	str	r3, [sp, #12]
 8006692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006694:	443b      	add	r3, r7
 8006696:	9309      	str	r3, [sp, #36]	; 0x24
 8006698:	e768      	b.n	800656c <_vfiprintf_r+0x78>
 800669a:	fb0c 3202 	mla	r2, ip, r2, r3
 800669e:	460c      	mov	r4, r1
 80066a0:	2001      	movs	r0, #1
 80066a2:	e7a6      	b.n	80065f2 <_vfiprintf_r+0xfe>
 80066a4:	2300      	movs	r3, #0
 80066a6:	3401      	adds	r4, #1
 80066a8:	9305      	str	r3, [sp, #20]
 80066aa:	4619      	mov	r1, r3
 80066ac:	f04f 0c0a 	mov.w	ip, #10
 80066b0:	4620      	mov	r0, r4
 80066b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066b6:	3a30      	subs	r2, #48	; 0x30
 80066b8:	2a09      	cmp	r2, #9
 80066ba:	d903      	bls.n	80066c4 <_vfiprintf_r+0x1d0>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0c6      	beq.n	800664e <_vfiprintf_r+0x15a>
 80066c0:	9105      	str	r1, [sp, #20]
 80066c2:	e7c4      	b.n	800664e <_vfiprintf_r+0x15a>
 80066c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80066c8:	4604      	mov	r4, r0
 80066ca:	2301      	movs	r3, #1
 80066cc:	e7f0      	b.n	80066b0 <_vfiprintf_r+0x1bc>
 80066ce:	ab03      	add	r3, sp, #12
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	462a      	mov	r2, r5
 80066d4:	4b12      	ldr	r3, [pc, #72]	; (8006720 <_vfiprintf_r+0x22c>)
 80066d6:	a904      	add	r1, sp, #16
 80066d8:	4630      	mov	r0, r6
 80066da:	f3af 8000 	nop.w
 80066de:	4607      	mov	r7, r0
 80066e0:	1c78      	adds	r0, r7, #1
 80066e2:	d1d6      	bne.n	8006692 <_vfiprintf_r+0x19e>
 80066e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066e6:	07d9      	lsls	r1, r3, #31
 80066e8:	d405      	bmi.n	80066f6 <_vfiprintf_r+0x202>
 80066ea:	89ab      	ldrh	r3, [r5, #12]
 80066ec:	059a      	lsls	r2, r3, #22
 80066ee:	d402      	bmi.n	80066f6 <_vfiprintf_r+0x202>
 80066f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066f2:	f7ff fe88 	bl	8006406 <__retarget_lock_release_recursive>
 80066f6:	89ab      	ldrh	r3, [r5, #12]
 80066f8:	065b      	lsls	r3, r3, #25
 80066fa:	f53f af1d 	bmi.w	8006538 <_vfiprintf_r+0x44>
 80066fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006700:	e71c      	b.n	800653c <_vfiprintf_r+0x48>
 8006702:	ab03      	add	r3, sp, #12
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	462a      	mov	r2, r5
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <_vfiprintf_r+0x22c>)
 800670a:	a904      	add	r1, sp, #16
 800670c:	4630      	mov	r0, r6
 800670e:	f000 f879 	bl	8006804 <_printf_i>
 8006712:	e7e4      	b.n	80066de <_vfiprintf_r+0x1ea>
 8006714:	08007498 	.word	0x08007498
 8006718:	080074a2 	.word	0x080074a2
 800671c:	00000000 	.word	0x00000000
 8006720:	080064cf 	.word	0x080064cf
 8006724:	0800749e 	.word	0x0800749e

08006728 <_printf_common>:
 8006728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800672c:	4616      	mov	r6, r2
 800672e:	4699      	mov	r9, r3
 8006730:	688a      	ldr	r2, [r1, #8]
 8006732:	690b      	ldr	r3, [r1, #16]
 8006734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006738:	4293      	cmp	r3, r2
 800673a:	bfb8      	it	lt
 800673c:	4613      	movlt	r3, r2
 800673e:	6033      	str	r3, [r6, #0]
 8006740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006744:	4607      	mov	r7, r0
 8006746:	460c      	mov	r4, r1
 8006748:	b10a      	cbz	r2, 800674e <_printf_common+0x26>
 800674a:	3301      	adds	r3, #1
 800674c:	6033      	str	r3, [r6, #0]
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	0699      	lsls	r1, r3, #26
 8006752:	bf42      	ittt	mi
 8006754:	6833      	ldrmi	r3, [r6, #0]
 8006756:	3302      	addmi	r3, #2
 8006758:	6033      	strmi	r3, [r6, #0]
 800675a:	6825      	ldr	r5, [r4, #0]
 800675c:	f015 0506 	ands.w	r5, r5, #6
 8006760:	d106      	bne.n	8006770 <_printf_common+0x48>
 8006762:	f104 0a19 	add.w	sl, r4, #25
 8006766:	68e3      	ldr	r3, [r4, #12]
 8006768:	6832      	ldr	r2, [r6, #0]
 800676a:	1a9b      	subs	r3, r3, r2
 800676c:	42ab      	cmp	r3, r5
 800676e:	dc26      	bgt.n	80067be <_printf_common+0x96>
 8006770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006774:	1e13      	subs	r3, r2, #0
 8006776:	6822      	ldr	r2, [r4, #0]
 8006778:	bf18      	it	ne
 800677a:	2301      	movne	r3, #1
 800677c:	0692      	lsls	r2, r2, #26
 800677e:	d42b      	bmi.n	80067d8 <_printf_common+0xb0>
 8006780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006784:	4649      	mov	r1, r9
 8006786:	4638      	mov	r0, r7
 8006788:	47c0      	blx	r8
 800678a:	3001      	adds	r0, #1
 800678c:	d01e      	beq.n	80067cc <_printf_common+0xa4>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	6922      	ldr	r2, [r4, #16]
 8006792:	f003 0306 	and.w	r3, r3, #6
 8006796:	2b04      	cmp	r3, #4
 8006798:	bf02      	ittt	eq
 800679a:	68e5      	ldreq	r5, [r4, #12]
 800679c:	6833      	ldreq	r3, [r6, #0]
 800679e:	1aed      	subeq	r5, r5, r3
 80067a0:	68a3      	ldr	r3, [r4, #8]
 80067a2:	bf0c      	ite	eq
 80067a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067a8:	2500      	movne	r5, #0
 80067aa:	4293      	cmp	r3, r2
 80067ac:	bfc4      	itt	gt
 80067ae:	1a9b      	subgt	r3, r3, r2
 80067b0:	18ed      	addgt	r5, r5, r3
 80067b2:	2600      	movs	r6, #0
 80067b4:	341a      	adds	r4, #26
 80067b6:	42b5      	cmp	r5, r6
 80067b8:	d11a      	bne.n	80067f0 <_printf_common+0xc8>
 80067ba:	2000      	movs	r0, #0
 80067bc:	e008      	b.n	80067d0 <_printf_common+0xa8>
 80067be:	2301      	movs	r3, #1
 80067c0:	4652      	mov	r2, sl
 80067c2:	4649      	mov	r1, r9
 80067c4:	4638      	mov	r0, r7
 80067c6:	47c0      	blx	r8
 80067c8:	3001      	adds	r0, #1
 80067ca:	d103      	bne.n	80067d4 <_printf_common+0xac>
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d4:	3501      	adds	r5, #1
 80067d6:	e7c6      	b.n	8006766 <_printf_common+0x3e>
 80067d8:	18e1      	adds	r1, r4, r3
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	2030      	movs	r0, #48	; 0x30
 80067de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067e2:	4422      	add	r2, r4
 80067e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067ec:	3302      	adds	r3, #2
 80067ee:	e7c7      	b.n	8006780 <_printf_common+0x58>
 80067f0:	2301      	movs	r3, #1
 80067f2:	4622      	mov	r2, r4
 80067f4:	4649      	mov	r1, r9
 80067f6:	4638      	mov	r0, r7
 80067f8:	47c0      	blx	r8
 80067fa:	3001      	adds	r0, #1
 80067fc:	d0e6      	beq.n	80067cc <_printf_common+0xa4>
 80067fe:	3601      	adds	r6, #1
 8006800:	e7d9      	b.n	80067b6 <_printf_common+0x8e>
	...

08006804 <_printf_i>:
 8006804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006808:	7e0f      	ldrb	r7, [r1, #24]
 800680a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800680c:	2f78      	cmp	r7, #120	; 0x78
 800680e:	4691      	mov	r9, r2
 8006810:	4680      	mov	r8, r0
 8006812:	460c      	mov	r4, r1
 8006814:	469a      	mov	sl, r3
 8006816:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800681a:	d807      	bhi.n	800682c <_printf_i+0x28>
 800681c:	2f62      	cmp	r7, #98	; 0x62
 800681e:	d80a      	bhi.n	8006836 <_printf_i+0x32>
 8006820:	2f00      	cmp	r7, #0
 8006822:	f000 80d4 	beq.w	80069ce <_printf_i+0x1ca>
 8006826:	2f58      	cmp	r7, #88	; 0x58
 8006828:	f000 80c0 	beq.w	80069ac <_printf_i+0x1a8>
 800682c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006834:	e03a      	b.n	80068ac <_printf_i+0xa8>
 8006836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800683a:	2b15      	cmp	r3, #21
 800683c:	d8f6      	bhi.n	800682c <_printf_i+0x28>
 800683e:	a101      	add	r1, pc, #4	; (adr r1, 8006844 <_printf_i+0x40>)
 8006840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006844:	0800689d 	.word	0x0800689d
 8006848:	080068b1 	.word	0x080068b1
 800684c:	0800682d 	.word	0x0800682d
 8006850:	0800682d 	.word	0x0800682d
 8006854:	0800682d 	.word	0x0800682d
 8006858:	0800682d 	.word	0x0800682d
 800685c:	080068b1 	.word	0x080068b1
 8006860:	0800682d 	.word	0x0800682d
 8006864:	0800682d 	.word	0x0800682d
 8006868:	0800682d 	.word	0x0800682d
 800686c:	0800682d 	.word	0x0800682d
 8006870:	080069b5 	.word	0x080069b5
 8006874:	080068dd 	.word	0x080068dd
 8006878:	0800696f 	.word	0x0800696f
 800687c:	0800682d 	.word	0x0800682d
 8006880:	0800682d 	.word	0x0800682d
 8006884:	080069d7 	.word	0x080069d7
 8006888:	0800682d 	.word	0x0800682d
 800688c:	080068dd 	.word	0x080068dd
 8006890:	0800682d 	.word	0x0800682d
 8006894:	0800682d 	.word	0x0800682d
 8006898:	08006977 	.word	0x08006977
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	1d1a      	adds	r2, r3, #4
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	602a      	str	r2, [r5, #0]
 80068a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068ac:	2301      	movs	r3, #1
 80068ae:	e09f      	b.n	80069f0 <_printf_i+0x1ec>
 80068b0:	6820      	ldr	r0, [r4, #0]
 80068b2:	682b      	ldr	r3, [r5, #0]
 80068b4:	0607      	lsls	r7, r0, #24
 80068b6:	f103 0104 	add.w	r1, r3, #4
 80068ba:	6029      	str	r1, [r5, #0]
 80068bc:	d501      	bpl.n	80068c2 <_printf_i+0xbe>
 80068be:	681e      	ldr	r6, [r3, #0]
 80068c0:	e003      	b.n	80068ca <_printf_i+0xc6>
 80068c2:	0646      	lsls	r6, r0, #25
 80068c4:	d5fb      	bpl.n	80068be <_printf_i+0xba>
 80068c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80068ca:	2e00      	cmp	r6, #0
 80068cc:	da03      	bge.n	80068d6 <_printf_i+0xd2>
 80068ce:	232d      	movs	r3, #45	; 0x2d
 80068d0:	4276      	negs	r6, r6
 80068d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068d6:	485a      	ldr	r0, [pc, #360]	; (8006a40 <_printf_i+0x23c>)
 80068d8:	230a      	movs	r3, #10
 80068da:	e012      	b.n	8006902 <_printf_i+0xfe>
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	6820      	ldr	r0, [r4, #0]
 80068e0:	1d19      	adds	r1, r3, #4
 80068e2:	6029      	str	r1, [r5, #0]
 80068e4:	0605      	lsls	r5, r0, #24
 80068e6:	d501      	bpl.n	80068ec <_printf_i+0xe8>
 80068e8:	681e      	ldr	r6, [r3, #0]
 80068ea:	e002      	b.n	80068f2 <_printf_i+0xee>
 80068ec:	0641      	lsls	r1, r0, #25
 80068ee:	d5fb      	bpl.n	80068e8 <_printf_i+0xe4>
 80068f0:	881e      	ldrh	r6, [r3, #0]
 80068f2:	4853      	ldr	r0, [pc, #332]	; (8006a40 <_printf_i+0x23c>)
 80068f4:	2f6f      	cmp	r7, #111	; 0x6f
 80068f6:	bf0c      	ite	eq
 80068f8:	2308      	moveq	r3, #8
 80068fa:	230a      	movne	r3, #10
 80068fc:	2100      	movs	r1, #0
 80068fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006902:	6865      	ldr	r5, [r4, #4]
 8006904:	60a5      	str	r5, [r4, #8]
 8006906:	2d00      	cmp	r5, #0
 8006908:	bfa2      	ittt	ge
 800690a:	6821      	ldrge	r1, [r4, #0]
 800690c:	f021 0104 	bicge.w	r1, r1, #4
 8006910:	6021      	strge	r1, [r4, #0]
 8006912:	b90e      	cbnz	r6, 8006918 <_printf_i+0x114>
 8006914:	2d00      	cmp	r5, #0
 8006916:	d04b      	beq.n	80069b0 <_printf_i+0x1ac>
 8006918:	4615      	mov	r5, r2
 800691a:	fbb6 f1f3 	udiv	r1, r6, r3
 800691e:	fb03 6711 	mls	r7, r3, r1, r6
 8006922:	5dc7      	ldrb	r7, [r0, r7]
 8006924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006928:	4637      	mov	r7, r6
 800692a:	42bb      	cmp	r3, r7
 800692c:	460e      	mov	r6, r1
 800692e:	d9f4      	bls.n	800691a <_printf_i+0x116>
 8006930:	2b08      	cmp	r3, #8
 8006932:	d10b      	bne.n	800694c <_printf_i+0x148>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	07de      	lsls	r6, r3, #31
 8006938:	d508      	bpl.n	800694c <_printf_i+0x148>
 800693a:	6923      	ldr	r3, [r4, #16]
 800693c:	6861      	ldr	r1, [r4, #4]
 800693e:	4299      	cmp	r1, r3
 8006940:	bfde      	ittt	le
 8006942:	2330      	movle	r3, #48	; 0x30
 8006944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006948:	f105 35ff 	addle.w	r5, r5, #4294967295
 800694c:	1b52      	subs	r2, r2, r5
 800694e:	6122      	str	r2, [r4, #16]
 8006950:	f8cd a000 	str.w	sl, [sp]
 8006954:	464b      	mov	r3, r9
 8006956:	aa03      	add	r2, sp, #12
 8006958:	4621      	mov	r1, r4
 800695a:	4640      	mov	r0, r8
 800695c:	f7ff fee4 	bl	8006728 <_printf_common>
 8006960:	3001      	adds	r0, #1
 8006962:	d14a      	bne.n	80069fa <_printf_i+0x1f6>
 8006964:	f04f 30ff 	mov.w	r0, #4294967295
 8006968:	b004      	add	sp, #16
 800696a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	f043 0320 	orr.w	r3, r3, #32
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	4833      	ldr	r0, [pc, #204]	; (8006a44 <_printf_i+0x240>)
 8006978:	2778      	movs	r7, #120	; 0x78
 800697a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	6829      	ldr	r1, [r5, #0]
 8006982:	061f      	lsls	r7, r3, #24
 8006984:	f851 6b04 	ldr.w	r6, [r1], #4
 8006988:	d402      	bmi.n	8006990 <_printf_i+0x18c>
 800698a:	065f      	lsls	r7, r3, #25
 800698c:	bf48      	it	mi
 800698e:	b2b6      	uxthmi	r6, r6
 8006990:	07df      	lsls	r7, r3, #31
 8006992:	bf48      	it	mi
 8006994:	f043 0320 	orrmi.w	r3, r3, #32
 8006998:	6029      	str	r1, [r5, #0]
 800699a:	bf48      	it	mi
 800699c:	6023      	strmi	r3, [r4, #0]
 800699e:	b91e      	cbnz	r6, 80069a8 <_printf_i+0x1a4>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	f023 0320 	bic.w	r3, r3, #32
 80069a6:	6023      	str	r3, [r4, #0]
 80069a8:	2310      	movs	r3, #16
 80069aa:	e7a7      	b.n	80068fc <_printf_i+0xf8>
 80069ac:	4824      	ldr	r0, [pc, #144]	; (8006a40 <_printf_i+0x23c>)
 80069ae:	e7e4      	b.n	800697a <_printf_i+0x176>
 80069b0:	4615      	mov	r5, r2
 80069b2:	e7bd      	b.n	8006930 <_printf_i+0x12c>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	6826      	ldr	r6, [r4, #0]
 80069b8:	6961      	ldr	r1, [r4, #20]
 80069ba:	1d18      	adds	r0, r3, #4
 80069bc:	6028      	str	r0, [r5, #0]
 80069be:	0635      	lsls	r5, r6, #24
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	d501      	bpl.n	80069c8 <_printf_i+0x1c4>
 80069c4:	6019      	str	r1, [r3, #0]
 80069c6:	e002      	b.n	80069ce <_printf_i+0x1ca>
 80069c8:	0670      	lsls	r0, r6, #25
 80069ca:	d5fb      	bpl.n	80069c4 <_printf_i+0x1c0>
 80069cc:	8019      	strh	r1, [r3, #0]
 80069ce:	2300      	movs	r3, #0
 80069d0:	6123      	str	r3, [r4, #16]
 80069d2:	4615      	mov	r5, r2
 80069d4:	e7bc      	b.n	8006950 <_printf_i+0x14c>
 80069d6:	682b      	ldr	r3, [r5, #0]
 80069d8:	1d1a      	adds	r2, r3, #4
 80069da:	602a      	str	r2, [r5, #0]
 80069dc:	681d      	ldr	r5, [r3, #0]
 80069de:	6862      	ldr	r2, [r4, #4]
 80069e0:	2100      	movs	r1, #0
 80069e2:	4628      	mov	r0, r5
 80069e4:	f7f9 fbf4 	bl	80001d0 <memchr>
 80069e8:	b108      	cbz	r0, 80069ee <_printf_i+0x1ea>
 80069ea:	1b40      	subs	r0, r0, r5
 80069ec:	6060      	str	r0, [r4, #4]
 80069ee:	6863      	ldr	r3, [r4, #4]
 80069f0:	6123      	str	r3, [r4, #16]
 80069f2:	2300      	movs	r3, #0
 80069f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f8:	e7aa      	b.n	8006950 <_printf_i+0x14c>
 80069fa:	6923      	ldr	r3, [r4, #16]
 80069fc:	462a      	mov	r2, r5
 80069fe:	4649      	mov	r1, r9
 8006a00:	4640      	mov	r0, r8
 8006a02:	47d0      	blx	sl
 8006a04:	3001      	adds	r0, #1
 8006a06:	d0ad      	beq.n	8006964 <_printf_i+0x160>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	079b      	lsls	r3, r3, #30
 8006a0c:	d413      	bmi.n	8006a36 <_printf_i+0x232>
 8006a0e:	68e0      	ldr	r0, [r4, #12]
 8006a10:	9b03      	ldr	r3, [sp, #12]
 8006a12:	4298      	cmp	r0, r3
 8006a14:	bfb8      	it	lt
 8006a16:	4618      	movlt	r0, r3
 8006a18:	e7a6      	b.n	8006968 <_printf_i+0x164>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4632      	mov	r2, r6
 8006a1e:	4649      	mov	r1, r9
 8006a20:	4640      	mov	r0, r8
 8006a22:	47d0      	blx	sl
 8006a24:	3001      	adds	r0, #1
 8006a26:	d09d      	beq.n	8006964 <_printf_i+0x160>
 8006a28:	3501      	adds	r5, #1
 8006a2a:	68e3      	ldr	r3, [r4, #12]
 8006a2c:	9903      	ldr	r1, [sp, #12]
 8006a2e:	1a5b      	subs	r3, r3, r1
 8006a30:	42ab      	cmp	r3, r5
 8006a32:	dcf2      	bgt.n	8006a1a <_printf_i+0x216>
 8006a34:	e7eb      	b.n	8006a0e <_printf_i+0x20a>
 8006a36:	2500      	movs	r5, #0
 8006a38:	f104 0619 	add.w	r6, r4, #25
 8006a3c:	e7f5      	b.n	8006a2a <_printf_i+0x226>
 8006a3e:	bf00      	nop
 8006a40:	080074a9 	.word	0x080074a9
 8006a44:	080074ba 	.word	0x080074ba

08006a48 <__sflush_r>:
 8006a48:	898a      	ldrh	r2, [r1, #12]
 8006a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4e:	4605      	mov	r5, r0
 8006a50:	0710      	lsls	r0, r2, #28
 8006a52:	460c      	mov	r4, r1
 8006a54:	d458      	bmi.n	8006b08 <__sflush_r+0xc0>
 8006a56:	684b      	ldr	r3, [r1, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	dc05      	bgt.n	8006a68 <__sflush_r+0x20>
 8006a5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dc02      	bgt.n	8006a68 <__sflush_r+0x20>
 8006a62:	2000      	movs	r0, #0
 8006a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	d0f9      	beq.n	8006a62 <__sflush_r+0x1a>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a74:	682f      	ldr	r7, [r5, #0]
 8006a76:	6a21      	ldr	r1, [r4, #32]
 8006a78:	602b      	str	r3, [r5, #0]
 8006a7a:	d032      	beq.n	8006ae2 <__sflush_r+0x9a>
 8006a7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	075a      	lsls	r2, r3, #29
 8006a82:	d505      	bpl.n	8006a90 <__sflush_r+0x48>
 8006a84:	6863      	ldr	r3, [r4, #4]
 8006a86:	1ac0      	subs	r0, r0, r3
 8006a88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a8a:	b10b      	cbz	r3, 8006a90 <__sflush_r+0x48>
 8006a8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a8e:	1ac0      	subs	r0, r0, r3
 8006a90:	2300      	movs	r3, #0
 8006a92:	4602      	mov	r2, r0
 8006a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a96:	6a21      	ldr	r1, [r4, #32]
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b0      	blx	r6
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	d106      	bne.n	8006ab0 <__sflush_r+0x68>
 8006aa2:	6829      	ldr	r1, [r5, #0]
 8006aa4:	291d      	cmp	r1, #29
 8006aa6:	d82b      	bhi.n	8006b00 <__sflush_r+0xb8>
 8006aa8:	4a29      	ldr	r2, [pc, #164]	; (8006b50 <__sflush_r+0x108>)
 8006aaa:	410a      	asrs	r2, r1
 8006aac:	07d6      	lsls	r6, r2, #31
 8006aae:	d427      	bmi.n	8006b00 <__sflush_r+0xb8>
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	6062      	str	r2, [r4, #4]
 8006ab4:	04d9      	lsls	r1, r3, #19
 8006ab6:	6922      	ldr	r2, [r4, #16]
 8006ab8:	6022      	str	r2, [r4, #0]
 8006aba:	d504      	bpl.n	8006ac6 <__sflush_r+0x7e>
 8006abc:	1c42      	adds	r2, r0, #1
 8006abe:	d101      	bne.n	8006ac4 <__sflush_r+0x7c>
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	b903      	cbnz	r3, 8006ac6 <__sflush_r+0x7e>
 8006ac4:	6560      	str	r0, [r4, #84]	; 0x54
 8006ac6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ac8:	602f      	str	r7, [r5, #0]
 8006aca:	2900      	cmp	r1, #0
 8006acc:	d0c9      	beq.n	8006a62 <__sflush_r+0x1a>
 8006ace:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad2:	4299      	cmp	r1, r3
 8006ad4:	d002      	beq.n	8006adc <__sflush_r+0x94>
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f7ff fc96 	bl	8006408 <_free_r>
 8006adc:	2000      	movs	r0, #0
 8006ade:	6360      	str	r0, [r4, #52]	; 0x34
 8006ae0:	e7c0      	b.n	8006a64 <__sflush_r+0x1c>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	47b0      	blx	r6
 8006ae8:	1c41      	adds	r1, r0, #1
 8006aea:	d1c8      	bne.n	8006a7e <__sflush_r+0x36>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0c5      	beq.n	8006a7e <__sflush_r+0x36>
 8006af2:	2b1d      	cmp	r3, #29
 8006af4:	d001      	beq.n	8006afa <__sflush_r+0xb2>
 8006af6:	2b16      	cmp	r3, #22
 8006af8:	d101      	bne.n	8006afe <__sflush_r+0xb6>
 8006afa:	602f      	str	r7, [r5, #0]
 8006afc:	e7b1      	b.n	8006a62 <__sflush_r+0x1a>
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	e7ad      	b.n	8006a64 <__sflush_r+0x1c>
 8006b08:	690f      	ldr	r7, [r1, #16]
 8006b0a:	2f00      	cmp	r7, #0
 8006b0c:	d0a9      	beq.n	8006a62 <__sflush_r+0x1a>
 8006b0e:	0793      	lsls	r3, r2, #30
 8006b10:	680e      	ldr	r6, [r1, #0]
 8006b12:	bf08      	it	eq
 8006b14:	694b      	ldreq	r3, [r1, #20]
 8006b16:	600f      	str	r7, [r1, #0]
 8006b18:	bf18      	it	ne
 8006b1a:	2300      	movne	r3, #0
 8006b1c:	eba6 0807 	sub.w	r8, r6, r7
 8006b20:	608b      	str	r3, [r1, #8]
 8006b22:	f1b8 0f00 	cmp.w	r8, #0
 8006b26:	dd9c      	ble.n	8006a62 <__sflush_r+0x1a>
 8006b28:	6a21      	ldr	r1, [r4, #32]
 8006b2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b2c:	4643      	mov	r3, r8
 8006b2e:	463a      	mov	r2, r7
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b0      	blx	r6
 8006b34:	2800      	cmp	r0, #0
 8006b36:	dc06      	bgt.n	8006b46 <__sflush_r+0xfe>
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b3e:	81a3      	strh	r3, [r4, #12]
 8006b40:	f04f 30ff 	mov.w	r0, #4294967295
 8006b44:	e78e      	b.n	8006a64 <__sflush_r+0x1c>
 8006b46:	4407      	add	r7, r0
 8006b48:	eba8 0800 	sub.w	r8, r8, r0
 8006b4c:	e7e9      	b.n	8006b22 <__sflush_r+0xda>
 8006b4e:	bf00      	nop
 8006b50:	dfbffffe 	.word	0xdfbffffe

08006b54 <_fflush_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	690b      	ldr	r3, [r1, #16]
 8006b58:	4605      	mov	r5, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	b913      	cbnz	r3, 8006b64 <_fflush_r+0x10>
 8006b5e:	2500      	movs	r5, #0
 8006b60:	4628      	mov	r0, r5
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	b118      	cbz	r0, 8006b6e <_fflush_r+0x1a>
 8006b66:	6a03      	ldr	r3, [r0, #32]
 8006b68:	b90b      	cbnz	r3, 8006b6e <_fflush_r+0x1a>
 8006b6a:	f7ff f8d3 	bl	8005d14 <__sinit>
 8006b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f3      	beq.n	8006b5e <_fflush_r+0xa>
 8006b76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b78:	07d0      	lsls	r0, r2, #31
 8006b7a:	d404      	bmi.n	8006b86 <_fflush_r+0x32>
 8006b7c:	0599      	lsls	r1, r3, #22
 8006b7e:	d402      	bmi.n	8006b86 <_fflush_r+0x32>
 8006b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b82:	f7ff fc3f 	bl	8006404 <__retarget_lock_acquire_recursive>
 8006b86:	4628      	mov	r0, r5
 8006b88:	4621      	mov	r1, r4
 8006b8a:	f7ff ff5d 	bl	8006a48 <__sflush_r>
 8006b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b90:	07da      	lsls	r2, r3, #31
 8006b92:	4605      	mov	r5, r0
 8006b94:	d4e4      	bmi.n	8006b60 <_fflush_r+0xc>
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	059b      	lsls	r3, r3, #22
 8006b9a:	d4e1      	bmi.n	8006b60 <_fflush_r+0xc>
 8006b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b9e:	f7ff fc32 	bl	8006406 <__retarget_lock_release_recursive>
 8006ba2:	e7dd      	b.n	8006b60 <_fflush_r+0xc>

08006ba4 <__sflags>:
 8006ba4:	780b      	ldrb	r3, [r1, #0]
 8006ba6:	2b72      	cmp	r3, #114	; 0x72
 8006ba8:	b530      	push	{r4, r5, lr}
 8006baa:	d022      	beq.n	8006bf2 <__sflags+0x4e>
 8006bac:	2b77      	cmp	r3, #119	; 0x77
 8006bae:	d024      	beq.n	8006bfa <__sflags+0x56>
 8006bb0:	2b61      	cmp	r3, #97	; 0x61
 8006bb2:	d027      	beq.n	8006c04 <__sflags+0x60>
 8006bb4:	2316      	movs	r3, #22
 8006bb6:	6003      	str	r3, [r0, #0]
 8006bb8:	2000      	movs	r0, #0
 8006bba:	bd30      	pop	{r4, r5, pc}
 8006bbc:	2d62      	cmp	r5, #98	; 0x62
 8006bbe:	d012      	beq.n	8006be6 <__sflags+0x42>
 8006bc0:	2d78      	cmp	r5, #120	; 0x78
 8006bc2:	d013      	beq.n	8006bec <__sflags+0x48>
 8006bc4:	2d2b      	cmp	r5, #43	; 0x2b
 8006bc6:	d107      	bne.n	8006bd8 <__sflags+0x34>
 8006bc8:	f020 001c 	bic.w	r0, r0, #28
 8006bcc:	f023 0303 	bic.w	r3, r3, #3
 8006bd0:	f040 0010 	orr.w	r0, r0, #16
 8006bd4:	f043 0302 	orr.w	r3, r3, #2
 8006bd8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006bdc:	2d00      	cmp	r5, #0
 8006bde:	d1ed      	bne.n	8006bbc <__sflags+0x18>
 8006be0:	4323      	orrs	r3, r4
 8006be2:	6013      	str	r3, [r2, #0]
 8006be4:	e7e9      	b.n	8006bba <__sflags+0x16>
 8006be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bea:	e7f5      	b.n	8006bd8 <__sflags+0x34>
 8006bec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006bf0:	e7f2      	b.n	8006bd8 <__sflags+0x34>
 8006bf2:	2400      	movs	r4, #0
 8006bf4:	4623      	mov	r3, r4
 8006bf6:	2004      	movs	r0, #4
 8006bf8:	e7ee      	b.n	8006bd8 <__sflags+0x34>
 8006bfa:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8006bfe:	2301      	movs	r3, #1
 8006c00:	2008      	movs	r0, #8
 8006c02:	e7e9      	b.n	8006bd8 <__sflags+0x34>
 8006c04:	f44f 7402 	mov.w	r4, #520	; 0x208
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f44f 7084 	mov.w	r0, #264	; 0x108
 8006c0e:	e7e3      	b.n	8006bd8 <__sflags+0x34>

08006c10 <__swhatbuf_r>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	460c      	mov	r4, r1
 8006c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c18:	2900      	cmp	r1, #0
 8006c1a:	b096      	sub	sp, #88	; 0x58
 8006c1c:	4615      	mov	r5, r2
 8006c1e:	461e      	mov	r6, r3
 8006c20:	da0d      	bge.n	8006c3e <__swhatbuf_r+0x2e>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006c28:	f04f 0100 	mov.w	r1, #0
 8006c2c:	bf0c      	ite	eq
 8006c2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006c32:	2340      	movne	r3, #64	; 0x40
 8006c34:	2000      	movs	r0, #0
 8006c36:	6031      	str	r1, [r6, #0]
 8006c38:	602b      	str	r3, [r5, #0]
 8006c3a:	b016      	add	sp, #88	; 0x58
 8006c3c:	bd70      	pop	{r4, r5, r6, pc}
 8006c3e:	466a      	mov	r2, sp
 8006c40:	f000 f87c 	bl	8006d3c <_fstat_r>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	dbec      	blt.n	8006c22 <__swhatbuf_r+0x12>
 8006c48:	9901      	ldr	r1, [sp, #4]
 8006c4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006c4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006c52:	4259      	negs	r1, r3
 8006c54:	4159      	adcs	r1, r3
 8006c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c5a:	e7eb      	b.n	8006c34 <__swhatbuf_r+0x24>

08006c5c <__smakebuf_r>:
 8006c5c:	898b      	ldrh	r3, [r1, #12]
 8006c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c60:	079d      	lsls	r5, r3, #30
 8006c62:	4606      	mov	r6, r0
 8006c64:	460c      	mov	r4, r1
 8006c66:	d507      	bpl.n	8006c78 <__smakebuf_r+0x1c>
 8006c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	6123      	str	r3, [r4, #16]
 8006c70:	2301      	movs	r3, #1
 8006c72:	6163      	str	r3, [r4, #20]
 8006c74:	b002      	add	sp, #8
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	ab01      	add	r3, sp, #4
 8006c7a:	466a      	mov	r2, sp
 8006c7c:	f7ff ffc8 	bl	8006c10 <__swhatbuf_r>
 8006c80:	9900      	ldr	r1, [sp, #0]
 8006c82:	4605      	mov	r5, r0
 8006c84:	4630      	mov	r0, r6
 8006c86:	f7fe fed9 	bl	8005a3c <_malloc_r>
 8006c8a:	b948      	cbnz	r0, 8006ca0 <__smakebuf_r+0x44>
 8006c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c90:	059a      	lsls	r2, r3, #22
 8006c92:	d4ef      	bmi.n	8006c74 <__smakebuf_r+0x18>
 8006c94:	f023 0303 	bic.w	r3, r3, #3
 8006c98:	f043 0302 	orr.w	r3, r3, #2
 8006c9c:	81a3      	strh	r3, [r4, #12]
 8006c9e:	e7e3      	b.n	8006c68 <__smakebuf_r+0xc>
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	6020      	str	r0, [r4, #0]
 8006ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca8:	81a3      	strh	r3, [r4, #12]
 8006caa:	9b00      	ldr	r3, [sp, #0]
 8006cac:	6163      	str	r3, [r4, #20]
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	6120      	str	r0, [r4, #16]
 8006cb2:	b15b      	cbz	r3, 8006ccc <__smakebuf_r+0x70>
 8006cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f000 f851 	bl	8006d60 <_isatty_r>
 8006cbe:	b128      	cbz	r0, 8006ccc <__smakebuf_r+0x70>
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	f023 0303 	bic.w	r3, r3, #3
 8006cc6:	f043 0301 	orr.w	r3, r3, #1
 8006cca:	81a3      	strh	r3, [r4, #12]
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	431d      	orrs	r5, r3
 8006cd0:	81a5      	strh	r5, [r4, #12]
 8006cd2:	e7cf      	b.n	8006c74 <__smakebuf_r+0x18>

08006cd4 <_putc_r>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	460d      	mov	r5, r1
 8006cd8:	4614      	mov	r4, r2
 8006cda:	4606      	mov	r6, r0
 8006cdc:	b118      	cbz	r0, 8006ce6 <_putc_r+0x12>
 8006cde:	6a03      	ldr	r3, [r0, #32]
 8006ce0:	b90b      	cbnz	r3, 8006ce6 <_putc_r+0x12>
 8006ce2:	f7ff f817 	bl	8005d14 <__sinit>
 8006ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ce8:	07d8      	lsls	r0, r3, #31
 8006cea:	d405      	bmi.n	8006cf8 <_putc_r+0x24>
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	0599      	lsls	r1, r3, #22
 8006cf0:	d402      	bmi.n	8006cf8 <_putc_r+0x24>
 8006cf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cf4:	f7ff fb86 	bl	8006404 <__retarget_lock_acquire_recursive>
 8006cf8:	68a3      	ldr	r3, [r4, #8]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	60a3      	str	r3, [r4, #8]
 8006d00:	da05      	bge.n	8006d0e <_putc_r+0x3a>
 8006d02:	69a2      	ldr	r2, [r4, #24]
 8006d04:	4293      	cmp	r3, r2
 8006d06:	db12      	blt.n	8006d2e <_putc_r+0x5a>
 8006d08:	b2eb      	uxtb	r3, r5
 8006d0a:	2b0a      	cmp	r3, #10
 8006d0c:	d00f      	beq.n	8006d2e <_putc_r+0x5a>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	701d      	strb	r5, [r3, #0]
 8006d16:	b2ed      	uxtb	r5, r5
 8006d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d1a:	07da      	lsls	r2, r3, #31
 8006d1c:	d405      	bmi.n	8006d2a <_putc_r+0x56>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	059b      	lsls	r3, r3, #22
 8006d22:	d402      	bmi.n	8006d2a <_putc_r+0x56>
 8006d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d26:	f7ff fb6e 	bl	8006406 <__retarget_lock_release_recursive>
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
 8006d2e:	4629      	mov	r1, r5
 8006d30:	4622      	mov	r2, r4
 8006d32:	4630      	mov	r0, r6
 8006d34:	f7ff f995 	bl	8006062 <__swbuf_r>
 8006d38:	4605      	mov	r5, r0
 8006d3a:	e7ed      	b.n	8006d18 <_putc_r+0x44>

08006d3c <_fstat_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	4d07      	ldr	r5, [pc, #28]	; (8006d5c <_fstat_r+0x20>)
 8006d40:	2300      	movs	r3, #0
 8006d42:	4604      	mov	r4, r0
 8006d44:	4608      	mov	r0, r1
 8006d46:	4611      	mov	r1, r2
 8006d48:	602b      	str	r3, [r5, #0]
 8006d4a:	f7fa fb78 	bl	800143e <_fstat>
 8006d4e:	1c43      	adds	r3, r0, #1
 8006d50:	d102      	bne.n	8006d58 <_fstat_r+0x1c>
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	b103      	cbz	r3, 8006d58 <_fstat_r+0x1c>
 8006d56:	6023      	str	r3, [r4, #0]
 8006d58:	bd38      	pop	{r3, r4, r5, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000314 	.word	0x20000314

08006d60 <_isatty_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4d06      	ldr	r5, [pc, #24]	; (8006d7c <_isatty_r+0x1c>)
 8006d64:	2300      	movs	r3, #0
 8006d66:	4604      	mov	r4, r0
 8006d68:	4608      	mov	r0, r1
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	f7fa fb77 	bl	800145e <_isatty>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_isatty_r+0x1a>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_isatty_r+0x1a>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	20000314 	.word	0x20000314

08006d80 <_init>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	bf00      	nop
 8006d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d86:	bc08      	pop	{r3}
 8006d88:	469e      	mov	lr, r3
 8006d8a:	4770      	bx	lr

08006d8c <_fini>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	bf00      	nop
 8006d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d92:	bc08      	pop	{r3}
 8006d94:	469e      	mov	lr, r3
 8006d96:	4770      	bx	lr
