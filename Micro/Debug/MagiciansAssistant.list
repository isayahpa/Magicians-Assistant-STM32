
MagiciansAssistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f0  080050f0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f8  080050f8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f8  080050f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000068  08005168  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08005168  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c37  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002488  00000000  00000000  00030d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  000331a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b97  00000000  00000000  000340a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b63  00000000  00000000  00034c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013190  00000000  00000000  0005c79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee82e  00000000  00000000  0006f92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045e8  00000000  00000000  0015e158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  00162740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fc8 	.word	0x08004fc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004fc8 	.word	0x08004fc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <setCS>:
/* Notes:
 * The chip select signal should always be LOW during the SPI read or write bus cycle
 * Add printf() prototype from main into here if printing doesn't work
 */

void setCS(ArducamController* pCtrl, int level){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->pinNo, level);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	68d8      	ldr	r0, [r3, #12]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	8a1b      	ldrh	r3, [r3, #16]
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	4619      	mov	r1, r3
 8000584:	f000 ffa8 	bl	80014d8 <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <initArducam>:

void initArducam(ArducamController* pCtrl, I2C_HandleTypeDef* pHI2C, SPI_HandleTypeDef* pHSPI, GPIO_TypeDef* pGPIOPort, uint16_t pinNo){
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
 800059c:	603b      	str	r3, [r7, #0]
	printf("Initializing ArduCam\n");
 800059e:	4816      	ldr	r0, [pc, #88]	; (80005f8 <initArducam+0x68>)
 80005a0:	f003 ff54 	bl	800444c <puts>
	// Might need to Malloc/Calloc some memory here?
	pCtrl->pI2CHandle = pHI2C;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	601a      	str	r2, [r3, #0]
	pCtrl->pSPIHandle = pHSPI;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	605a      	str	r2, [r3, #4]
	pCtrl->status = HAL_OK;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2200      	movs	r2, #0
 80005b4:	721a      	strb	r2, [r3, #8]
	//pCtrl->init = &init;
	pCtrl -> pGPIOPort = pGPIOPort;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	60da      	str	r2, [r3, #12]
	pCtrl -> pinNo = pinNo;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	8c3a      	ldrh	r2, [r7, #32]
 80005c0:	821a      	strh	r2, [r3, #16]

	setCS(pCtrl, GPIO_PIN_RESET); //CS LOW to to enable
 80005c2:	2100      	movs	r1, #0
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f7ff ffd1 	bl	800056c <setCS>

	uint8_t cmd = 0b00000001; //Capture 1 Frame per Capture
 80005ca:	2301      	movs	r3, #1
 80005cc:	75fb      	strb	r3, [r7, #23]
	flushFIFO(pCtrl);
 80005ce:	68f8      	ldr	r0, [r7, #12]
 80005d0:	f000 f83d 	bl	800064e <flushFIFO>
	i2cRegWrite(pCtrl, CAPTURE_CONTROL_REG, &cmd, 1);
 80005d4:	f107 0217 	add.w	r2, r7, #23
 80005d8:	2301      	movs	r3, #1
 80005da:	2101      	movs	r1, #1
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	f000 f80d 	bl	80005fc <i2cRegWrite>

	setCS(pCtrl, GPIO_PIN_SET); //CS HIGH when finished
 80005e2:	2101      	movs	r1, #1
 80005e4:	68f8      	ldr	r0, [r7, #12]
 80005e6:	f7ff ffc1 	bl	800056c <setCS>
	printStatus(pCtrl);
 80005ea:	68f8      	ldr	r0, [r7, #12]
 80005ec:	f000 f860 	bl	80006b0 <printStatus>
}
 80005f0:	bf00      	nop
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08004fe0 	.word	0x08004fe0

080005fc <i2cRegWrite>:
//
/*To Write over i2c:
* Request I2C_ADDR_WRITE -> Send Cam Register Address (left shift device addr's by 1) -> Send Data bytes
*/

void i2cRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t *pData, uint16_t size){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af02      	add	r7, sp, #8
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	461a      	mov	r2, r3
 8000608:	460b      	mov	r3, r1
 800060a:	72fb      	strb	r3, [r7, #11]
 800060c:	4613      	mov	r3, r2
 800060e:	813b      	strh	r3, [r7, #8]
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE<<1, &reg, 1, TIMEOUT);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	f107 020b 	add.w	r2, r7, #11
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	21c0      	movs	r1, #192	; 0xc0
 8000620:	f001 f80e 	bl	8001640 <HAL_I2C_Master_Transmit>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	721a      	strb	r2, [r3, #8]
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE<<1, pData, size, TIMEOUT);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	893b      	ldrh	r3, [r7, #8]
 8000632:	2264      	movs	r2, #100	; 0x64
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	21c0      	movs	r1, #192	; 0xc0
 800063a:	f001 f801 	bl	8001640 <HAL_I2C_Master_Transmit>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	721a      	strb	r2, [r3, #8]
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <flushFIFO>:
		uint8_t cmd = SET_CAPTURE_FLAG;
		i2cRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
	}
}

void flushFIFO(ArducamController* pCtrl){
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
	clearFIFOFlag(pCtrl);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f807 	bl	800066a <clearFIFOFlag>
	resetFIFOPointers(pCtrl);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f000 f815 	bl	800068c <resetFIFOPointers>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <clearFIFOFlag>:

void clearFIFOFlag(ArducamController* pCtrl){
 800066a:	b580      	push	{r7, lr}
 800066c:	b084      	sub	sp, #16
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_FLAG_CLR;
 8000672:	2301      	movs	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 8000676:	f107 020f 	add.w	r2, r7, #15
 800067a:	2301      	movs	r3, #1
 800067c:	2104      	movs	r1, #4
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff ffbc 	bl	80005fc <i2cRegWrite>
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <resetFIFOPointers>:

void resetFIFOPointers(ArducamController* pCtrl){
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_PTR_CLR;
 8000694:	2330      	movs	r3, #48	; 0x30
 8000696:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 8000698:	f107 020f 	add.w	r2, r7, #15
 800069c:	2301      	movs	r3, #1
 800069e:	2104      	movs	r1, #4
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ffab 	bl	80005fc <i2cRegWrite>
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <printStatus>:

void printStatus(ArducamController* pCtrl){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	printf("Arducam Status: %x\n", pCtrl->status);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7a1b      	ldrb	r3, [r3, #8]
 80006bc:	4619      	mov	r1, r3
 80006be:	4803      	ldr	r0, [pc, #12]	; (80006cc <printStatus+0x1c>)
 80006c0:	f003 fe5e 	bl	8004380 <iprintf>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08005034 	.word	0x08005034

080006d0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(pHuart, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <__io_putchar+0x24>)
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	2201      	movs	r2, #1
 80006e4:	f002 ff7d 	bl	80035e2 <HAL_UART_Transmit>
  return ch;
 80006e8:	687b      	ldr	r3, [r7, #4]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000084 	.word	0x20000084

080006f8 <initHelpers>:

void initHelpers(UART_HandleTypeDef* pUHandle){
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	pHuart = pUHandle;
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <initHelpers+0x1c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000084 	.word	0x20000084

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071e:	f000 fbcf 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000722:	f000 f835 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f000 f933 	bl	8000990 <MX_GPIO_Init>
  MX_I2C1_Init();
 800072a:	f000 f883 	bl	8000834 <MX_I2C1_Init>
  MX_SPI1_Init();
 800072e:	f000 f8c1 	bl	80008b4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000732:	f000 f8fd 	bl	8000930 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Initialize Helper Functions
  initHelpers(&huart2);
 8000736:	4811      	ldr	r0, [pc, #68]	; (800077c <main+0x64>)
 8000738:	f7ff ffde 	bl	80006f8 <initHelpers>

  //Initialize the Arducam
  printf("Size of the Struct: %d\n", sizeof(ArducamController));
 800073c:	2118      	movs	r1, #24
 800073e:	4810      	ldr	r0, [pc, #64]	; (8000780 <main+0x68>)
 8000740:	f003 fe1e 	bl	8004380 <iprintf>
  ArducamController* pArducam = malloc(sizeof(ArducamController));
 8000744:	2018      	movs	r0, #24
 8000746:	f003 fca5 	bl	8004094 <malloc>
 800074a:	4603      	mov	r3, r0
 800074c:	61fb      	str	r3, [r7, #28]
  printf("About to Run init\n");
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <main+0x6c>)
 8000750:	f003 fe7c 	bl	800444c <puts>
  initArducam(pArducam, &hi2c1, &hspi1, CAM_CS_GPIO_Port, CAM_CS_Pin);
 8000754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <main+0x70>)
 8000760:	490a      	ldr	r1, [pc, #40]	; (800078c <main+0x74>)
 8000762:	69f8      	ldr	r0, [r7, #28]
 8000764:	f7ff ff14 	bl	8000590 <initArducam>
  ArducamController arducam = *pArducam;
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	1d3c      	adds	r4, r7, #4
 800076c:	461d      	mov	r5, r3
 800076e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000776:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077a:	e7fe      	b.n	800077a <main+0x62>
 800077c:	20000140 	.word	0x20000140
 8000780:	08005048 	.word	0x08005048
 8000784:	08005060 	.word	0x08005060
 8000788:	200000dc 	.word	0x200000dc
 800078c:	20000088 	.word	0x20000088

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b096      	sub	sp, #88	; 0x58
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2244      	movs	r2, #68	; 0x44
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 ff34 	bl	800460c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007b6:	f001 fb11 	bl	8001ddc <HAL_PWREx_ControlVoltageScaling>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007c0:	f000 f94e 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ce:	2310      	movs	r3, #16
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d6:	2302      	movs	r3, #2
 80007d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007de:	230a      	movs	r3, #10
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e2:	2307      	movs	r3, #7
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fb48 	bl	8001e88 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007fe:	f000 f92f 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	2104      	movs	r1, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f001 ff10 	bl	8002640 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000826:	f000 f91b 	bl	8000a60 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3758      	adds	r7, #88	; 0x58
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_I2C1_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <MX_I2C1_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <MX_I2C1_Init+0x7c>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_I2C1_Init+0x74>)
 800084c:	2201      	movs	r2, #1
 800084e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000870:	f000 fe4a 	bl	8001508 <HAL_I2C_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800087a:	f000 f8f1 	bl	8000a60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000882:	f001 fa05 	bl	8001c90 <HAL_I2CEx_ConfigAnalogFilter>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800088c:	f000 f8e8 	bl	8000a60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_I2C1_Init+0x74>)
 8000894:	f001 fa47 	bl	8001d26 <HAL_I2CEx_ConfigDigitalFilter>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 f8df 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000088 	.word	0x20000088
 80008ac:	40005400 	.word	0x40005400
 80008b0:	10909cec 	.word	0x10909cec

080008b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_SPI1_Init+0x74>)
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <MX_SPI1_Init+0x78>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_SPI1_Init+0x74>)
 80008c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_SPI1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_SPI1_Init+0x74>)
 80008ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_SPI1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_SPI1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_SPI1_Init+0x74>)
 80008e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_SPI1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_SPI1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_SPI1_Init+0x74>)
 8000902:	2207      	movs	r2, #7
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_SPI1_Init+0x74>)
 800090e:	2208      	movs	r2, #8
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_SPI1_Init+0x74>)
 8000914:	f002 fd74 	bl	8003400 <HAL_SPI_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800091e:	f000 f89f 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000dc 	.word	0x200000dc
 800092c:	40013000 	.word	0x40013000

08000930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <MX_USART2_UART_Init+0x5c>)
 8000938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_USART2_UART_Init+0x58>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USART2_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART2_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000974:	f002 fde7 	bl	8003546 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f86f 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000140 	.word	0x20000140
 800098c:	40004400 	.word	0x40004400

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a25      	ldr	r2, [pc, #148]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_GPIO_Init+0xc8>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_CS_GPIO_Port, CAM_CS_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 fd62 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_GPIO_Init+0xcc>)
 8000a2c:	f000 fbaa 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_CS_Pin */
  GPIO_InitStruct.Pin = CAM_CS_Pin;
 8000a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_CS_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f000 fb9a 	bl	8001184 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	48000800 	.word	0x48000800

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6593      	str	r3, [r2, #88]	; 0x58
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0ac      	sub	sp, #176	; 0xb0
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2288      	movs	r2, #136	; 0x88
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fd99 	bl	800460c <memset>
  if(hi2c->Instance==I2C1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <HAL_I2C_MspInit+0xb0>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d13b      	bne.n	8000b5c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ae4:	2340      	movs	r3, #64	; 0x40
 8000ae6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 ffc9 	bl	8002a88 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000afc:	f7ff ffb0 	bl	8000a60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <HAL_I2C_MspInit+0xb4>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b04:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <HAL_I2C_MspInit+0xb4>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_I2C_MspInit+0xb4>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b32:	2304      	movs	r3, #4
 8000b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <HAL_I2C_MspInit+0xb8>)
 8000b40:	f000 fb20 	bl	8001184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_I2C_MspInit+0xb4>)
 8000b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_I2C_MspInit+0xb4>)
 8000b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_I2C_MspInit+0xb4>)
 8000b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	37b0      	adds	r7, #176	; 0xb0
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40005400 	.word	0x40005400
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000400 	.word	0x48000400

08000b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_SPI_MspInit+0x7c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d128      	bne.n	8000be4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_SPI_MspInit+0x80>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <HAL_SPI_MspInit+0x80>)
 8000b98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_SPI_MspInit+0x80>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_SPI_MspInit+0x80>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_SPI_MspInit+0x80>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_SPI_MspInit+0x80>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bc2:	23e0      	movs	r3, #224	; 0xe0
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bd2:	2305      	movs	r3, #5
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f000 fad0 	bl	8001184 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	; 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40013000 	.word	0x40013000
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0ac      	sub	sp, #176	; 0xb0
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2288      	movs	r2, #136	; 0x88
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f003 fcf9 	bl	800460c <memset>
  if(huart->Instance==USART2)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <HAL_UART_MspInit+0xb0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d13b      	bne.n	8000c9c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 ff29 	bl	8002a88 <HAL_RCCEx_PeriphCLKConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c3c:	f7ff ff10 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_UART_MspInit+0xb4>)
 8000c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c44:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <HAL_UART_MspInit+0xb4>)
 8000c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_UART_MspInit+0xb4>)
 8000c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <HAL_UART_MspInit+0xb4>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <HAL_UART_MspInit+0xb4>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <HAL_UART_MspInit+0xb4>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c70:	230c      	movs	r3, #12
 8000c72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f000 fa74 	bl	8001184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	37b0      	adds	r7, #176	; 0xb0
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	40021000 	.word	0x40021000

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf8:	f000 f93e 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e00a      	b.n	8000d28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d12:	f3af 8000 	nop.w
 8000d16:	4601      	mov	r1, r0
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	b2ca      	uxtb	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf0      	blt.n	8000d12 <_read+0x12>
  }

  return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	e009      	b.n	8000d60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fcbb 	bl	80006d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbf1      	blt.n	8000d4c <_write+0x12>
  }
  return len;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_close>:

int _close(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_isatty>:

int _isatty(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f003 fc5c 	bl	80046c8 <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20018000 	.word	0x20018000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	200001c8 	.word	0x200001c8
 8000e44:	20000320 	.word	0x20000320

08000e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e70:	f7ff ffea 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e76:	490d      	ldr	r1, [pc, #52]	; (8000eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <LoopForever+0xe>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e8c:	4c0a      	ldr	r4, [pc, #40]	; (8000eb8 <LoopForever+0x16>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f003 fc1b 	bl	80046d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e9e:	f7ff fc3b 	bl	8000718 <main>

08000ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea2:	e7fe      	b.n	8000ea2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000eb0:	08005100 	.word	0x08005100
  ldr r2, =_sbss
 8000eb4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000eb8:	2000031c 	.word	0x2000031c

08000ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC1_2_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_Init+0x3c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <HAL_Init+0x3c>)
 8000ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f000 f920 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f80f 	bl	8000f00 <HAL_InitTick>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	e001      	b.n	8000ef2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eee:	f7ff fdbd 	bl	8000a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40022000 	.word	0x40022000

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_InitTick+0x6c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d023      	beq.n	8000f5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_InitTick+0x70>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_InitTick+0x6c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f91d 	bl	800116a <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10f      	bne.n	8000f56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d809      	bhi.n	8000f50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f8f5 	bl	8001132 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_InitTick+0x74>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e007      	b.n	8000f60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e004      	b.n	8000f60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e001      	b.n	8000f60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	200001cc 	.word	0x200001cc

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200001cc 	.word	0x200001cc

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff8e 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff47 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff5c 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff8e 	bl	8001070 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5d 	bl	800101c <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffb0 	bl	80010d8 <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	e17f      	b.n	8001494 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	2101      	movs	r1, #1
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 8171 	beq.w	800148e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d005      	beq.n	80011c4 <HAL_GPIO_Init+0x40>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d130      	bne.n	8001226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fa:	2201      	movs	r2, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	091b      	lsrs	r3, r3, #4
 8001210:	f003 0201 	and.w	r2, r3, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b03      	cmp	r3, #3
 8001230:	d118      	bne.n	8001264 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001238:	2201      	movs	r2, #1
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	f003 0201 	and.w	r2, r3, #1
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b03      	cmp	r3, #3
 800126e:	d017      	beq.n	80012a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d123      	bne.n	80012f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	08da      	lsrs	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3208      	adds	r2, #8
 80012ee:	6939      	ldr	r1, [r7, #16]
 80012f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0203 	and.w	r2, r3, #3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 80ac 	beq.w	800148e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <HAL_GPIO_Init+0x330>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133a:	4a5e      	ldr	r2, [pc, #376]	; (80014b4 <HAL_GPIO_Init+0x330>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6613      	str	r3, [r2, #96]	; 0x60
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <HAL_GPIO_Init+0x330>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800134e:	4a5a      	ldr	r2, [pc, #360]	; (80014b8 <HAL_GPIO_Init+0x334>)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001378:	d025      	beq.n	80013c6 <HAL_GPIO_Init+0x242>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <HAL_GPIO_Init+0x338>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d01f      	beq.n	80013c2 <HAL_GPIO_Init+0x23e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4e      	ldr	r2, [pc, #312]	; (80014c0 <HAL_GPIO_Init+0x33c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <HAL_GPIO_Init+0x23a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4d      	ldr	r2, [pc, #308]	; (80014c4 <HAL_GPIO_Init+0x340>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x236>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4c      	ldr	r2, [pc, #304]	; (80014c8 <HAL_GPIO_Init+0x344>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x232>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <HAL_GPIO_Init+0x348>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x22e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4a      	ldr	r2, [pc, #296]	; (80014d0 <HAL_GPIO_Init+0x34c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x22a>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e00c      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e00a      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013b2:	2305      	movs	r3, #5
 80013b4:	e008      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013b6:	2304      	movs	r3, #4
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e004      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013be:	2302      	movs	r3, #2
 80013c0:	e002      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013c6:	2300      	movs	r3, #0
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	f002 0203 	and.w	r2, r2, #3
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	4093      	lsls	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013d8:	4937      	ldr	r1, [pc, #220]	; (80014b8 <HAL_GPIO_Init+0x334>)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <HAL_GPIO_Init+0x350>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800140a:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <HAL_GPIO_Init+0x350>)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_GPIO_Init+0x350>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001434:	4a27      	ldr	r2, [pc, #156]	; (80014d4 <HAL_GPIO_Init+0x350>)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_GPIO_Init+0x350>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800145e:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <HAL_GPIO_Init+0x350>)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_GPIO_Init+0x350>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001488:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <HAL_GPIO_Init+0x350>)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa22 f303 	lsr.w	r3, r2, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f47f ae78 	bne.w	8001194 <HAL_GPIO_Init+0x10>
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010000 	.word	0x40010000
 80014bc:	48000400 	.word	0x48000400
 80014c0:	48000800 	.word	0x48000800
 80014c4:	48000c00 	.word	0x48000c00
 80014c8:	48001000 	.word	0x48001000
 80014cc:	48001400 	.word	0x48001400
 80014d0:	48001800 	.word	0x48001800
 80014d4:	40010400 	.word	0x40010400

080014d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
 80014e4:	4613      	mov	r3, r2
 80014e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e8:	787b      	ldrb	r3, [r7, #1]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e08d      	b.n	8001636 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d106      	bne.n	8001534 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fac0 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2224      	movs	r2, #36	; 0x24
 8001538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001558:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001568:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d107      	bne.n	8001582 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	e006      	b.n	8001590 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800158e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d108      	bne.n	80015aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	e007      	b.n	80015ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69d9      	ldr	r1, [r3, #28]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2220      	movs	r2, #32
 8001622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	460b      	mov	r3, r1
 800164e:	817b      	strh	r3, [r7, #10]
 8001650:	4613      	mov	r3, r2
 8001652:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b20      	cmp	r3, #32
 800165e:	f040 80fd 	bne.w	800185c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_I2C_Master_Transmit+0x30>
 800166c:	2302      	movs	r3, #2
 800166e:	e0f6      	b.n	800185e <HAL_I2C_Master_Transmit+0x21e>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001678:	f7ff fc92 	bl	8000fa0 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2319      	movs	r3, #25
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f914 	bl	80018b8 <I2C_WaitOnFlagUntilTimeout>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0e1      	b.n	800185e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2221      	movs	r2, #33	; 0x21
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2210      	movs	r2, #16
 80016a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	893a      	ldrh	r2, [r7, #8]
 80016ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2bff      	cmp	r3, #255	; 0xff
 80016ca:	d906      	bls.n	80016da <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	22ff      	movs	r2, #255	; 0xff
 80016d0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80016d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e007      	b.n	80016ea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80016e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d024      	beq.n	800173c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170c:	b29b      	uxth	r3, r3
 800170e:	3b01      	subs	r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171a:	3b01      	subs	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001726:	b2db      	uxtb	r3, r3
 8001728:	3301      	adds	r3, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	8979      	ldrh	r1, [r7, #10]
 800172e:	4b4e      	ldr	r3, [pc, #312]	; (8001868 <HAL_I2C_Master_Transmit+0x228>)
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fa79 	bl	8001c2c <I2C_TransferConfig>
 800173a:	e066      	b.n	800180a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001740:	b2da      	uxtb	r2, r3
 8001742:	8979      	ldrh	r1, [r7, #10]
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <HAL_I2C_Master_Transmit+0x228>)
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 fa6e 	bl	8001c2c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001750:	e05b      	b.n	800180a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	6a39      	ldr	r1, [r7, #32]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f8fd 	bl	8001956 <I2C_WaitOnTXISFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e07b      	b.n	800185e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001780:	b29b      	uxth	r3, r3
 8001782:	3b01      	subs	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	3b01      	subs	r3, #1
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179a:	b29b      	uxth	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d034      	beq.n	800180a <HAL_I2C_Master_Transmit+0x1ca>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d130      	bne.n	800180a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	2200      	movs	r2, #0
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f880 	bl	80018b8 <I2C_WaitOnFlagUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e04d      	b.n	800185e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	2bff      	cmp	r3, #255	; 0xff
 80017ca:	d90e      	bls.n	80017ea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	22ff      	movs	r2, #255	; 0xff
 80017d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	8979      	ldrh	r1, [r7, #10]
 80017da:	2300      	movs	r3, #0
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fa22 	bl	8001c2c <I2C_TransferConfig>
 80017e8:	e00f      	b.n	800180a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	8979      	ldrh	r1, [r7, #10]
 80017fc:	2300      	movs	r3, #0
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 fa11 	bl	8001c2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180e:	b29b      	uxth	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d19e      	bne.n	8001752 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	6a39      	ldr	r1, [r7, #32]
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 f8e3 	bl	80019e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e01a      	b.n	800185e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2220      	movs	r2, #32
 800182e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6859      	ldr	r1, [r3, #4]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_I2C_Master_Transmit+0x22c>)
 800183c:	400b      	ands	r3, r1
 800183e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2220      	movs	r2, #32
 8001844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	e000      	b.n	800185e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800185c:	2302      	movs	r3, #2
  }
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	80002000 	.word	0x80002000
 800186c:	fe00e800 	.word	0xfe00e800

08001870 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b02      	cmp	r3, #2
 8001884:	d103      	bne.n	800188e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2200      	movs	r2, #0
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d007      	beq.n	80018ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699a      	ldr	r2, [r3, #24]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	619a      	str	r2, [r3, #24]
  }
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	4613      	mov	r3, r2
 80018c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018c8:	e031      	b.n	800192e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d02d      	beq.n	800192e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018d2:	f7ff fb65 	bl	8000fa0 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d302      	bcc.n	80018e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d122      	bne.n	800192e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699a      	ldr	r2, [r3, #24]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	4013      	ands	r3, r2
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	bf0c      	ite	eq
 80018f8:	2301      	moveq	r3, #1
 80018fa:	2300      	movne	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	429a      	cmp	r2, r3
 8001904:	d113      	bne.n	800192e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f043 0220 	orr.w	r2, r3, #32
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2220      	movs	r2, #32
 8001916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4013      	ands	r3, r2
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	429a      	cmp	r2, r3
 800193c:	bf0c      	ite	eq
 800193e:	2301      	moveq	r3, #1
 8001940:	2300      	movne	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	429a      	cmp	r2, r3
 800194a:	d0be      	beq.n	80018ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001962:	e033      	b.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 f87f 	bl	8001a6c <I2C_IsErrorOccurred>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e031      	b.n	80019dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197e:	d025      	beq.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001980:	f7ff fb0e 	bl	8000fa0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	429a      	cmp	r2, r3
 800198e:	d302      	bcc.n	8001996 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d11a      	bne.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d013      	beq.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e007      	b.n	80019dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d1c4      	bne.n	8001964 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019f0:	e02f      	b.n	8001a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 f838 	bl	8001a6c <I2C_IsErrorOccurred>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e02d      	b.n	8001a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a06:	f7ff facb 	bl	8000fa0 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d302      	bcc.n	8001a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d11a      	bne.n	8001a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0320 	and.w	r3, r3, #32
 8001a26:	2b20      	cmp	r3, #32
 8001a28:	d013      	beq.n	8001a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f043 0220 	orr.w	r2, r3, #32
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e007      	b.n	8001a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0320 	and.w	r3, r3, #32
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d1c8      	bne.n	80019f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d068      	beq.n	8001b6a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001aa0:	e049      	b.n	8001b36 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa8:	d045      	beq.n	8001b36 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001aaa:	f7ff fa79 	bl	8000fa0 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d302      	bcc.n	8001ac0 <I2C_IsErrorOccurred+0x54>
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d13a      	bne.n	8001b36 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ad2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ae2:	d121      	bne.n	8001b28 <I2C_IsErrorOccurred+0xbc>
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aea:	d01d      	beq.n	8001b28 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001aec:	7cfb      	ldrb	r3, [r7, #19]
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	d01a      	beq.n	8001b28 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b02:	f7ff fa4d 	bl	8000fa0 <HAL_GetTick>
 8001b06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b08:	e00e      	b.n	8001b28 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b0a:	f7ff fa49 	bl	8000fa0 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b19      	cmp	r3, #25
 8001b16:	d907      	bls.n	8001b28 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	f043 0320 	orr.w	r3, r3, #32
 8001b1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001b26:	e006      	b.n	8001b36 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	d1e9      	bne.n	8001b0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d003      	beq.n	8001b4c <I2C_IsErrorOccurred+0xe0>
 8001b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0aa      	beq.n	8001aa2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d103      	bne.n	8001b5c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00b      	beq.n	8001b94 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00b      	beq.n	8001bd8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	f043 0302 	orr.w	r3, r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01c      	beq.n	8001c1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f7ff fe45 	bl	8001870 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <I2C_IsErrorOccurred+0x1bc>)
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2220      	movs	r2, #32
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	fe00e800 	.word	0xfe00e800

08001c2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	817b      	strh	r3, [r7, #10]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c3e:	897b      	ldrh	r3, [r7, #10]
 8001c40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c44:	7a7b      	ldrb	r3, [r7, #9]
 8001c46:	041b      	lsls	r3, r3, #16
 8001c48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	0d5b      	lsrs	r3, r3, #21
 8001c66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <I2C_TransferConfig+0x60>)
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	ea02 0103 	and.w	r1, r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c7e:	bf00      	nop
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	03ff63ff 	.word	0x03ff63ff

08001c90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d138      	bne.n	8001d18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e032      	b.n	8001d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2224      	movs	r2, #36	; 0x24
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ce2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2220      	movs	r2, #32
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e000      	b.n	8001d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d18:	2302      	movs	r3, #2
  }
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d139      	bne.n	8001db0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e033      	b.n	8001db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2224      	movs	r2, #36	; 0x24
 8001d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0201 	bic.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e000      	b.n	8001db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001db0:	2302      	movs	r3, #2
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40007000 	.word	0x40007000

08001ddc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dea:	d130      	bne.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df8:	d038      	beq.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e02:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2232      	movs	r2, #50	; 0x32
 8001e10:	fb02 f303 	mul.w	r3, r2, r3
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0c9b      	lsrs	r3, r3, #18
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e20:	e002      	b.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e34:	d102      	bne.n	8001e3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f2      	bne.n	8001e22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e48:	d110      	bne.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e00f      	b.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5a:	d007      	beq.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e64:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	20000000 	.word	0x20000000
 8001e84:	431bde83 	.word	0x431bde83

08001e88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e3ca      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e9a:	4b97      	ldr	r3, [pc, #604]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ea4:	4b94      	ldr	r3, [pc, #592]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80e4 	beq.w	8002084 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x4a>
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b0c      	cmp	r3, #12
 8001ec6:	f040 808b 	bne.w	8001fe0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	f040 8087 	bne.w	8001fe0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ed2:	4b89      	ldr	r3, [pc, #548]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_RCC_OscConfig+0x62>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e3a2      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	4b82      	ldr	r3, [pc, #520]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d004      	beq.n	8001f04 <HAL_RCC_OscConfig+0x7c>
 8001efa:	4b7f      	ldr	r3, [pc, #508]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f02:	e005      	b.n	8001f10 <HAL_RCC_OscConfig+0x88>
 8001f04:	4b7c      	ldr	r3, [pc, #496]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d223      	bcs.n	8001f5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fd55 	bl	80029c8 <RCC_SetFlashLatencyFromMSIRange>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e383      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f28:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a72      	ldr	r2, [pc, #456]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b70      	ldr	r3, [pc, #448]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	496d      	ldr	r1, [pc, #436]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f46:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	4968      	ldr	r1, [pc, #416]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
 8001f5a:	e025      	b.n	8001fa8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f5c:	4b66      	ldr	r3, [pc, #408]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a65      	ldr	r2, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f62:	f043 0308 	orr.w	r3, r3, #8
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b63      	ldr	r3, [pc, #396]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4960      	ldr	r1, [pc, #384]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	495b      	ldr	r1, [pc, #364]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fd15 	bl	80029c8 <RCC_SetFlashLatencyFromMSIRange>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e343      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa8:	f000 fc4a 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	4950      	ldr	r1, [pc, #320]	; (80020fc <HAL_RCC_OscConfig+0x274>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	4a4e      	ldr	r2, [pc, #312]	; (8002100 <HAL_RCC_OscConfig+0x278>)
 8001fc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fc8:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe ff97 	bl	8000f00 <HAL_InitTick>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d052      	beq.n	8002082 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	e327      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d032      	beq.n	800204e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fe8:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a42      	ldr	r2, [pc, #264]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe ffd4 	bl	8000fa0 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ffc:	f7fe ffd0 	bl	8000fa0 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e310      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800200e:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a36      	ldr	r2, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4931      	ldr	r1, [pc, #196]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	492c      	ldr	r1, [pc, #176]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
 800204c:	e01a      	b.n	8002084 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a29      	ldr	r2, [pc, #164]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800205a:	f7fe ffa1 	bl	8000fa0 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002062:	f7fe ff9d 	bl	8000fa0 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e2dd      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x1da>
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002082:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d074      	beq.n	800217a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b08      	cmp	r3, #8
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x21a>
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2b0c      	cmp	r3, #12
 800209a:	d10e      	bne.n	80020ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d10b      	bne.n	80020ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d064      	beq.n	8002178 <HAL_RCC_OscConfig+0x2f0>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d160      	bne.n	8002178 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e2ba      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x24a>
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e026      	b.n	8002120 <HAL_RCC_OscConfig+0x298>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020da:	d115      	bne.n	8002108 <HAL_RCC_OscConfig+0x280>
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a02      	ldr	r2, [pc, #8]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	e014      	b.n	8002120 <HAL_RCC_OscConfig+0x298>
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08005074 	.word	0x08005074
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004
 8002108:	4ba0      	ldr	r3, [pc, #640]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a9f      	ldr	r2, [pc, #636]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800210e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b9d      	ldr	r3, [pc, #628]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a9c      	ldr	r2, [pc, #624]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe ff3a 	bl	8000fa0 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7fe ff36 	bl	8000fa0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e276      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002142:	4b92      	ldr	r3, [pc, #584]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x2a8>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe ff26 	bl	8000fa0 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7fe ff22 	bl	8000fa0 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e262      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800216a:	4b88      	ldr	r3, [pc, #544]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x2d0>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d060      	beq.n	8002248 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d005      	beq.n	8002198 <HAL_RCC_OscConfig+0x310>
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d119      	bne.n	80021c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d116      	bne.n	80021c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002198:	4b7c      	ldr	r3, [pc, #496]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_OscConfig+0x328>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e23f      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b76      	ldr	r3, [pc, #472]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	4973      	ldr	r1, [pc, #460]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c4:	e040      	b.n	8002248 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d023      	beq.n	8002216 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ce:	4b6f      	ldr	r3, [pc, #444]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6e      	ldr	r2, [pc, #440]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7fe fee1 	bl	8000fa0 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e2:	f7fe fedd 	bl	8000fa0 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e21d      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f4:	4b65      	ldr	r3, [pc, #404]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b62      	ldr	r3, [pc, #392]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	495f      	ldr	r1, [pc, #380]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
 8002214:	e018      	b.n	8002248 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002216:	4b5d      	ldr	r3, [pc, #372]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a5c      	ldr	r2, [pc, #368]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800221c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7fe febd 	bl	8000fa0 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222a:	f7fe feb9 	bl	8000fa0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e1f9      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800223c:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d03c      	beq.n	80022ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01c      	beq.n	8002296 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225c:	4b4b      	ldr	r3, [pc, #300]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002262:	4a4a      	ldr	r2, [pc, #296]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7fe fe98 	bl	8000fa0 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002274:	f7fe fe94 	bl	8000fa0 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1d4      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ef      	beq.n	8002274 <HAL_RCC_OscConfig+0x3ec>
 8002294:	e01b      	b.n	80022ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229c:	4a3b      	ldr	r2, [pc, #236]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7fe fe7b 	bl	8000fa0 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ae:	f7fe fe77 	bl	8000fa0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1b7      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1ef      	bne.n	80022ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80a6 	beq.w	8002428 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10d      	bne.n	8002308 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	4a26      	ldr	r2, [pc, #152]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6593      	str	r3, [r2, #88]	; 0x58
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002304:	2301      	movs	r3, #1
 8002306:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_RCC_OscConfig+0x508>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d118      	bne.n	8002346 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002314:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <HAL_RCC_OscConfig+0x508>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <HAL_RCC_OscConfig+0x508>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002320:	f7fe fe3e 	bl	8000fa0 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002328:	f7fe fe3a 	bl	8000fa0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e17a      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_RCC_OscConfig+0x508>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d108      	bne.n	8002360 <HAL_RCC_OscConfig+0x4d8>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800235e:	e029      	b.n	80023b4 <HAL_RCC_OscConfig+0x52c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b05      	cmp	r3, #5
 8002366:	d115      	bne.n	8002394 <HAL_RCC_OscConfig+0x50c>
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	4a03      	ldr	r2, [pc, #12]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002388:	e014      	b.n	80023b4 <HAL_RCC_OscConfig+0x52c>
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	40007000 	.word	0x40007000
 8002394:	4b9c      	ldr	r3, [pc, #624]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	4a9b      	ldr	r2, [pc, #620]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a4:	4b98      	ldr	r3, [pc, #608]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	4a97      	ldr	r2, [pc, #604]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d016      	beq.n	80023ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023bc:	f7fe fdf0 	bl	8000fa0 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c2:	e00a      	b.n	80023da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7fe fdec 	bl	8000fa0 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e12a      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023da:	4b8b      	ldr	r3, [pc, #556]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ed      	beq.n	80023c4 <HAL_RCC_OscConfig+0x53c>
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe fdd9 	bl	8000fa0 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fdd5 	bl	8000fa0 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e113      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002408:	4b7f      	ldr	r3, [pc, #508]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ed      	bne.n	80023f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002416:	7ffb      	ldrb	r3, [r7, #31]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d105      	bne.n	8002428 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241c:	4b7a      	ldr	r3, [pc, #488]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	4a79      	ldr	r2, [pc, #484]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002426:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80fe 	beq.w	800262e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	2b02      	cmp	r3, #2
 8002438:	f040 80d0 	bne.w	80025dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800243c:	4b72      	ldr	r3, [pc, #456]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	429a      	cmp	r2, r3
 800244e:	d130      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	3b01      	subs	r3, #1
 800245c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d127      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d11f      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800247c:	2a07      	cmp	r2, #7
 800247e:	bf14      	ite	ne
 8002480:	2201      	movne	r2, #1
 8002482:	2200      	moveq	r2, #0
 8002484:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002486:	4293      	cmp	r3, r2
 8002488:	d113      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	3b01      	subs	r3, #1
 8002498:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	3b01      	subs	r3, #1
 80024ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d06e      	beq.n	8002590 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	d069      	beq.n	800258c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024b8:	4b53      	ldr	r3, [pc, #332]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024c4:	4b50      	ldr	r3, [pc, #320]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0ad      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024d4:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a4b      	ldr	r2, [pc, #300]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80024da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024e0:	f7fe fd5e 	bl	8000fa0 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fd5a 	bl	8000fa0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e09a      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002506:	4b40      	ldr	r3, [pc, #256]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_RCC_OscConfig+0x784>)
 800250c:	4013      	ands	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002516:	3a01      	subs	r2, #1
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	4311      	orrs	r1, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002520:	0212      	lsls	r2, r2, #8
 8002522:	4311      	orrs	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002528:	0852      	lsrs	r2, r2, #1
 800252a:	3a01      	subs	r2, #1
 800252c:	0552      	lsls	r2, r2, #21
 800252e:	4311      	orrs	r1, r2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002534:	0852      	lsrs	r2, r2, #1
 8002536:	3a01      	subs	r2, #1
 8002538:	0652      	lsls	r2, r2, #25
 800253a:	4311      	orrs	r1, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002540:	0912      	lsrs	r2, r2, #4
 8002542:	0452      	lsls	r2, r2, #17
 8002544:	430a      	orrs	r2, r1
 8002546:	4930      	ldr	r1, [pc, #192]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002548:	4313      	orrs	r3, r2
 800254a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800254c:	4b2e      	ldr	r3, [pc, #184]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2d      	ldr	r2, [pc, #180]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002556:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a2a      	ldr	r2, [pc, #168]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800255e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002562:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002564:	f7fe fd1c 	bl	8000fa0 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fd18 	bl	8000fa0 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e058      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800258a:	e050      	b.n	800262e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e04f      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d148      	bne.n	800262e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a19      	ldr	r2, [pc, #100]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80025a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a16      	ldr	r2, [pc, #88]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80025ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025b4:	f7fe fcf4 	bl	8000fa0 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fcf0 	bl	8000fa0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e030      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x734>
 80025da:	e028      	b.n	800262e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d023      	beq.n	800262a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_RCC_OscConfig+0x780>)
 80025e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7fe fcd7 	bl	8000fa0 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f4:	e00c      	b.n	8002610 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe fcd3 	bl	8000fa0 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d905      	bls.n	8002610 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e013      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
 8002608:	40021000 	.word	0x40021000
 800260c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_OscConfig+0x7b0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ec      	bne.n	80025f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCC_OscConfig+0x7b0>)
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	4905      	ldr	r1, [pc, #20]	; (8002638 <HAL_RCC_OscConfig+0x7b0>)
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_OscConfig+0x7b4>)
 8002624:	4013      	ands	r3, r2
 8002626:	60cb      	str	r3, [r1, #12]
 8002628:	e001      	b.n	800262e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000
 800263c:	feeefffc 	.word	0xfeeefffc

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0e7      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b75      	ldr	r3, [pc, #468]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d910      	bls.n	8002684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b72      	ldr	r3, [pc, #456]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 0207 	bic.w	r2, r3, #7
 800266a:	4970      	ldr	r1, [pc, #448]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b6e      	ldr	r3, [pc, #440]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0cf      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d010      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	4b66      	ldr	r3, [pc, #408]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800269c:	429a      	cmp	r2, r3
 800269e:	d908      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4960      	ldr	r1, [pc, #384]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d04c      	beq.n	8002758 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c6:	4b5a      	ldr	r3, [pc, #360]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d121      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0a6      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026de:	4b54      	ldr	r3, [pc, #336]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d115      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e09a      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026f6:	4b4e      	ldr	r3, [pc, #312]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e08e      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002706:	4b4a      	ldr	r3, [pc, #296]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e086      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002716:	4b46      	ldr	r3, [pc, #280]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4943      	ldr	r1, [pc, #268]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002728:	f7fe fc3a 	bl	8000fa0 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fe fc36 	bl	8000fa0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e06e      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 020c 	and.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1eb      	bne.n	8002730 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d010      	beq.n	8002786 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002770:	429a      	cmp	r2, r3
 8002772:	d208      	bcs.n	8002786 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	492b      	ldr	r1, [pc, #172]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d210      	bcs.n	80027b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 0207 	bic.w	r2, r3, #7
 800279c:	4923      	ldr	r1, [pc, #140]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e036      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4918      	ldr	r1, [pc, #96]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4910      	ldr	r1, [pc, #64]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f4:	f000 f824 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	490b      	ldr	r1, [pc, #44]	; (8002834 <HAL_RCC_ClockConfig+0x1f4>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
 8002810:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1f8>)
 8002812:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1fc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe fb71 	bl	8000f00 <HAL_InitTick>
 800281e:	4603      	mov	r3, r0
 8002820:	72fb      	strb	r3, [r7, #11]

  return status;
 8002822:	7afb      	ldrb	r3, [r7, #11]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40022000 	.word	0x40022000
 8002830:	40021000 	.word	0x40021000
 8002834:	08005074 	.word	0x08005074
 8002838:	20000000 	.word	0x20000000
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284e:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002858:	4b3b      	ldr	r3, [pc, #236]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x34>
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d121      	bne.n	80028b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d11e      	bne.n	80028b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002874:	4b34      	ldr	r3, [pc, #208]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d107      	bne.n	8002890 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e005      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800289c:	4a2b      	ldr	r2, [pc, #172]	; (800294c <HAL_RCC_GetSysClockFreq+0x10c>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10d      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d102      	bne.n	80028be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028b8:	4b25      	ldr	r3, [pc, #148]	; (8002950 <HAL_RCC_GetSysClockFreq+0x110>)
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	e004      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028c4:	4b23      	ldr	r3, [pc, #140]	; (8002954 <HAL_RCC_GetSysClockFreq+0x114>)
 80028c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	d134      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d003      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0xac>
 80028e4:	e005      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_RCC_GetSysClockFreq+0x110>)
 80028e8:	617b      	str	r3, [r7, #20]
      break;
 80028ea:	e005      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_GetSysClockFreq+0x114>)
 80028ee:	617b      	str	r3, [r7, #20]
      break;
 80028f0:	e002      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	617b      	str	r3, [r7, #20]
      break;
 80028f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	3301      	adds	r3, #1
 8002904:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	fb03 f202 	mul.w	r2, r3, r2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	0e5b      	lsrs	r3, r3, #25
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	3301      	adds	r3, #1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002938:	69bb      	ldr	r3, [r7, #24]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	0800508c 	.word	0x0800508c
 8002950:	00f42400 	.word	0x00f42400
 8002954:	007a1200 	.word	0x007a1200

08002958 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_RCC_GetHCLKFreq+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000000 	.word	0x20000000

08002970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002974:	f7ff fff0 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4904      	ldr	r1, [pc, #16]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	08005084 	.word	0x08005084

0800299c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029a0:	f7ff ffda 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	0adb      	lsrs	r3, r3, #11
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4904      	ldr	r1, [pc, #16]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08005084 	.word	0x08005084

080029c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029e0:	f7ff f9ee 	bl	8001dc0 <HAL_PWREx_GetVoltageRange>
 80029e4:	6178      	str	r0, [r7, #20]
 80029e6:	e014      	b.n	8002a12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6593      	str	r3, [r2, #88]	; 0x58
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a00:	f7ff f9de 	bl	8001dc0 <HAL_PWREx_GetVoltageRange>
 8002a04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a06:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a18:	d10b      	bne.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d919      	bls.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2ba0      	cmp	r3, #160	; 0xa0
 8002a24:	d902      	bls.n	8002a2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a26:	2302      	movs	r3, #2
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e013      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	e010      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b80      	cmp	r3, #128	; 0x80
 8002a36:	d902      	bls.n	8002a3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a38:	2303      	movs	r3, #3
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	e00a      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b80      	cmp	r3, #128	; 0x80
 8002a42:	d102      	bne.n	8002a4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a44:	2302      	movs	r3, #2
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	e004      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b70      	cmp	r3, #112	; 0x70
 8002a4e:	d101      	bne.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a50:	2301      	movs	r3, #1
 8002a52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 0207 	bic.w	r2, r3, #7
 8002a5c:	4909      	ldr	r1, [pc, #36]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40022000 	.word	0x40022000

08002a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a90:	2300      	movs	r3, #0
 8002a92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a94:	2300      	movs	r3, #0
 8002a96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d041      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aac:	d02a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002aae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ab2:	d824      	bhi.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ab8:	d008      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002aba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002abe:	d81e      	bhi.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac8:	d010      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002aca:	e018      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002acc:	4b86      	ldr	r3, [pc, #536]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a85      	ldr	r2, [pc, #532]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ad8:	e015      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3304      	adds	r3, #4
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fabb 	bl	800305c <RCCEx_PLLSAI1_Config>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aea:	e00c      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3320      	adds	r3, #32
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fba6 	bl	8003244 <RCCEx_PLLSAI2_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002afc:	e003      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	74fb      	strb	r3, [r7, #19]
      break;
 8002b02:	e000      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b0c:	4b76      	ldr	r3, [pc, #472]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1a:	4973      	ldr	r1, [pc, #460]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b22:	e001      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d041      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b3c:	d02a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b42:	d824      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b48:	d008      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b4e:	d81e      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b58:	d010      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b5a:	e018      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b5c:	4b62      	ldr	r3, [pc, #392]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a61      	ldr	r2, [pc, #388]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b68:	e015      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fa73 	bl	800305c <RCCEx_PLLSAI1_Config>
 8002b76:	4603      	mov	r3, r0
 8002b78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b7a:	e00c      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3320      	adds	r3, #32
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fb5e 	bl	8003244 <RCCEx_PLLSAI2_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b8c:	e003      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	74fb      	strb	r3, [r7, #19]
      break;
 8002b92:	e000      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b9c:	4b52      	ldr	r3, [pc, #328]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002baa:	494f      	ldr	r1, [pc, #316]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bb2:	e001      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a0 	beq.w	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	6593      	str	r3, [r2, #88]	; 0x58
 8002bec:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bfc:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c08:	f7fe f9ca 	bl	8000fa0 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c0e:	e009      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c10:	f7fe f9c6 	bl	8000fa0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d902      	bls.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	74fb      	strb	r3, [r7, #19]
        break;
 8002c22:	e005      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c24:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ef      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d15c      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01f      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d019      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	4a20      	ldr	r2, [pc, #128]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c80:	4a19      	ldr	r2, [pc, #100]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fe f985 	bl	8000fa0 <HAL_GetTick>
 8002c96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe f981 	bl	8000fa0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d902      	bls.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	74fb      	strb	r3, [r7, #19]
            break;
 8002cb0:	e006      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0ec      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd6:	4904      	ldr	r1, [pc, #16]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cde:	e009      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	74bb      	strb	r3, [r7, #18]
 8002ce4:	e006      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf4:	7c7b      	ldrb	r3, [r7, #17]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4b9e      	ldr	r3, [pc, #632]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	4a9d      	ldr	r2, [pc, #628]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d12:	4b98      	ldr	r3, [pc, #608]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f023 0203 	bic.w	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	4994      	ldr	r1, [pc, #592]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d34:	4b8f      	ldr	r3, [pc, #572]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f023 020c 	bic.w	r2, r3, #12
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	498c      	ldr	r1, [pc, #560]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d56:	4b87      	ldr	r3, [pc, #540]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	4983      	ldr	r1, [pc, #524]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d78:	4b7e      	ldr	r3, [pc, #504]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	497b      	ldr	r1, [pc, #492]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d9a:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	4972      	ldr	r1, [pc, #456]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dbc:	4b6d      	ldr	r3, [pc, #436]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	496a      	ldr	r1, [pc, #424]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dde:	4b65      	ldr	r3, [pc, #404]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	4961      	ldr	r1, [pc, #388]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e00:	4b5c      	ldr	r3, [pc, #368]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0e:	4959      	ldr	r1, [pc, #356]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e22:	4b54      	ldr	r3, [pc, #336]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e30:	4950      	ldr	r1, [pc, #320]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e44:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	4948      	ldr	r1, [pc, #288]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e66:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	493f      	ldr	r1, [pc, #252]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d028      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e88:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e96:	4937      	ldr	r1, [pc, #220]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea8:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a31      	ldr	r2, [pc, #196]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eb2:	60d3      	str	r3, [r2, #12]
 8002eb4:	e011      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f8c8 	bl	800305c <RCCEx_PLLSAI1_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d028      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ee6:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	491f      	ldr	r1, [pc, #124]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f04:	d106      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f10:	60d3      	str	r3, [r2, #12]
 8002f12:	e011      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3304      	adds	r3, #4
 8002f22:	2101      	movs	r1, #1
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f899 	bl	800305c <RCCEx_PLLSAI1_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02b      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f52:	4908      	ldr	r1, [pc, #32]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f62:	d109      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a02      	ldr	r2, [pc, #8]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f6e:	60d3      	str	r3, [r2, #12]
 8002f70:	e014      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2101      	movs	r1, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f867 	bl	800305c <RCCEx_PLLSAI1_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f92:	7cfb      	ldrb	r3, [r7, #19]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d02f      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fb6:	4928      	ldr	r1, [pc, #160]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f844 	bl	800305c <RCCEx_PLLSAI1_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d014      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fde:	7cfb      	ldrb	r3, [r7, #19]
 8002fe0:	74bb      	strb	r3, [r7, #18]
 8002fe2:	e011      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fec:	d10c      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3320      	adds	r3, #32
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 f925 	bl	8003244 <RCCEx_PLLSAI2_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003014:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003022:	490d      	ldr	r1, [pc, #52]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003046:	4904      	ldr	r1, [pc, #16]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800304e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000

0800305c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800306a:	4b75      	ldr	r3, [pc, #468]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d018      	beq.n	80030a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003076:	4b72      	ldr	r3, [pc, #456]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0203 	and.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d10d      	bne.n	80030a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
       ||
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800308e:	4b6c      	ldr	r3, [pc, #432]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
       ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d047      	beq.n	8003132 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	e044      	b.n	8003132 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d018      	beq.n	80030e2 <RCCEx_PLLSAI1_Config+0x86>
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d825      	bhi.n	8003100 <RCCEx_PLLSAI1_Config+0xa4>
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d002      	beq.n	80030be <RCCEx_PLLSAI1_Config+0x62>
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d009      	beq.n	80030d0 <RCCEx_PLLSAI1_Config+0x74>
 80030bc:	e020      	b.n	8003100 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030be:	4b60      	ldr	r3, [pc, #384]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11d      	bne.n	8003106 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ce:	e01a      	b.n	8003106 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030d0:	4b5b      	ldr	r3, [pc, #364]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d116      	bne.n	800310a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e0:	e013      	b.n	800310a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030e2:	4b57      	ldr	r3, [pc, #348]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ee:	4b54      	ldr	r3, [pc, #336]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030fe:	e006      	b.n	800310e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e004      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003106:	bf00      	nop
 8003108:	e002      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800310a:	bf00      	nop
 800310c:	e000      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800310e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003116:	4b4a      	ldr	r3, [pc, #296]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	430b      	orrs	r3, r1
 800312c:	4944      	ldr	r1, [pc, #272]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d17d      	bne.n	8003234 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003138:	4b41      	ldr	r3, [pc, #260]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a40      	ldr	r2, [pc, #256]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800313e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003144:	f7fd ff2c 	bl	8000fa0 <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800314a:	e009      	b.n	8003160 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800314c:	f7fd ff28 	bl	8000fa0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d902      	bls.n	8003160 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	73fb      	strb	r3, [r7, #15]
        break;
 800315e:	e005      	b.n	800316c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003160:	4b37      	ldr	r3, [pc, #220]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ef      	bne.n	800314c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d160      	bne.n	8003234 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d111      	bne.n	800319c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003178:	4b31      	ldr	r3, [pc, #196]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6892      	ldr	r2, [r2, #8]
 8003188:	0211      	lsls	r1, r2, #8
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68d2      	ldr	r2, [r2, #12]
 800318e:	0912      	lsrs	r2, r2, #4
 8003190:	0452      	lsls	r2, r2, #17
 8003192:	430a      	orrs	r2, r1
 8003194:	492a      	ldr	r1, [pc, #168]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	610b      	str	r3, [r1, #16]
 800319a:	e027      	b.n	80031ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d112      	bne.n	80031c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031a2:	4b27      	ldr	r3, [pc, #156]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6892      	ldr	r2, [r2, #8]
 80031b2:	0211      	lsls	r1, r2, #8
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6912      	ldr	r2, [r2, #16]
 80031b8:	0852      	lsrs	r2, r2, #1
 80031ba:	3a01      	subs	r2, #1
 80031bc:	0552      	lsls	r2, r2, #21
 80031be:	430a      	orrs	r2, r1
 80031c0:	491f      	ldr	r1, [pc, #124]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	610b      	str	r3, [r1, #16]
 80031c6:	e011      	b.n	80031ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6892      	ldr	r2, [r2, #8]
 80031d8:	0211      	lsls	r1, r2, #8
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6952      	ldr	r2, [r2, #20]
 80031de:	0852      	lsrs	r2, r2, #1
 80031e0:	3a01      	subs	r2, #1
 80031e2:	0652      	lsls	r2, r2, #25
 80031e4:	430a      	orrs	r2, r1
 80031e6:	4916      	ldr	r1, [pc, #88]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a13      	ldr	r2, [pc, #76]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fd fed2 	bl	8000fa0 <HAL_GetTick>
 80031fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031fe:	e009      	b.n	8003214 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003200:	f7fd fece 	bl	8000fa0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d902      	bls.n	8003214 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	73fb      	strb	r3, [r7, #15]
          break;
 8003212:	e005      	b.n	8003220 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ef      	beq.n	8003200 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	4904      	ldr	r1, [pc, #16]	; (8003240 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000

08003244 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003252:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d018      	beq.n	8003290 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800325e:	4b67      	ldr	r3, [pc, #412]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f003 0203 	and.w	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d10d      	bne.n	800328a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
       ||
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003276:	4b61      	ldr	r3, [pc, #388]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
       ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d047      	beq.n	800331a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
 800328e:	e044      	b.n	800331a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b03      	cmp	r3, #3
 8003296:	d018      	beq.n	80032ca <RCCEx_PLLSAI2_Config+0x86>
 8003298:	2b03      	cmp	r3, #3
 800329a:	d825      	bhi.n	80032e8 <RCCEx_PLLSAI2_Config+0xa4>
 800329c:	2b01      	cmp	r3, #1
 800329e:	d002      	beq.n	80032a6 <RCCEx_PLLSAI2_Config+0x62>
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d009      	beq.n	80032b8 <RCCEx_PLLSAI2_Config+0x74>
 80032a4:	e020      	b.n	80032e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032a6:	4b55      	ldr	r3, [pc, #340]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11d      	bne.n	80032ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b6:	e01a      	b.n	80032ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d116      	bne.n	80032f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c8:	e013      	b.n	80032f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032ca:	4b4c      	ldr	r3, [pc, #304]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10f      	bne.n	80032f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032d6:	4b49      	ldr	r3, [pc, #292]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032e6:	e006      	b.n	80032f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      break;
 80032ec:	e004      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032ee:	bf00      	nop
 80032f0:	e002      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10d      	bne.n	800331a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032fe:	4b3f      	ldr	r3, [pc, #252]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6819      	ldr	r1, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	430b      	orrs	r3, r1
 8003314:	4939      	ldr	r1, [pc, #228]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003316:	4313      	orrs	r3, r2
 8003318:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d167      	bne.n	80033f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003320:	4b36      	ldr	r3, [pc, #216]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a35      	ldr	r2, [pc, #212]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332c:	f7fd fe38 	bl	8000fa0 <HAL_GetTick>
 8003330:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003332:	e009      	b.n	8003348 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003334:	f7fd fe34 	bl	8000fa0 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d902      	bls.n	8003348 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	73fb      	strb	r3, [r7, #15]
        break;
 8003346:	e005      	b.n	8003354 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003348:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1ef      	bne.n	8003334 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d14a      	bne.n	80033f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d111      	bne.n	8003384 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003360:	4b26      	ldr	r3, [pc, #152]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6892      	ldr	r2, [r2, #8]
 8003370:	0211      	lsls	r1, r2, #8
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68d2      	ldr	r2, [r2, #12]
 8003376:	0912      	lsrs	r2, r2, #4
 8003378:	0452      	lsls	r2, r2, #17
 800337a:	430a      	orrs	r2, r1
 800337c:	491f      	ldr	r1, [pc, #124]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800337e:	4313      	orrs	r3, r2
 8003380:	614b      	str	r3, [r1, #20]
 8003382:	e011      	b.n	80033a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003384:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800338c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6892      	ldr	r2, [r2, #8]
 8003394:	0211      	lsls	r1, r2, #8
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6912      	ldr	r2, [r2, #16]
 800339a:	0852      	lsrs	r2, r2, #1
 800339c:	3a01      	subs	r2, #1
 800339e:	0652      	lsls	r2, r2, #25
 80033a0:	430a      	orrs	r2, r1
 80033a2:	4916      	ldr	r1, [pc, #88]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a13      	ldr	r2, [pc, #76]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fd fdf4 	bl	8000fa0 <HAL_GetTick>
 80033b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033ba:	e009      	b.n	80033d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033bc:	f7fd fdf0 	bl	8000fa0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d902      	bls.n	80033d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	73fb      	strb	r3, [r7, #15]
          break;
 80033ce:	e005      	b.n	80033dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ef      	beq.n	80033bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	4904      	ldr	r1, [pc, #16]	; (80033fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000

08003400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e095      	b.n	800353e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	2b00      	cmp	r3, #0
 8003418:	d108      	bne.n	800342c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003422:	d009      	beq.n	8003438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	61da      	str	r2, [r3, #28]
 800342a:	e005      	b.n	8003438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd fb8c 	bl	8000b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003478:	d902      	bls.n	8003480 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e002      	b.n	8003486 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003484:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800348e:	d007      	beq.n	80034a0 <HAL_SPI_Init+0xa0>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003498:	d002      	beq.n	80034a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	ea42 0103 	orr.w	r1, r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	0c1b      	lsrs	r3, r3, #16
 80034fc:	f003 0204 	and.w	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800351c:	ea42 0103 	orr.w	r1, r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e040      	b.n	80035da <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7fd fb43 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2224      	movs	r2, #36	; 0x24
 8003572:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fb6b 	bl	8003c68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8b0 	bl	80036f8 <UART_SetConfig>
 8003598:	4603      	mov	r3, r0
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e01b      	b.n	80035da <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fbea 	bl	8003dac <UART_CheckIdleState>
 80035d8:	4603      	mov	r3, r0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b08a      	sub	sp, #40	; 0x28
 80035e6:	af02      	add	r7, sp, #8
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4613      	mov	r3, r2
 80035f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d178      	bne.n	80036ec <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <HAL_UART_Transmit+0x24>
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e071      	b.n	80036ee <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2221      	movs	r2, #33	; 0x21
 8003616:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003618:	f7fd fcc2 	bl	8000fa0 <HAL_GetTick>
 800361c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	88fa      	ldrh	r2, [r7, #6]
 8003622:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	88fa      	ldrh	r2, [r7, #6]
 800362a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003636:	d108      	bne.n	800364a <HAL_UART_Transmit+0x68>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	e003      	b.n	8003652 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003652:	e030      	b.n	80036b6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2200      	movs	r2, #0
 800365c:	2180      	movs	r1, #128	; 0x80
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 fc4c 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e03c      	b.n	80036ee <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10b      	bne.n	8003692 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	881a      	ldrh	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003686:	b292      	uxth	r2, r2
 8003688:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	3302      	adds	r3, #2
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	e008      	b.n	80036a4 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	b292      	uxth	r2, r2
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1c8      	bne.n	8003654 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2200      	movs	r2, #0
 80036ca:	2140      	movs	r1, #64	; 0x40
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fc15 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d004      	beq.n	80036e2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e005      	b.n	80036ee <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e000      	b.n	80036ee <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036fc:	b08a      	sub	sp, #40	; 0x28
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	431a      	orrs	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	431a      	orrs	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4313      	orrs	r3, r2
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4ba4      	ldr	r3, [pc, #656]	; (80039b8 <UART_SetConfig+0x2c0>)
 8003728:	4013      	ands	r3, r2
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003730:	430b      	orrs	r3, r1
 8003732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a99      	ldr	r2, [pc, #612]	; (80039bc <UART_SetConfig+0x2c4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d004      	beq.n	8003764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	4313      	orrs	r3, r2
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003774:	430a      	orrs	r2, r1
 8003776:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a90      	ldr	r2, [pc, #576]	; (80039c0 <UART_SetConfig+0x2c8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d126      	bne.n	80037d0 <UART_SetConfig+0xd8>
 8003782:	4b90      	ldr	r3, [pc, #576]	; (80039c4 <UART_SetConfig+0x2cc>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b03      	cmp	r3, #3
 800378e:	d81b      	bhi.n	80037c8 <UART_SetConfig+0xd0>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <UART_SetConfig+0xa0>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037b9 	.word	0x080037b9
 80037a0:	080037b1 	.word	0x080037b1
 80037a4:	080037c1 	.word	0x080037c1
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ae:	e116      	b.n	80039de <UART_SetConfig+0x2e6>
 80037b0:	2302      	movs	r3, #2
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b6:	e112      	b.n	80039de <UART_SetConfig+0x2e6>
 80037b8:	2304      	movs	r3, #4
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037be:	e10e      	b.n	80039de <UART_SetConfig+0x2e6>
 80037c0:	2308      	movs	r3, #8
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c6:	e10a      	b.n	80039de <UART_SetConfig+0x2e6>
 80037c8:	2310      	movs	r3, #16
 80037ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ce:	e106      	b.n	80039de <UART_SetConfig+0x2e6>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a7c      	ldr	r2, [pc, #496]	; (80039c8 <UART_SetConfig+0x2d0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d138      	bne.n	800384c <UART_SetConfig+0x154>
 80037da:	4b7a      	ldr	r3, [pc, #488]	; (80039c4 <UART_SetConfig+0x2cc>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	d82d      	bhi.n	8003844 <UART_SetConfig+0x14c>
 80037e8:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <UART_SetConfig+0xf8>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003825 	.word	0x08003825
 80037f4:	08003845 	.word	0x08003845
 80037f8:	08003845 	.word	0x08003845
 80037fc:	08003845 	.word	0x08003845
 8003800:	08003835 	.word	0x08003835
 8003804:	08003845 	.word	0x08003845
 8003808:	08003845 	.word	0x08003845
 800380c:	08003845 	.word	0x08003845
 8003810:	0800382d 	.word	0x0800382d
 8003814:	08003845 	.word	0x08003845
 8003818:	08003845 	.word	0x08003845
 800381c:	08003845 	.word	0x08003845
 8003820:	0800383d 	.word	0x0800383d
 8003824:	2300      	movs	r3, #0
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382a:	e0d8      	b.n	80039de <UART_SetConfig+0x2e6>
 800382c:	2302      	movs	r3, #2
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003832:	e0d4      	b.n	80039de <UART_SetConfig+0x2e6>
 8003834:	2304      	movs	r3, #4
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383a:	e0d0      	b.n	80039de <UART_SetConfig+0x2e6>
 800383c:	2308      	movs	r3, #8
 800383e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003842:	e0cc      	b.n	80039de <UART_SetConfig+0x2e6>
 8003844:	2310      	movs	r3, #16
 8003846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384a:	e0c8      	b.n	80039de <UART_SetConfig+0x2e6>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a5e      	ldr	r2, [pc, #376]	; (80039cc <UART_SetConfig+0x2d4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d125      	bne.n	80038a2 <UART_SetConfig+0x1aa>
 8003856:	4b5b      	ldr	r3, [pc, #364]	; (80039c4 <UART_SetConfig+0x2cc>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003860:	2b30      	cmp	r3, #48	; 0x30
 8003862:	d016      	beq.n	8003892 <UART_SetConfig+0x19a>
 8003864:	2b30      	cmp	r3, #48	; 0x30
 8003866:	d818      	bhi.n	800389a <UART_SetConfig+0x1a2>
 8003868:	2b20      	cmp	r3, #32
 800386a:	d00a      	beq.n	8003882 <UART_SetConfig+0x18a>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d814      	bhi.n	800389a <UART_SetConfig+0x1a2>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <UART_SetConfig+0x182>
 8003874:	2b10      	cmp	r3, #16
 8003876:	d008      	beq.n	800388a <UART_SetConfig+0x192>
 8003878:	e00f      	b.n	800389a <UART_SetConfig+0x1a2>
 800387a:	2300      	movs	r3, #0
 800387c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003880:	e0ad      	b.n	80039de <UART_SetConfig+0x2e6>
 8003882:	2302      	movs	r3, #2
 8003884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003888:	e0a9      	b.n	80039de <UART_SetConfig+0x2e6>
 800388a:	2304      	movs	r3, #4
 800388c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003890:	e0a5      	b.n	80039de <UART_SetConfig+0x2e6>
 8003892:	2308      	movs	r3, #8
 8003894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003898:	e0a1      	b.n	80039de <UART_SetConfig+0x2e6>
 800389a:	2310      	movs	r3, #16
 800389c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a0:	e09d      	b.n	80039de <UART_SetConfig+0x2e6>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a4a      	ldr	r2, [pc, #296]	; (80039d0 <UART_SetConfig+0x2d8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d125      	bne.n	80038f8 <UART_SetConfig+0x200>
 80038ac:	4b45      	ldr	r3, [pc, #276]	; (80039c4 <UART_SetConfig+0x2cc>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038b6:	2bc0      	cmp	r3, #192	; 0xc0
 80038b8:	d016      	beq.n	80038e8 <UART_SetConfig+0x1f0>
 80038ba:	2bc0      	cmp	r3, #192	; 0xc0
 80038bc:	d818      	bhi.n	80038f0 <UART_SetConfig+0x1f8>
 80038be:	2b80      	cmp	r3, #128	; 0x80
 80038c0:	d00a      	beq.n	80038d8 <UART_SetConfig+0x1e0>
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d814      	bhi.n	80038f0 <UART_SetConfig+0x1f8>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <UART_SetConfig+0x1d8>
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	d008      	beq.n	80038e0 <UART_SetConfig+0x1e8>
 80038ce:	e00f      	b.n	80038f0 <UART_SetConfig+0x1f8>
 80038d0:	2300      	movs	r3, #0
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d6:	e082      	b.n	80039de <UART_SetConfig+0x2e6>
 80038d8:	2302      	movs	r3, #2
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038de:	e07e      	b.n	80039de <UART_SetConfig+0x2e6>
 80038e0:	2304      	movs	r3, #4
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e6:	e07a      	b.n	80039de <UART_SetConfig+0x2e6>
 80038e8:	2308      	movs	r3, #8
 80038ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ee:	e076      	b.n	80039de <UART_SetConfig+0x2e6>
 80038f0:	2310      	movs	r3, #16
 80038f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f6:	e072      	b.n	80039de <UART_SetConfig+0x2e6>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a35      	ldr	r2, [pc, #212]	; (80039d4 <UART_SetConfig+0x2dc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d12a      	bne.n	8003958 <UART_SetConfig+0x260>
 8003902:	4b30      	ldr	r3, [pc, #192]	; (80039c4 <UART_SetConfig+0x2cc>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003910:	d01a      	beq.n	8003948 <UART_SetConfig+0x250>
 8003912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003916:	d81b      	bhi.n	8003950 <UART_SetConfig+0x258>
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d00c      	beq.n	8003938 <UART_SetConfig+0x240>
 800391e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003922:	d815      	bhi.n	8003950 <UART_SetConfig+0x258>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <UART_SetConfig+0x238>
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d008      	beq.n	8003940 <UART_SetConfig+0x248>
 800392e:	e00f      	b.n	8003950 <UART_SetConfig+0x258>
 8003930:	2300      	movs	r3, #0
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003936:	e052      	b.n	80039de <UART_SetConfig+0x2e6>
 8003938:	2302      	movs	r3, #2
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393e:	e04e      	b.n	80039de <UART_SetConfig+0x2e6>
 8003940:	2304      	movs	r3, #4
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003946:	e04a      	b.n	80039de <UART_SetConfig+0x2e6>
 8003948:	2308      	movs	r3, #8
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394e:	e046      	b.n	80039de <UART_SetConfig+0x2e6>
 8003950:	2310      	movs	r3, #16
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003956:	e042      	b.n	80039de <UART_SetConfig+0x2e6>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a17      	ldr	r2, [pc, #92]	; (80039bc <UART_SetConfig+0x2c4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d13a      	bne.n	80039d8 <UART_SetConfig+0x2e0>
 8003962:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <UART_SetConfig+0x2cc>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800396c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003970:	d01a      	beq.n	80039a8 <UART_SetConfig+0x2b0>
 8003972:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003976:	d81b      	bhi.n	80039b0 <UART_SetConfig+0x2b8>
 8003978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397c:	d00c      	beq.n	8003998 <UART_SetConfig+0x2a0>
 800397e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003982:	d815      	bhi.n	80039b0 <UART_SetConfig+0x2b8>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <UART_SetConfig+0x298>
 8003988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398c:	d008      	beq.n	80039a0 <UART_SetConfig+0x2a8>
 800398e:	e00f      	b.n	80039b0 <UART_SetConfig+0x2b8>
 8003990:	2300      	movs	r3, #0
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e022      	b.n	80039de <UART_SetConfig+0x2e6>
 8003998:	2302      	movs	r3, #2
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e01e      	b.n	80039de <UART_SetConfig+0x2e6>
 80039a0:	2304      	movs	r3, #4
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e01a      	b.n	80039de <UART_SetConfig+0x2e6>
 80039a8:	2308      	movs	r3, #8
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ae:	e016      	b.n	80039de <UART_SetConfig+0x2e6>
 80039b0:	2310      	movs	r3, #16
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b6:	e012      	b.n	80039de <UART_SetConfig+0x2e6>
 80039b8:	efff69f3 	.word	0xefff69f3
 80039bc:	40008000 	.word	0x40008000
 80039c0:	40013800 	.word	0x40013800
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40004400 	.word	0x40004400
 80039cc:	40004800 	.word	0x40004800
 80039d0:	40004c00 	.word	0x40004c00
 80039d4:	40005000 	.word	0x40005000
 80039d8:	2310      	movs	r3, #16
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a9f      	ldr	r2, [pc, #636]	; (8003c60 <UART_SetConfig+0x568>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d17a      	bne.n	8003ade <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d824      	bhi.n	8003a3a <UART_SetConfig+0x342>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0x300>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a3b 	.word	0x08003a3b
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a3b 	.word	0x08003a3b
 8003a08:	08003a2b 	.word	0x08003a2b
 8003a0c:	08003a3b 	.word	0x08003a3b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a3b 	.word	0x08003a3b
 8003a18:	08003a33 	.word	0x08003a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7fe ffa8 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003a20:	61f8      	str	r0, [r7, #28]
        break;
 8003a22:	e010      	b.n	8003a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a24:	4b8f      	ldr	r3, [pc, #572]	; (8003c64 <UART_SetConfig+0x56c>)
 8003a26:	61fb      	str	r3, [r7, #28]
        break;
 8003a28:	e00d      	b.n	8003a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a2a:	f7fe ff09 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8003a2e:	61f8      	str	r0, [r7, #28]
        break;
 8003a30:	e009      	b.n	8003a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a36:	61fb      	str	r3, [r7, #28]
        break;
 8003a38:	e005      	b.n	8003a46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80fb 	beq.w	8003c44 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d305      	bcc.n	8003a6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d903      	bls.n	8003a72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a70:	e0e8      	b.n	8003c44 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2200      	movs	r2, #0
 8003a76:	461c      	mov	r4, r3
 8003a78:	4615      	mov	r5, r2
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	022b      	lsls	r3, r5, #8
 8003a84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a88:	0222      	lsls	r2, r4, #8
 8003a8a:	68f9      	ldr	r1, [r7, #12]
 8003a8c:	6849      	ldr	r1, [r1, #4]
 8003a8e:	0849      	lsrs	r1, r1, #1
 8003a90:	2000      	movs	r0, #0
 8003a92:	4688      	mov	r8, r1
 8003a94:	4681      	mov	r9, r0
 8003a96:	eb12 0a08 	adds.w	sl, r2, r8
 8003a9a:	eb43 0b09 	adc.w	fp, r3, r9
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aac:	4650      	mov	r0, sl
 8003aae:	4659      	mov	r1, fp
 8003ab0:	f7fc fbde 	bl	8000270 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ac2:	d308      	bcc.n	8003ad6 <UART_SetConfig+0x3de>
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aca:	d204      	bcs.n	8003ad6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	60da      	str	r2, [r3, #12]
 8003ad4:	e0b6      	b.n	8003c44 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003adc:	e0b2      	b.n	8003c44 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae6:	d15e      	bne.n	8003ba6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d828      	bhi.n	8003b42 <UART_SetConfig+0x44a>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <UART_SetConfig+0x400>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b25 	.word	0x08003b25
 8003b00:	08003b2d 	.word	0x08003b2d
 8003b04:	08003b43 	.word	0x08003b43
 8003b08:	08003b33 	.word	0x08003b33
 8003b0c:	08003b43 	.word	0x08003b43
 8003b10:	08003b43 	.word	0x08003b43
 8003b14:	08003b43 	.word	0x08003b43
 8003b18:	08003b3b 	.word	0x08003b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7fe ff28 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003b20:	61f8      	str	r0, [r7, #28]
        break;
 8003b22:	e014      	b.n	8003b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7fe ff3a 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8003b28:	61f8      	str	r0, [r7, #28]
        break;
 8003b2a:	e010      	b.n	8003b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b2c:	4b4d      	ldr	r3, [pc, #308]	; (8003c64 <UART_SetConfig+0x56c>)
 8003b2e:	61fb      	str	r3, [r7, #28]
        break;
 8003b30:	e00d      	b.n	8003b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b32:	f7fe fe85 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8003b36:	61f8      	str	r0, [r7, #28]
        break;
 8003b38:	e009      	b.n	8003b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3e:	61fb      	str	r3, [r7, #28]
        break;
 8003b40:	e005      	b.n	8003b4e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d077      	beq.n	8003c44 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005a      	lsls	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	441a      	add	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b0f      	cmp	r3, #15
 8003b6e:	d916      	bls.n	8003b9e <UART_SetConfig+0x4a6>
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b76:	d212      	bcs.n	8003b9e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f023 030f 	bic.w	r3, r3, #15
 8003b80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	8afb      	ldrh	r3, [r7, #22]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	8afa      	ldrh	r2, [r7, #22]
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	e052      	b.n	8003c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ba4:	e04e      	b.n	8003c44 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d827      	bhi.n	8003bfe <UART_SetConfig+0x506>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0x4bc>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003bd9 	.word	0x08003bd9
 8003bb8:	08003be1 	.word	0x08003be1
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	08003bff 	.word	0x08003bff
 8003bc4:	08003bef 	.word	0x08003bef
 8003bc8:	08003bff 	.word	0x08003bff
 8003bcc:	08003bff 	.word	0x08003bff
 8003bd0:	08003bff 	.word	0x08003bff
 8003bd4:	08003bf7 	.word	0x08003bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd8:	f7fe feca 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003bdc:	61f8      	str	r0, [r7, #28]
        break;
 8003bde:	e014      	b.n	8003c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be0:	f7fe fedc 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8003be4:	61f8      	str	r0, [r7, #28]
        break;
 8003be6:	e010      	b.n	8003c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be8:	4b1e      	ldr	r3, [pc, #120]	; (8003c64 <UART_SetConfig+0x56c>)
 8003bea:	61fb      	str	r3, [r7, #28]
        break;
 8003bec:	e00d      	b.n	8003c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bee:	f7fe fe27 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8003bf2:	61f8      	str	r0, [r7, #28]
        break;
 8003bf4:	e009      	b.n	8003c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bfa:	61fb      	str	r3, [r7, #28]
        break;
 8003bfc:	e005      	b.n	8003c0a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c08:	bf00      	nop
    }

    if (pclk != 0U)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d019      	beq.n	8003c44 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	085a      	lsrs	r2, r3, #1
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	441a      	add	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b0f      	cmp	r3, #15
 8003c28:	d909      	bls.n	8003c3e <UART_SetConfig+0x546>
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c30:	d205      	bcs.n	8003c3e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
 8003c3c:	e002      	b.n	8003c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3728      	adds	r7, #40	; 0x28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	40008000 	.word	0x40008000
 8003c64:	00f42400 	.word	0x00f42400

08003c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01a      	beq.n	8003d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d66:	d10a      	bne.n	8003d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	605a      	str	r2, [r3, #4]
  }
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b098      	sub	sp, #96	; 0x60
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dbc:	f7fd f8f0 	bl	8000fa0 <HAL_GetTick>
 8003dc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d12e      	bne.n	8003e2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f88c 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d021      	beq.n	8003e2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e08:	647b      	str	r3, [r7, #68]	; 0x44
 8003e0a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e6      	bne.n	8003dea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e062      	b.n	8003ef4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d149      	bne.n	8003ed0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e44:	2200      	movs	r2, #0
 8003e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f856 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d03c      	beq.n	8003ed0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	623b      	str	r3, [r7, #32]
   return(result);
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e74:	633b      	str	r3, [r7, #48]	; 0x30
 8003e76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e6      	bne.n	8003e56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ea8:	61fa      	str	r2, [r7, #28]
 8003eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	69b9      	ldr	r1, [r7, #24]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e5      	bne.n	8003e88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e011      	b.n	8003ef4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3758      	adds	r7, #88	; 0x58
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0c:	e049      	b.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d045      	beq.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7fd f843 	bl	8000fa0 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e048      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d031      	beq.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d110      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2208      	movs	r2, #8
 8003f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f838 	bl	8003fca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e029      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7c:	d111      	bne.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f81e 	bl	8003fca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e00f      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4013      	ands	r3, r2
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d0a6      	beq.n	8003f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b095      	sub	sp, #84	; 0x54
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ff2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e6      	bne.n	8003fd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3308      	adds	r3, #8
 800400a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	61fb      	str	r3, [r7, #28]
   return(result);
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	64bb      	str	r3, [r7, #72]	; 0x48
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3308      	adds	r3, #8
 8004022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004024:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800402a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e5      	bne.n	8004004 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403c:	2b01      	cmp	r3, #1
 800403e:	d118      	bne.n	8004072 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	60bb      	str	r3, [r7, #8]
   return(result);
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f023 0310 	bic.w	r3, r3, #16
 8004054:	647b      	str	r3, [r7, #68]	; 0x44
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6979      	ldr	r1, [r7, #20]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	613b      	str	r3, [r7, #16]
   return(result);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e6      	bne.n	8004040 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004086:	bf00      	nop
 8004088:	3754      	adds	r7, #84	; 0x54
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <malloc>:
 8004094:	4b02      	ldr	r3, [pc, #8]	; (80040a0 <malloc+0xc>)
 8004096:	4601      	mov	r1, r0
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	f000 b823 	b.w	80040e4 <_malloc_r>
 800409e:	bf00      	nop
 80040a0:	20000064 	.word	0x20000064

080040a4 <sbrk_aligned>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	4e0e      	ldr	r6, [pc, #56]	; (80040e0 <sbrk_aligned+0x3c>)
 80040a8:	460c      	mov	r4, r1
 80040aa:	6831      	ldr	r1, [r6, #0]
 80040ac:	4605      	mov	r5, r0
 80040ae:	b911      	cbnz	r1, 80040b6 <sbrk_aligned+0x12>
 80040b0:	f000 fae8 	bl	8004684 <_sbrk_r>
 80040b4:	6030      	str	r0, [r6, #0]
 80040b6:	4621      	mov	r1, r4
 80040b8:	4628      	mov	r0, r5
 80040ba:	f000 fae3 	bl	8004684 <_sbrk_r>
 80040be:	1c43      	adds	r3, r0, #1
 80040c0:	d00a      	beq.n	80040d8 <sbrk_aligned+0x34>
 80040c2:	1cc4      	adds	r4, r0, #3
 80040c4:	f024 0403 	bic.w	r4, r4, #3
 80040c8:	42a0      	cmp	r0, r4
 80040ca:	d007      	beq.n	80040dc <sbrk_aligned+0x38>
 80040cc:	1a21      	subs	r1, r4, r0
 80040ce:	4628      	mov	r0, r5
 80040d0:	f000 fad8 	bl	8004684 <_sbrk_r>
 80040d4:	3001      	adds	r0, #1
 80040d6:	d101      	bne.n	80040dc <sbrk_aligned+0x38>
 80040d8:	f04f 34ff 	mov.w	r4, #4294967295
 80040dc:	4620      	mov	r0, r4
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	200001d4 	.word	0x200001d4

080040e4 <_malloc_r>:
 80040e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040e8:	1ccd      	adds	r5, r1, #3
 80040ea:	f025 0503 	bic.w	r5, r5, #3
 80040ee:	3508      	adds	r5, #8
 80040f0:	2d0c      	cmp	r5, #12
 80040f2:	bf38      	it	cc
 80040f4:	250c      	movcc	r5, #12
 80040f6:	2d00      	cmp	r5, #0
 80040f8:	4607      	mov	r7, r0
 80040fa:	db01      	blt.n	8004100 <_malloc_r+0x1c>
 80040fc:	42a9      	cmp	r1, r5
 80040fe:	d905      	bls.n	800410c <_malloc_r+0x28>
 8004100:	230c      	movs	r3, #12
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	2600      	movs	r6, #0
 8004106:	4630      	mov	r0, r6
 8004108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800410c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80041e0 <_malloc_r+0xfc>
 8004110:	f000 f868 	bl	80041e4 <__malloc_lock>
 8004114:	f8d8 3000 	ldr.w	r3, [r8]
 8004118:	461c      	mov	r4, r3
 800411a:	bb5c      	cbnz	r4, 8004174 <_malloc_r+0x90>
 800411c:	4629      	mov	r1, r5
 800411e:	4638      	mov	r0, r7
 8004120:	f7ff ffc0 	bl	80040a4 <sbrk_aligned>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	4604      	mov	r4, r0
 8004128:	d155      	bne.n	80041d6 <_malloc_r+0xf2>
 800412a:	f8d8 4000 	ldr.w	r4, [r8]
 800412e:	4626      	mov	r6, r4
 8004130:	2e00      	cmp	r6, #0
 8004132:	d145      	bne.n	80041c0 <_malloc_r+0xdc>
 8004134:	2c00      	cmp	r4, #0
 8004136:	d048      	beq.n	80041ca <_malloc_r+0xe6>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	4631      	mov	r1, r6
 800413c:	4638      	mov	r0, r7
 800413e:	eb04 0903 	add.w	r9, r4, r3
 8004142:	f000 fa9f 	bl	8004684 <_sbrk_r>
 8004146:	4581      	cmp	r9, r0
 8004148:	d13f      	bne.n	80041ca <_malloc_r+0xe6>
 800414a:	6821      	ldr	r1, [r4, #0]
 800414c:	1a6d      	subs	r5, r5, r1
 800414e:	4629      	mov	r1, r5
 8004150:	4638      	mov	r0, r7
 8004152:	f7ff ffa7 	bl	80040a4 <sbrk_aligned>
 8004156:	3001      	adds	r0, #1
 8004158:	d037      	beq.n	80041ca <_malloc_r+0xe6>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	442b      	add	r3, r5
 800415e:	6023      	str	r3, [r4, #0]
 8004160:	f8d8 3000 	ldr.w	r3, [r8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d038      	beq.n	80041da <_malloc_r+0xf6>
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	42a2      	cmp	r2, r4
 800416c:	d12b      	bne.n	80041c6 <_malloc_r+0xe2>
 800416e:	2200      	movs	r2, #0
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	e00f      	b.n	8004194 <_malloc_r+0xb0>
 8004174:	6822      	ldr	r2, [r4, #0]
 8004176:	1b52      	subs	r2, r2, r5
 8004178:	d41f      	bmi.n	80041ba <_malloc_r+0xd6>
 800417a:	2a0b      	cmp	r2, #11
 800417c:	d917      	bls.n	80041ae <_malloc_r+0xca>
 800417e:	1961      	adds	r1, r4, r5
 8004180:	42a3      	cmp	r3, r4
 8004182:	6025      	str	r5, [r4, #0]
 8004184:	bf18      	it	ne
 8004186:	6059      	strne	r1, [r3, #4]
 8004188:	6863      	ldr	r3, [r4, #4]
 800418a:	bf08      	it	eq
 800418c:	f8c8 1000 	streq.w	r1, [r8]
 8004190:	5162      	str	r2, [r4, r5]
 8004192:	604b      	str	r3, [r1, #4]
 8004194:	4638      	mov	r0, r7
 8004196:	f104 060b 	add.w	r6, r4, #11
 800419a:	f000 f829 	bl	80041f0 <__malloc_unlock>
 800419e:	f026 0607 	bic.w	r6, r6, #7
 80041a2:	1d23      	adds	r3, r4, #4
 80041a4:	1af2      	subs	r2, r6, r3
 80041a6:	d0ae      	beq.n	8004106 <_malloc_r+0x22>
 80041a8:	1b9b      	subs	r3, r3, r6
 80041aa:	50a3      	str	r3, [r4, r2]
 80041ac:	e7ab      	b.n	8004106 <_malloc_r+0x22>
 80041ae:	42a3      	cmp	r3, r4
 80041b0:	6862      	ldr	r2, [r4, #4]
 80041b2:	d1dd      	bne.n	8004170 <_malloc_r+0x8c>
 80041b4:	f8c8 2000 	str.w	r2, [r8]
 80041b8:	e7ec      	b.n	8004194 <_malloc_r+0xb0>
 80041ba:	4623      	mov	r3, r4
 80041bc:	6864      	ldr	r4, [r4, #4]
 80041be:	e7ac      	b.n	800411a <_malloc_r+0x36>
 80041c0:	4634      	mov	r4, r6
 80041c2:	6876      	ldr	r6, [r6, #4]
 80041c4:	e7b4      	b.n	8004130 <_malloc_r+0x4c>
 80041c6:	4613      	mov	r3, r2
 80041c8:	e7cc      	b.n	8004164 <_malloc_r+0x80>
 80041ca:	230c      	movs	r3, #12
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4638      	mov	r0, r7
 80041d0:	f000 f80e 	bl	80041f0 <__malloc_unlock>
 80041d4:	e797      	b.n	8004106 <_malloc_r+0x22>
 80041d6:	6025      	str	r5, [r4, #0]
 80041d8:	e7dc      	b.n	8004194 <_malloc_r+0xb0>
 80041da:	605b      	str	r3, [r3, #4]
 80041dc:	deff      	udf	#255	; 0xff
 80041de:	bf00      	nop
 80041e0:	200001d0 	.word	0x200001d0

080041e4 <__malloc_lock>:
 80041e4:	4801      	ldr	r0, [pc, #4]	; (80041ec <__malloc_lock+0x8>)
 80041e6:	f000 ba9a 	b.w	800471e <__retarget_lock_acquire_recursive>
 80041ea:	bf00      	nop
 80041ec:	20000318 	.word	0x20000318

080041f0 <__malloc_unlock>:
 80041f0:	4801      	ldr	r0, [pc, #4]	; (80041f8 <__malloc_unlock+0x8>)
 80041f2:	f000 ba95 	b.w	8004720 <__retarget_lock_release_recursive>
 80041f6:	bf00      	nop
 80041f8:	20000318 	.word	0x20000318

080041fc <std>:
 80041fc:	2300      	movs	r3, #0
 80041fe:	b510      	push	{r4, lr}
 8004200:	4604      	mov	r4, r0
 8004202:	e9c0 3300 	strd	r3, r3, [r0]
 8004206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800420a:	6083      	str	r3, [r0, #8]
 800420c:	8181      	strh	r1, [r0, #12]
 800420e:	6643      	str	r3, [r0, #100]	; 0x64
 8004210:	81c2      	strh	r2, [r0, #14]
 8004212:	6183      	str	r3, [r0, #24]
 8004214:	4619      	mov	r1, r3
 8004216:	2208      	movs	r2, #8
 8004218:	305c      	adds	r0, #92	; 0x5c
 800421a:	f000 f9f7 	bl	800460c <memset>
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <std+0x58>)
 8004220:	6263      	str	r3, [r4, #36]	; 0x24
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <std+0x5c>)
 8004224:	62a3      	str	r3, [r4, #40]	; 0x28
 8004226:	4b0d      	ldr	r3, [pc, #52]	; (800425c <std+0x60>)
 8004228:	62e3      	str	r3, [r4, #44]	; 0x2c
 800422a:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <std+0x64>)
 800422c:	6323      	str	r3, [r4, #48]	; 0x30
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <std+0x68>)
 8004230:	6224      	str	r4, [r4, #32]
 8004232:	429c      	cmp	r4, r3
 8004234:	d006      	beq.n	8004244 <std+0x48>
 8004236:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800423a:	4294      	cmp	r4, r2
 800423c:	d002      	beq.n	8004244 <std+0x48>
 800423e:	33d0      	adds	r3, #208	; 0xd0
 8004240:	429c      	cmp	r4, r3
 8004242:	d105      	bne.n	8004250 <std+0x54>
 8004244:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800424c:	f000 ba66 	b.w	800471c <__retarget_lock_init_recursive>
 8004250:	bd10      	pop	{r4, pc}
 8004252:	bf00      	nop
 8004254:	0800445d 	.word	0x0800445d
 8004258:	0800447f 	.word	0x0800447f
 800425c:	080044b7 	.word	0x080044b7
 8004260:	080044db 	.word	0x080044db
 8004264:	200001d8 	.word	0x200001d8

08004268 <stdio_exit_handler>:
 8004268:	4a02      	ldr	r2, [pc, #8]	; (8004274 <stdio_exit_handler+0xc>)
 800426a:	4903      	ldr	r1, [pc, #12]	; (8004278 <stdio_exit_handler+0x10>)
 800426c:	4803      	ldr	r0, [pc, #12]	; (800427c <stdio_exit_handler+0x14>)
 800426e:	f000 b869 	b.w	8004344 <_fwalk_sglue>
 8004272:	bf00      	nop
 8004274:	2000000c 	.word	0x2000000c
 8004278:	08004e71 	.word	0x08004e71
 800427c:	20000018 	.word	0x20000018

08004280 <cleanup_stdio>:
 8004280:	6841      	ldr	r1, [r0, #4]
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <cleanup_stdio+0x34>)
 8004284:	4299      	cmp	r1, r3
 8004286:	b510      	push	{r4, lr}
 8004288:	4604      	mov	r4, r0
 800428a:	d001      	beq.n	8004290 <cleanup_stdio+0x10>
 800428c:	f000 fdf0 	bl	8004e70 <_fflush_r>
 8004290:	68a1      	ldr	r1, [r4, #8]
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <cleanup_stdio+0x38>)
 8004294:	4299      	cmp	r1, r3
 8004296:	d002      	beq.n	800429e <cleanup_stdio+0x1e>
 8004298:	4620      	mov	r0, r4
 800429a:	f000 fde9 	bl	8004e70 <_fflush_r>
 800429e:	68e1      	ldr	r1, [r4, #12]
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <cleanup_stdio+0x3c>)
 80042a2:	4299      	cmp	r1, r3
 80042a4:	d004      	beq.n	80042b0 <cleanup_stdio+0x30>
 80042a6:	4620      	mov	r0, r4
 80042a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042ac:	f000 bde0 	b.w	8004e70 <_fflush_r>
 80042b0:	bd10      	pop	{r4, pc}
 80042b2:	bf00      	nop
 80042b4:	200001d8 	.word	0x200001d8
 80042b8:	20000240 	.word	0x20000240
 80042bc:	200002a8 	.word	0x200002a8

080042c0 <global_stdio_init.part.0>:
 80042c0:	b510      	push	{r4, lr}
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <global_stdio_init.part.0+0x30>)
 80042c4:	4c0b      	ldr	r4, [pc, #44]	; (80042f4 <global_stdio_init.part.0+0x34>)
 80042c6:	4a0c      	ldr	r2, [pc, #48]	; (80042f8 <global_stdio_init.part.0+0x38>)
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	4620      	mov	r0, r4
 80042cc:	2200      	movs	r2, #0
 80042ce:	2104      	movs	r1, #4
 80042d0:	f7ff ff94 	bl	80041fc <std>
 80042d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80042d8:	2201      	movs	r2, #1
 80042da:	2109      	movs	r1, #9
 80042dc:	f7ff ff8e 	bl	80041fc <std>
 80042e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80042e4:	2202      	movs	r2, #2
 80042e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042ea:	2112      	movs	r1, #18
 80042ec:	f7ff bf86 	b.w	80041fc <std>
 80042f0:	20000310 	.word	0x20000310
 80042f4:	200001d8 	.word	0x200001d8
 80042f8:	08004269 	.word	0x08004269

080042fc <__sfp_lock_acquire>:
 80042fc:	4801      	ldr	r0, [pc, #4]	; (8004304 <__sfp_lock_acquire+0x8>)
 80042fe:	f000 ba0e 	b.w	800471e <__retarget_lock_acquire_recursive>
 8004302:	bf00      	nop
 8004304:	20000319 	.word	0x20000319

08004308 <__sfp_lock_release>:
 8004308:	4801      	ldr	r0, [pc, #4]	; (8004310 <__sfp_lock_release+0x8>)
 800430a:	f000 ba09 	b.w	8004720 <__retarget_lock_release_recursive>
 800430e:	bf00      	nop
 8004310:	20000319 	.word	0x20000319

08004314 <__sinit>:
 8004314:	b510      	push	{r4, lr}
 8004316:	4604      	mov	r4, r0
 8004318:	f7ff fff0 	bl	80042fc <__sfp_lock_acquire>
 800431c:	6a23      	ldr	r3, [r4, #32]
 800431e:	b11b      	cbz	r3, 8004328 <__sinit+0x14>
 8004320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004324:	f7ff bff0 	b.w	8004308 <__sfp_lock_release>
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <__sinit+0x28>)
 800432a:	6223      	str	r3, [r4, #32]
 800432c:	4b04      	ldr	r3, [pc, #16]	; (8004340 <__sinit+0x2c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f5      	bne.n	8004320 <__sinit+0xc>
 8004334:	f7ff ffc4 	bl	80042c0 <global_stdio_init.part.0>
 8004338:	e7f2      	b.n	8004320 <__sinit+0xc>
 800433a:	bf00      	nop
 800433c:	08004281 	.word	0x08004281
 8004340:	20000310 	.word	0x20000310

08004344 <_fwalk_sglue>:
 8004344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004348:	4607      	mov	r7, r0
 800434a:	4688      	mov	r8, r1
 800434c:	4614      	mov	r4, r2
 800434e:	2600      	movs	r6, #0
 8004350:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004354:	f1b9 0901 	subs.w	r9, r9, #1
 8004358:	d505      	bpl.n	8004366 <_fwalk_sglue+0x22>
 800435a:	6824      	ldr	r4, [r4, #0]
 800435c:	2c00      	cmp	r4, #0
 800435e:	d1f7      	bne.n	8004350 <_fwalk_sglue+0xc>
 8004360:	4630      	mov	r0, r6
 8004362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004366:	89ab      	ldrh	r3, [r5, #12]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d907      	bls.n	800437c <_fwalk_sglue+0x38>
 800436c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004370:	3301      	adds	r3, #1
 8004372:	d003      	beq.n	800437c <_fwalk_sglue+0x38>
 8004374:	4629      	mov	r1, r5
 8004376:	4638      	mov	r0, r7
 8004378:	47c0      	blx	r8
 800437a:	4306      	orrs	r6, r0
 800437c:	3568      	adds	r5, #104	; 0x68
 800437e:	e7e9      	b.n	8004354 <_fwalk_sglue+0x10>

08004380 <iprintf>:
 8004380:	b40f      	push	{r0, r1, r2, r3}
 8004382:	b507      	push	{r0, r1, r2, lr}
 8004384:	4906      	ldr	r1, [pc, #24]	; (80043a0 <iprintf+0x20>)
 8004386:	ab04      	add	r3, sp, #16
 8004388:	6808      	ldr	r0, [r1, #0]
 800438a:	f853 2b04 	ldr.w	r2, [r3], #4
 800438e:	6881      	ldr	r1, [r0, #8]
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	f000 fa3d 	bl	8004810 <_vfiprintf_r>
 8004396:	b003      	add	sp, #12
 8004398:	f85d eb04 	ldr.w	lr, [sp], #4
 800439c:	b004      	add	sp, #16
 800439e:	4770      	bx	lr
 80043a0:	20000064 	.word	0x20000064

080043a4 <_puts_r>:
 80043a4:	6a03      	ldr	r3, [r0, #32]
 80043a6:	b570      	push	{r4, r5, r6, lr}
 80043a8:	6884      	ldr	r4, [r0, #8]
 80043aa:	4605      	mov	r5, r0
 80043ac:	460e      	mov	r6, r1
 80043ae:	b90b      	cbnz	r3, 80043b4 <_puts_r+0x10>
 80043b0:	f7ff ffb0 	bl	8004314 <__sinit>
 80043b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043b6:	07db      	lsls	r3, r3, #31
 80043b8:	d405      	bmi.n	80043c6 <_puts_r+0x22>
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	0598      	lsls	r0, r3, #22
 80043be:	d402      	bmi.n	80043c6 <_puts_r+0x22>
 80043c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043c2:	f000 f9ac 	bl	800471e <__retarget_lock_acquire_recursive>
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	0719      	lsls	r1, r3, #28
 80043ca:	d513      	bpl.n	80043f4 <_puts_r+0x50>
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	b18b      	cbz	r3, 80043f4 <_puts_r+0x50>
 80043d0:	3e01      	subs	r6, #1
 80043d2:	68a3      	ldr	r3, [r4, #8]
 80043d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043d8:	3b01      	subs	r3, #1
 80043da:	60a3      	str	r3, [r4, #8]
 80043dc:	b9e9      	cbnz	r1, 800441a <_puts_r+0x76>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	da2e      	bge.n	8004440 <_puts_r+0x9c>
 80043e2:	4622      	mov	r2, r4
 80043e4:	210a      	movs	r1, #10
 80043e6:	4628      	mov	r0, r5
 80043e8:	f000 f87b 	bl	80044e2 <__swbuf_r>
 80043ec:	3001      	adds	r0, #1
 80043ee:	d007      	beq.n	8004400 <_puts_r+0x5c>
 80043f0:	250a      	movs	r5, #10
 80043f2:	e007      	b.n	8004404 <_puts_r+0x60>
 80043f4:	4621      	mov	r1, r4
 80043f6:	4628      	mov	r0, r5
 80043f8:	f000 f8b0 	bl	800455c <__swsetup_r>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d0e7      	beq.n	80043d0 <_puts_r+0x2c>
 8004400:	f04f 35ff 	mov.w	r5, #4294967295
 8004404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004406:	07da      	lsls	r2, r3, #31
 8004408:	d405      	bmi.n	8004416 <_puts_r+0x72>
 800440a:	89a3      	ldrh	r3, [r4, #12]
 800440c:	059b      	lsls	r3, r3, #22
 800440e:	d402      	bmi.n	8004416 <_puts_r+0x72>
 8004410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004412:	f000 f985 	bl	8004720 <__retarget_lock_release_recursive>
 8004416:	4628      	mov	r0, r5
 8004418:	bd70      	pop	{r4, r5, r6, pc}
 800441a:	2b00      	cmp	r3, #0
 800441c:	da04      	bge.n	8004428 <_puts_r+0x84>
 800441e:	69a2      	ldr	r2, [r4, #24]
 8004420:	429a      	cmp	r2, r3
 8004422:	dc06      	bgt.n	8004432 <_puts_r+0x8e>
 8004424:	290a      	cmp	r1, #10
 8004426:	d004      	beq.n	8004432 <_puts_r+0x8e>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	6022      	str	r2, [r4, #0]
 800442e:	7019      	strb	r1, [r3, #0]
 8004430:	e7cf      	b.n	80043d2 <_puts_r+0x2e>
 8004432:	4622      	mov	r2, r4
 8004434:	4628      	mov	r0, r5
 8004436:	f000 f854 	bl	80044e2 <__swbuf_r>
 800443a:	3001      	adds	r0, #1
 800443c:	d1c9      	bne.n	80043d2 <_puts_r+0x2e>
 800443e:	e7df      	b.n	8004400 <_puts_r+0x5c>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	250a      	movs	r5, #10
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	6022      	str	r2, [r4, #0]
 8004448:	701d      	strb	r5, [r3, #0]
 800444a:	e7db      	b.n	8004404 <_puts_r+0x60>

0800444c <puts>:
 800444c:	4b02      	ldr	r3, [pc, #8]	; (8004458 <puts+0xc>)
 800444e:	4601      	mov	r1, r0
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	f7ff bfa7 	b.w	80043a4 <_puts_r>
 8004456:	bf00      	nop
 8004458:	20000064 	.word	0x20000064

0800445c <__sread>:
 800445c:	b510      	push	{r4, lr}
 800445e:	460c      	mov	r4, r1
 8004460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004464:	f000 f8fc 	bl	8004660 <_read_r>
 8004468:	2800      	cmp	r0, #0
 800446a:	bfab      	itete	ge
 800446c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800446e:	89a3      	ldrhlt	r3, [r4, #12]
 8004470:	181b      	addge	r3, r3, r0
 8004472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004476:	bfac      	ite	ge
 8004478:	6563      	strge	r3, [r4, #84]	; 0x54
 800447a:	81a3      	strhlt	r3, [r4, #12]
 800447c:	bd10      	pop	{r4, pc}

0800447e <__swrite>:
 800447e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004482:	461f      	mov	r7, r3
 8004484:	898b      	ldrh	r3, [r1, #12]
 8004486:	05db      	lsls	r3, r3, #23
 8004488:	4605      	mov	r5, r0
 800448a:	460c      	mov	r4, r1
 800448c:	4616      	mov	r6, r2
 800448e:	d505      	bpl.n	800449c <__swrite+0x1e>
 8004490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004494:	2302      	movs	r3, #2
 8004496:	2200      	movs	r2, #0
 8004498:	f000 f8d0 	bl	800463c <_lseek_r>
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044a6:	81a3      	strh	r3, [r4, #12]
 80044a8:	4632      	mov	r2, r6
 80044aa:	463b      	mov	r3, r7
 80044ac:	4628      	mov	r0, r5
 80044ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044b2:	f000 b8f7 	b.w	80046a4 <_write_r>

080044b6 <__sseek>:
 80044b6:	b510      	push	{r4, lr}
 80044b8:	460c      	mov	r4, r1
 80044ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044be:	f000 f8bd 	bl	800463c <_lseek_r>
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	89a3      	ldrh	r3, [r4, #12]
 80044c6:	bf15      	itete	ne
 80044c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80044ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044d2:	81a3      	strheq	r3, [r4, #12]
 80044d4:	bf18      	it	ne
 80044d6:	81a3      	strhne	r3, [r4, #12]
 80044d8:	bd10      	pop	{r4, pc}

080044da <__sclose>:
 80044da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044de:	f000 b89d 	b.w	800461c <_close_r>

080044e2 <__swbuf_r>:
 80044e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e4:	460e      	mov	r6, r1
 80044e6:	4614      	mov	r4, r2
 80044e8:	4605      	mov	r5, r0
 80044ea:	b118      	cbz	r0, 80044f4 <__swbuf_r+0x12>
 80044ec:	6a03      	ldr	r3, [r0, #32]
 80044ee:	b90b      	cbnz	r3, 80044f4 <__swbuf_r+0x12>
 80044f0:	f7ff ff10 	bl	8004314 <__sinit>
 80044f4:	69a3      	ldr	r3, [r4, #24]
 80044f6:	60a3      	str	r3, [r4, #8]
 80044f8:	89a3      	ldrh	r3, [r4, #12]
 80044fa:	071a      	lsls	r2, r3, #28
 80044fc:	d525      	bpl.n	800454a <__swbuf_r+0x68>
 80044fe:	6923      	ldr	r3, [r4, #16]
 8004500:	b31b      	cbz	r3, 800454a <__swbuf_r+0x68>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	6922      	ldr	r2, [r4, #16]
 8004506:	1a98      	subs	r0, r3, r2
 8004508:	6963      	ldr	r3, [r4, #20]
 800450a:	b2f6      	uxtb	r6, r6
 800450c:	4283      	cmp	r3, r0
 800450e:	4637      	mov	r7, r6
 8004510:	dc04      	bgt.n	800451c <__swbuf_r+0x3a>
 8004512:	4621      	mov	r1, r4
 8004514:	4628      	mov	r0, r5
 8004516:	f000 fcab 	bl	8004e70 <_fflush_r>
 800451a:	b9e0      	cbnz	r0, 8004556 <__swbuf_r+0x74>
 800451c:	68a3      	ldr	r3, [r4, #8]
 800451e:	3b01      	subs	r3, #1
 8004520:	60a3      	str	r3, [r4, #8]
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	6022      	str	r2, [r4, #0]
 8004528:	701e      	strb	r6, [r3, #0]
 800452a:	6962      	ldr	r2, [r4, #20]
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	429a      	cmp	r2, r3
 8004530:	d004      	beq.n	800453c <__swbuf_r+0x5a>
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	07db      	lsls	r3, r3, #31
 8004536:	d506      	bpl.n	8004546 <__swbuf_r+0x64>
 8004538:	2e0a      	cmp	r6, #10
 800453a:	d104      	bne.n	8004546 <__swbuf_r+0x64>
 800453c:	4621      	mov	r1, r4
 800453e:	4628      	mov	r0, r5
 8004540:	f000 fc96 	bl	8004e70 <_fflush_r>
 8004544:	b938      	cbnz	r0, 8004556 <__swbuf_r+0x74>
 8004546:	4638      	mov	r0, r7
 8004548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800454a:	4621      	mov	r1, r4
 800454c:	4628      	mov	r0, r5
 800454e:	f000 f805 	bl	800455c <__swsetup_r>
 8004552:	2800      	cmp	r0, #0
 8004554:	d0d5      	beq.n	8004502 <__swbuf_r+0x20>
 8004556:	f04f 37ff 	mov.w	r7, #4294967295
 800455a:	e7f4      	b.n	8004546 <__swbuf_r+0x64>

0800455c <__swsetup_r>:
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <__swsetup_r+0xac>)
 8004560:	4605      	mov	r5, r0
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	460c      	mov	r4, r1
 8004566:	b118      	cbz	r0, 8004570 <__swsetup_r+0x14>
 8004568:	6a03      	ldr	r3, [r0, #32]
 800456a:	b90b      	cbnz	r3, 8004570 <__swsetup_r+0x14>
 800456c:	f7ff fed2 	bl	8004314 <__sinit>
 8004570:	89a3      	ldrh	r3, [r4, #12]
 8004572:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004576:	0718      	lsls	r0, r3, #28
 8004578:	d422      	bmi.n	80045c0 <__swsetup_r+0x64>
 800457a:	06d9      	lsls	r1, r3, #27
 800457c:	d407      	bmi.n	800458e <__swsetup_r+0x32>
 800457e:	2309      	movs	r3, #9
 8004580:	602b      	str	r3, [r5, #0]
 8004582:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	e034      	b.n	80045f8 <__swsetup_r+0x9c>
 800458e:	0758      	lsls	r0, r3, #29
 8004590:	d512      	bpl.n	80045b8 <__swsetup_r+0x5c>
 8004592:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004594:	b141      	cbz	r1, 80045a8 <__swsetup_r+0x4c>
 8004596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800459a:	4299      	cmp	r1, r3
 800459c:	d002      	beq.n	80045a4 <__swsetup_r+0x48>
 800459e:	4628      	mov	r0, r5
 80045a0:	f000 f8c0 	bl	8004724 <_free_r>
 80045a4:	2300      	movs	r3, #0
 80045a6:	6363      	str	r3, [r4, #52]	; 0x34
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	2300      	movs	r3, #0
 80045b2:	6063      	str	r3, [r4, #4]
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	f043 0308 	orr.w	r3, r3, #8
 80045be:	81a3      	strh	r3, [r4, #12]
 80045c0:	6923      	ldr	r3, [r4, #16]
 80045c2:	b94b      	cbnz	r3, 80045d8 <__swsetup_r+0x7c>
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ce:	d003      	beq.n	80045d8 <__swsetup_r+0x7c>
 80045d0:	4621      	mov	r1, r4
 80045d2:	4628      	mov	r0, r5
 80045d4:	f000 fc9a 	bl	8004f0c <__smakebuf_r>
 80045d8:	89a0      	ldrh	r0, [r4, #12]
 80045da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045de:	f010 0301 	ands.w	r3, r0, #1
 80045e2:	d00a      	beq.n	80045fa <__swsetup_r+0x9e>
 80045e4:	2300      	movs	r3, #0
 80045e6:	60a3      	str	r3, [r4, #8]
 80045e8:	6963      	ldr	r3, [r4, #20]
 80045ea:	425b      	negs	r3, r3
 80045ec:	61a3      	str	r3, [r4, #24]
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	b943      	cbnz	r3, 8004604 <__swsetup_r+0xa8>
 80045f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045f6:	d1c4      	bne.n	8004582 <__swsetup_r+0x26>
 80045f8:	bd38      	pop	{r3, r4, r5, pc}
 80045fa:	0781      	lsls	r1, r0, #30
 80045fc:	bf58      	it	pl
 80045fe:	6963      	ldrpl	r3, [r4, #20]
 8004600:	60a3      	str	r3, [r4, #8]
 8004602:	e7f4      	b.n	80045ee <__swsetup_r+0x92>
 8004604:	2000      	movs	r0, #0
 8004606:	e7f7      	b.n	80045f8 <__swsetup_r+0x9c>
 8004608:	20000064 	.word	0x20000064

0800460c <memset>:
 800460c:	4402      	add	r2, r0
 800460e:	4603      	mov	r3, r0
 8004610:	4293      	cmp	r3, r2
 8004612:	d100      	bne.n	8004616 <memset+0xa>
 8004614:	4770      	bx	lr
 8004616:	f803 1b01 	strb.w	r1, [r3], #1
 800461a:	e7f9      	b.n	8004610 <memset+0x4>

0800461c <_close_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4d06      	ldr	r5, [pc, #24]	; (8004638 <_close_r+0x1c>)
 8004620:	2300      	movs	r3, #0
 8004622:	4604      	mov	r4, r0
 8004624:	4608      	mov	r0, r1
 8004626:	602b      	str	r3, [r5, #0]
 8004628:	f7fc fba3 	bl	8000d72 <_close>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d102      	bne.n	8004636 <_close_r+0x1a>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	b103      	cbz	r3, 8004636 <_close_r+0x1a>
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	bd38      	pop	{r3, r4, r5, pc}
 8004638:	20000314 	.word	0x20000314

0800463c <_lseek_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4d07      	ldr	r5, [pc, #28]	; (800465c <_lseek_r+0x20>)
 8004640:	4604      	mov	r4, r0
 8004642:	4608      	mov	r0, r1
 8004644:	4611      	mov	r1, r2
 8004646:	2200      	movs	r2, #0
 8004648:	602a      	str	r2, [r5, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	f7fc fbb8 	bl	8000dc0 <_lseek>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d102      	bne.n	800465a <_lseek_r+0x1e>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	b103      	cbz	r3, 800465a <_lseek_r+0x1e>
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	20000314 	.word	0x20000314

08004660 <_read_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4d07      	ldr	r5, [pc, #28]	; (8004680 <_read_r+0x20>)
 8004664:	4604      	mov	r4, r0
 8004666:	4608      	mov	r0, r1
 8004668:	4611      	mov	r1, r2
 800466a:	2200      	movs	r2, #0
 800466c:	602a      	str	r2, [r5, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	f7fc fb46 	bl	8000d00 <_read>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_read_r+0x1e>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	b103      	cbz	r3, 800467e <_read_r+0x1e>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	20000314 	.word	0x20000314

08004684 <_sbrk_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4d06      	ldr	r5, [pc, #24]	; (80046a0 <_sbrk_r+0x1c>)
 8004688:	2300      	movs	r3, #0
 800468a:	4604      	mov	r4, r0
 800468c:	4608      	mov	r0, r1
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	f7fc fba4 	bl	8000ddc <_sbrk>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_sbrk_r+0x1a>
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	b103      	cbz	r3, 800469e <_sbrk_r+0x1a>
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	20000314 	.word	0x20000314

080046a4 <_write_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4d07      	ldr	r5, [pc, #28]	; (80046c4 <_write_r+0x20>)
 80046a8:	4604      	mov	r4, r0
 80046aa:	4608      	mov	r0, r1
 80046ac:	4611      	mov	r1, r2
 80046ae:	2200      	movs	r2, #0
 80046b0:	602a      	str	r2, [r5, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	f7fc fb41 	bl	8000d3a <_write>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d102      	bne.n	80046c2 <_write_r+0x1e>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	b103      	cbz	r3, 80046c2 <_write_r+0x1e>
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	20000314 	.word	0x20000314

080046c8 <__errno>:
 80046c8:	4b01      	ldr	r3, [pc, #4]	; (80046d0 <__errno+0x8>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000064 	.word	0x20000064

080046d4 <__libc_init_array>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4d0d      	ldr	r5, [pc, #52]	; (800470c <__libc_init_array+0x38>)
 80046d8:	4c0d      	ldr	r4, [pc, #52]	; (8004710 <__libc_init_array+0x3c>)
 80046da:	1b64      	subs	r4, r4, r5
 80046dc:	10a4      	asrs	r4, r4, #2
 80046de:	2600      	movs	r6, #0
 80046e0:	42a6      	cmp	r6, r4
 80046e2:	d109      	bne.n	80046f8 <__libc_init_array+0x24>
 80046e4:	4d0b      	ldr	r5, [pc, #44]	; (8004714 <__libc_init_array+0x40>)
 80046e6:	4c0c      	ldr	r4, [pc, #48]	; (8004718 <__libc_init_array+0x44>)
 80046e8:	f000 fc6e 	bl	8004fc8 <_init>
 80046ec:	1b64      	subs	r4, r4, r5
 80046ee:	10a4      	asrs	r4, r4, #2
 80046f0:	2600      	movs	r6, #0
 80046f2:	42a6      	cmp	r6, r4
 80046f4:	d105      	bne.n	8004702 <__libc_init_array+0x2e>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fc:	4798      	blx	r3
 80046fe:	3601      	adds	r6, #1
 8004700:	e7ee      	b.n	80046e0 <__libc_init_array+0xc>
 8004702:	f855 3b04 	ldr.w	r3, [r5], #4
 8004706:	4798      	blx	r3
 8004708:	3601      	adds	r6, #1
 800470a:	e7f2      	b.n	80046f2 <__libc_init_array+0x1e>
 800470c:	080050f8 	.word	0x080050f8
 8004710:	080050f8 	.word	0x080050f8
 8004714:	080050f8 	.word	0x080050f8
 8004718:	080050fc 	.word	0x080050fc

0800471c <__retarget_lock_init_recursive>:
 800471c:	4770      	bx	lr

0800471e <__retarget_lock_acquire_recursive>:
 800471e:	4770      	bx	lr

08004720 <__retarget_lock_release_recursive>:
 8004720:	4770      	bx	lr
	...

08004724 <_free_r>:
 8004724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004726:	2900      	cmp	r1, #0
 8004728:	d044      	beq.n	80047b4 <_free_r+0x90>
 800472a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800472e:	9001      	str	r0, [sp, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f1a1 0404 	sub.w	r4, r1, #4
 8004736:	bfb8      	it	lt
 8004738:	18e4      	addlt	r4, r4, r3
 800473a:	f7ff fd53 	bl	80041e4 <__malloc_lock>
 800473e:	4a1e      	ldr	r2, [pc, #120]	; (80047b8 <_free_r+0x94>)
 8004740:	9801      	ldr	r0, [sp, #4]
 8004742:	6813      	ldr	r3, [r2, #0]
 8004744:	b933      	cbnz	r3, 8004754 <_free_r+0x30>
 8004746:	6063      	str	r3, [r4, #4]
 8004748:	6014      	str	r4, [r2, #0]
 800474a:	b003      	add	sp, #12
 800474c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004750:	f7ff bd4e 	b.w	80041f0 <__malloc_unlock>
 8004754:	42a3      	cmp	r3, r4
 8004756:	d908      	bls.n	800476a <_free_r+0x46>
 8004758:	6825      	ldr	r5, [r4, #0]
 800475a:	1961      	adds	r1, r4, r5
 800475c:	428b      	cmp	r3, r1
 800475e:	bf01      	itttt	eq
 8004760:	6819      	ldreq	r1, [r3, #0]
 8004762:	685b      	ldreq	r3, [r3, #4]
 8004764:	1949      	addeq	r1, r1, r5
 8004766:	6021      	streq	r1, [r4, #0]
 8004768:	e7ed      	b.n	8004746 <_free_r+0x22>
 800476a:	461a      	mov	r2, r3
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	b10b      	cbz	r3, 8004774 <_free_r+0x50>
 8004770:	42a3      	cmp	r3, r4
 8004772:	d9fa      	bls.n	800476a <_free_r+0x46>
 8004774:	6811      	ldr	r1, [r2, #0]
 8004776:	1855      	adds	r5, r2, r1
 8004778:	42a5      	cmp	r5, r4
 800477a:	d10b      	bne.n	8004794 <_free_r+0x70>
 800477c:	6824      	ldr	r4, [r4, #0]
 800477e:	4421      	add	r1, r4
 8004780:	1854      	adds	r4, r2, r1
 8004782:	42a3      	cmp	r3, r4
 8004784:	6011      	str	r1, [r2, #0]
 8004786:	d1e0      	bne.n	800474a <_free_r+0x26>
 8004788:	681c      	ldr	r4, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	6053      	str	r3, [r2, #4]
 800478e:	440c      	add	r4, r1
 8004790:	6014      	str	r4, [r2, #0]
 8004792:	e7da      	b.n	800474a <_free_r+0x26>
 8004794:	d902      	bls.n	800479c <_free_r+0x78>
 8004796:	230c      	movs	r3, #12
 8004798:	6003      	str	r3, [r0, #0]
 800479a:	e7d6      	b.n	800474a <_free_r+0x26>
 800479c:	6825      	ldr	r5, [r4, #0]
 800479e:	1961      	adds	r1, r4, r5
 80047a0:	428b      	cmp	r3, r1
 80047a2:	bf04      	itt	eq
 80047a4:	6819      	ldreq	r1, [r3, #0]
 80047a6:	685b      	ldreq	r3, [r3, #4]
 80047a8:	6063      	str	r3, [r4, #4]
 80047aa:	bf04      	itt	eq
 80047ac:	1949      	addeq	r1, r1, r5
 80047ae:	6021      	streq	r1, [r4, #0]
 80047b0:	6054      	str	r4, [r2, #4]
 80047b2:	e7ca      	b.n	800474a <_free_r+0x26>
 80047b4:	b003      	add	sp, #12
 80047b6:	bd30      	pop	{r4, r5, pc}
 80047b8:	200001d0 	.word	0x200001d0

080047bc <__sfputc_r>:
 80047bc:	6893      	ldr	r3, [r2, #8]
 80047be:	3b01      	subs	r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	b410      	push	{r4}
 80047c4:	6093      	str	r3, [r2, #8]
 80047c6:	da08      	bge.n	80047da <__sfputc_r+0x1e>
 80047c8:	6994      	ldr	r4, [r2, #24]
 80047ca:	42a3      	cmp	r3, r4
 80047cc:	db01      	blt.n	80047d2 <__sfputc_r+0x16>
 80047ce:	290a      	cmp	r1, #10
 80047d0:	d103      	bne.n	80047da <__sfputc_r+0x1e>
 80047d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047d6:	f7ff be84 	b.w	80044e2 <__swbuf_r>
 80047da:	6813      	ldr	r3, [r2, #0]
 80047dc:	1c58      	adds	r0, r3, #1
 80047de:	6010      	str	r0, [r2, #0]
 80047e0:	7019      	strb	r1, [r3, #0]
 80047e2:	4608      	mov	r0, r1
 80047e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <__sfputs_r>:
 80047ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ec:	4606      	mov	r6, r0
 80047ee:	460f      	mov	r7, r1
 80047f0:	4614      	mov	r4, r2
 80047f2:	18d5      	adds	r5, r2, r3
 80047f4:	42ac      	cmp	r4, r5
 80047f6:	d101      	bne.n	80047fc <__sfputs_r+0x12>
 80047f8:	2000      	movs	r0, #0
 80047fa:	e007      	b.n	800480c <__sfputs_r+0x22>
 80047fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004800:	463a      	mov	r2, r7
 8004802:	4630      	mov	r0, r6
 8004804:	f7ff ffda 	bl	80047bc <__sfputc_r>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	d1f3      	bne.n	80047f4 <__sfputs_r+0xa>
 800480c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004810 <_vfiprintf_r>:
 8004810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004814:	460d      	mov	r5, r1
 8004816:	b09d      	sub	sp, #116	; 0x74
 8004818:	4614      	mov	r4, r2
 800481a:	4698      	mov	r8, r3
 800481c:	4606      	mov	r6, r0
 800481e:	b118      	cbz	r0, 8004828 <_vfiprintf_r+0x18>
 8004820:	6a03      	ldr	r3, [r0, #32]
 8004822:	b90b      	cbnz	r3, 8004828 <_vfiprintf_r+0x18>
 8004824:	f7ff fd76 	bl	8004314 <__sinit>
 8004828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800482a:	07d9      	lsls	r1, r3, #31
 800482c:	d405      	bmi.n	800483a <_vfiprintf_r+0x2a>
 800482e:	89ab      	ldrh	r3, [r5, #12]
 8004830:	059a      	lsls	r2, r3, #22
 8004832:	d402      	bmi.n	800483a <_vfiprintf_r+0x2a>
 8004834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004836:	f7ff ff72 	bl	800471e <__retarget_lock_acquire_recursive>
 800483a:	89ab      	ldrh	r3, [r5, #12]
 800483c:	071b      	lsls	r3, r3, #28
 800483e:	d501      	bpl.n	8004844 <_vfiprintf_r+0x34>
 8004840:	692b      	ldr	r3, [r5, #16]
 8004842:	b99b      	cbnz	r3, 800486c <_vfiprintf_r+0x5c>
 8004844:	4629      	mov	r1, r5
 8004846:	4630      	mov	r0, r6
 8004848:	f7ff fe88 	bl	800455c <__swsetup_r>
 800484c:	b170      	cbz	r0, 800486c <_vfiprintf_r+0x5c>
 800484e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004850:	07dc      	lsls	r4, r3, #31
 8004852:	d504      	bpl.n	800485e <_vfiprintf_r+0x4e>
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	b01d      	add	sp, #116	; 0x74
 800485a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485e:	89ab      	ldrh	r3, [r5, #12]
 8004860:	0598      	lsls	r0, r3, #22
 8004862:	d4f7      	bmi.n	8004854 <_vfiprintf_r+0x44>
 8004864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004866:	f7ff ff5b 	bl	8004720 <__retarget_lock_release_recursive>
 800486a:	e7f3      	b.n	8004854 <_vfiprintf_r+0x44>
 800486c:	2300      	movs	r3, #0
 800486e:	9309      	str	r3, [sp, #36]	; 0x24
 8004870:	2320      	movs	r3, #32
 8004872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004876:	f8cd 800c 	str.w	r8, [sp, #12]
 800487a:	2330      	movs	r3, #48	; 0x30
 800487c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004a30 <_vfiprintf_r+0x220>
 8004880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004884:	f04f 0901 	mov.w	r9, #1
 8004888:	4623      	mov	r3, r4
 800488a:	469a      	mov	sl, r3
 800488c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004890:	b10a      	cbz	r2, 8004896 <_vfiprintf_r+0x86>
 8004892:	2a25      	cmp	r2, #37	; 0x25
 8004894:	d1f9      	bne.n	800488a <_vfiprintf_r+0x7a>
 8004896:	ebba 0b04 	subs.w	fp, sl, r4
 800489a:	d00b      	beq.n	80048b4 <_vfiprintf_r+0xa4>
 800489c:	465b      	mov	r3, fp
 800489e:	4622      	mov	r2, r4
 80048a0:	4629      	mov	r1, r5
 80048a2:	4630      	mov	r0, r6
 80048a4:	f7ff ffa1 	bl	80047ea <__sfputs_r>
 80048a8:	3001      	adds	r0, #1
 80048aa:	f000 80a9 	beq.w	8004a00 <_vfiprintf_r+0x1f0>
 80048ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048b0:	445a      	add	r2, fp
 80048b2:	9209      	str	r2, [sp, #36]	; 0x24
 80048b4:	f89a 3000 	ldrb.w	r3, [sl]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80a1 	beq.w	8004a00 <_vfiprintf_r+0x1f0>
 80048be:	2300      	movs	r3, #0
 80048c0:	f04f 32ff 	mov.w	r2, #4294967295
 80048c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048c8:	f10a 0a01 	add.w	sl, sl, #1
 80048cc:	9304      	str	r3, [sp, #16]
 80048ce:	9307      	str	r3, [sp, #28]
 80048d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048d4:	931a      	str	r3, [sp, #104]	; 0x68
 80048d6:	4654      	mov	r4, sl
 80048d8:	2205      	movs	r2, #5
 80048da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048de:	4854      	ldr	r0, [pc, #336]	; (8004a30 <_vfiprintf_r+0x220>)
 80048e0:	f7fb fc76 	bl	80001d0 <memchr>
 80048e4:	9a04      	ldr	r2, [sp, #16]
 80048e6:	b9d8      	cbnz	r0, 8004920 <_vfiprintf_r+0x110>
 80048e8:	06d1      	lsls	r1, r2, #27
 80048ea:	bf44      	itt	mi
 80048ec:	2320      	movmi	r3, #32
 80048ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048f2:	0713      	lsls	r3, r2, #28
 80048f4:	bf44      	itt	mi
 80048f6:	232b      	movmi	r3, #43	; 0x2b
 80048f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004900:	2b2a      	cmp	r3, #42	; 0x2a
 8004902:	d015      	beq.n	8004930 <_vfiprintf_r+0x120>
 8004904:	9a07      	ldr	r2, [sp, #28]
 8004906:	4654      	mov	r4, sl
 8004908:	2000      	movs	r0, #0
 800490a:	f04f 0c0a 	mov.w	ip, #10
 800490e:	4621      	mov	r1, r4
 8004910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004914:	3b30      	subs	r3, #48	; 0x30
 8004916:	2b09      	cmp	r3, #9
 8004918:	d94d      	bls.n	80049b6 <_vfiprintf_r+0x1a6>
 800491a:	b1b0      	cbz	r0, 800494a <_vfiprintf_r+0x13a>
 800491c:	9207      	str	r2, [sp, #28]
 800491e:	e014      	b.n	800494a <_vfiprintf_r+0x13a>
 8004920:	eba0 0308 	sub.w	r3, r0, r8
 8004924:	fa09 f303 	lsl.w	r3, r9, r3
 8004928:	4313      	orrs	r3, r2
 800492a:	9304      	str	r3, [sp, #16]
 800492c:	46a2      	mov	sl, r4
 800492e:	e7d2      	b.n	80048d6 <_vfiprintf_r+0xc6>
 8004930:	9b03      	ldr	r3, [sp, #12]
 8004932:	1d19      	adds	r1, r3, #4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	9103      	str	r1, [sp, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	bfbb      	ittet	lt
 800493c:	425b      	neglt	r3, r3
 800493e:	f042 0202 	orrlt.w	r2, r2, #2
 8004942:	9307      	strge	r3, [sp, #28]
 8004944:	9307      	strlt	r3, [sp, #28]
 8004946:	bfb8      	it	lt
 8004948:	9204      	strlt	r2, [sp, #16]
 800494a:	7823      	ldrb	r3, [r4, #0]
 800494c:	2b2e      	cmp	r3, #46	; 0x2e
 800494e:	d10c      	bne.n	800496a <_vfiprintf_r+0x15a>
 8004950:	7863      	ldrb	r3, [r4, #1]
 8004952:	2b2a      	cmp	r3, #42	; 0x2a
 8004954:	d134      	bne.n	80049c0 <_vfiprintf_r+0x1b0>
 8004956:	9b03      	ldr	r3, [sp, #12]
 8004958:	1d1a      	adds	r2, r3, #4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	9203      	str	r2, [sp, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	bfb8      	it	lt
 8004962:	f04f 33ff 	movlt.w	r3, #4294967295
 8004966:	3402      	adds	r4, #2
 8004968:	9305      	str	r3, [sp, #20]
 800496a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004a40 <_vfiprintf_r+0x230>
 800496e:	7821      	ldrb	r1, [r4, #0]
 8004970:	2203      	movs	r2, #3
 8004972:	4650      	mov	r0, sl
 8004974:	f7fb fc2c 	bl	80001d0 <memchr>
 8004978:	b138      	cbz	r0, 800498a <_vfiprintf_r+0x17a>
 800497a:	9b04      	ldr	r3, [sp, #16]
 800497c:	eba0 000a 	sub.w	r0, r0, sl
 8004980:	2240      	movs	r2, #64	; 0x40
 8004982:	4082      	lsls	r2, r0
 8004984:	4313      	orrs	r3, r2
 8004986:	3401      	adds	r4, #1
 8004988:	9304      	str	r3, [sp, #16]
 800498a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800498e:	4829      	ldr	r0, [pc, #164]	; (8004a34 <_vfiprintf_r+0x224>)
 8004990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004994:	2206      	movs	r2, #6
 8004996:	f7fb fc1b 	bl	80001d0 <memchr>
 800499a:	2800      	cmp	r0, #0
 800499c:	d03f      	beq.n	8004a1e <_vfiprintf_r+0x20e>
 800499e:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <_vfiprintf_r+0x228>)
 80049a0:	bb1b      	cbnz	r3, 80049ea <_vfiprintf_r+0x1da>
 80049a2:	9b03      	ldr	r3, [sp, #12]
 80049a4:	3307      	adds	r3, #7
 80049a6:	f023 0307 	bic.w	r3, r3, #7
 80049aa:	3308      	adds	r3, #8
 80049ac:	9303      	str	r3, [sp, #12]
 80049ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b0:	443b      	add	r3, r7
 80049b2:	9309      	str	r3, [sp, #36]	; 0x24
 80049b4:	e768      	b.n	8004888 <_vfiprintf_r+0x78>
 80049b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ba:	460c      	mov	r4, r1
 80049bc:	2001      	movs	r0, #1
 80049be:	e7a6      	b.n	800490e <_vfiprintf_r+0xfe>
 80049c0:	2300      	movs	r3, #0
 80049c2:	3401      	adds	r4, #1
 80049c4:	9305      	str	r3, [sp, #20]
 80049c6:	4619      	mov	r1, r3
 80049c8:	f04f 0c0a 	mov.w	ip, #10
 80049cc:	4620      	mov	r0, r4
 80049ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049d2:	3a30      	subs	r2, #48	; 0x30
 80049d4:	2a09      	cmp	r2, #9
 80049d6:	d903      	bls.n	80049e0 <_vfiprintf_r+0x1d0>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0c6      	beq.n	800496a <_vfiprintf_r+0x15a>
 80049dc:	9105      	str	r1, [sp, #20]
 80049de:	e7c4      	b.n	800496a <_vfiprintf_r+0x15a>
 80049e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80049e4:	4604      	mov	r4, r0
 80049e6:	2301      	movs	r3, #1
 80049e8:	e7f0      	b.n	80049cc <_vfiprintf_r+0x1bc>
 80049ea:	ab03      	add	r3, sp, #12
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	462a      	mov	r2, r5
 80049f0:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <_vfiprintf_r+0x22c>)
 80049f2:	a904      	add	r1, sp, #16
 80049f4:	4630      	mov	r0, r6
 80049f6:	f3af 8000 	nop.w
 80049fa:	4607      	mov	r7, r0
 80049fc:	1c78      	adds	r0, r7, #1
 80049fe:	d1d6      	bne.n	80049ae <_vfiprintf_r+0x19e>
 8004a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a02:	07d9      	lsls	r1, r3, #31
 8004a04:	d405      	bmi.n	8004a12 <_vfiprintf_r+0x202>
 8004a06:	89ab      	ldrh	r3, [r5, #12]
 8004a08:	059a      	lsls	r2, r3, #22
 8004a0a:	d402      	bmi.n	8004a12 <_vfiprintf_r+0x202>
 8004a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a0e:	f7ff fe87 	bl	8004720 <__retarget_lock_release_recursive>
 8004a12:	89ab      	ldrh	r3, [r5, #12]
 8004a14:	065b      	lsls	r3, r3, #25
 8004a16:	f53f af1d 	bmi.w	8004854 <_vfiprintf_r+0x44>
 8004a1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a1c:	e71c      	b.n	8004858 <_vfiprintf_r+0x48>
 8004a1e:	ab03      	add	r3, sp, #12
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	462a      	mov	r2, r5
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <_vfiprintf_r+0x22c>)
 8004a26:	a904      	add	r1, sp, #16
 8004a28:	4630      	mov	r0, r6
 8004a2a:	f000 f879 	bl	8004b20 <_printf_i>
 8004a2e:	e7e4      	b.n	80049fa <_vfiprintf_r+0x1ea>
 8004a30:	080050bc 	.word	0x080050bc
 8004a34:	080050c6 	.word	0x080050c6
 8004a38:	00000000 	.word	0x00000000
 8004a3c:	080047eb 	.word	0x080047eb
 8004a40:	080050c2 	.word	0x080050c2

08004a44 <_printf_common>:
 8004a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a48:	4616      	mov	r6, r2
 8004a4a:	4699      	mov	r9, r3
 8004a4c:	688a      	ldr	r2, [r1, #8]
 8004a4e:	690b      	ldr	r3, [r1, #16]
 8004a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a54:	4293      	cmp	r3, r2
 8004a56:	bfb8      	it	lt
 8004a58:	4613      	movlt	r3, r2
 8004a5a:	6033      	str	r3, [r6, #0]
 8004a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a60:	4607      	mov	r7, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	b10a      	cbz	r2, 8004a6a <_printf_common+0x26>
 8004a66:	3301      	adds	r3, #1
 8004a68:	6033      	str	r3, [r6, #0]
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	0699      	lsls	r1, r3, #26
 8004a6e:	bf42      	ittt	mi
 8004a70:	6833      	ldrmi	r3, [r6, #0]
 8004a72:	3302      	addmi	r3, #2
 8004a74:	6033      	strmi	r3, [r6, #0]
 8004a76:	6825      	ldr	r5, [r4, #0]
 8004a78:	f015 0506 	ands.w	r5, r5, #6
 8004a7c:	d106      	bne.n	8004a8c <_printf_common+0x48>
 8004a7e:	f104 0a19 	add.w	sl, r4, #25
 8004a82:	68e3      	ldr	r3, [r4, #12]
 8004a84:	6832      	ldr	r2, [r6, #0]
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	42ab      	cmp	r3, r5
 8004a8a:	dc26      	bgt.n	8004ada <_printf_common+0x96>
 8004a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a90:	1e13      	subs	r3, r2, #0
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	bf18      	it	ne
 8004a96:	2301      	movne	r3, #1
 8004a98:	0692      	lsls	r2, r2, #26
 8004a9a:	d42b      	bmi.n	8004af4 <_printf_common+0xb0>
 8004a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	47c0      	blx	r8
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	d01e      	beq.n	8004ae8 <_printf_common+0xa4>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	6922      	ldr	r2, [r4, #16]
 8004aae:	f003 0306 	and.w	r3, r3, #6
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	bf02      	ittt	eq
 8004ab6:	68e5      	ldreq	r5, [r4, #12]
 8004ab8:	6833      	ldreq	r3, [r6, #0]
 8004aba:	1aed      	subeq	r5, r5, r3
 8004abc:	68a3      	ldr	r3, [r4, #8]
 8004abe:	bf0c      	ite	eq
 8004ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ac4:	2500      	movne	r5, #0
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	bfc4      	itt	gt
 8004aca:	1a9b      	subgt	r3, r3, r2
 8004acc:	18ed      	addgt	r5, r5, r3
 8004ace:	2600      	movs	r6, #0
 8004ad0:	341a      	adds	r4, #26
 8004ad2:	42b5      	cmp	r5, r6
 8004ad4:	d11a      	bne.n	8004b0c <_printf_common+0xc8>
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	e008      	b.n	8004aec <_printf_common+0xa8>
 8004ada:	2301      	movs	r3, #1
 8004adc:	4652      	mov	r2, sl
 8004ade:	4649      	mov	r1, r9
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	47c0      	blx	r8
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d103      	bne.n	8004af0 <_printf_common+0xac>
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af0:	3501      	adds	r5, #1
 8004af2:	e7c6      	b.n	8004a82 <_printf_common+0x3e>
 8004af4:	18e1      	adds	r1, r4, r3
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	2030      	movs	r0, #48	; 0x30
 8004afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004afe:	4422      	add	r2, r4
 8004b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b08:	3302      	adds	r3, #2
 8004b0a:	e7c7      	b.n	8004a9c <_printf_common+0x58>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	4622      	mov	r2, r4
 8004b10:	4649      	mov	r1, r9
 8004b12:	4638      	mov	r0, r7
 8004b14:	47c0      	blx	r8
 8004b16:	3001      	adds	r0, #1
 8004b18:	d0e6      	beq.n	8004ae8 <_printf_common+0xa4>
 8004b1a:	3601      	adds	r6, #1
 8004b1c:	e7d9      	b.n	8004ad2 <_printf_common+0x8e>
	...

08004b20 <_printf_i>:
 8004b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b24:	7e0f      	ldrb	r7, [r1, #24]
 8004b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b28:	2f78      	cmp	r7, #120	; 0x78
 8004b2a:	4691      	mov	r9, r2
 8004b2c:	4680      	mov	r8, r0
 8004b2e:	460c      	mov	r4, r1
 8004b30:	469a      	mov	sl, r3
 8004b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b36:	d807      	bhi.n	8004b48 <_printf_i+0x28>
 8004b38:	2f62      	cmp	r7, #98	; 0x62
 8004b3a:	d80a      	bhi.n	8004b52 <_printf_i+0x32>
 8004b3c:	2f00      	cmp	r7, #0
 8004b3e:	f000 80d4 	beq.w	8004cea <_printf_i+0x1ca>
 8004b42:	2f58      	cmp	r7, #88	; 0x58
 8004b44:	f000 80c0 	beq.w	8004cc8 <_printf_i+0x1a8>
 8004b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b50:	e03a      	b.n	8004bc8 <_printf_i+0xa8>
 8004b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b56:	2b15      	cmp	r3, #21
 8004b58:	d8f6      	bhi.n	8004b48 <_printf_i+0x28>
 8004b5a:	a101      	add	r1, pc, #4	; (adr r1, 8004b60 <_printf_i+0x40>)
 8004b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b60:	08004bb9 	.word	0x08004bb9
 8004b64:	08004bcd 	.word	0x08004bcd
 8004b68:	08004b49 	.word	0x08004b49
 8004b6c:	08004b49 	.word	0x08004b49
 8004b70:	08004b49 	.word	0x08004b49
 8004b74:	08004b49 	.word	0x08004b49
 8004b78:	08004bcd 	.word	0x08004bcd
 8004b7c:	08004b49 	.word	0x08004b49
 8004b80:	08004b49 	.word	0x08004b49
 8004b84:	08004b49 	.word	0x08004b49
 8004b88:	08004b49 	.word	0x08004b49
 8004b8c:	08004cd1 	.word	0x08004cd1
 8004b90:	08004bf9 	.word	0x08004bf9
 8004b94:	08004c8b 	.word	0x08004c8b
 8004b98:	08004b49 	.word	0x08004b49
 8004b9c:	08004b49 	.word	0x08004b49
 8004ba0:	08004cf3 	.word	0x08004cf3
 8004ba4:	08004b49 	.word	0x08004b49
 8004ba8:	08004bf9 	.word	0x08004bf9
 8004bac:	08004b49 	.word	0x08004b49
 8004bb0:	08004b49 	.word	0x08004b49
 8004bb4:	08004c93 	.word	0x08004c93
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	1d1a      	adds	r2, r3, #4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	602a      	str	r2, [r5, #0]
 8004bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e09f      	b.n	8004d0c <_printf_i+0x1ec>
 8004bcc:	6820      	ldr	r0, [r4, #0]
 8004bce:	682b      	ldr	r3, [r5, #0]
 8004bd0:	0607      	lsls	r7, r0, #24
 8004bd2:	f103 0104 	add.w	r1, r3, #4
 8004bd6:	6029      	str	r1, [r5, #0]
 8004bd8:	d501      	bpl.n	8004bde <_printf_i+0xbe>
 8004bda:	681e      	ldr	r6, [r3, #0]
 8004bdc:	e003      	b.n	8004be6 <_printf_i+0xc6>
 8004bde:	0646      	lsls	r6, r0, #25
 8004be0:	d5fb      	bpl.n	8004bda <_printf_i+0xba>
 8004be2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004be6:	2e00      	cmp	r6, #0
 8004be8:	da03      	bge.n	8004bf2 <_printf_i+0xd2>
 8004bea:	232d      	movs	r3, #45	; 0x2d
 8004bec:	4276      	negs	r6, r6
 8004bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf2:	485a      	ldr	r0, [pc, #360]	; (8004d5c <_printf_i+0x23c>)
 8004bf4:	230a      	movs	r3, #10
 8004bf6:	e012      	b.n	8004c1e <_printf_i+0xfe>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	6820      	ldr	r0, [r4, #0]
 8004bfc:	1d19      	adds	r1, r3, #4
 8004bfe:	6029      	str	r1, [r5, #0]
 8004c00:	0605      	lsls	r5, r0, #24
 8004c02:	d501      	bpl.n	8004c08 <_printf_i+0xe8>
 8004c04:	681e      	ldr	r6, [r3, #0]
 8004c06:	e002      	b.n	8004c0e <_printf_i+0xee>
 8004c08:	0641      	lsls	r1, r0, #25
 8004c0a:	d5fb      	bpl.n	8004c04 <_printf_i+0xe4>
 8004c0c:	881e      	ldrh	r6, [r3, #0]
 8004c0e:	4853      	ldr	r0, [pc, #332]	; (8004d5c <_printf_i+0x23c>)
 8004c10:	2f6f      	cmp	r7, #111	; 0x6f
 8004c12:	bf0c      	ite	eq
 8004c14:	2308      	moveq	r3, #8
 8004c16:	230a      	movne	r3, #10
 8004c18:	2100      	movs	r1, #0
 8004c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c1e:	6865      	ldr	r5, [r4, #4]
 8004c20:	60a5      	str	r5, [r4, #8]
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	bfa2      	ittt	ge
 8004c26:	6821      	ldrge	r1, [r4, #0]
 8004c28:	f021 0104 	bicge.w	r1, r1, #4
 8004c2c:	6021      	strge	r1, [r4, #0]
 8004c2e:	b90e      	cbnz	r6, 8004c34 <_printf_i+0x114>
 8004c30:	2d00      	cmp	r5, #0
 8004c32:	d04b      	beq.n	8004ccc <_printf_i+0x1ac>
 8004c34:	4615      	mov	r5, r2
 8004c36:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c3a:	fb03 6711 	mls	r7, r3, r1, r6
 8004c3e:	5dc7      	ldrb	r7, [r0, r7]
 8004c40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c44:	4637      	mov	r7, r6
 8004c46:	42bb      	cmp	r3, r7
 8004c48:	460e      	mov	r6, r1
 8004c4a:	d9f4      	bls.n	8004c36 <_printf_i+0x116>
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d10b      	bne.n	8004c68 <_printf_i+0x148>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	07de      	lsls	r6, r3, #31
 8004c54:	d508      	bpl.n	8004c68 <_printf_i+0x148>
 8004c56:	6923      	ldr	r3, [r4, #16]
 8004c58:	6861      	ldr	r1, [r4, #4]
 8004c5a:	4299      	cmp	r1, r3
 8004c5c:	bfde      	ittt	le
 8004c5e:	2330      	movle	r3, #48	; 0x30
 8004c60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c68:	1b52      	subs	r2, r2, r5
 8004c6a:	6122      	str	r2, [r4, #16]
 8004c6c:	f8cd a000 	str.w	sl, [sp]
 8004c70:	464b      	mov	r3, r9
 8004c72:	aa03      	add	r2, sp, #12
 8004c74:	4621      	mov	r1, r4
 8004c76:	4640      	mov	r0, r8
 8004c78:	f7ff fee4 	bl	8004a44 <_printf_common>
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d14a      	bne.n	8004d16 <_printf_i+0x1f6>
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	b004      	add	sp, #16
 8004c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	f043 0320 	orr.w	r3, r3, #32
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	4833      	ldr	r0, [pc, #204]	; (8004d60 <_printf_i+0x240>)
 8004c94:	2778      	movs	r7, #120	; 0x78
 8004c96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	6829      	ldr	r1, [r5, #0]
 8004c9e:	061f      	lsls	r7, r3, #24
 8004ca0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ca4:	d402      	bmi.n	8004cac <_printf_i+0x18c>
 8004ca6:	065f      	lsls	r7, r3, #25
 8004ca8:	bf48      	it	mi
 8004caa:	b2b6      	uxthmi	r6, r6
 8004cac:	07df      	lsls	r7, r3, #31
 8004cae:	bf48      	it	mi
 8004cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8004cb4:	6029      	str	r1, [r5, #0]
 8004cb6:	bf48      	it	mi
 8004cb8:	6023      	strmi	r3, [r4, #0]
 8004cba:	b91e      	cbnz	r6, 8004cc4 <_printf_i+0x1a4>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	f023 0320 	bic.w	r3, r3, #32
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	e7a7      	b.n	8004c18 <_printf_i+0xf8>
 8004cc8:	4824      	ldr	r0, [pc, #144]	; (8004d5c <_printf_i+0x23c>)
 8004cca:	e7e4      	b.n	8004c96 <_printf_i+0x176>
 8004ccc:	4615      	mov	r5, r2
 8004cce:	e7bd      	b.n	8004c4c <_printf_i+0x12c>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	6826      	ldr	r6, [r4, #0]
 8004cd4:	6961      	ldr	r1, [r4, #20]
 8004cd6:	1d18      	adds	r0, r3, #4
 8004cd8:	6028      	str	r0, [r5, #0]
 8004cda:	0635      	lsls	r5, r6, #24
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	d501      	bpl.n	8004ce4 <_printf_i+0x1c4>
 8004ce0:	6019      	str	r1, [r3, #0]
 8004ce2:	e002      	b.n	8004cea <_printf_i+0x1ca>
 8004ce4:	0670      	lsls	r0, r6, #25
 8004ce6:	d5fb      	bpl.n	8004ce0 <_printf_i+0x1c0>
 8004ce8:	8019      	strh	r1, [r3, #0]
 8004cea:	2300      	movs	r3, #0
 8004cec:	6123      	str	r3, [r4, #16]
 8004cee:	4615      	mov	r5, r2
 8004cf0:	e7bc      	b.n	8004c6c <_printf_i+0x14c>
 8004cf2:	682b      	ldr	r3, [r5, #0]
 8004cf4:	1d1a      	adds	r2, r3, #4
 8004cf6:	602a      	str	r2, [r5, #0]
 8004cf8:	681d      	ldr	r5, [r3, #0]
 8004cfa:	6862      	ldr	r2, [r4, #4]
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f7fb fa66 	bl	80001d0 <memchr>
 8004d04:	b108      	cbz	r0, 8004d0a <_printf_i+0x1ea>
 8004d06:	1b40      	subs	r0, r0, r5
 8004d08:	6060      	str	r0, [r4, #4]
 8004d0a:	6863      	ldr	r3, [r4, #4]
 8004d0c:	6123      	str	r3, [r4, #16]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d14:	e7aa      	b.n	8004c6c <_printf_i+0x14c>
 8004d16:	6923      	ldr	r3, [r4, #16]
 8004d18:	462a      	mov	r2, r5
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	47d0      	blx	sl
 8004d20:	3001      	adds	r0, #1
 8004d22:	d0ad      	beq.n	8004c80 <_printf_i+0x160>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	079b      	lsls	r3, r3, #30
 8004d28:	d413      	bmi.n	8004d52 <_printf_i+0x232>
 8004d2a:	68e0      	ldr	r0, [r4, #12]
 8004d2c:	9b03      	ldr	r3, [sp, #12]
 8004d2e:	4298      	cmp	r0, r3
 8004d30:	bfb8      	it	lt
 8004d32:	4618      	movlt	r0, r3
 8004d34:	e7a6      	b.n	8004c84 <_printf_i+0x164>
 8004d36:	2301      	movs	r3, #1
 8004d38:	4632      	mov	r2, r6
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	47d0      	blx	sl
 8004d40:	3001      	adds	r0, #1
 8004d42:	d09d      	beq.n	8004c80 <_printf_i+0x160>
 8004d44:	3501      	adds	r5, #1
 8004d46:	68e3      	ldr	r3, [r4, #12]
 8004d48:	9903      	ldr	r1, [sp, #12]
 8004d4a:	1a5b      	subs	r3, r3, r1
 8004d4c:	42ab      	cmp	r3, r5
 8004d4e:	dcf2      	bgt.n	8004d36 <_printf_i+0x216>
 8004d50:	e7eb      	b.n	8004d2a <_printf_i+0x20a>
 8004d52:	2500      	movs	r5, #0
 8004d54:	f104 0619 	add.w	r6, r4, #25
 8004d58:	e7f5      	b.n	8004d46 <_printf_i+0x226>
 8004d5a:	bf00      	nop
 8004d5c:	080050cd 	.word	0x080050cd
 8004d60:	080050de 	.word	0x080050de

08004d64 <__sflush_r>:
 8004d64:	898a      	ldrh	r2, [r1, #12]
 8004d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	0710      	lsls	r0, r2, #28
 8004d6e:	460c      	mov	r4, r1
 8004d70:	d458      	bmi.n	8004e24 <__sflush_r+0xc0>
 8004d72:	684b      	ldr	r3, [r1, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	dc05      	bgt.n	8004d84 <__sflush_r+0x20>
 8004d78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	dc02      	bgt.n	8004d84 <__sflush_r+0x20>
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d86:	2e00      	cmp	r6, #0
 8004d88:	d0f9      	beq.n	8004d7e <__sflush_r+0x1a>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d90:	682f      	ldr	r7, [r5, #0]
 8004d92:	6a21      	ldr	r1, [r4, #32]
 8004d94:	602b      	str	r3, [r5, #0]
 8004d96:	d032      	beq.n	8004dfe <__sflush_r+0x9a>
 8004d98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d9a:	89a3      	ldrh	r3, [r4, #12]
 8004d9c:	075a      	lsls	r2, r3, #29
 8004d9e:	d505      	bpl.n	8004dac <__sflush_r+0x48>
 8004da0:	6863      	ldr	r3, [r4, #4]
 8004da2:	1ac0      	subs	r0, r0, r3
 8004da4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004da6:	b10b      	cbz	r3, 8004dac <__sflush_r+0x48>
 8004da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004daa:	1ac0      	subs	r0, r0, r3
 8004dac:	2300      	movs	r3, #0
 8004dae:	4602      	mov	r2, r0
 8004db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004db2:	6a21      	ldr	r1, [r4, #32]
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b0      	blx	r6
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	d106      	bne.n	8004dcc <__sflush_r+0x68>
 8004dbe:	6829      	ldr	r1, [r5, #0]
 8004dc0:	291d      	cmp	r1, #29
 8004dc2:	d82b      	bhi.n	8004e1c <__sflush_r+0xb8>
 8004dc4:	4a29      	ldr	r2, [pc, #164]	; (8004e6c <__sflush_r+0x108>)
 8004dc6:	410a      	asrs	r2, r1
 8004dc8:	07d6      	lsls	r6, r2, #31
 8004dca:	d427      	bmi.n	8004e1c <__sflush_r+0xb8>
 8004dcc:	2200      	movs	r2, #0
 8004dce:	6062      	str	r2, [r4, #4]
 8004dd0:	04d9      	lsls	r1, r3, #19
 8004dd2:	6922      	ldr	r2, [r4, #16]
 8004dd4:	6022      	str	r2, [r4, #0]
 8004dd6:	d504      	bpl.n	8004de2 <__sflush_r+0x7e>
 8004dd8:	1c42      	adds	r2, r0, #1
 8004dda:	d101      	bne.n	8004de0 <__sflush_r+0x7c>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	b903      	cbnz	r3, 8004de2 <__sflush_r+0x7e>
 8004de0:	6560      	str	r0, [r4, #84]	; 0x54
 8004de2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004de4:	602f      	str	r7, [r5, #0]
 8004de6:	2900      	cmp	r1, #0
 8004de8:	d0c9      	beq.n	8004d7e <__sflush_r+0x1a>
 8004dea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dee:	4299      	cmp	r1, r3
 8004df0:	d002      	beq.n	8004df8 <__sflush_r+0x94>
 8004df2:	4628      	mov	r0, r5
 8004df4:	f7ff fc96 	bl	8004724 <_free_r>
 8004df8:	2000      	movs	r0, #0
 8004dfa:	6360      	str	r0, [r4, #52]	; 0x34
 8004dfc:	e7c0      	b.n	8004d80 <__sflush_r+0x1c>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b0      	blx	r6
 8004e04:	1c41      	adds	r1, r0, #1
 8004e06:	d1c8      	bne.n	8004d9a <__sflush_r+0x36>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0c5      	beq.n	8004d9a <__sflush_r+0x36>
 8004e0e:	2b1d      	cmp	r3, #29
 8004e10:	d001      	beq.n	8004e16 <__sflush_r+0xb2>
 8004e12:	2b16      	cmp	r3, #22
 8004e14:	d101      	bne.n	8004e1a <__sflush_r+0xb6>
 8004e16:	602f      	str	r7, [r5, #0]
 8004e18:	e7b1      	b.n	8004d7e <__sflush_r+0x1a>
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e20:	81a3      	strh	r3, [r4, #12]
 8004e22:	e7ad      	b.n	8004d80 <__sflush_r+0x1c>
 8004e24:	690f      	ldr	r7, [r1, #16]
 8004e26:	2f00      	cmp	r7, #0
 8004e28:	d0a9      	beq.n	8004d7e <__sflush_r+0x1a>
 8004e2a:	0793      	lsls	r3, r2, #30
 8004e2c:	680e      	ldr	r6, [r1, #0]
 8004e2e:	bf08      	it	eq
 8004e30:	694b      	ldreq	r3, [r1, #20]
 8004e32:	600f      	str	r7, [r1, #0]
 8004e34:	bf18      	it	ne
 8004e36:	2300      	movne	r3, #0
 8004e38:	eba6 0807 	sub.w	r8, r6, r7
 8004e3c:	608b      	str	r3, [r1, #8]
 8004e3e:	f1b8 0f00 	cmp.w	r8, #0
 8004e42:	dd9c      	ble.n	8004d7e <__sflush_r+0x1a>
 8004e44:	6a21      	ldr	r1, [r4, #32]
 8004e46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e48:	4643      	mov	r3, r8
 8004e4a:	463a      	mov	r2, r7
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	47b0      	blx	r6
 8004e50:	2800      	cmp	r0, #0
 8004e52:	dc06      	bgt.n	8004e62 <__sflush_r+0xfe>
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e5a:	81a3      	strh	r3, [r4, #12]
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e60:	e78e      	b.n	8004d80 <__sflush_r+0x1c>
 8004e62:	4407      	add	r7, r0
 8004e64:	eba8 0800 	sub.w	r8, r8, r0
 8004e68:	e7e9      	b.n	8004e3e <__sflush_r+0xda>
 8004e6a:	bf00      	nop
 8004e6c:	dfbffffe 	.word	0xdfbffffe

08004e70 <_fflush_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	690b      	ldr	r3, [r1, #16]
 8004e74:	4605      	mov	r5, r0
 8004e76:	460c      	mov	r4, r1
 8004e78:	b913      	cbnz	r3, 8004e80 <_fflush_r+0x10>
 8004e7a:	2500      	movs	r5, #0
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
 8004e80:	b118      	cbz	r0, 8004e8a <_fflush_r+0x1a>
 8004e82:	6a03      	ldr	r3, [r0, #32]
 8004e84:	b90b      	cbnz	r3, 8004e8a <_fflush_r+0x1a>
 8004e86:	f7ff fa45 	bl	8004314 <__sinit>
 8004e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f3      	beq.n	8004e7a <_fflush_r+0xa>
 8004e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e94:	07d0      	lsls	r0, r2, #31
 8004e96:	d404      	bmi.n	8004ea2 <_fflush_r+0x32>
 8004e98:	0599      	lsls	r1, r3, #22
 8004e9a:	d402      	bmi.n	8004ea2 <_fflush_r+0x32>
 8004e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e9e:	f7ff fc3e 	bl	800471e <__retarget_lock_acquire_recursive>
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	f7ff ff5d 	bl	8004d64 <__sflush_r>
 8004eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eac:	07da      	lsls	r2, r3, #31
 8004eae:	4605      	mov	r5, r0
 8004eb0:	d4e4      	bmi.n	8004e7c <_fflush_r+0xc>
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	059b      	lsls	r3, r3, #22
 8004eb6:	d4e1      	bmi.n	8004e7c <_fflush_r+0xc>
 8004eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eba:	f7ff fc31 	bl	8004720 <__retarget_lock_release_recursive>
 8004ebe:	e7dd      	b.n	8004e7c <_fflush_r+0xc>

08004ec0 <__swhatbuf_r>:
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	b096      	sub	sp, #88	; 0x58
 8004ecc:	4615      	mov	r5, r2
 8004ece:	461e      	mov	r6, r3
 8004ed0:	da0d      	bge.n	8004eee <__swhatbuf_r+0x2e>
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ed8:	f04f 0100 	mov.w	r1, #0
 8004edc:	bf0c      	ite	eq
 8004ede:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004ee2:	2340      	movne	r3, #64	; 0x40
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	6031      	str	r1, [r6, #0]
 8004ee8:	602b      	str	r3, [r5, #0]
 8004eea:	b016      	add	sp, #88	; 0x58
 8004eec:	bd70      	pop	{r4, r5, r6, pc}
 8004eee:	466a      	mov	r2, sp
 8004ef0:	f000 f848 	bl	8004f84 <_fstat_r>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	dbec      	blt.n	8004ed2 <__swhatbuf_r+0x12>
 8004ef8:	9901      	ldr	r1, [sp, #4]
 8004efa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004efe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004f02:	4259      	negs	r1, r3
 8004f04:	4159      	adcs	r1, r3
 8004f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f0a:	e7eb      	b.n	8004ee4 <__swhatbuf_r+0x24>

08004f0c <__smakebuf_r>:
 8004f0c:	898b      	ldrh	r3, [r1, #12]
 8004f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f10:	079d      	lsls	r5, r3, #30
 8004f12:	4606      	mov	r6, r0
 8004f14:	460c      	mov	r4, r1
 8004f16:	d507      	bpl.n	8004f28 <__smakebuf_r+0x1c>
 8004f18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	6123      	str	r3, [r4, #16]
 8004f20:	2301      	movs	r3, #1
 8004f22:	6163      	str	r3, [r4, #20]
 8004f24:	b002      	add	sp, #8
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	ab01      	add	r3, sp, #4
 8004f2a:	466a      	mov	r2, sp
 8004f2c:	f7ff ffc8 	bl	8004ec0 <__swhatbuf_r>
 8004f30:	9900      	ldr	r1, [sp, #0]
 8004f32:	4605      	mov	r5, r0
 8004f34:	4630      	mov	r0, r6
 8004f36:	f7ff f8d5 	bl	80040e4 <_malloc_r>
 8004f3a:	b948      	cbnz	r0, 8004f50 <__smakebuf_r+0x44>
 8004f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f40:	059a      	lsls	r2, r3, #22
 8004f42:	d4ef      	bmi.n	8004f24 <__smakebuf_r+0x18>
 8004f44:	f023 0303 	bic.w	r3, r3, #3
 8004f48:	f043 0302 	orr.w	r3, r3, #2
 8004f4c:	81a3      	strh	r3, [r4, #12]
 8004f4e:	e7e3      	b.n	8004f18 <__smakebuf_r+0xc>
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	6020      	str	r0, [r4, #0]
 8004f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	9b00      	ldr	r3, [sp, #0]
 8004f5c:	6163      	str	r3, [r4, #20]
 8004f5e:	9b01      	ldr	r3, [sp, #4]
 8004f60:	6120      	str	r0, [r4, #16]
 8004f62:	b15b      	cbz	r3, 8004f7c <__smakebuf_r+0x70>
 8004f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f000 f81d 	bl	8004fa8 <_isatty_r>
 8004f6e:	b128      	cbz	r0, 8004f7c <__smakebuf_r+0x70>
 8004f70:	89a3      	ldrh	r3, [r4, #12]
 8004f72:	f023 0303 	bic.w	r3, r3, #3
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	81a3      	strh	r3, [r4, #12]
 8004f7c:	89a3      	ldrh	r3, [r4, #12]
 8004f7e:	431d      	orrs	r5, r3
 8004f80:	81a5      	strh	r5, [r4, #12]
 8004f82:	e7cf      	b.n	8004f24 <__smakebuf_r+0x18>

08004f84 <_fstat_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d07      	ldr	r5, [pc, #28]	; (8004fa4 <_fstat_r+0x20>)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	602b      	str	r3, [r5, #0]
 8004f92:	f7fb fefa 	bl	8000d8a <_fstat>
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	d102      	bne.n	8004fa0 <_fstat_r+0x1c>
 8004f9a:	682b      	ldr	r3, [r5, #0]
 8004f9c:	b103      	cbz	r3, 8004fa0 <_fstat_r+0x1c>
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	bd38      	pop	{r3, r4, r5, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000314 	.word	0x20000314

08004fa8 <_isatty_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d06      	ldr	r5, [pc, #24]	; (8004fc4 <_isatty_r+0x1c>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	602b      	str	r3, [r5, #0]
 8004fb4:	f7fb fef9 	bl	8000daa <_isatty>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_isatty_r+0x1a>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_isatty_r+0x1a>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	20000314 	.word	0x20000314

08004fc8 <_init>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr

08004fd4 <_fini>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr
