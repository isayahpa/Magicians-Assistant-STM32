
MagiciansAssistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005338  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005670  08005670  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005678  08005678  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000068  080056e8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080056e8  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010732  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002272  00000000  00000000  0003080d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00032a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b68  00000000  00000000  00033930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000292e7  00000000  00000000  00034498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012192  00000000  00000000  0005d77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0dd0  00000000  00000000  0006f911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004500  00000000  00000000  001606e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  00164be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054b0 	.word	0x080054b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080054b0 	.word	0x080054b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_Z8checkBithi>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int checkBit(uint8_t num, int index){
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
	return (int) ((num >> index) & 1);
 8000578:	79fa      	ldrb	r2, [r7, #7]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	fa42 f303 	asr.w	r3, r2, r3
 8000580:	f003 0301 	and.w	r3, r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <_Z11serialPrintPht>:

void serialPrint(uint8_t* msg, uint16_t size){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, msg, size, TIMEOUT);
 800059c:	887a      	ldrh	r2, [r7, #2]
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <_Z11serialPrintPht+0x20>)
 80005a4:	f003 fa99 	bl	8003ada <HAL_UART_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000013c 	.word	0x2000013c

080005b4 <_ZN17ArducamControllerC1EP19__I2C_HandleTypeDefP19__SPI_HandleTypeDef>:
	int SPI_CLK_HZ = 80000;
	I2C_HandleTypeDef* i2cHandle;
	SPI_HandleTypeDef* spiHandle;

public:
	ArducamController(I2C_HandleTypeDef* pHandleI2C, SPI_HandleTypeDef* pHandleSPI){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2260      	movs	r2, #96	; 0x60
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2261      	movs	r2, #97	; 0x61
 80005ca:	705a      	strb	r2, [r3, #1]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2200      	movs	r2, #0
 80005d0:	709a      	strb	r2, [r3, #2]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2201      	movs	r2, #1
 80005d6:	70da      	strb	r2, [r3, #3]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2203      	movs	r2, #3
 80005dc:	711a      	strb	r2, [r3, #4]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2204      	movs	r2, #4
 80005e2:	715a      	strb	r2, [r3, #5]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	223d      	movs	r2, #61	; 0x3d
 80005e8:	719a      	strb	r2, [r3, #6]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2241      	movs	r2, #65	; 0x41
 80005ee:	71da      	strb	r2, [r3, #7]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2242      	movs	r2, #66	; 0x42
 80005f4:	721a      	strb	r2, [r3, #8]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2243      	movs	r2, #67	; 0x43
 80005fa:	725a      	strb	r2, [r3, #9]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2244      	movs	r2, #68	; 0x44
 8000600:	729a      	strb	r2, [r3, #10]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2201      	movs	r2, #1
 8000606:	72da      	strb	r2, [r3, #11]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	731a      	strb	r2, [r3, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2202      	movs	r2, #2
 8000612:	735a      	strb	r2, [r3, #13]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <_ZN17ArducamControllerC1EP19__I2C_HandleTypeDefP19__SPI_HandleTypeDef+0x84>)
 8000618:	611a      	str	r2, [r3, #16]
		i2cHandle = pHandleI2C;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	68ba      	ldr	r2, [r7, #8]
 800061e:	615a      	str	r2, [r3, #20]
		spiHandle = pHandleSPI;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	619a      	str	r2, [r3, #24]
		initSensor();
 8000626:	68f8      	ldr	r0, [r7, #12]
 8000628:	f000 f808 	bl	800063c <_ZN17ArducamController10initSensorEv>
	}
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	00013880 	.word	0x00013880

0800063c <_ZN17ArducamController10initSensorEv>:

	void initSensor(){
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
		printf("Initializing ArduCam");
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <_ZN17ArducamController10initSensorEv+0x54>)
 8000646:	f004 f863 	bl	8004710 <iprintf>
		HAL_GPIO_WritePin(CAM_CS_GPIO_Port, CAM_CS_Pin, GPIO_PIN_RESET); //CS LOW to configure
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 f844 	bl	80016e0 <HAL_GPIO_WritePin>
		uint8_t cmd = 0b00000001; //Capture 1 Frame per Capture
 8000658:	2301      	movs	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]

		resetFIFOPointers();
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f000 f8f2 	bl	8000846 <_ZN17ArducamController17resetFIFOPointersEv>
		clearFIFOFlag();
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f8dc 	bl	8000820 <_ZN17ArducamController13clearFIFOFlagEv>
		i2cRegWrite(CAPTURE_CONTROL_REG, &cmd, 1);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	78d9      	ldrb	r1, [r3, #3]
 800066c:	f107 020f 	add.w	r2, r7, #15
 8000670:	2301      	movs	r3, #1
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f80e 	bl	8000694 <_ZN17ArducamController11i2cRegWriteEhPht>
		HAL_GPIO_WritePin(CAM_CS_GPIO_Port, CAM_CS_Pin, GPIO_PIN_SET); //CS HIGH when finished
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f001 f82d 	bl	80016e0 <HAL_GPIO_WritePin>

	}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	080054c8 	.word	0x080054c8

08000694 <_ZN17ArducamController11i2cRegWriteEhPht>:

	/*To Write over i2c:
	* Request I2C_ADDR_WRITE -> Send Cam Register Address (left shift device addr's by 1) -> Send Data bytes
	*/
	HAL_StatusTypeDef i2cRegWrite(uint8_t reg, uint8_t *pData, uint16_t size){
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af02      	add	r7, sp, #8
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	461a      	mov	r2, r3
 80006a0:	460b      	mov	r3, r1
 80006a2:	72fb      	strb	r3, [r7, #11]
 80006a4:	4613      	mov	r3, r2
 80006a6:	813b      	strh	r3, [r7, #8]
		HAL_StatusTypeDef status;
		status = HAL_I2C_Master_Transmit(i2cHandle, I2C_ADDR_WRITE<<1, &reg, 1, TIMEOUT);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6958      	ldr	r0, [r3, #20]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	b299      	uxth	r1, r3
 80006b6:	f107 020b 	add.w	r2, r7, #11
 80006ba:	2364      	movs	r3, #100	; 0x64
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2301      	movs	r3, #1
 80006c0:	f001 f8c2 	bl	8001848 <HAL_I2C_Master_Transmit>
 80006c4:	4603      	mov	r3, r0
 80006c6:	75fb      	strb	r3, [r7, #23]
		status = HAL_I2C_Master_Transmit(i2cHandle, I2C_ADDR_WRITE<<1, pData, size, TIMEOUT);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	6958      	ldr	r0, [r3, #20]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	b299      	uxth	r1, r3
 80006d6:	893b      	ldrh	r3, [r7, #8]
 80006d8:	2264      	movs	r2, #100	; 0x64
 80006da:	9200      	str	r2, [sp, #0]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	f001 f8b3 	bl	8001848 <HAL_I2C_Master_Transmit>
 80006e2:	4603      	mov	r3, r0
 80006e4:	75fb      	strb	r3, [r7, #23]
		return status;
 80006e6:	7dfb      	ldrb	r3, [r7, #23]
	}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <_ZN17ArducamController10i2cRegReadEhPht>:

	/*To Read over i2c:
		* To I2C_ADDR_WRITE: Write the Register You want to read from
		* To I2C_ADDR_READ: Read as much data as you want
	*/
	HAL_StatusTypeDef i2cRegRead(uint8_t reg, uint8_t *pBuffer, uint16_t size){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	607a      	str	r2, [r7, #4]
 80006fa:	461a      	mov	r2, r3
 80006fc:	460b      	mov	r3, r1
 80006fe:	72fb      	strb	r3, [r7, #11]
 8000700:	4613      	mov	r3, r2
 8000702:	813b      	strh	r3, [r7, #8]
		HAL_StatusTypeDef status;
		status = HAL_I2C_Master_Transmit(i2cHandle, I2C_ADDR_WRITE<<1, &reg, 1, TIMEOUT);
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	6958      	ldr	r0, [r3, #20]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b29b      	uxth	r3, r3
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	b299      	uxth	r1, r3
 8000712:	f107 020b 	add.w	r2, r7, #11
 8000716:	2364      	movs	r3, #100	; 0x64
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2301      	movs	r3, #1
 800071c:	f001 f894 	bl	8001848 <HAL_I2C_Master_Transmit>
 8000720:	4603      	mov	r3, r0
 8000722:	75fb      	strb	r3, [r7, #23]
		status = HAL_I2C_Master_Receive(i2cHandle, I2C_ADDR_READ<<1, pBuffer, size, TIMEOUT);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	6958      	ldr	r0, [r3, #20]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	785b      	ldrb	r3, [r3, #1]
 800072c:	b29b      	uxth	r3, r3
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	b299      	uxth	r1, r3
 8000732:	893b      	ldrh	r3, [r7, #8]
 8000734:	2264      	movs	r2, #100	; 0x64
 8000736:	9200      	str	r2, [sp, #0]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	f001 f99d 	bl	8001a78 <HAL_I2C_Master_Receive>
 800073e:	4603      	mov	r3, r0
 8000740:	75fb      	strb	r3, [r7, #23]
		return status;
 8000742:	7dfb      	ldrb	r3, [r7, #23]
	}
 8000744:	4618      	mov	r0, r3
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <_ZN17ArducamController10isFIFOBusyEv>:
		status = HAL_SPI_Transmit(spiHandle, &cmdByte, 1, TIMEOUT);
		status = HAL_SPI_Receive(spiHandle, pBuffer, size, TIMEOUT);
		return status;

	}
	bool isFIFOBusy(){
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
		uint8_t data = 0x00;
 8000754:	2300      	movs	r3, #0
 8000756:	73fb      	strb	r3, [r7, #15]
		i2cRegRead(FIFO_STATUS_REG, &data, 1);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	79d9      	ldrb	r1, [r3, #7]
 800075c:	f107 020f 	add.w	r2, r7, #15
 8000760:	2301      	movs	r3, #1
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ffc4 	bl	80006f0 <_ZN17ArducamController10i2cRegReadEhPht>
		return checkBit(data, 3);
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	2103      	movs	r1, #3
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fefd 	bl	800056c <_Z8checkBithi>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	bf14      	ite	ne
 8000778:	2301      	movne	r3, #1
 800077a:	2300      	moveq	r3, #0
 800077c:	b2db      	uxtb	r3, r3
	}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <_ZN17ArducamController15readFrameBufferEPh>:
	void readFrameBuffer(uint8_t *buffer){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]

		if(isFIFOBusy()){
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ffda 	bl	800074c <_ZN17ArducamController10isFIFOBusyEv>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <_ZN17ArducamController15readFrameBufferEPh+0x1e>
			printf("Can't read, FIFO is busy...");
 800079e:	480f      	ldr	r0, [pc, #60]	; (80007dc <_ZN17ArducamController15readFrameBufferEPh+0x54>)
 80007a0:	f003 ffb6 	bl	8004710 <iprintf>
			i2cRegRead(FIFO_BYTE0, &buffer[0], 1);
			i2cRegRead(FIFO_BYTE1, &buffer[1], 1);
			i2cRegRead(FIFO_BYTE2, &buffer[2], 1);
		}

	}
 80007a4:	e016      	b.n	80007d4 <_ZN17ArducamController15readFrameBufferEPh+0x4c>
			i2cRegRead(FIFO_BYTE0, &buffer[0], 1);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7a19      	ldrb	r1, [r3, #8]
 80007aa:	2301      	movs	r3, #1
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ff9e 	bl	80006f0 <_ZN17ArducamController10i2cRegReadEhPht>
			i2cRegRead(FIFO_BYTE1, &buffer[1], 1);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7a59      	ldrb	r1, [r3, #9]
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	2301      	movs	r3, #1
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ff96 	bl	80006f0 <_ZN17ArducamController10i2cRegReadEhPht>
			i2cRegRead(FIFO_BYTE2, &buffer[2], 1);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	7a99      	ldrb	r1, [r3, #10]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	1c9a      	adds	r2, r3, #2
 80007cc:	2301      	movs	r3, #1
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ff8e 	bl	80006f0 <_ZN17ArducamController10i2cRegReadEhPht>
	}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	080054e0 	.word	0x080054e0

080007e0 <_ZN17ArducamController13singleCaptureEv>:

	void singleCapture(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
		uint8_t cmd;
		if(isFIFOBusy()){
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ffaf 	bl	800074c <_ZN17ArducamController10isFIFOBusyEv>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d003      	beq.n	80007fc <_ZN17ArducamController13singleCaptureEv+0x1c>
			printf("Can't Capture, FIFO is busy...");
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <_ZN17ArducamController13singleCaptureEv+0x3c>)
 80007f6:	f003 ff8b 	bl	8004710 <iprintf>
		} else {
			cmd = SET_CAPTURE_FLAG;
			i2cRegWrite(FIFO_CONTROL_REG, &cmd, 1);
		}
	}
 80007fa:	e00a      	b.n	8000812 <_ZN17ArducamController13singleCaptureEv+0x32>
			cmd = SET_CAPTURE_FLAG;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	7b5b      	ldrb	r3, [r3, #13]
 8000800:	73fb      	strb	r3, [r7, #15]
			i2cRegWrite(FIFO_CONTROL_REG, &cmd, 1);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	7959      	ldrb	r1, [r3, #5]
 8000806:	f107 020f 	add.w	r2, r7, #15
 800080a:	2301      	movs	r3, #1
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff41 	bl	8000694 <_ZN17ArducamController11i2cRegWriteEhPht>
	}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	080054fc 	.word	0x080054fc

08000820 <_ZN17ArducamController13clearFIFOFlagEv>:
	void flushFIFO(){
		clearFIFOFlag();
		resetFIFOPointers();
	}

	void clearFIFOFlag(){
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
		uint8_t cmd = FIFO_FLAG_CLR;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	7adb      	ldrb	r3, [r3, #11]
 800082c:	73fb      	strb	r3, [r7, #15]
		i2cRegWrite(FIFO_CONTROL_REG, &cmd, 1);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7959      	ldrb	r1, [r3, #5]
 8000832:	f107 020f 	add.w	r2, r7, #15
 8000836:	2301      	movs	r3, #1
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ff2b 	bl	8000694 <_ZN17ArducamController11i2cRegWriteEhPht>
	}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_ZN17ArducamController17resetFIFOPointersEv>:

	void resetFIFOPointers(){
 8000846:	b580      	push	{r7, lr}
 8000848:	b084      	sub	sp, #16
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
		uint8_t cmd = FIFO_PTR_CLR;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	7b1b      	ldrb	r3, [r3, #12]
 8000852:	73fb      	strb	r3, [r7, #15]
		i2cRegWrite(FIFO_CONTROL_REG, &cmd, 1);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7959      	ldrb	r1, [r3, #5]
 8000858:	f107 020f 	add.w	r2, r7, #15
 800085c:	2301      	movs	r3, #1
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ff18 	bl	8000694 <_ZN17ArducamController11i2cRegWriteEhPht>
	}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000872:	f000 fc29 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000876:	f000 f86b 	bl	8000950 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087a:	f000 f98d 	bl	8000b98 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 800087e:	f000 f8c7 	bl	8000a10 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8000882:	f000 f913 	bl	8000aac <_ZL12MX_SPI1_Initv>
  MX_USART2_UART_Init();
 8000886:	f000 f953 	bl	8000b30 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  ArducamController arducam(&hi2c1, &hspi1); //Initialize the Arducam
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4a24      	ldr	r2, [pc, #144]	; (8000920 <main+0xb4>)
 8000890:	4924      	ldr	r1, [pc, #144]	; (8000924 <main+0xb8>)
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe8e 	bl	80005b4 <_ZN17ArducamControllerC1EP19__I2C_HandleTypeDefP19__SPI_HandleTypeDef>
  arducam.singleCapture();
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff9f 	bl	80007e0 <_ZN17ArducamController13singleCaptureEv>
  uint8_t buffer[6] = "apple";
 80008a2:	4a21      	ldr	r2, [pc, #132]	; (8000928 <main+0xbc>)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008aa:	6018      	str	r0, [r3, #0]
 80008ac:	3304      	adds	r3, #4
 80008ae:	8019      	strh	r1, [r3, #0]
  arducam.readFrameBuffer(buffer);
 80008b0:	1d3a      	adds	r2, r7, #4
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff65 	bl	8000788 <_ZN17ArducamController15readFrameBufferEPh>
  serialPrint(buffer, sizeof(buffer));
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2106      	movs	r1, #6
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe64 	bl	8000590 <_Z11serialPrintPht>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //serialPrint(buffer, 5);
	  printf("Testing a 'lil printage.\n");
 80008c8:	4818      	ldr	r0, [pc, #96]	; (800092c <main+0xc0>)
 80008ca:	f003 ff87 	bl	80047dc <puts>
	  printf("Characters: %c %c\n", 'a', 65);
 80008ce:	2241      	movs	r2, #65	; 0x41
 80008d0:	2161      	movs	r1, #97	; 0x61
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <main+0xc4>)
 80008d4:	f003 ff1c 	bl	8004710 <iprintf>
	  printf("Decimals: %d %ld\n", 1977, 650000L);
 80008d8:	4a16      	ldr	r2, [pc, #88]	; (8000934 <main+0xc8>)
 80008da:	f240 71b9 	movw	r1, #1977	; 0x7b9
 80008de:	4816      	ldr	r0, [pc, #88]	; (8000938 <main+0xcc>)
 80008e0:	f003 ff16 	bl	8004710 <iprintf>
	  printf("Preceding with blanks: %10d\n", 1977);
 80008e4:	f240 71b9 	movw	r1, #1977	; 0x7b9
 80008e8:	4814      	ldr	r0, [pc, #80]	; (800093c <main+0xd0>)
 80008ea:	f003 ff11 	bl	8004710 <iprintf>
	  printf("Preceding with zeros: %010d\n", 1977);
 80008ee:	f240 71b9 	movw	r1, #1977	; 0x7b9
 80008f2:	4813      	ldr	r0, [pc, #76]	; (8000940 <main+0xd4>)
 80008f4:	f003 ff0c 	bl	8004710 <iprintf>
	  printf("Some different radices: %d %x %o %#x %#o\n", 100, 100, 100, 100, 100);
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	2364      	movs	r3, #100	; 0x64
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2364      	movs	r3, #100	; 0x64
 8000902:	2264      	movs	r2, #100	; 0x64
 8000904:	2164      	movs	r1, #100	; 0x64
 8000906:	480f      	ldr	r0, [pc, #60]	; (8000944 <main+0xd8>)
 8000908:	f003 ff02 	bl	8004710 <iprintf>
	  printf("Width trick: %*d\n", 5, 10);
 800090c:	220a      	movs	r2, #10
 800090e:	2105      	movs	r1, #5
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <main+0xdc>)
 8000912:	f003 fefd 	bl	8004710 <iprintf>
	  printf("%s\n", "A string");
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <main+0xe0>)
 8000918:	f003 ff60 	bl	80047dc <puts>
	  printf("Testing a 'lil printage.\n");
 800091c:	e7d4      	b.n	80008c8 <main+0x5c>
 800091e:	bf00      	nop
 8000920:	200000d8 	.word	0x200000d8
 8000924:	20000084 	.word	0x20000084
 8000928:	080055ec 	.word	0x080055ec
 800092c:	0800551c 	.word	0x0800551c
 8000930:	08005538 	.word	0x08005538
 8000934:	0009eb10 	.word	0x0009eb10
 8000938:	0800554c 	.word	0x0800554c
 800093c:	08005560 	.word	0x08005560
 8000940:	08005580 	.word	0x08005580
 8000944:	080055a0 	.word	0x080055a0
 8000948:	080055cc 	.word	0x080055cc
 800094c:	080055e0 	.word	0x080055e0

08000950 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b096      	sub	sp, #88	; 0x58
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2244      	movs	r2, #68	; 0x44
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f004 f81c 	bl	800499c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000972:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000976:	f001 fcad 	bl	80022d4 <HAL_PWREx_ControlVoltageScaling>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf14      	ite	ne
 8000980:	2301      	movne	r3, #1
 8000982:	2300      	moveq	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800098a:	f000 f96d 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098e:	2302      	movs	r3, #2
 8000990:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000998:	2310      	movs	r3, #16
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009a8:	230a      	movs	r3, #10
 80009aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009ac:	2307      	movs	r3, #7
 80009ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fcdf 	bl	8002380 <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	bf14      	ite	ne
 80009c8:	2301      	movne	r3, #1
 80009ca:	2300      	moveq	r3, #0
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80009d2:	f000 f949 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2303      	movs	r3, #3
 80009dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	2104      	movs	r1, #4
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 f8a2 	bl	8002b38 <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	bf14      	ite	ne
 80009fa:	2301      	movne	r3, #1
 80009fc:	2300      	moveq	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000a04:	f000 f930 	bl	8000c68 <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3758      	adds	r7, #88	; 0x58
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <_ZL12MX_I2C1_Initv+0x94>)
 8000a18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a1c:	4a22      	ldr	r2, [pc, #136]	; (8000aa8 <_ZL12MX_I2C1_Initv+0x98>)
 8000a1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4a:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a4c:	f000 fe60 	bl	8001710 <HAL_I2C_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bf14      	ite	ne
 8000a56:	2301      	movne	r3, #1
 8000a58:	2300      	moveq	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000a60:	f000 f902 	bl	8000c68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a68:	f001 fb8e 	bl	8002188 <HAL_I2CEx_ConfigAnalogFilter>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	bf14      	ite	ne
 8000a72:	2301      	movne	r3, #1
 8000a74:	2300      	moveq	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000a7c:	f000 f8f4 	bl	8000c68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <_ZL12MX_I2C1_Initv+0x90>)
 8000a84:	f001 fbcb 	bl	800221e <HAL_I2CEx_ConfigDigitalFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bf14      	ite	ne
 8000a8e:	2301      	movne	r3, #1
 8000a90:	2300      	moveq	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f8e6 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000084 	.word	0x20000084
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	10909cec 	.word	0x10909cec

08000aac <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <_ZL12MX_SPI1_Initv+0x80>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ab8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000abc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ac6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000aca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ade:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000afa:	2207      	movs	r2, #7
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000b06:	2208      	movs	r2, #8
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <_ZL12MX_SPI1_Initv+0x7c>)
 8000b0c:	f002 fef4 	bl	80038f8 <HAL_SPI_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bf14      	ite	ne
 8000b16:	2301      	movne	r3, #1
 8000b18:	2300      	moveq	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8000b20:	f000 f8a2 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200000d8 	.word	0x200000d8
 8000b2c:	40013000 	.word	0x40013000

08000b30 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b72:	4807      	ldr	r0, [pc, #28]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b74:	f002 ff63 	bl	8003a3e <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bf14      	ite	ne
 8000b7e:	2301      	movne	r3, #1
 8000b80:	2300      	moveq	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000b88:	f000 f86e 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000013c 	.word	0x2000013c
 8000b94:	40004400 	.word	0x40004400

08000b98 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b2c      	ldr	r3, [pc, #176]	; (8000c60 <_ZL12MX_GPIO_Initv+0xc8>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a2b      	ldr	r2, [pc, #172]	; (8000c60 <_ZL12MX_GPIO_Initv+0xc8>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <_ZL12MX_GPIO_Initv+0xc8>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc6:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <_ZL12MX_GPIO_Initv+0xc8>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a25      	ldr	r2, [pc, #148]	; (8000c60 <_ZL12MX_GPIO_Initv+0xc8>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <_ZL12MX_GPIO_Initv+0xc8>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <_ZL12MX_GPIO_Initv+0xc8>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <_ZL12MX_GPIO_Initv+0xc8>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <_ZL12MX_GPIO_Initv+0xc8>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <_ZL12MX_GPIO_Initv+0xc8>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <_ZL12MX_GPIO_Initv+0xc8>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <_ZL12MX_GPIO_Initv+0xc8>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_CS_GPIO_Port, CAM_CS_Pin, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f000 fd62 	bl	80016e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	480c      	ldr	r0, [pc, #48]	; (8000c64 <_ZL12MX_GPIO_Initv+0xcc>)
 8000c34:	f000 fbaa 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_CS_Pin */
  GPIO_InitStruct.Pin = CAM_CS_Pin;
 8000c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_CS_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f000 fb9a 	bl	800138c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40021000 	.word	0x40021000
 8000c64:	48000800 	.word	0x48000800

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6613      	str	r3, [r2, #96]	; 0x60
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_MspInit+0x44>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0ac      	sub	sp, #176	; 0xb0
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2288      	movs	r2, #136	; 0x88
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 fe5d 	bl	800499c <memset>
  if(hi2c->Instance==I2C1)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <HAL_I2C_MspInit+0xb0>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d13b      	bne.n	8000d64 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cec:	2340      	movs	r3, #64	; 0x40
 8000cee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 f941 	bl	8002f80 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d04:	f7ff ffb0 	bl	8000c68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_I2C_MspInit+0xb4>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_I2C_MspInit+0xb4>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_I2C_MspInit+0xb4>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d28:	2312      	movs	r3, #18
 8000d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d44:	4619      	mov	r1, r3
 8000d46:	480b      	ldr	r0, [pc, #44]	; (8000d74 <HAL_I2C_MspInit+0xb8>)
 8000d48:	f000 fb20 	bl	800138c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_I2C_MspInit+0xb4>)
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_I2C_MspInit+0xb4>)
 8000d52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d56:	6593      	str	r3, [r2, #88]	; 0x58
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_I2C_MspInit+0xb4>)
 8000d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	37b0      	adds	r7, #176	; 0xb0
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40021000 	.word	0x40021000
 8000d74:	48000400 	.word	0x48000400

08000d78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_SPI_MspInit+0x7c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d128      	bne.n	8000dec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_SPI_MspInit+0x80>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	4a16      	ldr	r2, [pc, #88]	; (8000df8 <HAL_SPI_MspInit+0x80>)
 8000da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000da4:	6613      	str	r3, [r2, #96]	; 0x60
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_SPI_MspInit+0x80>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_SPI_MspInit+0x80>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <HAL_SPI_MspInit+0x80>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_SPI_MspInit+0x80>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dca:	23e0      	movs	r3, #224	; 0xe0
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dda:	2305      	movs	r3, #5
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f000 fad0 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40013000 	.word	0x40013000
 8000df8:	40021000 	.word	0x40021000

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0ac      	sub	sp, #176	; 0xb0
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2288      	movs	r2, #136	; 0x88
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 fdbd 	bl	800499c <memset>
  if(huart->Instance==USART2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a21      	ldr	r2, [pc, #132]	; (8000eac <HAL_UART_MspInit+0xb0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d13b      	bne.n	8000ea4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 f8a1 	bl	8002f80 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e44:	f7ff ff10 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4c:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e52:	6593      	str	r3, [r2, #88]	; 0x58
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e78:	230c      	movs	r3, #12
 8000e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e90:	2307      	movs	r3, #7
 8000e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f000 fa74 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	37b0      	adds	r7, #176	; 0xb0
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40004400 	.word	0x40004400
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 f93e 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e00a      	b.n	8000f30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4601      	mov	r1, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf0      	blt.n	8000f1a <_read+0x12>
  }

  return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e009      	b.n	8000f68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbf1      	blt.n	8000f54 <_write+0x12>
  }
  return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_close>:

int _close(int file)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa2:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_isatty>:

int _isatty(int file)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f003 fd10 	bl	8004a38 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20018000 	.word	0x20018000
 8001044:	00000400 	.word	0x00000400
 8001048:	200001c4 	.word	0x200001c4
 800104c:	20000318 	.word	0x20000318

08001050 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001078:	f7ff ffea 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800107e:	490d      	ldr	r1, [pc, #52]	; (80010b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <LoopForever+0xe>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001094:	4c0a      	ldr	r4, [pc, #40]	; (80010c0 <LoopForever+0x16>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f003 fccf 	bl	8004a44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010a6:	f7ff fbe1 	bl	800086c <main>

080010aa <LoopForever>:

LoopForever:
    b LoopForever
 80010aa:	e7fe      	b.n	80010aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010b8:	08005680 	.word	0x08005680
  ldr r2, =_sbss
 80010bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010c0:	20000318 	.word	0x20000318

080010c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_2_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_Init+0x3c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <HAL_Init+0x3c>)
 80010d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010de:	2003      	movs	r0, #3
 80010e0:	f000 f920 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 f80f 	bl	8001108 <HAL_InitTick>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	e001      	b.n	80010fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f6:	f7ff fdbd 	bl	8000c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40022000 	.word	0x40022000

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_InitTick+0x6c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d023      	beq.n	8001164 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <HAL_InitTick+0x70>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_InitTick+0x6c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f91d 	bl	8001372 <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10f      	bne.n	800115e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d809      	bhi.n	8001158 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f8f5 	bl	800133a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <HAL_InitTick+0x74>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e007      	b.n	8001168 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	e004      	b.n	8001168 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	e001      	b.n	8001168 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008
 8001178:	20000000 	.word	0x20000000
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	200001c8 	.word	0x200001c8

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200001c8 	.word	0x200001c8

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff47 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff5c 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffb0 	bl	80012e0 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139a:	e17f      	b.n	800169c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2101      	movs	r1, #1
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	4013      	ands	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8171 	beq.w	8001696 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d005      	beq.n	80013cc <HAL_GPIO_Init+0x40>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d130      	bne.n	800142e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001402:	2201      	movs	r2, #1
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f003 0201 	and.w	r2, r3, #1
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b03      	cmp	r3, #3
 8001438:	d118      	bne.n	800146c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001440:	2201      	movs	r2, #1
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	f003 0201 	and.w	r2, r3, #1
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b03      	cmp	r3, #3
 8001476:	d017      	beq.n	80014a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d123      	bne.n	80014fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	6939      	ldr	r1, [r7, #16]
 80014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0203 	and.w	r2, r3, #3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80ac 	beq.w	8001696 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	4b5f      	ldr	r3, [pc, #380]	; (80016bc <HAL_GPIO_Init+0x330>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	4a5e      	ldr	r2, [pc, #376]	; (80016bc <HAL_GPIO_Init+0x330>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6613      	str	r3, [r2, #96]	; 0x60
 800154a:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <HAL_GPIO_Init+0x330>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001556:	4a5a      	ldr	r2, [pc, #360]	; (80016c0 <HAL_GPIO_Init+0x334>)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001580:	d025      	beq.n	80015ce <HAL_GPIO_Init+0x242>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4f      	ldr	r2, [pc, #316]	; (80016c4 <HAL_GPIO_Init+0x338>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d01f      	beq.n	80015ca <HAL_GPIO_Init+0x23e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4e      	ldr	r2, [pc, #312]	; (80016c8 <HAL_GPIO_Init+0x33c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d019      	beq.n	80015c6 <HAL_GPIO_Init+0x23a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <HAL_GPIO_Init+0x340>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d013      	beq.n	80015c2 <HAL_GPIO_Init+0x236>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4c      	ldr	r2, [pc, #304]	; (80016d0 <HAL_GPIO_Init+0x344>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d00d      	beq.n	80015be <HAL_GPIO_Init+0x232>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4b      	ldr	r2, [pc, #300]	; (80016d4 <HAL_GPIO_Init+0x348>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d007      	beq.n	80015ba <HAL_GPIO_Init+0x22e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4a      	ldr	r2, [pc, #296]	; (80016d8 <HAL_GPIO_Init+0x34c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d101      	bne.n	80015b6 <HAL_GPIO_Init+0x22a>
 80015b2:	2306      	movs	r3, #6
 80015b4:	e00c      	b.n	80015d0 <HAL_GPIO_Init+0x244>
 80015b6:	2307      	movs	r3, #7
 80015b8:	e00a      	b.n	80015d0 <HAL_GPIO_Init+0x244>
 80015ba:	2305      	movs	r3, #5
 80015bc:	e008      	b.n	80015d0 <HAL_GPIO_Init+0x244>
 80015be:	2304      	movs	r3, #4
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x244>
 80015c2:	2303      	movs	r3, #3
 80015c4:	e004      	b.n	80015d0 <HAL_GPIO_Init+0x244>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e002      	b.n	80015d0 <HAL_GPIO_Init+0x244>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_Init+0x244>
 80015ce:	2300      	movs	r3, #0
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	f002 0203 	and.w	r2, r2, #3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	4093      	lsls	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015e0:	4937      	ldr	r1, [pc, #220]	; (80016c0 <HAL_GPIO_Init+0x334>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_GPIO_Init+0x350>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001612:	4a32      	ldr	r2, [pc, #200]	; (80016dc <HAL_GPIO_Init+0x350>)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001618:	4b30      	ldr	r3, [pc, #192]	; (80016dc <HAL_GPIO_Init+0x350>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800163c:	4a27      	ldr	r2, [pc, #156]	; (80016dc <HAL_GPIO_Init+0x350>)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_GPIO_Init+0x350>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001666:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_GPIO_Init+0x350>)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_GPIO_Init+0x350>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001690:	4a12      	ldr	r2, [pc, #72]	; (80016dc <HAL_GPIO_Init+0x350>)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f47f ae78 	bne.w	800139c <HAL_GPIO_Init+0x10>
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000
 80016c4:	48000400 	.word	0x48000400
 80016c8:	48000800 	.word	0x48000800
 80016cc:	48000c00 	.word	0x48000c00
 80016d0:	48001000 	.word	0x48001000
 80016d4:	48001400 	.word	0x48001400
 80016d8:	48001800 	.word	0x48001800
 80016dc:	40010400 	.word	0x40010400

080016e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
 80016ec:	4613      	mov	r3, r2
 80016ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e08d      	b.n	800183e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fac0 	bl	8000cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2224      	movs	r2, #36	; 0x24
 8001740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001760:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001770:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d107      	bne.n	800178a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	e006      	b.n	8001798 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001796:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d108      	bne.n	80017b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	e007      	b.n	80017c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69d9      	ldr	r1, [r3, #28]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1a      	ldr	r2, [r3, #32]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0201 	orr.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2220      	movs	r2, #32
 800182a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	461a      	mov	r2, r3
 8001854:	460b      	mov	r3, r1
 8001856:	817b      	strh	r3, [r7, #10]
 8001858:	4613      	mov	r3, r2
 800185a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b20      	cmp	r3, #32
 8001866:	f040 80fd 	bne.w	8001a64 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <HAL_I2C_Master_Transmit+0x30>
 8001874:	2302      	movs	r3, #2
 8001876:	e0f6      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x21e>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001880:	f7ff fc92 	bl	80011a8 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2319      	movs	r3, #25
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 fa0a 	bl	8001cac <I2C_WaitOnFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e0e1      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2221      	movs	r2, #33	; 0x21
 80018a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2210      	movs	r2, #16
 80018ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	893a      	ldrh	r2, [r7, #8]
 80018c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2bff      	cmp	r3, #255	; 0xff
 80018d2:	d906      	bls.n	80018e2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	22ff      	movs	r2, #255	; 0xff
 80018d8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80018da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e007      	b.n	80018f2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80018ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d024      	beq.n	8001944 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	781a      	ldrb	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001914:	b29b      	uxth	r3, r3
 8001916:	3b01      	subs	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001922:	3b01      	subs	r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192e:	b2db      	uxtb	r3, r3
 8001930:	3301      	adds	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	8979      	ldrh	r1, [r7, #10]
 8001936:	4b4e      	ldr	r3, [pc, #312]	; (8001a70 <HAL_I2C_Master_Transmit+0x228>)
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 fbf1 	bl	8002124 <I2C_TransferConfig>
 8001942:	e066      	b.n	8001a12 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001948:	b2da      	uxtb	r2, r3
 800194a:	8979      	ldrh	r1, [r7, #10]
 800194c:	4b48      	ldr	r3, [pc, #288]	; (8001a70 <HAL_I2C_Master_Transmit+0x228>)
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 fbe6 	bl	8002124 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001958:	e05b      	b.n	8001a12 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	6a39      	ldr	r1, [r7, #32]
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f9f3 	bl	8001d4a <I2C_WaitOnTXISFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07b      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001988:	b29b      	uxth	r3, r3
 800198a:	3b01      	subs	r3, #1
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001996:	3b01      	subs	r3, #1
 8001998:	b29a      	uxth	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d034      	beq.n	8001a12 <HAL_I2C_Master_Transmit+0x1ca>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d130      	bne.n	8001a12 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	2200      	movs	r2, #0
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 f976 	bl	8001cac <I2C_WaitOnFlagUntilTimeout>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e04d      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2bff      	cmp	r3, #255	; 0xff
 80019d2:	d90e      	bls.n	80019f2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	22ff      	movs	r2, #255	; 0xff
 80019d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	8979      	ldrh	r1, [r7, #10]
 80019e2:	2300      	movs	r3, #0
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 fb9a 	bl	8002124 <I2C_TransferConfig>
 80019f0:	e00f      	b.n	8001a12 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	8979      	ldrh	r1, [r7, #10]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 fb89 	bl	8002124 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d19e      	bne.n	800195a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	6a39      	ldr	r1, [r7, #32]
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 f9d9 	bl	8001dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e01a      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2220      	movs	r2, #32
 8001a36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_I2C_Master_Transmit+0x22c>)
 8001a44:	400b      	ands	r3, r1
 8001a46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e000      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001a64:	2302      	movs	r3, #2
  }
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	80002000 	.word	0x80002000
 8001a74:	fe00e800 	.word	0xfe00e800

08001a78 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	461a      	mov	r2, r3
 8001a84:	460b      	mov	r3, r1
 8001a86:	817b      	strh	r3, [r7, #10]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	f040 80db 	bne.w	8001c50 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_I2C_Master_Receive+0x30>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e0d4      	b.n	8001c52 <HAL_I2C_Master_Receive+0x1da>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ab0:	f7ff fb7a 	bl	80011a8 <HAL_GetTick>
 8001ab4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2319      	movs	r3, #25
 8001abc:	2201      	movs	r2, #1
 8001abe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f8f2 	bl	8001cac <I2C_WaitOnFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0bf      	b.n	8001c52 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2222      	movs	r2, #34	; 0x22
 8001ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2210      	movs	r2, #16
 8001ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	893a      	ldrh	r2, [r7, #8]
 8001af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2bff      	cmp	r3, #255	; 0xff
 8001b02:	d90e      	bls.n	8001b22 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	22ff      	movs	r2, #255	; 0xff
 8001b08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	8979      	ldrh	r1, [r7, #10]
 8001b12:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <HAL_I2C_Master_Receive+0x1e4>)
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 fb02 	bl	8002124 <I2C_TransferConfig>
 8001b20:	e06d      	b.n	8001bfe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	8979      	ldrh	r1, [r7, #10]
 8001b34:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <HAL_I2C_Master_Receive+0x1e4>)
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 faf1 	bl	8002124 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001b42:	e05c      	b.n	8001bfe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	6a39      	ldr	r1, [r7, #32]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f989 	bl	8001e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e07c      	b.n	8001c52 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d034      	beq.n	8001bfe <HAL_I2C_Master_Receive+0x186>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d130      	bne.n	8001bfe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f880 	bl	8001cac <I2C_WaitOnFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e04d      	b.n	8001c52 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2bff      	cmp	r3, #255	; 0xff
 8001bbe:	d90e      	bls.n	8001bde <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	22ff      	movs	r2, #255	; 0xff
 8001bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	8979      	ldrh	r1, [r7, #10]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 faa4 	bl	8002124 <I2C_TransferConfig>
 8001bdc:	e00f      	b.n	8001bfe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	8979      	ldrh	r1, [r7, #10]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 fa93 	bl	8002124 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d19d      	bne.n	8001b44 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	6a39      	ldr	r1, [r7, #32]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f8e3 	bl	8001dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e01a      	b.n	8001c52 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2220      	movs	r2, #32
 8001c22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6859      	ldr	r1, [r3, #4]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_I2C_Master_Receive+0x1e8>)
 8001c30:	400b      	ands	r3, r1
 8001c32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e000      	b.n	8001c52 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	80002400 	.word	0x80002400
 8001c60:	fe00e800 	.word	0xfe00e800

08001c64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d103      	bne.n	8001c82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d007      	beq.n	8001ca0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699a      	ldr	r2, [r3, #24]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	619a      	str	r2, [r3, #24]
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cbc:	e031      	b.n	8001d22 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d02d      	beq.n	8001d22 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc6:	f7ff fa6f 	bl	80011a8 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d302      	bcc.n	8001cdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d122      	bne.n	8001d22 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d113      	bne.n	8001d22 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f043 0220 	orr.w	r2, r3, #32
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	bf0c      	ite	eq
 8001d32:	2301      	moveq	r3, #1
 8001d34:	2300      	movne	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d0be      	beq.n	8001cbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d56:	e033      	b.n	8001dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f901 	bl	8001f64 <I2C_IsErrorOccurred>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e031      	b.n	8001dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d72:	d025      	beq.n	8001dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d74:	f7ff fa18 	bl	80011a8 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d302      	bcc.n	8001d8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d11a      	bne.n	8001dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d013      	beq.n	8001dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f043 0220 	orr.w	r2, r3, #32
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e007      	b.n	8001dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d1c4      	bne.n	8001d58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001de4:	e02f      	b.n	8001e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f8ba 	bl	8001f64 <I2C_IsErrorOccurred>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e02d      	b.n	8001e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfa:	f7ff f9d5 	bl	80011a8 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d302      	bcc.n	8001e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d11a      	bne.n	8001e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d013      	beq.n	8001e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e007      	b.n	8001e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b20      	cmp	r3, #32
 8001e52:	d1c8      	bne.n	8001de6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e6c:	e06b      	b.n	8001f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f876 	bl	8001f64 <I2C_IsErrorOccurred>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e069      	b.n	8001f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d138      	bne.n	8001f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d105      	bne.n	8001eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e055      	b.n	8001f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b10      	cmp	r3, #16
 8001eb6:	d107      	bne.n	8001ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
 8001ec6:	e002      	b.n	8001ece <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001ee2:	400b      	ands	r3, r1
 8001ee4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e029      	b.n	8001f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f02:	f7ff f951 	bl	80011a8 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d302      	bcc.n	8001f18 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d116      	bne.n	8001f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d00f      	beq.n	8001f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f043 0220 	orr.w	r2, r3, #32
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e007      	b.n	8001f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d18c      	bne.n	8001e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	fe00e800 	.word	0xfe00e800

08001f64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d068      	beq.n	8002062 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2210      	movs	r2, #16
 8001f96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f98:	e049      	b.n	800202e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d045      	beq.n	800202e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fa2:	f7ff f901 	bl	80011a8 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d302      	bcc.n	8001fb8 <I2C_IsErrorOccurred+0x54>
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d13a      	bne.n	800202e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fda:	d121      	bne.n	8002020 <I2C_IsErrorOccurred+0xbc>
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fe2:	d01d      	beq.n	8002020 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d01a      	beq.n	8002020 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ff8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ffa:	f7ff f8d5 	bl	80011a8 <HAL_GetTick>
 8001ffe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002000:	e00e      	b.n	8002020 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002002:	f7ff f8d1 	bl	80011a8 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b19      	cmp	r3, #25
 800200e:	d907      	bls.n	8002020 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	f043 0320 	orr.w	r3, r3, #32
 8002016:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800201e:	e006      	b.n	800202e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b20      	cmp	r3, #32
 800202c:	d1e9      	bne.n	8002002 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	2b20      	cmp	r3, #32
 800203a:	d003      	beq.n	8002044 <I2C_IsErrorOccurred+0xe0>
 800203c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0aa      	beq.n	8001f9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2220      	movs	r2, #32
 8002052:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00b      	beq.n	800208c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002084:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00b      	beq.n	80020d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80020d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01c      	beq.n	8002112 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f7ff fdc3 	bl	8001c64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <I2C_IsErrorOccurred+0x1bc>)
 80020ea:	400b      	ands	r3, r1
 80020ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002116:	4618      	mov	r0, r3
 8002118:	3728      	adds	r7, #40	; 0x28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	fe00e800 	.word	0xfe00e800

08002124 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	817b      	strh	r3, [r7, #10]
 8002132:	4613      	mov	r3, r2
 8002134:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002136:	897b      	ldrh	r3, [r7, #10]
 8002138:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800213c:	7a7b      	ldrb	r3, [r7, #9]
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002144:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	4313      	orrs	r3, r2
 800214e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002152:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	0d5b      	lsrs	r3, r3, #21
 800215e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <I2C_TransferConfig+0x60>)
 8002164:	430b      	orrs	r3, r1
 8002166:	43db      	mvns	r3, r3
 8002168:	ea02 0103 	and.w	r1, r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002176:	bf00      	nop
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	03ff63ff 	.word	0x03ff63ff

08002188 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b20      	cmp	r3, #32
 800219c:	d138      	bne.n	8002210 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e032      	b.n	8002212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	; 0x24
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6819      	ldr	r1, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	e000      	b.n	8002212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002210:	2302      	movs	r3, #2
  }
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b20      	cmp	r3, #32
 8002232:	d139      	bne.n	80022a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800223e:	2302      	movs	r3, #2
 8002240:	e033      	b.n	80022aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2224      	movs	r2, #36	; 0x24
 800224e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0201 	bic.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002270:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e000      	b.n	80022aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022a8:	2302      	movs	r3, #2
  }
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40007000 	.word	0x40007000

080022d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e2:	d130      	bne.n	8002346 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f0:	d038      	beq.n	8002364 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022fa:	4a1e      	ldr	r2, [pc, #120]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002300:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2232      	movs	r2, #50	; 0x32
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	4a1b      	ldr	r2, [pc, #108]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0c9b      	lsrs	r3, r3, #18
 8002314:	3301      	adds	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002318:	e002      	b.n	8002320 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3b01      	subs	r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232c:	d102      	bne.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x60>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f2      	bne.n	800231a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002340:	d110      	bne.n	8002364 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e00f      	b.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800234e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002352:	d007      	beq.n	8002364 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800235c:	4a05      	ldr	r2, [pc, #20]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002362:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40007000 	.word	0x40007000
 8002378:	20000000 	.word	0x20000000
 800237c:	431bde83 	.word	0x431bde83

08002380 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e3ca      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002392:	4b97      	ldr	r3, [pc, #604]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800239c:	4b94      	ldr	r3, [pc, #592]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80e4 	beq.w	800257c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d007      	beq.n	80023ca <HAL_RCC_OscConfig+0x4a>
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	f040 808b 	bne.w	80024d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	f040 8087 	bne.w	80024d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ca:	4b89      	ldr	r3, [pc, #548]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x62>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e3a2      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1a      	ldr	r2, [r3, #32]
 80023e6:	4b82      	ldr	r3, [pc, #520]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d004      	beq.n	80023fc <HAL_RCC_OscConfig+0x7c>
 80023f2:	4b7f      	ldr	r3, [pc, #508]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fa:	e005      	b.n	8002408 <HAL_RCC_OscConfig+0x88>
 80023fc:	4b7c      	ldr	r3, [pc, #496]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002408:	4293      	cmp	r3, r2
 800240a:	d223      	bcs.n	8002454 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fd55 	bl	8002ec0 <RCC_SetFlashLatencyFromMSIRange>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e383      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002420:	4b73      	ldr	r3, [pc, #460]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a72      	ldr	r2, [pc, #456]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002426:	f043 0308 	orr.w	r3, r3, #8
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b70      	ldr	r3, [pc, #448]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	496d      	ldr	r1, [pc, #436]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800243e:	4b6c      	ldr	r3, [pc, #432]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	4968      	ldr	r1, [pc, #416]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
 8002452:	e025      	b.n	80024a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002454:	4b66      	ldr	r3, [pc, #408]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a65      	ldr	r2, [pc, #404]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 800245a:	f043 0308 	orr.w	r3, r3, #8
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4960      	ldr	r1, [pc, #384]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002472:	4b5f      	ldr	r3, [pc, #380]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	495b      	ldr	r1, [pc, #364]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fd15 	bl	8002ec0 <RCC_SetFlashLatencyFromMSIRange>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e343      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024a0:	f000 fc4a 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b52      	ldr	r3, [pc, #328]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	4950      	ldr	r1, [pc, #320]	; (80025f4 <HAL_RCC_OscConfig+0x274>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
 80024bc:	4a4e      	ldr	r2, [pc, #312]	; (80025f8 <HAL_RCC_OscConfig+0x278>)
 80024be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024c0:	4b4e      	ldr	r3, [pc, #312]	; (80025fc <HAL_RCC_OscConfig+0x27c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe fe1f 	bl	8001108 <HAL_InitTick>
 80024ca:	4603      	mov	r3, r0
 80024cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d052      	beq.n	800257a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	e327      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d032      	beq.n	8002546 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024e0:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a42      	ldr	r2, [pc, #264]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fe5c 	bl	80011a8 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024f4:	f7fe fe58 	bl	80011a8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e310      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002506:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002512:	4b37      	ldr	r3, [pc, #220]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a36      	ldr	r2, [pc, #216]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002518:	f043 0308 	orr.w	r3, r3, #8
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4931      	ldr	r1, [pc, #196]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002530:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	492c      	ldr	r1, [pc, #176]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
 8002544:	e01a      	b.n	800257c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002546:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a29      	ldr	r2, [pc, #164]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002552:	f7fe fe29 	bl	80011a8 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800255a:	f7fe fe25 	bl	80011a8 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e2dd      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800256c:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x1da>
 8002578:	e000      	b.n	800257c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800257a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d074      	beq.n	8002672 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b08      	cmp	r3, #8
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x21a>
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b0c      	cmp	r3, #12
 8002592:	d10e      	bne.n	80025b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d10b      	bne.n	80025b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d064      	beq.n	8002670 <HAL_RCC_OscConfig+0x2f0>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d160      	bne.n	8002670 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e2ba      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_OscConfig+0x24a>
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80025c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	e026      	b.n	8002618 <HAL_RCC_OscConfig+0x298>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d2:	d115      	bne.n	8002600 <HAL_RCC_OscConfig+0x280>
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80025da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a02      	ldr	r2, [pc, #8]	; (80025f0 <HAL_RCC_OscConfig+0x270>)
 80025e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	e014      	b.n	8002618 <HAL_RCC_OscConfig+0x298>
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	080055f4 	.word	0x080055f4
 80025f8:	20000000 	.word	0x20000000
 80025fc:	20000004 	.word	0x20000004
 8002600:	4ba0      	ldr	r3, [pc, #640]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a9f      	ldr	r2, [pc, #636]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b9d      	ldr	r3, [pc, #628]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a9c      	ldr	r2, [pc, #624]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fdc2 	bl	80011a8 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fdbe 	bl	80011a8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e276      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800263a:	4b92      	ldr	r3, [pc, #584]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x2a8>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7fe fdae 	bl	80011a8 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002650:	f7fe fdaa 	bl	80011a8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e262      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002662:	4b88      	ldr	r3, [pc, #544]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x2d0>
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d060      	beq.n	8002740 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b04      	cmp	r3, #4
 8002682:	d005      	beq.n	8002690 <HAL_RCC_OscConfig+0x310>
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d119      	bne.n	80026be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d116      	bne.n	80026be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002690:	4b7c      	ldr	r3, [pc, #496]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_OscConfig+0x328>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e23f      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b76      	ldr	r3, [pc, #472]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	4973      	ldr	r1, [pc, #460]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026bc:	e040      	b.n	8002740 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d023      	beq.n	800270e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7fe fd69 	bl	80011a8 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026da:	f7fe fd65 	bl	80011a8 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e21d      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ec:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f8:	4b62      	ldr	r3, [pc, #392]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	061b      	lsls	r3, r3, #24
 8002706:	495f      	ldr	r1, [pc, #380]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
 800270c:	e018      	b.n	8002740 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270e:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a5c      	ldr	r2, [pc, #368]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe fd45 	bl	80011a8 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002722:	f7fe fd41 	bl	80011a8 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1f9      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002734:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f0      	bne.n	8002722 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d03c      	beq.n	80027c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01c      	beq.n	800278e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002754:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275a:	4a4a      	ldr	r2, [pc, #296]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe fd20 	bl	80011a8 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276c:	f7fe fd1c 	bl	80011a8 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1d4      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800277e:	4b41      	ldr	r3, [pc, #260]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ef      	beq.n	800276c <HAL_RCC_OscConfig+0x3ec>
 800278c:	e01b      	b.n	80027c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002794:	4a3b      	ldr	r2, [pc, #236]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279e:	f7fe fd03 	bl	80011a8 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a6:	f7fe fcff 	bl	80011a8 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1b7      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027b8:	4b32      	ldr	r3, [pc, #200]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 80027ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1ef      	bne.n	80027a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80a6 	beq.w	8002920 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d4:	2300      	movs	r3, #0
 80027d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10d      	bne.n	8002800 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	4a26      	ldr	r2, [pc, #152]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6593      	str	r3, [r2, #88]	; 0x58
 80027f0:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fc:	2301      	movs	r3, #1
 80027fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002800:	4b21      	ldr	r3, [pc, #132]	; (8002888 <HAL_RCC_OscConfig+0x508>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d118      	bne.n	800283e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800280c:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <HAL_RCC_OscConfig+0x508>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_RCC_OscConfig+0x508>)
 8002812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002816:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002818:	f7fe fcc6 	bl	80011a8 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002820:	f7fe fcc2 	bl	80011a8 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e17a      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_RCC_OscConfig+0x508>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d108      	bne.n	8002858 <HAL_RCC_OscConfig+0x4d8>
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002856:	e029      	b.n	80028ac <HAL_RCC_OscConfig+0x52c>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b05      	cmp	r3, #5
 800285e:	d115      	bne.n	800288c <HAL_RCC_OscConfig+0x50c>
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	4a03      	ldr	r2, [pc, #12]	; (8002884 <HAL_RCC_OscConfig+0x504>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002880:	e014      	b.n	80028ac <HAL_RCC_OscConfig+0x52c>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	40007000 	.word	0x40007000
 800288c:	4b9c      	ldr	r3, [pc, #624]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	4a9b      	ldr	r2, [pc, #620]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800289c:	4b98      	ldr	r3, [pc, #608]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	4a97      	ldr	r2, [pc, #604]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 80028a4:	f023 0304 	bic.w	r3, r3, #4
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d016      	beq.n	80028e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe fc78 	bl	80011a8 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe fc74 	bl	80011a8 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e12a      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d2:	4b8b      	ldr	r3, [pc, #556]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 80028d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ed      	beq.n	80028bc <HAL_RCC_OscConfig+0x53c>
 80028e0:	e015      	b.n	800290e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e2:	f7fe fc61 	bl	80011a8 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe fc5d 	bl	80011a8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e113      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002900:	4b7f      	ldr	r3, [pc, #508]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1ed      	bne.n	80028ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800290e:	7ffb      	ldrb	r3, [r7, #31]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002914:	4b7a      	ldr	r3, [pc, #488]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	4a79      	ldr	r2, [pc, #484]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 800291a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80fe 	beq.w	8002b26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	2b02      	cmp	r3, #2
 8002930:	f040 80d0 	bne.w	8002ad4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002934:	4b72      	ldr	r3, [pc, #456]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 0203 	and.w	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	429a      	cmp	r2, r3
 8002946:	d130      	bne.n	80029aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	3b01      	subs	r3, #1
 8002954:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d127      	bne.n	80029aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002964:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d11f      	bne.n	80029aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002974:	2a07      	cmp	r2, #7
 8002976:	bf14      	ite	ne
 8002978:	2201      	movne	r2, #1
 800297a:	2200      	moveq	r2, #0
 800297c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297e:	4293      	cmp	r3, r2
 8002980:	d113      	bne.n	80029aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	3b01      	subs	r3, #1
 8002990:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d109      	bne.n	80029aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	3b01      	subs	r3, #1
 80029a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d06e      	beq.n	8002a88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b0c      	cmp	r3, #12
 80029ae:	d069      	beq.n	8002a84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029b0:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0ad      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029cc:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a4b      	ldr	r2, [pc, #300]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 80029d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029d8:	f7fe fbe6 	bl	80011a8 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fbe2 	bl	80011a8 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e09a      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f2:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fe:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	4b40      	ldr	r3, [pc, #256]	; (8002b04 <HAL_RCC_OscConfig+0x784>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a0e:	3a01      	subs	r2, #1
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	4311      	orrs	r1, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a18:	0212      	lsls	r2, r2, #8
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a20:	0852      	lsrs	r2, r2, #1
 8002a22:	3a01      	subs	r2, #1
 8002a24:	0552      	lsls	r2, r2, #21
 8002a26:	4311      	orrs	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a2c:	0852      	lsrs	r2, r2, #1
 8002a2e:	3a01      	subs	r2, #1
 8002a30:	0652      	lsls	r2, r2, #25
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a38:	0912      	lsrs	r2, r2, #4
 8002a3a:	0452      	lsls	r2, r2, #17
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	4930      	ldr	r1, [pc, #192]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a44:	4b2e      	ldr	r3, [pc, #184]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2d      	ldr	r2, [pc, #180]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a50:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a2a      	ldr	r2, [pc, #168]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a5c:	f7fe fba4 	bl	80011a8 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe fba0 	bl	80011a8 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e058      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a76:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a82:	e050      	b.n	8002b26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e04f      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d148      	bne.n	8002b26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa0:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aac:	f7fe fb7c 	bl	80011a8 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fb78 	bl	80011a8 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e030      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x734>
 8002ad2:	e028      	b.n	8002b26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b0c      	cmp	r3, #12
 8002ad8:	d023      	beq.n	8002b22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a08      	ldr	r2, [pc, #32]	; (8002b00 <HAL_RCC_OscConfig+0x780>)
 8002ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fb5f 	bl	80011a8 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aec:	e00c      	b.n	8002b08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe fb5b 	bl	80011a8 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d905      	bls.n	8002b08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e013      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
 8002b00:	40021000 	.word	0x40021000
 8002b04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_RCC_OscConfig+0x7b0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ec      	bne.n	8002aee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_RCC_OscConfig+0x7b0>)
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	4905      	ldr	r1, [pc, #20]	; (8002b30 <HAL_RCC_OscConfig+0x7b0>)
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_RCC_OscConfig+0x7b4>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60cb      	str	r3, [r1, #12]
 8002b20:	e001      	b.n	8002b26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3720      	adds	r7, #32
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	feeefffc 	.word	0xfeeefffc

08002b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0e7      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b75      	ldr	r3, [pc, #468]	; (8002d24 <HAL_RCC_ClockConfig+0x1ec>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d910      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <HAL_RCC_ClockConfig+0x1ec>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 0207 	bic.w	r2, r3, #7
 8002b62:	4970      	ldr	r1, [pc, #448]	; (8002d24 <HAL_RCC_ClockConfig+0x1ec>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b6e      	ldr	r3, [pc, #440]	; (8002d24 <HAL_RCC_ClockConfig+0x1ec>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0cf      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	4b66      	ldr	r3, [pc, #408]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d908      	bls.n	8002baa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b98:	4b63      	ldr	r3, [pc, #396]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4960      	ldr	r1, [pc, #384]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d04c      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbe:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d121      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0a6      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd6:	4b54      	ldr	r3, [pc, #336]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d115      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e09a      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bee:	4b4e      	ldr	r3, [pc, #312]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e08e      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e086      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c0e:	4b46      	ldr	r3, [pc, #280]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f023 0203 	bic.w	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4943      	ldr	r1, [pc, #268]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c20:	f7fe fac2 	bl	80011a8 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7fe fabe 	bl	80011a8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e06e      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 020c 	and.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1eb      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d010      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d208      	bcs.n	8002c7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	492b      	ldr	r1, [pc, #172]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_RCC_ClockConfig+0x1ec>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d210      	bcs.n	8002cae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8c:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <HAL_RCC_ClockConfig+0x1ec>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 0207 	bic.w	r2, r3, #7
 8002c94:	4923      	ldr	r1, [pc, #140]	; (8002d24 <HAL_RCC_ClockConfig+0x1ec>)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_RCC_ClockConfig+0x1ec>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e036      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d008      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	4918      	ldr	r1, [pc, #96]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d009      	beq.n	8002cec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4910      	ldr	r1, [pc, #64]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cec:	f000 f824 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	490b      	ldr	r1, [pc, #44]	; (8002d2c <HAL_RCC_ClockConfig+0x1f4>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
 8002d08:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x1f8>)
 8002d0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_ClockConfig+0x1fc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe f9f9 	bl	8001108 <HAL_InitTick>
 8002d16:	4603      	mov	r3, r0
 8002d18:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d1a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40022000 	.word	0x40022000
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	080055f4 	.word	0x080055f4
 8002d30:	20000000 	.word	0x20000000
 8002d34:	20000004 	.word	0x20000004

08002d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d50:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x34>
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	d121      	bne.n	8002daa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d11e      	bne.n	8002daa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d6c:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d78:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	e005      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d88:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d94:	4a2b      	ldr	r2, [pc, #172]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10d      	bne.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d102      	bne.n	8002db6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	e004      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dbc:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002dbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d134      	bne.n	8002e30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0xa6>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d003      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0xac>
 8002ddc:	e005      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dde:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002de0:	617b      	str	r3, [r7, #20]
      break;
 8002de2:	e005      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002de6:	617b      	str	r3, [r7, #20]
      break;
 8002de8:	e002      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	617b      	str	r3, [r7, #20]
      break;
 8002dee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	fb03 f202 	mul.w	r2, r3, r2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	0e5b      	lsrs	r3, r3, #25
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	3301      	adds	r3, #1
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e30:	69bb      	ldr	r3, [r7, #24]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	0800560c 	.word	0x0800560c
 8002e48:	00f42400 	.word	0x00f42400
 8002e4c:	007a1200 	.word	0x007a1200

08002e50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000

08002e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e6c:	f7ff fff0 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4904      	ldr	r1, [pc, #16]	; (8002e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08005604 	.word	0x08005604

08002e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e98:	f7ff ffda 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	0adb      	lsrs	r3, r3, #11
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4904      	ldr	r1, [pc, #16]	; (8002ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	08005604 	.word	0x08005604

08002ec0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ecc:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ed8:	f7ff f9ee 	bl	80022b8 <HAL_PWREx_GetVoltageRange>
 8002edc:	6178      	str	r0, [r7, #20]
 8002ede:	e014      	b.n	8002f0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	4a24      	ldr	r2, [pc, #144]	; (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6593      	str	r3, [r2, #88]	; 0x58
 8002eec:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ef8:	f7ff f9de 	bl	80022b8 <HAL_PWREx_GetVoltageRange>
 8002efc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f10:	d10b      	bne.n	8002f2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b80      	cmp	r3, #128	; 0x80
 8002f16:	d919      	bls.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f1c:	d902      	bls.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f1e:	2302      	movs	r3, #2
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	e013      	b.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f24:	2301      	movs	r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e010      	b.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b80      	cmp	r3, #128	; 0x80
 8002f2e:	d902      	bls.n	8002f36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f30:	2303      	movs	r3, #3
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	e00a      	b.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b80      	cmp	r3, #128	; 0x80
 8002f3a:	d102      	bne.n	8002f42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	e004      	b.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b70      	cmp	r3, #112	; 0x70
 8002f46:	d101      	bne.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f48:	2301      	movs	r3, #1
 8002f4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 0207 	bic.w	r2, r3, #7
 8002f54:	4909      	ldr	r1, [pc, #36]	; (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f5c:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d001      	beq.n	8002f6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40022000 	.word	0x40022000

08002f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f88:	2300      	movs	r3, #0
 8002f8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d041      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fa0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fa4:	d02a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002faa:	d824      	bhi.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fb0:	d008      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fb6:	d81e      	bhi.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc0:	d010      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fc2:	e018      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fc4:	4b86      	ldr	r3, [pc, #536]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a85      	ldr	r2, [pc, #532]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fd0:	e015      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fabb 	bl	8003554 <RCCEx_PLLSAI1_Config>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fe2:	e00c      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3320      	adds	r3, #32
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fba6 	bl	800373c <RCCEx_PLLSAI2_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ff4:	e003      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	74fb      	strb	r3, [r7, #19]
      break;
 8002ffa:	e000      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10b      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003004:	4b76      	ldr	r3, [pc, #472]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003012:	4973      	ldr	r1, [pc, #460]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800301a:	e001      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	7cfb      	ldrb	r3, [r7, #19]
 800301e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d041      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003030:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003034:	d02a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003036:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800303a:	d824      	bhi.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800303c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003040:	d008      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003042:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003046:	d81e      	bhi.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800304c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003050:	d010      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003052:	e018      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003054:	4b62      	ldr	r3, [pc, #392]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a61      	ldr	r2, [pc, #388]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003060:	e015      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3304      	adds	r3, #4
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fa73 	bl	8003554 <RCCEx_PLLSAI1_Config>
 800306e:	4603      	mov	r3, r0
 8003070:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003072:	e00c      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3320      	adds	r3, #32
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fb5e 	bl	800373c <RCCEx_PLLSAI2_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003084:	e003      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	74fb      	strb	r3, [r7, #19]
      break;
 800308a:	e000      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800308c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10b      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003094:	4b52      	ldr	r3, [pc, #328]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030a2:	494f      	ldr	r1, [pc, #316]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030aa:	e001      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80a0 	beq.w	80031fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030be:	2300      	movs	r3, #0
 80030c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030c2:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00d      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d8:	4b41      	ldr	r3, [pc, #260]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	4a40      	ldr	r2, [pc, #256]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e2:	6593      	str	r3, [r2, #88]	; 0x58
 80030e4:	4b3e      	ldr	r3, [pc, #248]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f0:	2301      	movs	r3, #1
 80030f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f4:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a3a      	ldr	r2, [pc, #232]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003100:	f7fe f852 	bl	80011a8 <HAL_GetTick>
 8003104:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003106:	e009      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003108:	f7fe f84e 	bl	80011a8 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d902      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	74fb      	strb	r3, [r7, #19]
        break;
 800311a:	e005      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800311c:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ef      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d15c      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800312e:	4b2c      	ldr	r3, [pc, #176]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003138:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01f      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	429a      	cmp	r2, r3
 800314a:	d019      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800314c:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003156:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	4a20      	ldr	r2, [pc, #128]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003178:	4a19      	ldr	r2, [pc, #100]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7fe f80d 	bl	80011a8 <HAL_GetTick>
 800318e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003190:	e00b      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fe f809 	bl	80011a8 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d902      	bls.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	74fb      	strb	r3, [r7, #19]
            break;
 80031a8:	e006      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ec      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031b8:	7cfb      	ldrb	r3, [r7, #19]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ce:	4904      	ldr	r1, [pc, #16]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031d6:	e009      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	74bb      	strb	r3, [r7, #18]
 80031dc:	e006      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ec:	7c7b      	ldrb	r3, [r7, #17]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d105      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f2:	4b9e      	ldr	r3, [pc, #632]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	4a9d      	ldr	r2, [pc, #628]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800320a:	4b98      	ldr	r3, [pc, #608]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003210:	f023 0203 	bic.w	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	4994      	ldr	r1, [pc, #592]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800322c:	4b8f      	ldr	r3, [pc, #572]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	f023 020c 	bic.w	r2, r3, #12
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	498c      	ldr	r1, [pc, #560]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800324e:	4b87      	ldr	r3, [pc, #540]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	4983      	ldr	r1, [pc, #524]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003270:	4b7e      	ldr	r3, [pc, #504]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	497b      	ldr	r1, [pc, #492]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003292:	4b76      	ldr	r3, [pc, #472]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a0:	4972      	ldr	r1, [pc, #456]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032b4:	4b6d      	ldr	r3, [pc, #436]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c2:	496a      	ldr	r1, [pc, #424]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032d6:	4b65      	ldr	r3, [pc, #404]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	4961      	ldr	r1, [pc, #388]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032f8:	4b5c      	ldr	r3, [pc, #368]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003306:	4959      	ldr	r1, [pc, #356]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800331a:	4b54      	ldr	r3, [pc, #336]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003328:	4950      	ldr	r1, [pc, #320]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800333c:	4b4b      	ldr	r3, [pc, #300]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334a:	4948      	ldr	r1, [pc, #288]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800335e:	4b43      	ldr	r3, [pc, #268]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	493f      	ldr	r1, [pc, #252]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d028      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003380:	4b3a      	ldr	r3, [pc, #232]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800338e:	4937      	ldr	r1, [pc, #220]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800339a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800339e:	d106      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a0:	4b32      	ldr	r3, [pc, #200]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4a31      	ldr	r2, [pc, #196]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033aa:	60d3      	str	r3, [r2, #12]
 80033ac:	e011      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b6:	d10c      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	2101      	movs	r1, #1
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f8c8 	bl	8003554 <RCCEx_PLLSAI1_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033ce:	7cfb      	ldrb	r3, [r7, #19]
 80033d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d028      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033de:	4b23      	ldr	r3, [pc, #140]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	491f      	ldr	r1, [pc, #124]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033fc:	d106      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033fe:	4b1b      	ldr	r3, [pc, #108]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	4a1a      	ldr	r2, [pc, #104]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003408:	60d3      	str	r3, [r2, #12]
 800340a:	e011      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003414:	d10c      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3304      	adds	r3, #4
 800341a:	2101      	movs	r1, #1
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f899 	bl	8003554 <RCCEx_PLLSAI1_Config>
 8003422:	4603      	mov	r3, r0
 8003424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02b      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003442:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344a:	4908      	ldr	r1, [pc, #32]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800345a:	d109      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a02      	ldr	r2, [pc, #8]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003466:	60d3      	str	r3, [r2, #12]
 8003468:	e014      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003474:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003478:	d10c      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	2101      	movs	r1, #1
 8003480:	4618      	mov	r0, r3
 8003482:	f000 f867 	bl	8003554 <RCCEx_PLLSAI1_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800348a:	7cfb      	ldrb	r3, [r7, #19]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d02f      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034a0:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ae:	4928      	ldr	r1, [pc, #160]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034be:	d10d      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	2102      	movs	r1, #2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f844 	bl	8003554 <RCCEx_PLLSAI1_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d014      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034d6:	7cfb      	ldrb	r3, [r7, #19]
 80034d8:	74bb      	strb	r3, [r7, #18]
 80034da:	e011      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3320      	adds	r3, #32
 80034ea:	2102      	movs	r1, #2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f925 	bl	800373c <RCCEx_PLLSAI2_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800350c:	4b10      	ldr	r3, [pc, #64]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351a:	490d      	ldr	r1, [pc, #52]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800353e:	4904      	ldr	r1, [pc, #16]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003546:	7cbb      	ldrb	r3, [r7, #18]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40021000 	.word	0x40021000

08003554 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003562:	4b75      	ldr	r3, [pc, #468]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d018      	beq.n	80035a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800356e:	4b72      	ldr	r3, [pc, #456]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0203 	and.w	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d10d      	bne.n	800359a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
       ||
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003586:	4b6c      	ldr	r3, [pc, #432]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
       ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d047      	beq.n	800362a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
 800359e:	e044      	b.n	800362a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d018      	beq.n	80035da <RCCEx_PLLSAI1_Config+0x86>
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d825      	bhi.n	80035f8 <RCCEx_PLLSAI1_Config+0xa4>
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d002      	beq.n	80035b6 <RCCEx_PLLSAI1_Config+0x62>
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d009      	beq.n	80035c8 <RCCEx_PLLSAI1_Config+0x74>
 80035b4:	e020      	b.n	80035f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035b6:	4b60      	ldr	r3, [pc, #384]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d11d      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c6:	e01a      	b.n	80035fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035c8:	4b5b      	ldr	r3, [pc, #364]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d116      	bne.n	8003602 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d8:	e013      	b.n	8003602 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035da:	4b57      	ldr	r3, [pc, #348]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035e6:	4b54      	ldr	r3, [pc, #336]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035f6:	e006      	b.n	8003606 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
      break;
 80035fc:	e004      	b.n	8003608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003606:	bf00      	nop
    }

    if(status == HAL_OK)
 8003608:	7bfb      	ldrb	r3, [r7, #15]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10d      	bne.n	800362a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800360e:	4b4a      	ldr	r3, [pc, #296]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6819      	ldr	r1, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	430b      	orrs	r3, r1
 8003624:	4944      	ldr	r1, [pc, #272]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003626:	4313      	orrs	r3, r2
 8003628:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d17d      	bne.n	800372c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003630:	4b41      	ldr	r3, [pc, #260]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a40      	ldr	r2, [pc, #256]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003636:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800363a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363c:	f7fd fdb4 	bl	80011a8 <HAL_GetTick>
 8003640:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003642:	e009      	b.n	8003658 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003644:	f7fd fdb0 	bl	80011a8 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d902      	bls.n	8003658 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	73fb      	strb	r3, [r7, #15]
        break;
 8003656:	e005      	b.n	8003664 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003658:	4b37      	ldr	r3, [pc, #220]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1ef      	bne.n	8003644 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d160      	bne.n	800372c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d111      	bne.n	8003694 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003670:	4b31      	ldr	r3, [pc, #196]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6892      	ldr	r2, [r2, #8]
 8003680:	0211      	lsls	r1, r2, #8
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68d2      	ldr	r2, [r2, #12]
 8003686:	0912      	lsrs	r2, r2, #4
 8003688:	0452      	lsls	r2, r2, #17
 800368a:	430a      	orrs	r2, r1
 800368c:	492a      	ldr	r1, [pc, #168]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368e:	4313      	orrs	r3, r2
 8003690:	610b      	str	r3, [r1, #16]
 8003692:	e027      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d112      	bne.n	80036c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800369a:	4b27      	ldr	r3, [pc, #156]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6892      	ldr	r2, [r2, #8]
 80036aa:	0211      	lsls	r1, r2, #8
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6912      	ldr	r2, [r2, #16]
 80036b0:	0852      	lsrs	r2, r2, #1
 80036b2:	3a01      	subs	r2, #1
 80036b4:	0552      	lsls	r2, r2, #21
 80036b6:	430a      	orrs	r2, r1
 80036b8:	491f      	ldr	r1, [pc, #124]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	610b      	str	r3, [r1, #16]
 80036be:	e011      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6892      	ldr	r2, [r2, #8]
 80036d0:	0211      	lsls	r1, r2, #8
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6952      	ldr	r2, [r2, #20]
 80036d6:	0852      	lsrs	r2, r2, #1
 80036d8:	3a01      	subs	r2, #1
 80036da:	0652      	lsls	r2, r2, #25
 80036dc:	430a      	orrs	r2, r1
 80036de:	4916      	ldr	r1, [pc, #88]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036e4:	4b14      	ldr	r3, [pc, #80]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a13      	ldr	r2, [pc, #76]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd fd5a 	bl	80011a8 <HAL_GetTick>
 80036f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036f6:	e009      	b.n	800370c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036f8:	f7fd fd56 	bl	80011a8 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d902      	bls.n	800370c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	73fb      	strb	r3, [r7, #15]
          break;
 800370a:	e005      	b.n	8003718 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ef      	beq.n	80036f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	4904      	ldr	r1, [pc, #16]	; (8003738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800372c:	7bfb      	ldrb	r3, [r7, #15]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000

0800373c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800374a:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d018      	beq.n	8003788 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003756:	4b67      	ldr	r3, [pc, #412]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0203 	and.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d10d      	bne.n	8003782 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
       ||
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800376e:	4b61      	ldr	r3, [pc, #388]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
       ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d047      	beq.n	8003812 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
 8003786:	e044      	b.n	8003812 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d018      	beq.n	80037c2 <RCCEx_PLLSAI2_Config+0x86>
 8003790:	2b03      	cmp	r3, #3
 8003792:	d825      	bhi.n	80037e0 <RCCEx_PLLSAI2_Config+0xa4>
 8003794:	2b01      	cmp	r3, #1
 8003796:	d002      	beq.n	800379e <RCCEx_PLLSAI2_Config+0x62>
 8003798:	2b02      	cmp	r3, #2
 800379a:	d009      	beq.n	80037b0 <RCCEx_PLLSAI2_Config+0x74>
 800379c:	e020      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800379e:	4b55      	ldr	r3, [pc, #340]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d11d      	bne.n	80037e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ae:	e01a      	b.n	80037e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037b0:	4b50      	ldr	r3, [pc, #320]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d116      	bne.n	80037ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c0:	e013      	b.n	80037ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037c2:	4b4c      	ldr	r3, [pc, #304]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10f      	bne.n	80037ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037ce:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037de:	e006      	b.n	80037ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e004      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037e6:	bf00      	nop
 80037e8:	e002      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10d      	bne.n	8003812 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037f6:	4b3f      	ldr	r3, [pc, #252]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6819      	ldr	r1, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	3b01      	subs	r3, #1
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	430b      	orrs	r3, r1
 800380c:	4939      	ldr	r1, [pc, #228]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380e:	4313      	orrs	r3, r2
 8003810:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d167      	bne.n	80038e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003818:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a35      	ldr	r2, [pc, #212]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003824:	f7fd fcc0 	bl	80011a8 <HAL_GetTick>
 8003828:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800382a:	e009      	b.n	8003840 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800382c:	f7fd fcbc 	bl	80011a8 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d902      	bls.n	8003840 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	73fb      	strb	r3, [r7, #15]
        break;
 800383e:	e005      	b.n	800384c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003840:	4b2c      	ldr	r3, [pc, #176]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ef      	bne.n	800382c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d14a      	bne.n	80038e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d111      	bne.n	800387c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003858:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6892      	ldr	r2, [r2, #8]
 8003868:	0211      	lsls	r1, r2, #8
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68d2      	ldr	r2, [r2, #12]
 800386e:	0912      	lsrs	r2, r2, #4
 8003870:	0452      	lsls	r2, r2, #17
 8003872:	430a      	orrs	r2, r1
 8003874:	491f      	ldr	r1, [pc, #124]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003876:	4313      	orrs	r3, r2
 8003878:	614b      	str	r3, [r1, #20]
 800387a:	e011      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800387c:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003884:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6892      	ldr	r2, [r2, #8]
 800388c:	0211      	lsls	r1, r2, #8
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6912      	ldr	r2, [r2, #16]
 8003892:	0852      	lsrs	r2, r2, #1
 8003894:	3a01      	subs	r2, #1
 8003896:	0652      	lsls	r2, r2, #25
 8003898:	430a      	orrs	r2, r1
 800389a:	4916      	ldr	r1, [pc, #88]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389c:	4313      	orrs	r3, r2
 800389e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7fd fc7c 	bl	80011a8 <HAL_GetTick>
 80038b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038b2:	e009      	b.n	80038c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038b4:	f7fd fc78 	bl	80011a8 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d902      	bls.n	80038c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	73fb      	strb	r3, [r7, #15]
          break;
 80038c6:	e005      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ef      	beq.n	80038b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	4904      	ldr	r1, [pc, #16]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000

080038f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e095      	b.n	8003a36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800391a:	d009      	beq.n	8003930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	61da      	str	r2, [r3, #28]
 8003922:	e005      	b.n	8003930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fa14 	bl	8000d78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003966:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003970:	d902      	bls.n	8003978 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e002      	b.n	800397e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800397c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003986:	d007      	beq.n	8003998 <HAL_SPI_Init+0xa0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003990:	d002      	beq.n	8003998 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	ea42 0103 	orr.w	r1, r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	0c1b      	lsrs	r3, r3, #16
 80039f4:	f003 0204 	and.w	r2, r3, #4
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a14:	ea42 0103 	orr.w	r1, r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e040      	b.n	8003ad2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fd f9cb 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2224      	movs	r2, #36	; 0x24
 8003a6a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fb6b 	bl	8004160 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8b0 	bl	8003bf0 <UART_SetConfig>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e01b      	b.n	8003ad2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aa8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ab8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fbea 	bl	80042a4 <UART_CheckIdleState>
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b08a      	sub	sp, #40	; 0x28
 8003ade:	af02      	add	r7, sp, #8
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d178      	bne.n	8003be4 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_UART_Transmit+0x24>
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e071      	b.n	8003be6 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2221      	movs	r2, #33	; 0x21
 8003b0e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b10:	f7fd fb4a 	bl	80011a8 <HAL_GetTick>
 8003b14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	88fa      	ldrh	r2, [r7, #6]
 8003b1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	88fa      	ldrh	r2, [r7, #6]
 8003b22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2e:	d108      	bne.n	8003b42 <HAL_UART_Transmit+0x68>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e003      	b.n	8003b4a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b4a:	e030      	b.n	8003bae <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2200      	movs	r2, #0
 8003b54:	2180      	movs	r1, #128	; 0x80
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fc4c 	bl	80043f4 <UART_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e03c      	b.n	8003be6 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	881a      	ldrh	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b7e:	b292      	uxth	r2, r2
 8003b80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3302      	adds	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e008      	b.n	8003b9c <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	b292      	uxth	r2, r2
 8003b94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1c8      	bne.n	8003b4c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2140      	movs	r1, #64	; 0x40
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 fc15 	bl	80043f4 <UART_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d004      	beq.n	8003bda <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e005      	b.n	8003be6 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf4:	b08a      	sub	sp, #40	; 0x28
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4ba4      	ldr	r3, [pc, #656]	; (8003eb0 <UART_SetConfig+0x2c0>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a99      	ldr	r2, [pc, #612]	; (8003eb4 <UART_SetConfig+0x2c4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a90      	ldr	r2, [pc, #576]	; (8003eb8 <UART_SetConfig+0x2c8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d126      	bne.n	8003cc8 <UART_SetConfig+0xd8>
 8003c7a:	4b90      	ldr	r3, [pc, #576]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d81b      	bhi.n	8003cc0 <UART_SetConfig+0xd0>
 8003c88:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <UART_SetConfig+0xa0>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003ca1 	.word	0x08003ca1
 8003c94:	08003cb1 	.word	0x08003cb1
 8003c98:	08003ca9 	.word	0x08003ca9
 8003c9c:	08003cb9 	.word	0x08003cb9
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca6:	e116      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cae:	e112      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb6:	e10e      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cbe:	e10a      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc6:	e106      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a7c      	ldr	r2, [pc, #496]	; (8003ec0 <UART_SetConfig+0x2d0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d138      	bne.n	8003d44 <UART_SetConfig+0x154>
 8003cd2:	4b7a      	ldr	r3, [pc, #488]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	d82d      	bhi.n	8003d3c <UART_SetConfig+0x14c>
 8003ce0:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <UART_SetConfig+0xf8>)
 8003ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce6:	bf00      	nop
 8003ce8:	08003d1d 	.word	0x08003d1d
 8003cec:	08003d3d 	.word	0x08003d3d
 8003cf0:	08003d3d 	.word	0x08003d3d
 8003cf4:	08003d3d 	.word	0x08003d3d
 8003cf8:	08003d2d 	.word	0x08003d2d
 8003cfc:	08003d3d 	.word	0x08003d3d
 8003d00:	08003d3d 	.word	0x08003d3d
 8003d04:	08003d3d 	.word	0x08003d3d
 8003d08:	08003d25 	.word	0x08003d25
 8003d0c:	08003d3d 	.word	0x08003d3d
 8003d10:	08003d3d 	.word	0x08003d3d
 8003d14:	08003d3d 	.word	0x08003d3d
 8003d18:	08003d35 	.word	0x08003d35
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d22:	e0d8      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003d24:	2302      	movs	r3, #2
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2a:	e0d4      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d32:	e0d0      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003d34:	2308      	movs	r3, #8
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3a:	e0cc      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d42:	e0c8      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a5e      	ldr	r2, [pc, #376]	; (8003ec4 <UART_SetConfig+0x2d4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d125      	bne.n	8003d9a <UART_SetConfig+0x1aa>
 8003d4e:	4b5b      	ldr	r3, [pc, #364]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d58:	2b30      	cmp	r3, #48	; 0x30
 8003d5a:	d016      	beq.n	8003d8a <UART_SetConfig+0x19a>
 8003d5c:	2b30      	cmp	r3, #48	; 0x30
 8003d5e:	d818      	bhi.n	8003d92 <UART_SetConfig+0x1a2>
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d00a      	beq.n	8003d7a <UART_SetConfig+0x18a>
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d814      	bhi.n	8003d92 <UART_SetConfig+0x1a2>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <UART_SetConfig+0x182>
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d008      	beq.n	8003d82 <UART_SetConfig+0x192>
 8003d70:	e00f      	b.n	8003d92 <UART_SetConfig+0x1a2>
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d78:	e0ad      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d80:	e0a9      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003d82:	2304      	movs	r3, #4
 8003d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d88:	e0a5      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d90:	e0a1      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003d92:	2310      	movs	r3, #16
 8003d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d98:	e09d      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a4a      	ldr	r2, [pc, #296]	; (8003ec8 <UART_SetConfig+0x2d8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d125      	bne.n	8003df0 <UART_SetConfig+0x200>
 8003da4:	4b45      	ldr	r3, [pc, #276]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dae:	2bc0      	cmp	r3, #192	; 0xc0
 8003db0:	d016      	beq.n	8003de0 <UART_SetConfig+0x1f0>
 8003db2:	2bc0      	cmp	r3, #192	; 0xc0
 8003db4:	d818      	bhi.n	8003de8 <UART_SetConfig+0x1f8>
 8003db6:	2b80      	cmp	r3, #128	; 0x80
 8003db8:	d00a      	beq.n	8003dd0 <UART_SetConfig+0x1e0>
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d814      	bhi.n	8003de8 <UART_SetConfig+0x1f8>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <UART_SetConfig+0x1d8>
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d008      	beq.n	8003dd8 <UART_SetConfig+0x1e8>
 8003dc6:	e00f      	b.n	8003de8 <UART_SetConfig+0x1f8>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dce:	e082      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd6:	e07e      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dde:	e07a      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003de0:	2308      	movs	r3, #8
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de6:	e076      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003de8:	2310      	movs	r3, #16
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dee:	e072      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a35      	ldr	r2, [pc, #212]	; (8003ecc <UART_SetConfig+0x2dc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d12a      	bne.n	8003e50 <UART_SetConfig+0x260>
 8003dfa:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e08:	d01a      	beq.n	8003e40 <UART_SetConfig+0x250>
 8003e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e0e:	d81b      	bhi.n	8003e48 <UART_SetConfig+0x258>
 8003e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e14:	d00c      	beq.n	8003e30 <UART_SetConfig+0x240>
 8003e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e1a:	d815      	bhi.n	8003e48 <UART_SetConfig+0x258>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <UART_SetConfig+0x238>
 8003e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e24:	d008      	beq.n	8003e38 <UART_SetConfig+0x248>
 8003e26:	e00f      	b.n	8003e48 <UART_SetConfig+0x258>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2e:	e052      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003e30:	2302      	movs	r3, #2
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e36:	e04e      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3e:	e04a      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003e40:	2308      	movs	r3, #8
 8003e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e46:	e046      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003e48:	2310      	movs	r3, #16
 8003e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4e:	e042      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <UART_SetConfig+0x2c4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d13a      	bne.n	8003ed0 <UART_SetConfig+0x2e0>
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <UART_SetConfig+0x2cc>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e68:	d01a      	beq.n	8003ea0 <UART_SetConfig+0x2b0>
 8003e6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e6e:	d81b      	bhi.n	8003ea8 <UART_SetConfig+0x2b8>
 8003e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e74:	d00c      	beq.n	8003e90 <UART_SetConfig+0x2a0>
 8003e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e7a:	d815      	bhi.n	8003ea8 <UART_SetConfig+0x2b8>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <UART_SetConfig+0x298>
 8003e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e84:	d008      	beq.n	8003e98 <UART_SetConfig+0x2a8>
 8003e86:	e00f      	b.n	8003ea8 <UART_SetConfig+0x2b8>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8e:	e022      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003e90:	2302      	movs	r3, #2
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e96:	e01e      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9e:	e01a      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003ea0:	2308      	movs	r3, #8
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea6:	e016      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eae:	e012      	b.n	8003ed6 <UART_SetConfig+0x2e6>
 8003eb0:	efff69f3 	.word	0xefff69f3
 8003eb4:	40008000 	.word	0x40008000
 8003eb8:	40013800 	.word	0x40013800
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40004400 	.word	0x40004400
 8003ec4:	40004800 	.word	0x40004800
 8003ec8:	40004c00 	.word	0x40004c00
 8003ecc:	40005000 	.word	0x40005000
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a9f      	ldr	r2, [pc, #636]	; (8004158 <UART_SetConfig+0x568>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d17a      	bne.n	8003fd6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d824      	bhi.n	8003f32 <UART_SetConfig+0x342>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0x300>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f33 	.word	0x08003f33
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f33 	.word	0x08003f33
 8003f00:	08003f23 	.word	0x08003f23
 8003f04:	08003f33 	.word	0x08003f33
 8003f08:	08003f33 	.word	0x08003f33
 8003f0c:	08003f33 	.word	0x08003f33
 8003f10:	08003f2b 	.word	0x08003f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7fe ffa8 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8003f18:	61f8      	str	r0, [r7, #28]
        break;
 8003f1a:	e010      	b.n	8003f3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f1c:	4b8f      	ldr	r3, [pc, #572]	; (800415c <UART_SetConfig+0x56c>)
 8003f1e:	61fb      	str	r3, [r7, #28]
        break;
 8003f20:	e00d      	b.n	8003f3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f22:	f7fe ff09 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8003f26:	61f8      	str	r0, [r7, #28]
        break;
 8003f28:	e009      	b.n	8003f3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2e:	61fb      	str	r3, [r7, #28]
        break;
 8003f30:	e005      	b.n	8003f3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80fb 	beq.w	800413c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d305      	bcc.n	8003f62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d903      	bls.n	8003f6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f68:	e0e8      	b.n	800413c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	461c      	mov	r4, r3
 8003f70:	4615      	mov	r5, r2
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	022b      	lsls	r3, r5, #8
 8003f7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f80:	0222      	lsls	r2, r4, #8
 8003f82:	68f9      	ldr	r1, [r7, #12]
 8003f84:	6849      	ldr	r1, [r1, #4]
 8003f86:	0849      	lsrs	r1, r1, #1
 8003f88:	2000      	movs	r0, #0
 8003f8a:	4688      	mov	r8, r1
 8003f8c:	4681      	mov	r9, r0
 8003f8e:	eb12 0a08 	adds.w	sl, r2, r8
 8003f92:	eb43 0b09 	adc.w	fp, r3, r9
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fa4:	4650      	mov	r0, sl
 8003fa6:	4659      	mov	r1, fp
 8003fa8:	f7fc f962 	bl	8000270 <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fba:	d308      	bcc.n	8003fce <UART_SetConfig+0x3de>
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc2:	d204      	bcs.n	8003fce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	e0b6      	b.n	800413c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fd4:	e0b2      	b.n	800413c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fde:	d15e      	bne.n	800409e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d828      	bhi.n	800403a <UART_SetConfig+0x44a>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <UART_SetConfig+0x400>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	0800401d 	.word	0x0800401d
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	0800403b 	.word	0x0800403b
 8004000:	0800402b 	.word	0x0800402b
 8004004:	0800403b 	.word	0x0800403b
 8004008:	0800403b 	.word	0x0800403b
 800400c:	0800403b 	.word	0x0800403b
 8004010:	08004033 	.word	0x08004033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004014:	f7fe ff28 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8004018:	61f8      	str	r0, [r7, #28]
        break;
 800401a:	e014      	b.n	8004046 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800401c:	f7fe ff3a 	bl	8002e94 <HAL_RCC_GetPCLK2Freq>
 8004020:	61f8      	str	r0, [r7, #28]
        break;
 8004022:	e010      	b.n	8004046 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004024:	4b4d      	ldr	r3, [pc, #308]	; (800415c <UART_SetConfig+0x56c>)
 8004026:	61fb      	str	r3, [r7, #28]
        break;
 8004028:	e00d      	b.n	8004046 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402a:	f7fe fe85 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 800402e:	61f8      	str	r0, [r7, #28]
        break;
 8004030:	e009      	b.n	8004046 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004036:	61fb      	str	r3, [r7, #28]
        break;
 8004038:	e005      	b.n	8004046 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d077      	beq.n	800413c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	005a      	lsls	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	085b      	lsrs	r3, r3, #1
 8004056:	441a      	add	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b0f      	cmp	r3, #15
 8004066:	d916      	bls.n	8004096 <UART_SetConfig+0x4a6>
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406e:	d212      	bcs.n	8004096 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f023 030f 	bic.w	r3, r3, #15
 8004078:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	085b      	lsrs	r3, r3, #1
 800407e:	b29b      	uxth	r3, r3
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	b29a      	uxth	r2, r3
 8004086:	8afb      	ldrh	r3, [r7, #22]
 8004088:	4313      	orrs	r3, r2
 800408a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	8afa      	ldrh	r2, [r7, #22]
 8004092:	60da      	str	r2, [r3, #12]
 8004094:	e052      	b.n	800413c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800409c:	e04e      	b.n	800413c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800409e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d827      	bhi.n	80040f6 <UART_SetConfig+0x506>
 80040a6:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <UART_SetConfig+0x4bc>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	080040d1 	.word	0x080040d1
 80040b0:	080040d9 	.word	0x080040d9
 80040b4:	080040e1 	.word	0x080040e1
 80040b8:	080040f7 	.word	0x080040f7
 80040bc:	080040e7 	.word	0x080040e7
 80040c0:	080040f7 	.word	0x080040f7
 80040c4:	080040f7 	.word	0x080040f7
 80040c8:	080040f7 	.word	0x080040f7
 80040cc:	080040ef 	.word	0x080040ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d0:	f7fe feca 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 80040d4:	61f8      	str	r0, [r7, #28]
        break;
 80040d6:	e014      	b.n	8004102 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040d8:	f7fe fedc 	bl	8002e94 <HAL_RCC_GetPCLK2Freq>
 80040dc:	61f8      	str	r0, [r7, #28]
        break;
 80040de:	e010      	b.n	8004102 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e0:	4b1e      	ldr	r3, [pc, #120]	; (800415c <UART_SetConfig+0x56c>)
 80040e2:	61fb      	str	r3, [r7, #28]
        break;
 80040e4:	e00d      	b.n	8004102 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e6:	f7fe fe27 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 80040ea:	61f8      	str	r0, [r7, #28]
        break;
 80040ec:	e009      	b.n	8004102 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f2:	61fb      	str	r3, [r7, #28]
        break;
 80040f4:	e005      	b.n	8004102 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004100:	bf00      	nop
    }

    if (pclk != 0U)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d019      	beq.n	800413c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	085a      	lsrs	r2, r3, #1
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	441a      	add	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b0f      	cmp	r3, #15
 8004120:	d909      	bls.n	8004136 <UART_SetConfig+0x546>
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004128:	d205      	bcs.n	8004136 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60da      	str	r2, [r3, #12]
 8004134:	e002      	b.n	800413c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004148:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800414c:	4618      	mov	r0, r3
 800414e:	3728      	adds	r7, #40	; 0x28
 8004150:	46bd      	mov	sp, r7
 8004152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004156:	bf00      	nop
 8004158:	40008000 	.word	0x40008000
 800415c:	00f42400 	.word	0x00f42400

08004160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01a      	beq.n	8004276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800425e:	d10a      	bne.n	8004276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	605a      	str	r2, [r3, #4]
  }
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b098      	sub	sp, #96	; 0x60
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042b4:	f7fc ff78 	bl	80011a8 <HAL_GetTick>
 80042b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d12e      	bne.n	8004326 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d0:	2200      	movs	r2, #0
 80042d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f88c 	bl	80043f4 <UART_WaitOnFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d021      	beq.n	8004326 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f6:	653b      	str	r3, [r7, #80]	; 0x50
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004300:	647b      	str	r3, [r7, #68]	; 0x44
 8004302:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800430e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e6      	bne.n	80042e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e062      	b.n	80043ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b04      	cmp	r3, #4
 8004332:	d149      	bne.n	80043c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004334:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433c:	2200      	movs	r2, #0
 800433e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f856 	bl	80043f4 <UART_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d03c      	beq.n	80043c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	623b      	str	r3, [r7, #32]
   return(result);
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436c:	633b      	str	r3, [r7, #48]	; 0x30
 800436e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e6      	bne.n	800434e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	64bb      	str	r3, [r7, #72]	; 0x48
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043a0:	61fa      	str	r2, [r7, #28]
 80043a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	69b9      	ldr	r1, [r7, #24]
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	617b      	str	r3, [r7, #20]
   return(result);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e5      	bne.n	8004380 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e011      	b.n	80043ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3758      	adds	r7, #88	; 0x58
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004404:	e049      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d045      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fc fecb 	bl	80011a8 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <UART_WaitOnFlagUntilTimeout+0x30>
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e048      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d031      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b08      	cmp	r3, #8
 8004442:	d110      	bne.n	8004466 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2208      	movs	r2, #8
 800444a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f838 	bl	80044c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2208      	movs	r2, #8
 8004456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e029      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004474:	d111      	bne.n	800449a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800447e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f81e 	bl	80044c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e00f      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69da      	ldr	r2, [r3, #28]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4013      	ands	r3, r2
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	bf0c      	ite	eq
 80044aa:	2301      	moveq	r3, #1
 80044ac:	2300      	movne	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d0a6      	beq.n	8004406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b095      	sub	sp, #84	; 0x54
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e6      	bne.n	80044ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	61fb      	str	r3, [r7, #28]
   return(result);
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	64bb      	str	r3, [r7, #72]	; 0x48
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004534:	2b01      	cmp	r3, #1
 8004536:	d118      	bne.n	800456a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	60bb      	str	r3, [r7, #8]
   return(result);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f023 0310 	bic.w	r3, r3, #16
 800454c:	647b      	str	r3, [r7, #68]	; 0x44
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004556:	61bb      	str	r3, [r7, #24]
 8004558:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	6979      	ldr	r1, [r7, #20]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	613b      	str	r3, [r7, #16]
   return(result);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e6      	bne.n	8004538 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800457e:	bf00      	nop
 8004580:	3754      	adds	r7, #84	; 0x54
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <std>:
 800458c:	2300      	movs	r3, #0
 800458e:	b510      	push	{r4, lr}
 8004590:	4604      	mov	r4, r0
 8004592:	e9c0 3300 	strd	r3, r3, [r0]
 8004596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800459a:	6083      	str	r3, [r0, #8]
 800459c:	8181      	strh	r1, [r0, #12]
 800459e:	6643      	str	r3, [r0, #100]	; 0x64
 80045a0:	81c2      	strh	r2, [r0, #14]
 80045a2:	6183      	str	r3, [r0, #24]
 80045a4:	4619      	mov	r1, r3
 80045a6:	2208      	movs	r2, #8
 80045a8:	305c      	adds	r0, #92	; 0x5c
 80045aa:	f000 f9f7 	bl	800499c <memset>
 80045ae:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <std+0x58>)
 80045b0:	6263      	str	r3, [r4, #36]	; 0x24
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <std+0x5c>)
 80045b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80045b6:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <std+0x60>)
 80045b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045ba:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <std+0x64>)
 80045bc:	6323      	str	r3, [r4, #48]	; 0x30
 80045be:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <std+0x68>)
 80045c0:	6224      	str	r4, [r4, #32]
 80045c2:	429c      	cmp	r4, r3
 80045c4:	d006      	beq.n	80045d4 <std+0x48>
 80045c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80045ca:	4294      	cmp	r4, r2
 80045cc:	d002      	beq.n	80045d4 <std+0x48>
 80045ce:	33d0      	adds	r3, #208	; 0xd0
 80045d0:	429c      	cmp	r4, r3
 80045d2:	d105      	bne.n	80045e0 <std+0x54>
 80045d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045dc:	f000 ba56 	b.w	8004a8c <__retarget_lock_init_recursive>
 80045e0:	bd10      	pop	{r4, pc}
 80045e2:	bf00      	nop
 80045e4:	080047ed 	.word	0x080047ed
 80045e8:	0800480f 	.word	0x0800480f
 80045ec:	08004847 	.word	0x08004847
 80045f0:	0800486b 	.word	0x0800486b
 80045f4:	200001cc 	.word	0x200001cc

080045f8 <stdio_exit_handler>:
 80045f8:	4a02      	ldr	r2, [pc, #8]	; (8004604 <stdio_exit_handler+0xc>)
 80045fa:	4903      	ldr	r1, [pc, #12]	; (8004608 <stdio_exit_handler+0x10>)
 80045fc:	4803      	ldr	r0, [pc, #12]	; (800460c <stdio_exit_handler+0x14>)
 80045fe:	f000 b869 	b.w	80046d4 <_fwalk_sglue>
 8004602:	bf00      	nop
 8004604:	2000000c 	.word	0x2000000c
 8004608:	08005339 	.word	0x08005339
 800460c:	20000018 	.word	0x20000018

08004610 <cleanup_stdio>:
 8004610:	6841      	ldr	r1, [r0, #4]
 8004612:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <cleanup_stdio+0x34>)
 8004614:	4299      	cmp	r1, r3
 8004616:	b510      	push	{r4, lr}
 8004618:	4604      	mov	r4, r0
 800461a:	d001      	beq.n	8004620 <cleanup_stdio+0x10>
 800461c:	f000 fe8c 	bl	8005338 <_fflush_r>
 8004620:	68a1      	ldr	r1, [r4, #8]
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <cleanup_stdio+0x38>)
 8004624:	4299      	cmp	r1, r3
 8004626:	d002      	beq.n	800462e <cleanup_stdio+0x1e>
 8004628:	4620      	mov	r0, r4
 800462a:	f000 fe85 	bl	8005338 <_fflush_r>
 800462e:	68e1      	ldr	r1, [r4, #12]
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <cleanup_stdio+0x3c>)
 8004632:	4299      	cmp	r1, r3
 8004634:	d004      	beq.n	8004640 <cleanup_stdio+0x30>
 8004636:	4620      	mov	r0, r4
 8004638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800463c:	f000 be7c 	b.w	8005338 <_fflush_r>
 8004640:	bd10      	pop	{r4, pc}
 8004642:	bf00      	nop
 8004644:	200001cc 	.word	0x200001cc
 8004648:	20000234 	.word	0x20000234
 800464c:	2000029c 	.word	0x2000029c

08004650 <global_stdio_init.part.0>:
 8004650:	b510      	push	{r4, lr}
 8004652:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <global_stdio_init.part.0+0x30>)
 8004654:	4c0b      	ldr	r4, [pc, #44]	; (8004684 <global_stdio_init.part.0+0x34>)
 8004656:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <global_stdio_init.part.0+0x38>)
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	4620      	mov	r0, r4
 800465c:	2200      	movs	r2, #0
 800465e:	2104      	movs	r1, #4
 8004660:	f7ff ff94 	bl	800458c <std>
 8004664:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004668:	2201      	movs	r2, #1
 800466a:	2109      	movs	r1, #9
 800466c:	f7ff ff8e 	bl	800458c <std>
 8004670:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004674:	2202      	movs	r2, #2
 8004676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800467a:	2112      	movs	r1, #18
 800467c:	f7ff bf86 	b.w	800458c <std>
 8004680:	20000304 	.word	0x20000304
 8004684:	200001cc 	.word	0x200001cc
 8004688:	080045f9 	.word	0x080045f9

0800468c <__sfp_lock_acquire>:
 800468c:	4801      	ldr	r0, [pc, #4]	; (8004694 <__sfp_lock_acquire+0x8>)
 800468e:	f000 b9fe 	b.w	8004a8e <__retarget_lock_acquire_recursive>
 8004692:	bf00      	nop
 8004694:	2000030d 	.word	0x2000030d

08004698 <__sfp_lock_release>:
 8004698:	4801      	ldr	r0, [pc, #4]	; (80046a0 <__sfp_lock_release+0x8>)
 800469a:	f000 b9f9 	b.w	8004a90 <__retarget_lock_release_recursive>
 800469e:	bf00      	nop
 80046a0:	2000030d 	.word	0x2000030d

080046a4 <__sinit>:
 80046a4:	b510      	push	{r4, lr}
 80046a6:	4604      	mov	r4, r0
 80046a8:	f7ff fff0 	bl	800468c <__sfp_lock_acquire>
 80046ac:	6a23      	ldr	r3, [r4, #32]
 80046ae:	b11b      	cbz	r3, 80046b8 <__sinit+0x14>
 80046b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b4:	f7ff bff0 	b.w	8004698 <__sfp_lock_release>
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <__sinit+0x28>)
 80046ba:	6223      	str	r3, [r4, #32]
 80046bc:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <__sinit+0x2c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f5      	bne.n	80046b0 <__sinit+0xc>
 80046c4:	f7ff ffc4 	bl	8004650 <global_stdio_init.part.0>
 80046c8:	e7f2      	b.n	80046b0 <__sinit+0xc>
 80046ca:	bf00      	nop
 80046cc:	08004611 	.word	0x08004611
 80046d0:	20000304 	.word	0x20000304

080046d4 <_fwalk_sglue>:
 80046d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d8:	4607      	mov	r7, r0
 80046da:	4688      	mov	r8, r1
 80046dc:	4614      	mov	r4, r2
 80046de:	2600      	movs	r6, #0
 80046e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046e4:	f1b9 0901 	subs.w	r9, r9, #1
 80046e8:	d505      	bpl.n	80046f6 <_fwalk_sglue+0x22>
 80046ea:	6824      	ldr	r4, [r4, #0]
 80046ec:	2c00      	cmp	r4, #0
 80046ee:	d1f7      	bne.n	80046e0 <_fwalk_sglue+0xc>
 80046f0:	4630      	mov	r0, r6
 80046f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f6:	89ab      	ldrh	r3, [r5, #12]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d907      	bls.n	800470c <_fwalk_sglue+0x38>
 80046fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004700:	3301      	adds	r3, #1
 8004702:	d003      	beq.n	800470c <_fwalk_sglue+0x38>
 8004704:	4629      	mov	r1, r5
 8004706:	4638      	mov	r0, r7
 8004708:	47c0      	blx	r8
 800470a:	4306      	orrs	r6, r0
 800470c:	3568      	adds	r5, #104	; 0x68
 800470e:	e7e9      	b.n	80046e4 <_fwalk_sglue+0x10>

08004710 <iprintf>:
 8004710:	b40f      	push	{r0, r1, r2, r3}
 8004712:	b507      	push	{r0, r1, r2, lr}
 8004714:	4906      	ldr	r1, [pc, #24]	; (8004730 <iprintf+0x20>)
 8004716:	ab04      	add	r3, sp, #16
 8004718:	6808      	ldr	r0, [r1, #0]
 800471a:	f853 2b04 	ldr.w	r2, [r3], #4
 800471e:	6881      	ldr	r1, [r0, #8]
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	f000 fad9 	bl	8004cd8 <_vfiprintf_r>
 8004726:	b003      	add	sp, #12
 8004728:	f85d eb04 	ldr.w	lr, [sp], #4
 800472c:	b004      	add	sp, #16
 800472e:	4770      	bx	lr
 8004730:	20000064 	.word	0x20000064

08004734 <_puts_r>:
 8004734:	6a03      	ldr	r3, [r0, #32]
 8004736:	b570      	push	{r4, r5, r6, lr}
 8004738:	6884      	ldr	r4, [r0, #8]
 800473a:	4605      	mov	r5, r0
 800473c:	460e      	mov	r6, r1
 800473e:	b90b      	cbnz	r3, 8004744 <_puts_r+0x10>
 8004740:	f7ff ffb0 	bl	80046a4 <__sinit>
 8004744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004746:	07db      	lsls	r3, r3, #31
 8004748:	d405      	bmi.n	8004756 <_puts_r+0x22>
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	0598      	lsls	r0, r3, #22
 800474e:	d402      	bmi.n	8004756 <_puts_r+0x22>
 8004750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004752:	f000 f99c 	bl	8004a8e <__retarget_lock_acquire_recursive>
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	0719      	lsls	r1, r3, #28
 800475a:	d513      	bpl.n	8004784 <_puts_r+0x50>
 800475c:	6923      	ldr	r3, [r4, #16]
 800475e:	b18b      	cbz	r3, 8004784 <_puts_r+0x50>
 8004760:	3e01      	subs	r6, #1
 8004762:	68a3      	ldr	r3, [r4, #8]
 8004764:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004768:	3b01      	subs	r3, #1
 800476a:	60a3      	str	r3, [r4, #8]
 800476c:	b9e9      	cbnz	r1, 80047aa <_puts_r+0x76>
 800476e:	2b00      	cmp	r3, #0
 8004770:	da2e      	bge.n	80047d0 <_puts_r+0x9c>
 8004772:	4622      	mov	r2, r4
 8004774:	210a      	movs	r1, #10
 8004776:	4628      	mov	r0, r5
 8004778:	f000 f87b 	bl	8004872 <__swbuf_r>
 800477c:	3001      	adds	r0, #1
 800477e:	d007      	beq.n	8004790 <_puts_r+0x5c>
 8004780:	250a      	movs	r5, #10
 8004782:	e007      	b.n	8004794 <_puts_r+0x60>
 8004784:	4621      	mov	r1, r4
 8004786:	4628      	mov	r0, r5
 8004788:	f000 f8b0 	bl	80048ec <__swsetup_r>
 800478c:	2800      	cmp	r0, #0
 800478e:	d0e7      	beq.n	8004760 <_puts_r+0x2c>
 8004790:	f04f 35ff 	mov.w	r5, #4294967295
 8004794:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004796:	07da      	lsls	r2, r3, #31
 8004798:	d405      	bmi.n	80047a6 <_puts_r+0x72>
 800479a:	89a3      	ldrh	r3, [r4, #12]
 800479c:	059b      	lsls	r3, r3, #22
 800479e:	d402      	bmi.n	80047a6 <_puts_r+0x72>
 80047a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047a2:	f000 f975 	bl	8004a90 <__retarget_lock_release_recursive>
 80047a6:	4628      	mov	r0, r5
 80047a8:	bd70      	pop	{r4, r5, r6, pc}
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da04      	bge.n	80047b8 <_puts_r+0x84>
 80047ae:	69a2      	ldr	r2, [r4, #24]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	dc06      	bgt.n	80047c2 <_puts_r+0x8e>
 80047b4:	290a      	cmp	r1, #10
 80047b6:	d004      	beq.n	80047c2 <_puts_r+0x8e>
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	6022      	str	r2, [r4, #0]
 80047be:	7019      	strb	r1, [r3, #0]
 80047c0:	e7cf      	b.n	8004762 <_puts_r+0x2e>
 80047c2:	4622      	mov	r2, r4
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 f854 	bl	8004872 <__swbuf_r>
 80047ca:	3001      	adds	r0, #1
 80047cc:	d1c9      	bne.n	8004762 <_puts_r+0x2e>
 80047ce:	e7df      	b.n	8004790 <_puts_r+0x5c>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	250a      	movs	r5, #10
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	6022      	str	r2, [r4, #0]
 80047d8:	701d      	strb	r5, [r3, #0]
 80047da:	e7db      	b.n	8004794 <_puts_r+0x60>

080047dc <puts>:
 80047dc:	4b02      	ldr	r3, [pc, #8]	; (80047e8 <puts+0xc>)
 80047de:	4601      	mov	r1, r0
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	f7ff bfa7 	b.w	8004734 <_puts_r>
 80047e6:	bf00      	nop
 80047e8:	20000064 	.word	0x20000064

080047ec <__sread>:
 80047ec:	b510      	push	{r4, lr}
 80047ee:	460c      	mov	r4, r1
 80047f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f4:	f000 f8fc 	bl	80049f0 <_read_r>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	bfab      	itete	ge
 80047fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004800:	181b      	addge	r3, r3, r0
 8004802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004806:	bfac      	ite	ge
 8004808:	6563      	strge	r3, [r4, #84]	; 0x54
 800480a:	81a3      	strhlt	r3, [r4, #12]
 800480c:	bd10      	pop	{r4, pc}

0800480e <__swrite>:
 800480e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004812:	461f      	mov	r7, r3
 8004814:	898b      	ldrh	r3, [r1, #12]
 8004816:	05db      	lsls	r3, r3, #23
 8004818:	4605      	mov	r5, r0
 800481a:	460c      	mov	r4, r1
 800481c:	4616      	mov	r6, r2
 800481e:	d505      	bpl.n	800482c <__swrite+0x1e>
 8004820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004824:	2302      	movs	r3, #2
 8004826:	2200      	movs	r2, #0
 8004828:	f000 f8d0 	bl	80049cc <_lseek_r>
 800482c:	89a3      	ldrh	r3, [r4, #12]
 800482e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004836:	81a3      	strh	r3, [r4, #12]
 8004838:	4632      	mov	r2, r6
 800483a:	463b      	mov	r3, r7
 800483c:	4628      	mov	r0, r5
 800483e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004842:	f000 b8e7 	b.w	8004a14 <_write_r>

08004846 <__sseek>:
 8004846:	b510      	push	{r4, lr}
 8004848:	460c      	mov	r4, r1
 800484a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484e:	f000 f8bd 	bl	80049cc <_lseek_r>
 8004852:	1c43      	adds	r3, r0, #1
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	bf15      	itete	ne
 8004858:	6560      	strne	r0, [r4, #84]	; 0x54
 800485a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800485e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004862:	81a3      	strheq	r3, [r4, #12]
 8004864:	bf18      	it	ne
 8004866:	81a3      	strhne	r3, [r4, #12]
 8004868:	bd10      	pop	{r4, pc}

0800486a <__sclose>:
 800486a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486e:	f000 b89d 	b.w	80049ac <_close_r>

08004872 <__swbuf_r>:
 8004872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004874:	460e      	mov	r6, r1
 8004876:	4614      	mov	r4, r2
 8004878:	4605      	mov	r5, r0
 800487a:	b118      	cbz	r0, 8004884 <__swbuf_r+0x12>
 800487c:	6a03      	ldr	r3, [r0, #32]
 800487e:	b90b      	cbnz	r3, 8004884 <__swbuf_r+0x12>
 8004880:	f7ff ff10 	bl	80046a4 <__sinit>
 8004884:	69a3      	ldr	r3, [r4, #24]
 8004886:	60a3      	str	r3, [r4, #8]
 8004888:	89a3      	ldrh	r3, [r4, #12]
 800488a:	071a      	lsls	r2, r3, #28
 800488c:	d525      	bpl.n	80048da <__swbuf_r+0x68>
 800488e:	6923      	ldr	r3, [r4, #16]
 8004890:	b31b      	cbz	r3, 80048da <__swbuf_r+0x68>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	6922      	ldr	r2, [r4, #16]
 8004896:	1a98      	subs	r0, r3, r2
 8004898:	6963      	ldr	r3, [r4, #20]
 800489a:	b2f6      	uxtb	r6, r6
 800489c:	4283      	cmp	r3, r0
 800489e:	4637      	mov	r7, r6
 80048a0:	dc04      	bgt.n	80048ac <__swbuf_r+0x3a>
 80048a2:	4621      	mov	r1, r4
 80048a4:	4628      	mov	r0, r5
 80048a6:	f000 fd47 	bl	8005338 <_fflush_r>
 80048aa:	b9e0      	cbnz	r0, 80048e6 <__swbuf_r+0x74>
 80048ac:	68a3      	ldr	r3, [r4, #8]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	60a3      	str	r3, [r4, #8]
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	6022      	str	r2, [r4, #0]
 80048b8:	701e      	strb	r6, [r3, #0]
 80048ba:	6962      	ldr	r2, [r4, #20]
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	429a      	cmp	r2, r3
 80048c0:	d004      	beq.n	80048cc <__swbuf_r+0x5a>
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	07db      	lsls	r3, r3, #31
 80048c6:	d506      	bpl.n	80048d6 <__swbuf_r+0x64>
 80048c8:	2e0a      	cmp	r6, #10
 80048ca:	d104      	bne.n	80048d6 <__swbuf_r+0x64>
 80048cc:	4621      	mov	r1, r4
 80048ce:	4628      	mov	r0, r5
 80048d0:	f000 fd32 	bl	8005338 <_fflush_r>
 80048d4:	b938      	cbnz	r0, 80048e6 <__swbuf_r+0x74>
 80048d6:	4638      	mov	r0, r7
 80048d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048da:	4621      	mov	r1, r4
 80048dc:	4628      	mov	r0, r5
 80048de:	f000 f805 	bl	80048ec <__swsetup_r>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d0d5      	beq.n	8004892 <__swbuf_r+0x20>
 80048e6:	f04f 37ff 	mov.w	r7, #4294967295
 80048ea:	e7f4      	b.n	80048d6 <__swbuf_r+0x64>

080048ec <__swsetup_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <__swsetup_r+0xac>)
 80048f0:	4605      	mov	r5, r0
 80048f2:	6818      	ldr	r0, [r3, #0]
 80048f4:	460c      	mov	r4, r1
 80048f6:	b118      	cbz	r0, 8004900 <__swsetup_r+0x14>
 80048f8:	6a03      	ldr	r3, [r0, #32]
 80048fa:	b90b      	cbnz	r3, 8004900 <__swsetup_r+0x14>
 80048fc:	f7ff fed2 	bl	80046a4 <__sinit>
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004906:	0718      	lsls	r0, r3, #28
 8004908:	d422      	bmi.n	8004950 <__swsetup_r+0x64>
 800490a:	06d9      	lsls	r1, r3, #27
 800490c:	d407      	bmi.n	800491e <__swsetup_r+0x32>
 800490e:	2309      	movs	r3, #9
 8004910:	602b      	str	r3, [r5, #0]
 8004912:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004916:	81a3      	strh	r3, [r4, #12]
 8004918:	f04f 30ff 	mov.w	r0, #4294967295
 800491c:	e034      	b.n	8004988 <__swsetup_r+0x9c>
 800491e:	0758      	lsls	r0, r3, #29
 8004920:	d512      	bpl.n	8004948 <__swsetup_r+0x5c>
 8004922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004924:	b141      	cbz	r1, 8004938 <__swsetup_r+0x4c>
 8004926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800492a:	4299      	cmp	r1, r3
 800492c:	d002      	beq.n	8004934 <__swsetup_r+0x48>
 800492e:	4628      	mov	r0, r5
 8004930:	f000 f8b0 	bl	8004a94 <_free_r>
 8004934:	2300      	movs	r3, #0
 8004936:	6363      	str	r3, [r4, #52]	; 0x34
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800493e:	81a3      	strh	r3, [r4, #12]
 8004940:	2300      	movs	r3, #0
 8004942:	6063      	str	r3, [r4, #4]
 8004944:	6923      	ldr	r3, [r4, #16]
 8004946:	6023      	str	r3, [r4, #0]
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	f043 0308 	orr.w	r3, r3, #8
 800494e:	81a3      	strh	r3, [r4, #12]
 8004950:	6923      	ldr	r3, [r4, #16]
 8004952:	b94b      	cbnz	r3, 8004968 <__swsetup_r+0x7c>
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800495a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800495e:	d003      	beq.n	8004968 <__swsetup_r+0x7c>
 8004960:	4621      	mov	r1, r4
 8004962:	4628      	mov	r0, r5
 8004964:	f000 fd36 	bl	80053d4 <__smakebuf_r>
 8004968:	89a0      	ldrh	r0, [r4, #12]
 800496a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800496e:	f010 0301 	ands.w	r3, r0, #1
 8004972:	d00a      	beq.n	800498a <__swsetup_r+0x9e>
 8004974:	2300      	movs	r3, #0
 8004976:	60a3      	str	r3, [r4, #8]
 8004978:	6963      	ldr	r3, [r4, #20]
 800497a:	425b      	negs	r3, r3
 800497c:	61a3      	str	r3, [r4, #24]
 800497e:	6923      	ldr	r3, [r4, #16]
 8004980:	b943      	cbnz	r3, 8004994 <__swsetup_r+0xa8>
 8004982:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004986:	d1c4      	bne.n	8004912 <__swsetup_r+0x26>
 8004988:	bd38      	pop	{r3, r4, r5, pc}
 800498a:	0781      	lsls	r1, r0, #30
 800498c:	bf58      	it	pl
 800498e:	6963      	ldrpl	r3, [r4, #20]
 8004990:	60a3      	str	r3, [r4, #8]
 8004992:	e7f4      	b.n	800497e <__swsetup_r+0x92>
 8004994:	2000      	movs	r0, #0
 8004996:	e7f7      	b.n	8004988 <__swsetup_r+0x9c>
 8004998:	20000064 	.word	0x20000064

0800499c <memset>:
 800499c:	4402      	add	r2, r0
 800499e:	4603      	mov	r3, r0
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d100      	bne.n	80049a6 <memset+0xa>
 80049a4:	4770      	bx	lr
 80049a6:	f803 1b01 	strb.w	r1, [r3], #1
 80049aa:	e7f9      	b.n	80049a0 <memset+0x4>

080049ac <_close_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4d06      	ldr	r5, [pc, #24]	; (80049c8 <_close_r+0x1c>)
 80049b0:	2300      	movs	r3, #0
 80049b2:	4604      	mov	r4, r0
 80049b4:	4608      	mov	r0, r1
 80049b6:	602b      	str	r3, [r5, #0]
 80049b8:	f7fc fadf 	bl	8000f7a <_close>
 80049bc:	1c43      	adds	r3, r0, #1
 80049be:	d102      	bne.n	80049c6 <_close_r+0x1a>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	b103      	cbz	r3, 80049c6 <_close_r+0x1a>
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	20000308 	.word	0x20000308

080049cc <_lseek_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4d07      	ldr	r5, [pc, #28]	; (80049ec <_lseek_r+0x20>)
 80049d0:	4604      	mov	r4, r0
 80049d2:	4608      	mov	r0, r1
 80049d4:	4611      	mov	r1, r2
 80049d6:	2200      	movs	r2, #0
 80049d8:	602a      	str	r2, [r5, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	f7fc faf4 	bl	8000fc8 <_lseek>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d102      	bne.n	80049ea <_lseek_r+0x1e>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	b103      	cbz	r3, 80049ea <_lseek_r+0x1e>
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	20000308 	.word	0x20000308

080049f0 <_read_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4d07      	ldr	r5, [pc, #28]	; (8004a10 <_read_r+0x20>)
 80049f4:	4604      	mov	r4, r0
 80049f6:	4608      	mov	r0, r1
 80049f8:	4611      	mov	r1, r2
 80049fa:	2200      	movs	r2, #0
 80049fc:	602a      	str	r2, [r5, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f7fc fa82 	bl	8000f08 <_read>
 8004a04:	1c43      	adds	r3, r0, #1
 8004a06:	d102      	bne.n	8004a0e <_read_r+0x1e>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	b103      	cbz	r3, 8004a0e <_read_r+0x1e>
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	20000308 	.word	0x20000308

08004a14 <_write_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4d07      	ldr	r5, [pc, #28]	; (8004a34 <_write_r+0x20>)
 8004a18:	4604      	mov	r4, r0
 8004a1a:	4608      	mov	r0, r1
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	2200      	movs	r2, #0
 8004a20:	602a      	str	r2, [r5, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f7fc fa8d 	bl	8000f42 <_write>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d102      	bne.n	8004a32 <_write_r+0x1e>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <_write_r+0x1e>
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	20000308 	.word	0x20000308

08004a38 <__errno>:
 8004a38:	4b01      	ldr	r3, [pc, #4]	; (8004a40 <__errno+0x8>)
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000064 	.word	0x20000064

08004a44 <__libc_init_array>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	4d0d      	ldr	r5, [pc, #52]	; (8004a7c <__libc_init_array+0x38>)
 8004a48:	4c0d      	ldr	r4, [pc, #52]	; (8004a80 <__libc_init_array+0x3c>)
 8004a4a:	1b64      	subs	r4, r4, r5
 8004a4c:	10a4      	asrs	r4, r4, #2
 8004a4e:	2600      	movs	r6, #0
 8004a50:	42a6      	cmp	r6, r4
 8004a52:	d109      	bne.n	8004a68 <__libc_init_array+0x24>
 8004a54:	4d0b      	ldr	r5, [pc, #44]	; (8004a84 <__libc_init_array+0x40>)
 8004a56:	4c0c      	ldr	r4, [pc, #48]	; (8004a88 <__libc_init_array+0x44>)
 8004a58:	f000 fd2a 	bl	80054b0 <_init>
 8004a5c:	1b64      	subs	r4, r4, r5
 8004a5e:	10a4      	asrs	r4, r4, #2
 8004a60:	2600      	movs	r6, #0
 8004a62:	42a6      	cmp	r6, r4
 8004a64:	d105      	bne.n	8004a72 <__libc_init_array+0x2e>
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
 8004a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6c:	4798      	blx	r3
 8004a6e:	3601      	adds	r6, #1
 8004a70:	e7ee      	b.n	8004a50 <__libc_init_array+0xc>
 8004a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a76:	4798      	blx	r3
 8004a78:	3601      	adds	r6, #1
 8004a7a:	e7f2      	b.n	8004a62 <__libc_init_array+0x1e>
 8004a7c:	08005678 	.word	0x08005678
 8004a80:	08005678 	.word	0x08005678
 8004a84:	08005678 	.word	0x08005678
 8004a88:	0800567c 	.word	0x0800567c

08004a8c <__retarget_lock_init_recursive>:
 8004a8c:	4770      	bx	lr

08004a8e <__retarget_lock_acquire_recursive>:
 8004a8e:	4770      	bx	lr

08004a90 <__retarget_lock_release_recursive>:
 8004a90:	4770      	bx	lr
	...

08004a94 <_free_r>:
 8004a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a96:	2900      	cmp	r1, #0
 8004a98:	d044      	beq.n	8004b24 <_free_r+0x90>
 8004a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a9e:	9001      	str	r0, [sp, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f1a1 0404 	sub.w	r4, r1, #4
 8004aa6:	bfb8      	it	lt
 8004aa8:	18e4      	addlt	r4, r4, r3
 8004aaa:	f000 f8df 	bl	8004c6c <__malloc_lock>
 8004aae:	4a1e      	ldr	r2, [pc, #120]	; (8004b28 <_free_r+0x94>)
 8004ab0:	9801      	ldr	r0, [sp, #4]
 8004ab2:	6813      	ldr	r3, [r2, #0]
 8004ab4:	b933      	cbnz	r3, 8004ac4 <_free_r+0x30>
 8004ab6:	6063      	str	r3, [r4, #4]
 8004ab8:	6014      	str	r4, [r2, #0]
 8004aba:	b003      	add	sp, #12
 8004abc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ac0:	f000 b8da 	b.w	8004c78 <__malloc_unlock>
 8004ac4:	42a3      	cmp	r3, r4
 8004ac6:	d908      	bls.n	8004ada <_free_r+0x46>
 8004ac8:	6825      	ldr	r5, [r4, #0]
 8004aca:	1961      	adds	r1, r4, r5
 8004acc:	428b      	cmp	r3, r1
 8004ace:	bf01      	itttt	eq
 8004ad0:	6819      	ldreq	r1, [r3, #0]
 8004ad2:	685b      	ldreq	r3, [r3, #4]
 8004ad4:	1949      	addeq	r1, r1, r5
 8004ad6:	6021      	streq	r1, [r4, #0]
 8004ad8:	e7ed      	b.n	8004ab6 <_free_r+0x22>
 8004ada:	461a      	mov	r2, r3
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	b10b      	cbz	r3, 8004ae4 <_free_r+0x50>
 8004ae0:	42a3      	cmp	r3, r4
 8004ae2:	d9fa      	bls.n	8004ada <_free_r+0x46>
 8004ae4:	6811      	ldr	r1, [r2, #0]
 8004ae6:	1855      	adds	r5, r2, r1
 8004ae8:	42a5      	cmp	r5, r4
 8004aea:	d10b      	bne.n	8004b04 <_free_r+0x70>
 8004aec:	6824      	ldr	r4, [r4, #0]
 8004aee:	4421      	add	r1, r4
 8004af0:	1854      	adds	r4, r2, r1
 8004af2:	42a3      	cmp	r3, r4
 8004af4:	6011      	str	r1, [r2, #0]
 8004af6:	d1e0      	bne.n	8004aba <_free_r+0x26>
 8004af8:	681c      	ldr	r4, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	6053      	str	r3, [r2, #4]
 8004afe:	440c      	add	r4, r1
 8004b00:	6014      	str	r4, [r2, #0]
 8004b02:	e7da      	b.n	8004aba <_free_r+0x26>
 8004b04:	d902      	bls.n	8004b0c <_free_r+0x78>
 8004b06:	230c      	movs	r3, #12
 8004b08:	6003      	str	r3, [r0, #0]
 8004b0a:	e7d6      	b.n	8004aba <_free_r+0x26>
 8004b0c:	6825      	ldr	r5, [r4, #0]
 8004b0e:	1961      	adds	r1, r4, r5
 8004b10:	428b      	cmp	r3, r1
 8004b12:	bf04      	itt	eq
 8004b14:	6819      	ldreq	r1, [r3, #0]
 8004b16:	685b      	ldreq	r3, [r3, #4]
 8004b18:	6063      	str	r3, [r4, #4]
 8004b1a:	bf04      	itt	eq
 8004b1c:	1949      	addeq	r1, r1, r5
 8004b1e:	6021      	streq	r1, [r4, #0]
 8004b20:	6054      	str	r4, [r2, #4]
 8004b22:	e7ca      	b.n	8004aba <_free_r+0x26>
 8004b24:	b003      	add	sp, #12
 8004b26:	bd30      	pop	{r4, r5, pc}
 8004b28:	20000310 	.word	0x20000310

08004b2c <sbrk_aligned>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	4e0e      	ldr	r6, [pc, #56]	; (8004b68 <sbrk_aligned+0x3c>)
 8004b30:	460c      	mov	r4, r1
 8004b32:	6831      	ldr	r1, [r6, #0]
 8004b34:	4605      	mov	r5, r0
 8004b36:	b911      	cbnz	r1, 8004b3e <sbrk_aligned+0x12>
 8004b38:	f000 fcaa 	bl	8005490 <_sbrk_r>
 8004b3c:	6030      	str	r0, [r6, #0]
 8004b3e:	4621      	mov	r1, r4
 8004b40:	4628      	mov	r0, r5
 8004b42:	f000 fca5 	bl	8005490 <_sbrk_r>
 8004b46:	1c43      	adds	r3, r0, #1
 8004b48:	d00a      	beq.n	8004b60 <sbrk_aligned+0x34>
 8004b4a:	1cc4      	adds	r4, r0, #3
 8004b4c:	f024 0403 	bic.w	r4, r4, #3
 8004b50:	42a0      	cmp	r0, r4
 8004b52:	d007      	beq.n	8004b64 <sbrk_aligned+0x38>
 8004b54:	1a21      	subs	r1, r4, r0
 8004b56:	4628      	mov	r0, r5
 8004b58:	f000 fc9a 	bl	8005490 <_sbrk_r>
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d101      	bne.n	8004b64 <sbrk_aligned+0x38>
 8004b60:	f04f 34ff 	mov.w	r4, #4294967295
 8004b64:	4620      	mov	r0, r4
 8004b66:	bd70      	pop	{r4, r5, r6, pc}
 8004b68:	20000314 	.word	0x20000314

08004b6c <_malloc_r>:
 8004b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b70:	1ccd      	adds	r5, r1, #3
 8004b72:	f025 0503 	bic.w	r5, r5, #3
 8004b76:	3508      	adds	r5, #8
 8004b78:	2d0c      	cmp	r5, #12
 8004b7a:	bf38      	it	cc
 8004b7c:	250c      	movcc	r5, #12
 8004b7e:	2d00      	cmp	r5, #0
 8004b80:	4607      	mov	r7, r0
 8004b82:	db01      	blt.n	8004b88 <_malloc_r+0x1c>
 8004b84:	42a9      	cmp	r1, r5
 8004b86:	d905      	bls.n	8004b94 <_malloc_r+0x28>
 8004b88:	230c      	movs	r3, #12
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	4630      	mov	r0, r6
 8004b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c68 <_malloc_r+0xfc>
 8004b98:	f000 f868 	bl	8004c6c <__malloc_lock>
 8004b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8004ba0:	461c      	mov	r4, r3
 8004ba2:	bb5c      	cbnz	r4, 8004bfc <_malloc_r+0x90>
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	f7ff ffc0 	bl	8004b2c <sbrk_aligned>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	4604      	mov	r4, r0
 8004bb0:	d155      	bne.n	8004c5e <_malloc_r+0xf2>
 8004bb2:	f8d8 4000 	ldr.w	r4, [r8]
 8004bb6:	4626      	mov	r6, r4
 8004bb8:	2e00      	cmp	r6, #0
 8004bba:	d145      	bne.n	8004c48 <_malloc_r+0xdc>
 8004bbc:	2c00      	cmp	r4, #0
 8004bbe:	d048      	beq.n	8004c52 <_malloc_r+0xe6>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	4631      	mov	r1, r6
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	eb04 0903 	add.w	r9, r4, r3
 8004bca:	f000 fc61 	bl	8005490 <_sbrk_r>
 8004bce:	4581      	cmp	r9, r0
 8004bd0:	d13f      	bne.n	8004c52 <_malloc_r+0xe6>
 8004bd2:	6821      	ldr	r1, [r4, #0]
 8004bd4:	1a6d      	subs	r5, r5, r1
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4638      	mov	r0, r7
 8004bda:	f7ff ffa7 	bl	8004b2c <sbrk_aligned>
 8004bde:	3001      	adds	r0, #1
 8004be0:	d037      	beq.n	8004c52 <_malloc_r+0xe6>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	442b      	add	r3, r5
 8004be6:	6023      	str	r3, [r4, #0]
 8004be8:	f8d8 3000 	ldr.w	r3, [r8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d038      	beq.n	8004c62 <_malloc_r+0xf6>
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	42a2      	cmp	r2, r4
 8004bf4:	d12b      	bne.n	8004c4e <_malloc_r+0xe2>
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	e00f      	b.n	8004c1c <_malloc_r+0xb0>
 8004bfc:	6822      	ldr	r2, [r4, #0]
 8004bfe:	1b52      	subs	r2, r2, r5
 8004c00:	d41f      	bmi.n	8004c42 <_malloc_r+0xd6>
 8004c02:	2a0b      	cmp	r2, #11
 8004c04:	d917      	bls.n	8004c36 <_malloc_r+0xca>
 8004c06:	1961      	adds	r1, r4, r5
 8004c08:	42a3      	cmp	r3, r4
 8004c0a:	6025      	str	r5, [r4, #0]
 8004c0c:	bf18      	it	ne
 8004c0e:	6059      	strne	r1, [r3, #4]
 8004c10:	6863      	ldr	r3, [r4, #4]
 8004c12:	bf08      	it	eq
 8004c14:	f8c8 1000 	streq.w	r1, [r8]
 8004c18:	5162      	str	r2, [r4, r5]
 8004c1a:	604b      	str	r3, [r1, #4]
 8004c1c:	4638      	mov	r0, r7
 8004c1e:	f104 060b 	add.w	r6, r4, #11
 8004c22:	f000 f829 	bl	8004c78 <__malloc_unlock>
 8004c26:	f026 0607 	bic.w	r6, r6, #7
 8004c2a:	1d23      	adds	r3, r4, #4
 8004c2c:	1af2      	subs	r2, r6, r3
 8004c2e:	d0ae      	beq.n	8004b8e <_malloc_r+0x22>
 8004c30:	1b9b      	subs	r3, r3, r6
 8004c32:	50a3      	str	r3, [r4, r2]
 8004c34:	e7ab      	b.n	8004b8e <_malloc_r+0x22>
 8004c36:	42a3      	cmp	r3, r4
 8004c38:	6862      	ldr	r2, [r4, #4]
 8004c3a:	d1dd      	bne.n	8004bf8 <_malloc_r+0x8c>
 8004c3c:	f8c8 2000 	str.w	r2, [r8]
 8004c40:	e7ec      	b.n	8004c1c <_malloc_r+0xb0>
 8004c42:	4623      	mov	r3, r4
 8004c44:	6864      	ldr	r4, [r4, #4]
 8004c46:	e7ac      	b.n	8004ba2 <_malloc_r+0x36>
 8004c48:	4634      	mov	r4, r6
 8004c4a:	6876      	ldr	r6, [r6, #4]
 8004c4c:	e7b4      	b.n	8004bb8 <_malloc_r+0x4c>
 8004c4e:	4613      	mov	r3, r2
 8004c50:	e7cc      	b.n	8004bec <_malloc_r+0x80>
 8004c52:	230c      	movs	r3, #12
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	4638      	mov	r0, r7
 8004c58:	f000 f80e 	bl	8004c78 <__malloc_unlock>
 8004c5c:	e797      	b.n	8004b8e <_malloc_r+0x22>
 8004c5e:	6025      	str	r5, [r4, #0]
 8004c60:	e7dc      	b.n	8004c1c <_malloc_r+0xb0>
 8004c62:	605b      	str	r3, [r3, #4]
 8004c64:	deff      	udf	#255	; 0xff
 8004c66:	bf00      	nop
 8004c68:	20000310 	.word	0x20000310

08004c6c <__malloc_lock>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	; (8004c74 <__malloc_lock+0x8>)
 8004c6e:	f7ff bf0e 	b.w	8004a8e <__retarget_lock_acquire_recursive>
 8004c72:	bf00      	nop
 8004c74:	2000030c 	.word	0x2000030c

08004c78 <__malloc_unlock>:
 8004c78:	4801      	ldr	r0, [pc, #4]	; (8004c80 <__malloc_unlock+0x8>)
 8004c7a:	f7ff bf09 	b.w	8004a90 <__retarget_lock_release_recursive>
 8004c7e:	bf00      	nop
 8004c80:	2000030c 	.word	0x2000030c

08004c84 <__sfputc_r>:
 8004c84:	6893      	ldr	r3, [r2, #8]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	b410      	push	{r4}
 8004c8c:	6093      	str	r3, [r2, #8]
 8004c8e:	da08      	bge.n	8004ca2 <__sfputc_r+0x1e>
 8004c90:	6994      	ldr	r4, [r2, #24]
 8004c92:	42a3      	cmp	r3, r4
 8004c94:	db01      	blt.n	8004c9a <__sfputc_r+0x16>
 8004c96:	290a      	cmp	r1, #10
 8004c98:	d103      	bne.n	8004ca2 <__sfputc_r+0x1e>
 8004c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c9e:	f7ff bde8 	b.w	8004872 <__swbuf_r>
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	1c58      	adds	r0, r3, #1
 8004ca6:	6010      	str	r0, [r2, #0]
 8004ca8:	7019      	strb	r1, [r3, #0]
 8004caa:	4608      	mov	r0, r1
 8004cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <__sfputs_r>:
 8004cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	460f      	mov	r7, r1
 8004cb8:	4614      	mov	r4, r2
 8004cba:	18d5      	adds	r5, r2, r3
 8004cbc:	42ac      	cmp	r4, r5
 8004cbe:	d101      	bne.n	8004cc4 <__sfputs_r+0x12>
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	e007      	b.n	8004cd4 <__sfputs_r+0x22>
 8004cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc8:	463a      	mov	r2, r7
 8004cca:	4630      	mov	r0, r6
 8004ccc:	f7ff ffda 	bl	8004c84 <__sfputc_r>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d1f3      	bne.n	8004cbc <__sfputs_r+0xa>
 8004cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cd8 <_vfiprintf_r>:
 8004cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	460d      	mov	r5, r1
 8004cde:	b09d      	sub	sp, #116	; 0x74
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	4698      	mov	r8, r3
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	b118      	cbz	r0, 8004cf0 <_vfiprintf_r+0x18>
 8004ce8:	6a03      	ldr	r3, [r0, #32]
 8004cea:	b90b      	cbnz	r3, 8004cf0 <_vfiprintf_r+0x18>
 8004cec:	f7ff fcda 	bl	80046a4 <__sinit>
 8004cf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cf2:	07d9      	lsls	r1, r3, #31
 8004cf4:	d405      	bmi.n	8004d02 <_vfiprintf_r+0x2a>
 8004cf6:	89ab      	ldrh	r3, [r5, #12]
 8004cf8:	059a      	lsls	r2, r3, #22
 8004cfa:	d402      	bmi.n	8004d02 <_vfiprintf_r+0x2a>
 8004cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cfe:	f7ff fec6 	bl	8004a8e <__retarget_lock_acquire_recursive>
 8004d02:	89ab      	ldrh	r3, [r5, #12]
 8004d04:	071b      	lsls	r3, r3, #28
 8004d06:	d501      	bpl.n	8004d0c <_vfiprintf_r+0x34>
 8004d08:	692b      	ldr	r3, [r5, #16]
 8004d0a:	b99b      	cbnz	r3, 8004d34 <_vfiprintf_r+0x5c>
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f7ff fdec 	bl	80048ec <__swsetup_r>
 8004d14:	b170      	cbz	r0, 8004d34 <_vfiprintf_r+0x5c>
 8004d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d18:	07dc      	lsls	r4, r3, #31
 8004d1a:	d504      	bpl.n	8004d26 <_vfiprintf_r+0x4e>
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	b01d      	add	sp, #116	; 0x74
 8004d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d26:	89ab      	ldrh	r3, [r5, #12]
 8004d28:	0598      	lsls	r0, r3, #22
 8004d2a:	d4f7      	bmi.n	8004d1c <_vfiprintf_r+0x44>
 8004d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d2e:	f7ff feaf 	bl	8004a90 <__retarget_lock_release_recursive>
 8004d32:	e7f3      	b.n	8004d1c <_vfiprintf_r+0x44>
 8004d34:	2300      	movs	r3, #0
 8004d36:	9309      	str	r3, [sp, #36]	; 0x24
 8004d38:	2320      	movs	r3, #32
 8004d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d42:	2330      	movs	r3, #48	; 0x30
 8004d44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004ef8 <_vfiprintf_r+0x220>
 8004d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d4c:	f04f 0901 	mov.w	r9, #1
 8004d50:	4623      	mov	r3, r4
 8004d52:	469a      	mov	sl, r3
 8004d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d58:	b10a      	cbz	r2, 8004d5e <_vfiprintf_r+0x86>
 8004d5a:	2a25      	cmp	r2, #37	; 0x25
 8004d5c:	d1f9      	bne.n	8004d52 <_vfiprintf_r+0x7a>
 8004d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d62:	d00b      	beq.n	8004d7c <_vfiprintf_r+0xa4>
 8004d64:	465b      	mov	r3, fp
 8004d66:	4622      	mov	r2, r4
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f7ff ffa1 	bl	8004cb2 <__sfputs_r>
 8004d70:	3001      	adds	r0, #1
 8004d72:	f000 80a9 	beq.w	8004ec8 <_vfiprintf_r+0x1f0>
 8004d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d78:	445a      	add	r2, fp
 8004d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80a1 	beq.w	8004ec8 <_vfiprintf_r+0x1f0>
 8004d86:	2300      	movs	r3, #0
 8004d88:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d90:	f10a 0a01 	add.w	sl, sl, #1
 8004d94:	9304      	str	r3, [sp, #16]
 8004d96:	9307      	str	r3, [sp, #28]
 8004d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8004d9e:	4654      	mov	r4, sl
 8004da0:	2205      	movs	r2, #5
 8004da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da6:	4854      	ldr	r0, [pc, #336]	; (8004ef8 <_vfiprintf_r+0x220>)
 8004da8:	f7fb fa12 	bl	80001d0 <memchr>
 8004dac:	9a04      	ldr	r2, [sp, #16]
 8004dae:	b9d8      	cbnz	r0, 8004de8 <_vfiprintf_r+0x110>
 8004db0:	06d1      	lsls	r1, r2, #27
 8004db2:	bf44      	itt	mi
 8004db4:	2320      	movmi	r3, #32
 8004db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dba:	0713      	lsls	r3, r2, #28
 8004dbc:	bf44      	itt	mi
 8004dbe:	232b      	movmi	r3, #43	; 0x2b
 8004dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dca:	d015      	beq.n	8004df8 <_vfiprintf_r+0x120>
 8004dcc:	9a07      	ldr	r2, [sp, #28]
 8004dce:	4654      	mov	r4, sl
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	f04f 0c0a 	mov.w	ip, #10
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ddc:	3b30      	subs	r3, #48	; 0x30
 8004dde:	2b09      	cmp	r3, #9
 8004de0:	d94d      	bls.n	8004e7e <_vfiprintf_r+0x1a6>
 8004de2:	b1b0      	cbz	r0, 8004e12 <_vfiprintf_r+0x13a>
 8004de4:	9207      	str	r2, [sp, #28]
 8004de6:	e014      	b.n	8004e12 <_vfiprintf_r+0x13a>
 8004de8:	eba0 0308 	sub.w	r3, r0, r8
 8004dec:	fa09 f303 	lsl.w	r3, r9, r3
 8004df0:	4313      	orrs	r3, r2
 8004df2:	9304      	str	r3, [sp, #16]
 8004df4:	46a2      	mov	sl, r4
 8004df6:	e7d2      	b.n	8004d9e <_vfiprintf_r+0xc6>
 8004df8:	9b03      	ldr	r3, [sp, #12]
 8004dfa:	1d19      	adds	r1, r3, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	9103      	str	r1, [sp, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bfbb      	ittet	lt
 8004e04:	425b      	neglt	r3, r3
 8004e06:	f042 0202 	orrlt.w	r2, r2, #2
 8004e0a:	9307      	strge	r3, [sp, #28]
 8004e0c:	9307      	strlt	r3, [sp, #28]
 8004e0e:	bfb8      	it	lt
 8004e10:	9204      	strlt	r2, [sp, #16]
 8004e12:	7823      	ldrb	r3, [r4, #0]
 8004e14:	2b2e      	cmp	r3, #46	; 0x2e
 8004e16:	d10c      	bne.n	8004e32 <_vfiprintf_r+0x15a>
 8004e18:	7863      	ldrb	r3, [r4, #1]
 8004e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e1c:	d134      	bne.n	8004e88 <_vfiprintf_r+0x1b0>
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	1d1a      	adds	r2, r3, #4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	9203      	str	r2, [sp, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bfb8      	it	lt
 8004e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e2e:	3402      	adds	r4, #2
 8004e30:	9305      	str	r3, [sp, #20]
 8004e32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004f08 <_vfiprintf_r+0x230>
 8004e36:	7821      	ldrb	r1, [r4, #0]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	4650      	mov	r0, sl
 8004e3c:	f7fb f9c8 	bl	80001d0 <memchr>
 8004e40:	b138      	cbz	r0, 8004e52 <_vfiprintf_r+0x17a>
 8004e42:	9b04      	ldr	r3, [sp, #16]
 8004e44:	eba0 000a 	sub.w	r0, r0, sl
 8004e48:	2240      	movs	r2, #64	; 0x40
 8004e4a:	4082      	lsls	r2, r0
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	3401      	adds	r4, #1
 8004e50:	9304      	str	r3, [sp, #16]
 8004e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e56:	4829      	ldr	r0, [pc, #164]	; (8004efc <_vfiprintf_r+0x224>)
 8004e58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e5c:	2206      	movs	r2, #6
 8004e5e:	f7fb f9b7 	bl	80001d0 <memchr>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d03f      	beq.n	8004ee6 <_vfiprintf_r+0x20e>
 8004e66:	4b26      	ldr	r3, [pc, #152]	; (8004f00 <_vfiprintf_r+0x228>)
 8004e68:	bb1b      	cbnz	r3, 8004eb2 <_vfiprintf_r+0x1da>
 8004e6a:	9b03      	ldr	r3, [sp, #12]
 8004e6c:	3307      	adds	r3, #7
 8004e6e:	f023 0307 	bic.w	r3, r3, #7
 8004e72:	3308      	adds	r3, #8
 8004e74:	9303      	str	r3, [sp, #12]
 8004e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e78:	443b      	add	r3, r7
 8004e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e7c:	e768      	b.n	8004d50 <_vfiprintf_r+0x78>
 8004e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e82:	460c      	mov	r4, r1
 8004e84:	2001      	movs	r0, #1
 8004e86:	e7a6      	b.n	8004dd6 <_vfiprintf_r+0xfe>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	3401      	adds	r4, #1
 8004e8c:	9305      	str	r3, [sp, #20]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	f04f 0c0a 	mov.w	ip, #10
 8004e94:	4620      	mov	r0, r4
 8004e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e9a:	3a30      	subs	r2, #48	; 0x30
 8004e9c:	2a09      	cmp	r2, #9
 8004e9e:	d903      	bls.n	8004ea8 <_vfiprintf_r+0x1d0>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0c6      	beq.n	8004e32 <_vfiprintf_r+0x15a>
 8004ea4:	9105      	str	r1, [sp, #20]
 8004ea6:	e7c4      	b.n	8004e32 <_vfiprintf_r+0x15a>
 8004ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004eac:	4604      	mov	r4, r0
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e7f0      	b.n	8004e94 <_vfiprintf_r+0x1bc>
 8004eb2:	ab03      	add	r3, sp, #12
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	462a      	mov	r2, r5
 8004eb8:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <_vfiprintf_r+0x22c>)
 8004eba:	a904      	add	r1, sp, #16
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	f3af 8000 	nop.w
 8004ec2:	4607      	mov	r7, r0
 8004ec4:	1c78      	adds	r0, r7, #1
 8004ec6:	d1d6      	bne.n	8004e76 <_vfiprintf_r+0x19e>
 8004ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eca:	07d9      	lsls	r1, r3, #31
 8004ecc:	d405      	bmi.n	8004eda <_vfiprintf_r+0x202>
 8004ece:	89ab      	ldrh	r3, [r5, #12]
 8004ed0:	059a      	lsls	r2, r3, #22
 8004ed2:	d402      	bmi.n	8004eda <_vfiprintf_r+0x202>
 8004ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ed6:	f7ff fddb 	bl	8004a90 <__retarget_lock_release_recursive>
 8004eda:	89ab      	ldrh	r3, [r5, #12]
 8004edc:	065b      	lsls	r3, r3, #25
 8004ede:	f53f af1d 	bmi.w	8004d1c <_vfiprintf_r+0x44>
 8004ee2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ee4:	e71c      	b.n	8004d20 <_vfiprintf_r+0x48>
 8004ee6:	ab03      	add	r3, sp, #12
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	462a      	mov	r2, r5
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <_vfiprintf_r+0x22c>)
 8004eee:	a904      	add	r1, sp, #16
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	f000 f879 	bl	8004fe8 <_printf_i>
 8004ef6:	e7e4      	b.n	8004ec2 <_vfiprintf_r+0x1ea>
 8004ef8:	0800563c 	.word	0x0800563c
 8004efc:	08005646 	.word	0x08005646
 8004f00:	00000000 	.word	0x00000000
 8004f04:	08004cb3 	.word	0x08004cb3
 8004f08:	08005642 	.word	0x08005642

08004f0c <_printf_common>:
 8004f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f10:	4616      	mov	r6, r2
 8004f12:	4699      	mov	r9, r3
 8004f14:	688a      	ldr	r2, [r1, #8]
 8004f16:	690b      	ldr	r3, [r1, #16]
 8004f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	bfb8      	it	lt
 8004f20:	4613      	movlt	r3, r2
 8004f22:	6033      	str	r3, [r6, #0]
 8004f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f28:	4607      	mov	r7, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	b10a      	cbz	r2, 8004f32 <_printf_common+0x26>
 8004f2e:	3301      	adds	r3, #1
 8004f30:	6033      	str	r3, [r6, #0]
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	0699      	lsls	r1, r3, #26
 8004f36:	bf42      	ittt	mi
 8004f38:	6833      	ldrmi	r3, [r6, #0]
 8004f3a:	3302      	addmi	r3, #2
 8004f3c:	6033      	strmi	r3, [r6, #0]
 8004f3e:	6825      	ldr	r5, [r4, #0]
 8004f40:	f015 0506 	ands.w	r5, r5, #6
 8004f44:	d106      	bne.n	8004f54 <_printf_common+0x48>
 8004f46:	f104 0a19 	add.w	sl, r4, #25
 8004f4a:	68e3      	ldr	r3, [r4, #12]
 8004f4c:	6832      	ldr	r2, [r6, #0]
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	42ab      	cmp	r3, r5
 8004f52:	dc26      	bgt.n	8004fa2 <_printf_common+0x96>
 8004f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f58:	1e13      	subs	r3, r2, #0
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	bf18      	it	ne
 8004f5e:	2301      	movne	r3, #1
 8004f60:	0692      	lsls	r2, r2, #26
 8004f62:	d42b      	bmi.n	8004fbc <_printf_common+0xb0>
 8004f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f68:	4649      	mov	r1, r9
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	47c0      	blx	r8
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d01e      	beq.n	8004fb0 <_printf_common+0xa4>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	6922      	ldr	r2, [r4, #16]
 8004f76:	f003 0306 	and.w	r3, r3, #6
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	bf02      	ittt	eq
 8004f7e:	68e5      	ldreq	r5, [r4, #12]
 8004f80:	6833      	ldreq	r3, [r6, #0]
 8004f82:	1aed      	subeq	r5, r5, r3
 8004f84:	68a3      	ldr	r3, [r4, #8]
 8004f86:	bf0c      	ite	eq
 8004f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f8c:	2500      	movne	r5, #0
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	bfc4      	itt	gt
 8004f92:	1a9b      	subgt	r3, r3, r2
 8004f94:	18ed      	addgt	r5, r5, r3
 8004f96:	2600      	movs	r6, #0
 8004f98:	341a      	adds	r4, #26
 8004f9a:	42b5      	cmp	r5, r6
 8004f9c:	d11a      	bne.n	8004fd4 <_printf_common+0xc8>
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	e008      	b.n	8004fb4 <_printf_common+0xa8>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	4638      	mov	r0, r7
 8004faa:	47c0      	blx	r8
 8004fac:	3001      	adds	r0, #1
 8004fae:	d103      	bne.n	8004fb8 <_printf_common+0xac>
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	3501      	adds	r5, #1
 8004fba:	e7c6      	b.n	8004f4a <_printf_common+0x3e>
 8004fbc:	18e1      	adds	r1, r4, r3
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	2030      	movs	r0, #48	; 0x30
 8004fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fc6:	4422      	add	r2, r4
 8004fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	e7c7      	b.n	8004f64 <_printf_common+0x58>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	4649      	mov	r1, r9
 8004fda:	4638      	mov	r0, r7
 8004fdc:	47c0      	blx	r8
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d0e6      	beq.n	8004fb0 <_printf_common+0xa4>
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	e7d9      	b.n	8004f9a <_printf_common+0x8e>
	...

08004fe8 <_printf_i>:
 8004fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	7e0f      	ldrb	r7, [r1, #24]
 8004fee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ff0:	2f78      	cmp	r7, #120	; 0x78
 8004ff2:	4691      	mov	r9, r2
 8004ff4:	4680      	mov	r8, r0
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	469a      	mov	sl, r3
 8004ffa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ffe:	d807      	bhi.n	8005010 <_printf_i+0x28>
 8005000:	2f62      	cmp	r7, #98	; 0x62
 8005002:	d80a      	bhi.n	800501a <_printf_i+0x32>
 8005004:	2f00      	cmp	r7, #0
 8005006:	f000 80d4 	beq.w	80051b2 <_printf_i+0x1ca>
 800500a:	2f58      	cmp	r7, #88	; 0x58
 800500c:	f000 80c0 	beq.w	8005190 <_printf_i+0x1a8>
 8005010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005018:	e03a      	b.n	8005090 <_printf_i+0xa8>
 800501a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800501e:	2b15      	cmp	r3, #21
 8005020:	d8f6      	bhi.n	8005010 <_printf_i+0x28>
 8005022:	a101      	add	r1, pc, #4	; (adr r1, 8005028 <_printf_i+0x40>)
 8005024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005028:	08005081 	.word	0x08005081
 800502c:	08005095 	.word	0x08005095
 8005030:	08005011 	.word	0x08005011
 8005034:	08005011 	.word	0x08005011
 8005038:	08005011 	.word	0x08005011
 800503c:	08005011 	.word	0x08005011
 8005040:	08005095 	.word	0x08005095
 8005044:	08005011 	.word	0x08005011
 8005048:	08005011 	.word	0x08005011
 800504c:	08005011 	.word	0x08005011
 8005050:	08005011 	.word	0x08005011
 8005054:	08005199 	.word	0x08005199
 8005058:	080050c1 	.word	0x080050c1
 800505c:	08005153 	.word	0x08005153
 8005060:	08005011 	.word	0x08005011
 8005064:	08005011 	.word	0x08005011
 8005068:	080051bb 	.word	0x080051bb
 800506c:	08005011 	.word	0x08005011
 8005070:	080050c1 	.word	0x080050c1
 8005074:	08005011 	.word	0x08005011
 8005078:	08005011 	.word	0x08005011
 800507c:	0800515b 	.word	0x0800515b
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	1d1a      	adds	r2, r3, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	602a      	str	r2, [r5, #0]
 8005088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800508c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005090:	2301      	movs	r3, #1
 8005092:	e09f      	b.n	80051d4 <_printf_i+0x1ec>
 8005094:	6820      	ldr	r0, [r4, #0]
 8005096:	682b      	ldr	r3, [r5, #0]
 8005098:	0607      	lsls	r7, r0, #24
 800509a:	f103 0104 	add.w	r1, r3, #4
 800509e:	6029      	str	r1, [r5, #0]
 80050a0:	d501      	bpl.n	80050a6 <_printf_i+0xbe>
 80050a2:	681e      	ldr	r6, [r3, #0]
 80050a4:	e003      	b.n	80050ae <_printf_i+0xc6>
 80050a6:	0646      	lsls	r6, r0, #25
 80050a8:	d5fb      	bpl.n	80050a2 <_printf_i+0xba>
 80050aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050ae:	2e00      	cmp	r6, #0
 80050b0:	da03      	bge.n	80050ba <_printf_i+0xd2>
 80050b2:	232d      	movs	r3, #45	; 0x2d
 80050b4:	4276      	negs	r6, r6
 80050b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ba:	485a      	ldr	r0, [pc, #360]	; (8005224 <_printf_i+0x23c>)
 80050bc:	230a      	movs	r3, #10
 80050be:	e012      	b.n	80050e6 <_printf_i+0xfe>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	6820      	ldr	r0, [r4, #0]
 80050c4:	1d19      	adds	r1, r3, #4
 80050c6:	6029      	str	r1, [r5, #0]
 80050c8:	0605      	lsls	r5, r0, #24
 80050ca:	d501      	bpl.n	80050d0 <_printf_i+0xe8>
 80050cc:	681e      	ldr	r6, [r3, #0]
 80050ce:	e002      	b.n	80050d6 <_printf_i+0xee>
 80050d0:	0641      	lsls	r1, r0, #25
 80050d2:	d5fb      	bpl.n	80050cc <_printf_i+0xe4>
 80050d4:	881e      	ldrh	r6, [r3, #0]
 80050d6:	4853      	ldr	r0, [pc, #332]	; (8005224 <_printf_i+0x23c>)
 80050d8:	2f6f      	cmp	r7, #111	; 0x6f
 80050da:	bf0c      	ite	eq
 80050dc:	2308      	moveq	r3, #8
 80050de:	230a      	movne	r3, #10
 80050e0:	2100      	movs	r1, #0
 80050e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050e6:	6865      	ldr	r5, [r4, #4]
 80050e8:	60a5      	str	r5, [r4, #8]
 80050ea:	2d00      	cmp	r5, #0
 80050ec:	bfa2      	ittt	ge
 80050ee:	6821      	ldrge	r1, [r4, #0]
 80050f0:	f021 0104 	bicge.w	r1, r1, #4
 80050f4:	6021      	strge	r1, [r4, #0]
 80050f6:	b90e      	cbnz	r6, 80050fc <_printf_i+0x114>
 80050f8:	2d00      	cmp	r5, #0
 80050fa:	d04b      	beq.n	8005194 <_printf_i+0x1ac>
 80050fc:	4615      	mov	r5, r2
 80050fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005102:	fb03 6711 	mls	r7, r3, r1, r6
 8005106:	5dc7      	ldrb	r7, [r0, r7]
 8005108:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800510c:	4637      	mov	r7, r6
 800510e:	42bb      	cmp	r3, r7
 8005110:	460e      	mov	r6, r1
 8005112:	d9f4      	bls.n	80050fe <_printf_i+0x116>
 8005114:	2b08      	cmp	r3, #8
 8005116:	d10b      	bne.n	8005130 <_printf_i+0x148>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	07de      	lsls	r6, r3, #31
 800511c:	d508      	bpl.n	8005130 <_printf_i+0x148>
 800511e:	6923      	ldr	r3, [r4, #16]
 8005120:	6861      	ldr	r1, [r4, #4]
 8005122:	4299      	cmp	r1, r3
 8005124:	bfde      	ittt	le
 8005126:	2330      	movle	r3, #48	; 0x30
 8005128:	f805 3c01 	strble.w	r3, [r5, #-1]
 800512c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005130:	1b52      	subs	r2, r2, r5
 8005132:	6122      	str	r2, [r4, #16]
 8005134:	f8cd a000 	str.w	sl, [sp]
 8005138:	464b      	mov	r3, r9
 800513a:	aa03      	add	r2, sp, #12
 800513c:	4621      	mov	r1, r4
 800513e:	4640      	mov	r0, r8
 8005140:	f7ff fee4 	bl	8004f0c <_printf_common>
 8005144:	3001      	adds	r0, #1
 8005146:	d14a      	bne.n	80051de <_printf_i+0x1f6>
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	b004      	add	sp, #16
 800514e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	f043 0320 	orr.w	r3, r3, #32
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	4833      	ldr	r0, [pc, #204]	; (8005228 <_printf_i+0x240>)
 800515c:	2778      	movs	r7, #120	; 0x78
 800515e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	6829      	ldr	r1, [r5, #0]
 8005166:	061f      	lsls	r7, r3, #24
 8005168:	f851 6b04 	ldr.w	r6, [r1], #4
 800516c:	d402      	bmi.n	8005174 <_printf_i+0x18c>
 800516e:	065f      	lsls	r7, r3, #25
 8005170:	bf48      	it	mi
 8005172:	b2b6      	uxthmi	r6, r6
 8005174:	07df      	lsls	r7, r3, #31
 8005176:	bf48      	it	mi
 8005178:	f043 0320 	orrmi.w	r3, r3, #32
 800517c:	6029      	str	r1, [r5, #0]
 800517e:	bf48      	it	mi
 8005180:	6023      	strmi	r3, [r4, #0]
 8005182:	b91e      	cbnz	r6, 800518c <_printf_i+0x1a4>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	f023 0320 	bic.w	r3, r3, #32
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	2310      	movs	r3, #16
 800518e:	e7a7      	b.n	80050e0 <_printf_i+0xf8>
 8005190:	4824      	ldr	r0, [pc, #144]	; (8005224 <_printf_i+0x23c>)
 8005192:	e7e4      	b.n	800515e <_printf_i+0x176>
 8005194:	4615      	mov	r5, r2
 8005196:	e7bd      	b.n	8005114 <_printf_i+0x12c>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	6826      	ldr	r6, [r4, #0]
 800519c:	6961      	ldr	r1, [r4, #20]
 800519e:	1d18      	adds	r0, r3, #4
 80051a0:	6028      	str	r0, [r5, #0]
 80051a2:	0635      	lsls	r5, r6, #24
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	d501      	bpl.n	80051ac <_printf_i+0x1c4>
 80051a8:	6019      	str	r1, [r3, #0]
 80051aa:	e002      	b.n	80051b2 <_printf_i+0x1ca>
 80051ac:	0670      	lsls	r0, r6, #25
 80051ae:	d5fb      	bpl.n	80051a8 <_printf_i+0x1c0>
 80051b0:	8019      	strh	r1, [r3, #0]
 80051b2:	2300      	movs	r3, #0
 80051b4:	6123      	str	r3, [r4, #16]
 80051b6:	4615      	mov	r5, r2
 80051b8:	e7bc      	b.n	8005134 <_printf_i+0x14c>
 80051ba:	682b      	ldr	r3, [r5, #0]
 80051bc:	1d1a      	adds	r2, r3, #4
 80051be:	602a      	str	r2, [r5, #0]
 80051c0:	681d      	ldr	r5, [r3, #0]
 80051c2:	6862      	ldr	r2, [r4, #4]
 80051c4:	2100      	movs	r1, #0
 80051c6:	4628      	mov	r0, r5
 80051c8:	f7fb f802 	bl	80001d0 <memchr>
 80051cc:	b108      	cbz	r0, 80051d2 <_printf_i+0x1ea>
 80051ce:	1b40      	subs	r0, r0, r5
 80051d0:	6060      	str	r0, [r4, #4]
 80051d2:	6863      	ldr	r3, [r4, #4]
 80051d4:	6123      	str	r3, [r4, #16]
 80051d6:	2300      	movs	r3, #0
 80051d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051dc:	e7aa      	b.n	8005134 <_printf_i+0x14c>
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	462a      	mov	r2, r5
 80051e2:	4649      	mov	r1, r9
 80051e4:	4640      	mov	r0, r8
 80051e6:	47d0      	blx	sl
 80051e8:	3001      	adds	r0, #1
 80051ea:	d0ad      	beq.n	8005148 <_printf_i+0x160>
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	079b      	lsls	r3, r3, #30
 80051f0:	d413      	bmi.n	800521a <_printf_i+0x232>
 80051f2:	68e0      	ldr	r0, [r4, #12]
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	4298      	cmp	r0, r3
 80051f8:	bfb8      	it	lt
 80051fa:	4618      	movlt	r0, r3
 80051fc:	e7a6      	b.n	800514c <_printf_i+0x164>
 80051fe:	2301      	movs	r3, #1
 8005200:	4632      	mov	r2, r6
 8005202:	4649      	mov	r1, r9
 8005204:	4640      	mov	r0, r8
 8005206:	47d0      	blx	sl
 8005208:	3001      	adds	r0, #1
 800520a:	d09d      	beq.n	8005148 <_printf_i+0x160>
 800520c:	3501      	adds	r5, #1
 800520e:	68e3      	ldr	r3, [r4, #12]
 8005210:	9903      	ldr	r1, [sp, #12]
 8005212:	1a5b      	subs	r3, r3, r1
 8005214:	42ab      	cmp	r3, r5
 8005216:	dcf2      	bgt.n	80051fe <_printf_i+0x216>
 8005218:	e7eb      	b.n	80051f2 <_printf_i+0x20a>
 800521a:	2500      	movs	r5, #0
 800521c:	f104 0619 	add.w	r6, r4, #25
 8005220:	e7f5      	b.n	800520e <_printf_i+0x226>
 8005222:	bf00      	nop
 8005224:	0800564d 	.word	0x0800564d
 8005228:	0800565e 	.word	0x0800565e

0800522c <__sflush_r>:
 800522c:	898a      	ldrh	r2, [r1, #12]
 800522e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005232:	4605      	mov	r5, r0
 8005234:	0710      	lsls	r0, r2, #28
 8005236:	460c      	mov	r4, r1
 8005238:	d458      	bmi.n	80052ec <__sflush_r+0xc0>
 800523a:	684b      	ldr	r3, [r1, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	dc05      	bgt.n	800524c <__sflush_r+0x20>
 8005240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005242:	2b00      	cmp	r3, #0
 8005244:	dc02      	bgt.n	800524c <__sflush_r+0x20>
 8005246:	2000      	movs	r0, #0
 8005248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800524c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800524e:	2e00      	cmp	r6, #0
 8005250:	d0f9      	beq.n	8005246 <__sflush_r+0x1a>
 8005252:	2300      	movs	r3, #0
 8005254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005258:	682f      	ldr	r7, [r5, #0]
 800525a:	6a21      	ldr	r1, [r4, #32]
 800525c:	602b      	str	r3, [r5, #0]
 800525e:	d032      	beq.n	80052c6 <__sflush_r+0x9a>
 8005260:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005262:	89a3      	ldrh	r3, [r4, #12]
 8005264:	075a      	lsls	r2, r3, #29
 8005266:	d505      	bpl.n	8005274 <__sflush_r+0x48>
 8005268:	6863      	ldr	r3, [r4, #4]
 800526a:	1ac0      	subs	r0, r0, r3
 800526c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800526e:	b10b      	cbz	r3, 8005274 <__sflush_r+0x48>
 8005270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005272:	1ac0      	subs	r0, r0, r3
 8005274:	2300      	movs	r3, #0
 8005276:	4602      	mov	r2, r0
 8005278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800527a:	6a21      	ldr	r1, [r4, #32]
 800527c:	4628      	mov	r0, r5
 800527e:	47b0      	blx	r6
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	d106      	bne.n	8005294 <__sflush_r+0x68>
 8005286:	6829      	ldr	r1, [r5, #0]
 8005288:	291d      	cmp	r1, #29
 800528a:	d82b      	bhi.n	80052e4 <__sflush_r+0xb8>
 800528c:	4a29      	ldr	r2, [pc, #164]	; (8005334 <__sflush_r+0x108>)
 800528e:	410a      	asrs	r2, r1
 8005290:	07d6      	lsls	r6, r2, #31
 8005292:	d427      	bmi.n	80052e4 <__sflush_r+0xb8>
 8005294:	2200      	movs	r2, #0
 8005296:	6062      	str	r2, [r4, #4]
 8005298:	04d9      	lsls	r1, r3, #19
 800529a:	6922      	ldr	r2, [r4, #16]
 800529c:	6022      	str	r2, [r4, #0]
 800529e:	d504      	bpl.n	80052aa <__sflush_r+0x7e>
 80052a0:	1c42      	adds	r2, r0, #1
 80052a2:	d101      	bne.n	80052a8 <__sflush_r+0x7c>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	b903      	cbnz	r3, 80052aa <__sflush_r+0x7e>
 80052a8:	6560      	str	r0, [r4, #84]	; 0x54
 80052aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ac:	602f      	str	r7, [r5, #0]
 80052ae:	2900      	cmp	r1, #0
 80052b0:	d0c9      	beq.n	8005246 <__sflush_r+0x1a>
 80052b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052b6:	4299      	cmp	r1, r3
 80052b8:	d002      	beq.n	80052c0 <__sflush_r+0x94>
 80052ba:	4628      	mov	r0, r5
 80052bc:	f7ff fbea 	bl	8004a94 <_free_r>
 80052c0:	2000      	movs	r0, #0
 80052c2:	6360      	str	r0, [r4, #52]	; 0x34
 80052c4:	e7c0      	b.n	8005248 <__sflush_r+0x1c>
 80052c6:	2301      	movs	r3, #1
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b0      	blx	r6
 80052cc:	1c41      	adds	r1, r0, #1
 80052ce:	d1c8      	bne.n	8005262 <__sflush_r+0x36>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0c5      	beq.n	8005262 <__sflush_r+0x36>
 80052d6:	2b1d      	cmp	r3, #29
 80052d8:	d001      	beq.n	80052de <__sflush_r+0xb2>
 80052da:	2b16      	cmp	r3, #22
 80052dc:	d101      	bne.n	80052e2 <__sflush_r+0xb6>
 80052de:	602f      	str	r7, [r5, #0]
 80052e0:	e7b1      	b.n	8005246 <__sflush_r+0x1a>
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052e8:	81a3      	strh	r3, [r4, #12]
 80052ea:	e7ad      	b.n	8005248 <__sflush_r+0x1c>
 80052ec:	690f      	ldr	r7, [r1, #16]
 80052ee:	2f00      	cmp	r7, #0
 80052f0:	d0a9      	beq.n	8005246 <__sflush_r+0x1a>
 80052f2:	0793      	lsls	r3, r2, #30
 80052f4:	680e      	ldr	r6, [r1, #0]
 80052f6:	bf08      	it	eq
 80052f8:	694b      	ldreq	r3, [r1, #20]
 80052fa:	600f      	str	r7, [r1, #0]
 80052fc:	bf18      	it	ne
 80052fe:	2300      	movne	r3, #0
 8005300:	eba6 0807 	sub.w	r8, r6, r7
 8005304:	608b      	str	r3, [r1, #8]
 8005306:	f1b8 0f00 	cmp.w	r8, #0
 800530a:	dd9c      	ble.n	8005246 <__sflush_r+0x1a>
 800530c:	6a21      	ldr	r1, [r4, #32]
 800530e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005310:	4643      	mov	r3, r8
 8005312:	463a      	mov	r2, r7
 8005314:	4628      	mov	r0, r5
 8005316:	47b0      	blx	r6
 8005318:	2800      	cmp	r0, #0
 800531a:	dc06      	bgt.n	800532a <__sflush_r+0xfe>
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005322:	81a3      	strh	r3, [r4, #12]
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	e78e      	b.n	8005248 <__sflush_r+0x1c>
 800532a:	4407      	add	r7, r0
 800532c:	eba8 0800 	sub.w	r8, r8, r0
 8005330:	e7e9      	b.n	8005306 <__sflush_r+0xda>
 8005332:	bf00      	nop
 8005334:	dfbffffe 	.word	0xdfbffffe

08005338 <_fflush_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	690b      	ldr	r3, [r1, #16]
 800533c:	4605      	mov	r5, r0
 800533e:	460c      	mov	r4, r1
 8005340:	b913      	cbnz	r3, 8005348 <_fflush_r+0x10>
 8005342:	2500      	movs	r5, #0
 8005344:	4628      	mov	r0, r5
 8005346:	bd38      	pop	{r3, r4, r5, pc}
 8005348:	b118      	cbz	r0, 8005352 <_fflush_r+0x1a>
 800534a:	6a03      	ldr	r3, [r0, #32]
 800534c:	b90b      	cbnz	r3, 8005352 <_fflush_r+0x1a>
 800534e:	f7ff f9a9 	bl	80046a4 <__sinit>
 8005352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0f3      	beq.n	8005342 <_fflush_r+0xa>
 800535a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800535c:	07d0      	lsls	r0, r2, #31
 800535e:	d404      	bmi.n	800536a <_fflush_r+0x32>
 8005360:	0599      	lsls	r1, r3, #22
 8005362:	d402      	bmi.n	800536a <_fflush_r+0x32>
 8005364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005366:	f7ff fb92 	bl	8004a8e <__retarget_lock_acquire_recursive>
 800536a:	4628      	mov	r0, r5
 800536c:	4621      	mov	r1, r4
 800536e:	f7ff ff5d 	bl	800522c <__sflush_r>
 8005372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005374:	07da      	lsls	r2, r3, #31
 8005376:	4605      	mov	r5, r0
 8005378:	d4e4      	bmi.n	8005344 <_fflush_r+0xc>
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	059b      	lsls	r3, r3, #22
 800537e:	d4e1      	bmi.n	8005344 <_fflush_r+0xc>
 8005380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005382:	f7ff fb85 	bl	8004a90 <__retarget_lock_release_recursive>
 8005386:	e7dd      	b.n	8005344 <_fflush_r+0xc>

08005388 <__swhatbuf_r>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	460c      	mov	r4, r1
 800538c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005390:	2900      	cmp	r1, #0
 8005392:	b096      	sub	sp, #88	; 0x58
 8005394:	4615      	mov	r5, r2
 8005396:	461e      	mov	r6, r3
 8005398:	da0d      	bge.n	80053b6 <__swhatbuf_r+0x2e>
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80053a0:	f04f 0100 	mov.w	r1, #0
 80053a4:	bf0c      	ite	eq
 80053a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80053aa:	2340      	movne	r3, #64	; 0x40
 80053ac:	2000      	movs	r0, #0
 80053ae:	6031      	str	r1, [r6, #0]
 80053b0:	602b      	str	r3, [r5, #0]
 80053b2:	b016      	add	sp, #88	; 0x58
 80053b4:	bd70      	pop	{r4, r5, r6, pc}
 80053b6:	466a      	mov	r2, sp
 80053b8:	f000 f848 	bl	800544c <_fstat_r>
 80053bc:	2800      	cmp	r0, #0
 80053be:	dbec      	blt.n	800539a <__swhatbuf_r+0x12>
 80053c0:	9901      	ldr	r1, [sp, #4]
 80053c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80053c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80053ca:	4259      	negs	r1, r3
 80053cc:	4159      	adcs	r1, r3
 80053ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053d2:	e7eb      	b.n	80053ac <__swhatbuf_r+0x24>

080053d4 <__smakebuf_r>:
 80053d4:	898b      	ldrh	r3, [r1, #12]
 80053d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053d8:	079d      	lsls	r5, r3, #30
 80053da:	4606      	mov	r6, r0
 80053dc:	460c      	mov	r4, r1
 80053de:	d507      	bpl.n	80053f0 <__smakebuf_r+0x1c>
 80053e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	6123      	str	r3, [r4, #16]
 80053e8:	2301      	movs	r3, #1
 80053ea:	6163      	str	r3, [r4, #20]
 80053ec:	b002      	add	sp, #8
 80053ee:	bd70      	pop	{r4, r5, r6, pc}
 80053f0:	ab01      	add	r3, sp, #4
 80053f2:	466a      	mov	r2, sp
 80053f4:	f7ff ffc8 	bl	8005388 <__swhatbuf_r>
 80053f8:	9900      	ldr	r1, [sp, #0]
 80053fa:	4605      	mov	r5, r0
 80053fc:	4630      	mov	r0, r6
 80053fe:	f7ff fbb5 	bl	8004b6c <_malloc_r>
 8005402:	b948      	cbnz	r0, 8005418 <__smakebuf_r+0x44>
 8005404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005408:	059a      	lsls	r2, r3, #22
 800540a:	d4ef      	bmi.n	80053ec <__smakebuf_r+0x18>
 800540c:	f023 0303 	bic.w	r3, r3, #3
 8005410:	f043 0302 	orr.w	r3, r3, #2
 8005414:	81a3      	strh	r3, [r4, #12]
 8005416:	e7e3      	b.n	80053e0 <__smakebuf_r+0xc>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	6020      	str	r0, [r4, #0]
 800541c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	9b00      	ldr	r3, [sp, #0]
 8005424:	6163      	str	r3, [r4, #20]
 8005426:	9b01      	ldr	r3, [sp, #4]
 8005428:	6120      	str	r0, [r4, #16]
 800542a:	b15b      	cbz	r3, 8005444 <__smakebuf_r+0x70>
 800542c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005430:	4630      	mov	r0, r6
 8005432:	f000 f81d 	bl	8005470 <_isatty_r>
 8005436:	b128      	cbz	r0, 8005444 <__smakebuf_r+0x70>
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	f043 0301 	orr.w	r3, r3, #1
 8005442:	81a3      	strh	r3, [r4, #12]
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	431d      	orrs	r5, r3
 8005448:	81a5      	strh	r5, [r4, #12]
 800544a:	e7cf      	b.n	80053ec <__smakebuf_r+0x18>

0800544c <_fstat_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d07      	ldr	r5, [pc, #28]	; (800546c <_fstat_r+0x20>)
 8005450:	2300      	movs	r3, #0
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	4611      	mov	r1, r2
 8005458:	602b      	str	r3, [r5, #0]
 800545a:	f7fb fd9a 	bl	8000f92 <_fstat>
 800545e:	1c43      	adds	r3, r0, #1
 8005460:	d102      	bne.n	8005468 <_fstat_r+0x1c>
 8005462:	682b      	ldr	r3, [r5, #0]
 8005464:	b103      	cbz	r3, 8005468 <_fstat_r+0x1c>
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	bd38      	pop	{r3, r4, r5, pc}
 800546a:	bf00      	nop
 800546c:	20000308 	.word	0x20000308

08005470 <_isatty_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d06      	ldr	r5, [pc, #24]	; (800548c <_isatty_r+0x1c>)
 8005474:	2300      	movs	r3, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	f7fb fd99 	bl	8000fb2 <_isatty>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_isatty_r+0x1a>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_isatty_r+0x1a>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	20000308 	.word	0x20000308

08005490 <_sbrk_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4d06      	ldr	r5, [pc, #24]	; (80054ac <_sbrk_r+0x1c>)
 8005494:	2300      	movs	r3, #0
 8005496:	4604      	mov	r4, r0
 8005498:	4608      	mov	r0, r1
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	f7fb fda2 	bl	8000fe4 <_sbrk>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_sbrk_r+0x1a>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_sbrk_r+0x1a>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	20000308 	.word	0x20000308

080054b0 <_init>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	bf00      	nop
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr

080054bc <_fini>:
 80054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054be:	bf00      	nop
 80054c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c2:	bc08      	pop	{r3}
 80054c4:	469e      	mov	lr, r3
 80054c6:	4770      	bx	lr
