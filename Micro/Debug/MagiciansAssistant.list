
MagiciansAssistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a4  080064a4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080064a4  080064a4  000164a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064ac  080064ac  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064ac  080064ac  000164ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080064b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000068  0800651c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  0800651c  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010bef  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000249e  00000000  00000000  00030cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00033168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba6  00000000  00000000  00034078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b63  00000000  00000000  00034c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013201  00000000  00000000  0005c781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee82e  00000000  00000000  0006f982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045fc  00000000  00000000  0015e1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001627ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006220 	.word	0x08006220

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006220 	.word	0x08006220

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <initArducam>:
/* Notes:
 * The chip select signal should always be LOW during the SPI read or write bus cycle
 * Add printf() prototype from main into here if printing doesn't work
 */

void initArducam(ArducamController* pCtrl, I2C_HandleTypeDef* pHI2C, SPI_HandleTypeDef* pHSPI, GPIO_TypeDef* pGPIOPort, uint16_t pinNo){
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
 8000578:	603b      	str	r3, [r7, #0]
	printf("Initializing ArduCam\n");
 800057a:	4817      	ldr	r0, [pc, #92]	; (80005d8 <initArducam+0x6c>)
 800057c:	f004 ffe6 	bl	800554c <puts>
	pCtrl->pI2CHandle = pHI2C;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	601a      	str	r2, [r3, #0]
	pCtrl->pSPIHandle = pHSPI;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	605a      	str	r2, [r3, #4]
	pCtrl->status = HAL_OK;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2200      	movs	r2, #0
 8000590:	721a      	strb	r2, [r3, #8]
	pCtrl -> pGPIOPort = pGPIOPort;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	60da      	str	r2, [r3, #12]
	pCtrl -> pinNo = pinNo;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	8c3a      	ldrh	r2, [r7, #32]
 800059c:	821a      	strh	r2, [r3, #16]

	enable(pCtrl);
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f000 f907 	bl	80007b2 <enable>

	printf("Flushing FIFO\n");
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <initArducam+0x70>)
 80005a6:	f004 ffd1 	bl	800554c <puts>
	flushFIFO(pCtrl);
 80005aa:	68f8      	ldr	r0, [r7, #12]
 80005ac:	f000 f8d1 	bl	8000752 <flushFIFO>

	uint8_t cmd = 0b00000001; //Capture 1 Frame per Capture
 80005b0:	2301      	movs	r3, #1
 80005b2:	75fb      	strb	r3, [r7, #23]
	i2cRegWrite(pCtrl, CAPTURE_CONTROL_REG, &cmd, 1);
 80005b4:	f107 0217 	add.w	r2, r7, #23
 80005b8:	2301      	movs	r3, #1
 80005ba:	2101      	movs	r1, #1
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	f000 f80f 	bl	80005e0 <i2cRegWrite>


	disable(pCtrl);
 80005c2:	68f8      	ldr	r0, [r7, #12]
 80005c4:	f000 f905 	bl	80007d2 <disable>

	printStatus(pCtrl);
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f000 f9ad 	bl	8000928 <printStatus>
}
 80005ce:	bf00      	nop
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	08006238 	.word	0x08006238
 80005dc:	08006250 	.word	0x08006250

080005e0 <i2cRegWrite>:
//
/*To Write over i2c:
* Request I2C_ADDR_WRITE -> Send Cam Register Address (left shift device addr's by 1) -> Send Data bytes
*/

void i2cRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t *pData, uint16_t size){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	607a      	str	r2, [r7, #4]
 80005ea:	461a      	mov	r2, r3
 80005ec:	460b      	mov	r3, r1
 80005ee:	72fb      	strb	r3, [r7, #11]
 80005f0:	4613      	mov	r3, r2
 80005f2:	813b      	strh	r3, [r7, #8]
	printf("Writing %x to Reg %x\n", *pData, reg);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	7afb      	ldrb	r3, [r7, #11]
 80005fc:	461a      	mov	r2, r3
 80005fe:	481a      	ldr	r0, [pc, #104]	; (8000668 <i2cRegWrite+0x88>)
 8000600:	f004 ff3e 	bl	8005480 <iprintf>
	printf("Before T1: %x\n", pCtrl->status);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	7a1b      	ldrb	r3, [r3, #8]
 8000608:	4619      	mov	r1, r3
 800060a:	4818      	ldr	r0, [pc, #96]	; (800066c <i2cRegWrite+0x8c>)
 800060c:	f004 ff38 	bl	8005480 <iprintf>
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, &reg, 1, TIMEOUT);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	f107 020b 	add.w	r2, r7, #11
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	2160      	movs	r1, #96	; 0x60
 8000620:	f001 f940 	bl	80018a4 <HAL_I2C_Master_Transmit>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	721a      	strb	r2, [r3, #8]
	printf("After T1: %x\n", pCtrl->status);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	7a1b      	ldrb	r3, [r3, #8]
 8000630:	4619      	mov	r1, r3
 8000632:	480f      	ldr	r0, [pc, #60]	; (8000670 <i2cRegWrite+0x90>)
 8000634:	f004 ff24 	bl	8005480 <iprintf>
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, pData, size, TIMEOUT);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	893b      	ldrh	r3, [r7, #8]
 800063e:	2264      	movs	r2, #100	; 0x64
 8000640:	9200      	str	r2, [sp, #0]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	2160      	movs	r1, #96	; 0x60
 8000646:	f001 f92d 	bl	80018a4 <HAL_I2C_Master_Transmit>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	721a      	strb	r2, [r3, #8]
	printf("After T2: %x\n", pCtrl->status);
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	7a1b      	ldrb	r3, [r3, #8]
 8000656:	4619      	mov	r1, r3
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <i2cRegWrite+0x94>)
 800065a:	f004 ff11 	bl	8005480 <iprintf>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	08006260 	.word	0x08006260
 800066c:	08006278 	.word	0x08006278
 8000670:	08006288 	.word	0x08006288
 8000674:	08006298 	.word	0x08006298

08000678 <i2cRegRead>:

/*To Read over i2c:
	* To I2C_ADDR_WRITE: Write the Register You want to read from
	* To I2C_ADDR_READ: Read as much data as you want
*/
void i2cRegRead(ArducamController* pCtrl, uint8_t reg, uint8_t *pBuffer, uint16_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af02      	add	r7, sp, #8
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	607a      	str	r2, [r7, #4]
 8000682:	461a      	mov	r2, r3
 8000684:	460b      	mov	r3, r1
 8000686:	72fb      	strb	r3, [r7, #11]
 8000688:	4613      	mov	r3, r2
 800068a:	813b      	strh	r3, [r7, #8]
	printf("Reading from Reg %x\n", reg);
 800068c:	7afb      	ldrb	r3, [r7, #11]
 800068e:	4619      	mov	r1, r3
 8000690:	4816      	ldr	r0, [pc, #88]	; (80006ec <i2cRegRead+0x74>)
 8000692:	f004 fef5 	bl	8005480 <iprintf>
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, &reg, 1, TIMEOUT);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	f107 020b 	add.w	r2, r7, #11
 800069e:	2364      	movs	r3, #100	; 0x64
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	2160      	movs	r1, #96	; 0x60
 80006a6:	f001 f8fd 	bl	80018a4 <HAL_I2C_Master_Transmit>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	721a      	strb	r2, [r3, #8]
	printf("After T1: %x\n", pCtrl->status);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	7a1b      	ldrb	r3, [r3, #8]
 80006b6:	4619      	mov	r1, r3
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <i2cRegRead+0x78>)
 80006ba:	f004 fee1 	bl	8005480 <iprintf>
	pCtrl->status = HAL_I2C_Master_Receive(pCtrl->pI2CHandle, I2C_ADDR_READ, pBuffer, size, TIMEOUT);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	893b      	ldrh	r3, [r7, #8]
 80006c4:	2264      	movs	r2, #100	; 0x64
 80006c6:	9200      	str	r2, [sp, #0]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	2161      	movs	r1, #97	; 0x61
 80006cc:	f001 fa02 	bl	8001ad4 <HAL_I2C_Master_Receive>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	721a      	strb	r2, [r3, #8]
	printf("After R1: %x\n", pCtrl->status);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	7a1b      	ldrb	r3, [r3, #8]
 80006dc:	4619      	mov	r1, r3
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <i2cRegRead+0x7c>)
 80006e0:	f004 fece 	bl	8005480 <iprintf>
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	080062a8 	.word	0x080062a8
 80006f0:	08006288 	.word	0x08006288
 80006f4:	080062c0 	.word	0x080062c0

080006f8 <spiRegRead>:
	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, pData, size, TIMEOUT);

	disable(pCtrl);
}

void spiRegRead(ArducamController* pCtrl, uint8_t reg, uint8_t *pBuffer, uint16_t size){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	461a      	mov	r2, r3
 8000704:	460b      	mov	r3, r1
 8000706:	72fb      	strb	r3, [r7, #11]
 8000708:	4613      	mov	r3, r2
 800070a:	813b      	strh	r3, [r7, #8]
	enable(pCtrl);
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f000 f850 	bl	80007b2 <enable>

	uint8_t cmdByte = 0x00 | reg; // a 0 followed by register to read
 8000712:	7afb      	ldrb	r3, [r7, #11]
 8000714:	75fb      	strb	r3, [r7, #23]

	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, &cmdByte, 1, TIMEOUT);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6858      	ldr	r0, [r3, #4]
 800071a:	f107 0117 	add.w	r1, r7, #23
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	2201      	movs	r2, #1
 8000722:	f003 f9ba 	bl	8003a9a <HAL_SPI_Transmit>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	721a      	strb	r2, [r3, #8]
	pCtrl->status = HAL_SPI_Receive(pCtrl->pSPIHandle, pBuffer, size, TIMEOUT);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6858      	ldr	r0, [r3, #4]
 8000732:	893a      	ldrh	r2, [r7, #8]
 8000734:	2364      	movs	r3, #100	; 0x64
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	f003 fb24 	bl	8003d84 <HAL_SPI_Receive>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	721a      	strb	r2, [r3, #8]

	disable(pCtrl);
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f000 f844 	bl	80007d2 <disable>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <flushFIFO>:
		uint8_t cmd = SET_CAPTURE_FLAG;
		i2cRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
	}
}

void flushFIFO(ArducamController* pCtrl){
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
	clearFIFOFlag(pCtrl);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f807 	bl	800076e <clearFIFOFlag>
	resetFIFOPointers(pCtrl);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f815 	bl	8000790 <resetFIFOPointers>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <clearFIFOFlag>:

void clearFIFOFlag(ArducamController* pCtrl){
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_FLAG_CLR;
 8000776:	2301      	movs	r3, #1
 8000778:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 800077a:	f107 020f 	add.w	r2, r7, #15
 800077e:	2301      	movs	r3, #1
 8000780:	2104      	movs	r1, #4
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ff2c 	bl	80005e0 <i2cRegWrite>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <resetFIFOPointers>:

void resetFIFOPointers(ArducamController* pCtrl){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_PTR_CLR;
 8000798:	2330      	movs	r3, #48	; 0x30
 800079a:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 800079c:	f107 020f 	add.w	r2, r7, #15
 80007a0:	2301      	movs	r3, #1
 80007a2:	2104      	movs	r1, #4
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff1b 	bl	80005e0 <i2cRegWrite>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <enable>:


void enable(ArducamController* pCtrl){
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->pinNo, GPIO_PIN_RESET);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	68d8      	ldr	r0, [r3, #12]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	8a1b      	ldrh	r3, [r3, #16]
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	f000 ffb9 	bl	800173c <HAL_GPIO_WritePin>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <disable>:

void disable(ArducamController* pCtrl){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->pinNo, GPIO_PIN_SET);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68d8      	ldr	r0, [r3, #12]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	8a1b      	ldrh	r3, [r3, #16]
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	f000 ffa9 	bl	800173c <HAL_GPIO_WritePin>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <registerDump>:

//Prints all of the relevant registers in the Arducam
void registerDump(ArducamController* pCtrl){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	uint8_t data;
	printf("*******Register Table:*******\n");
 80007fc:	4842      	ldr	r0, [pc, #264]	; (8000908 <registerDump+0x114>)
 80007fe:	f004 fea5 	bl	800554c <puts>
	printf("(I2C Read)\n");
 8000802:	4842      	ldr	r0, [pc, #264]	; (800090c <registerDump+0x118>)
 8000804:	f004 fea2 	bl	800554c <puts>
	i2cRegRead(pCtrl, TEST_REGISTER, &data, 1);
 8000808:	f107 020f 	add.w	r2, r7, #15
 800080c:	2301      	movs	r3, #1
 800080e:	2100      	movs	r1, #0
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff31 	bl	8000678 <i2cRegRead>
	printf("Test Register: %x\n", data);
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	4619      	mov	r1, r3
 800081a:	483d      	ldr	r0, [pc, #244]	; (8000910 <registerDump+0x11c>)
 800081c:	f004 fe30 	bl	8005480 <iprintf>
	i2cRegRead(pCtrl, CAPTURE_CONTROL_REG, &data, 1);
 8000820:	f107 020f 	add.w	r2, r7, #15
 8000824:	2301      	movs	r3, #1
 8000826:	2101      	movs	r1, #1
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ff25 	bl	8000678 <i2cRegRead>
	printf("Capture Control Register: %x\n", data);
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	4619      	mov	r1, r3
 8000832:	4838      	ldr	r0, [pc, #224]	; (8000914 <registerDump+0x120>)
 8000834:	f004 fe24 	bl	8005480 <iprintf>
	i2cRegRead(pCtrl, FIFO_CONTROL_REG, &data, 1);
 8000838:	f107 020f 	add.w	r2, r7, #15
 800083c:	2301      	movs	r3, #1
 800083e:	2104      	movs	r1, #4
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff19 	bl	8000678 <i2cRegRead>
	printf("FIFO Control Register: %x\n", data);
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	4619      	mov	r1, r3
 800084a:	4833      	ldr	r0, [pc, #204]	; (8000918 <registerDump+0x124>)
 800084c:	f004 fe18 	bl	8005480 <iprintf>
	i2cRegRead(pCtrl, FIFO_SINGLE_READ_REG, &data, 1);
 8000850:	f107 020f 	add.w	r2, r7, #15
 8000854:	2301      	movs	r3, #1
 8000856:	213d      	movs	r1, #61	; 0x3d
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff0d 	bl	8000678 <i2cRegRead>
	printf("FIFO Single Read Register: %x\n", data);
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	4619      	mov	r1, r3
 8000862:	482e      	ldr	r0, [pc, #184]	; (800091c <registerDump+0x128>)
 8000864:	f004 fe0c 	bl	8005480 <iprintf>
	i2cRegRead(pCtrl, FIFO_STATUS_REG, &data, 1);
 8000868:	f107 020f 	add.w	r2, r7, #15
 800086c:	2301      	movs	r3, #1
 800086e:	2141      	movs	r1, #65	; 0x41
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff01 	bl	8000678 <i2cRegRead>
	printf("FIFO Status Register: %x\n", data);
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	4619      	mov	r1, r3
 800087a:	4829      	ldr	r0, [pc, #164]	; (8000920 <registerDump+0x12c>)
 800087c:	f004 fe00 	bl	8005480 <iprintf>

	printf("(SPI Read)\n");
 8000880:	4828      	ldr	r0, [pc, #160]	; (8000924 <registerDump+0x130>)
 8000882:	f004 fe63 	bl	800554c <puts>
	spiRegRead(pCtrl, TEST_REGISTER, &data, 1);
 8000886:	f107 020f 	add.w	r2, r7, #15
 800088a:	2301      	movs	r3, #1
 800088c:	2100      	movs	r1, #0
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ff32 	bl	80006f8 <spiRegRead>
	printf("Test Register: %x\n", data);
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	4619      	mov	r1, r3
 8000898:	481d      	ldr	r0, [pc, #116]	; (8000910 <registerDump+0x11c>)
 800089a:	f004 fdf1 	bl	8005480 <iprintf>
	spiRegRead(pCtrl, CAPTURE_CONTROL_REG, &data, 1);
 800089e:	f107 020f 	add.w	r2, r7, #15
 80008a2:	2301      	movs	r3, #1
 80008a4:	2101      	movs	r1, #1
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ff26 	bl	80006f8 <spiRegRead>
	printf("Capture Control Register: %x\n", data);
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4818      	ldr	r0, [pc, #96]	; (8000914 <registerDump+0x120>)
 80008b2:	f004 fde5 	bl	8005480 <iprintf>
	spiRegRead(pCtrl, FIFO_CONTROL_REG, &data, 1);
 80008b6:	f107 020f 	add.w	r2, r7, #15
 80008ba:	2301      	movs	r3, #1
 80008bc:	2104      	movs	r1, #4
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff1a 	bl	80006f8 <spiRegRead>
	printf("FIFO Control Register: %x\n", data);
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	4619      	mov	r1, r3
 80008c8:	4813      	ldr	r0, [pc, #76]	; (8000918 <registerDump+0x124>)
 80008ca:	f004 fdd9 	bl	8005480 <iprintf>
	spiRegRead(pCtrl, FIFO_SINGLE_READ_REG, &data, 1);
 80008ce:	f107 020f 	add.w	r2, r7, #15
 80008d2:	2301      	movs	r3, #1
 80008d4:	213d      	movs	r1, #61	; 0x3d
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff0e 	bl	80006f8 <spiRegRead>
	printf("FIFO Single Read Register: %x\n", data);
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	4619      	mov	r1, r3
 80008e0:	480e      	ldr	r0, [pc, #56]	; (800091c <registerDump+0x128>)
 80008e2:	f004 fdcd 	bl	8005480 <iprintf>
	spiRegRead(pCtrl, FIFO_STATUS_REG, &data, 1);
 80008e6:	f107 020f 	add.w	r2, r7, #15
 80008ea:	2301      	movs	r3, #1
 80008ec:	2141      	movs	r1, #65	; 0x41
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ff02 	bl	80006f8 <spiRegRead>
	printf("FIFO Status Register: %x\n", data);
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <registerDump+0x12c>)
 80008fa:	f004 fdc1 	bl	8005480 <iprintf>

}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	0800630c 	.word	0x0800630c
 800090c:	0800632c 	.word	0x0800632c
 8000910:	08006338 	.word	0x08006338
 8000914:	0800634c 	.word	0x0800634c
 8000918:	0800636c 	.word	0x0800636c
 800091c:	08006388 	.word	0x08006388
 8000920:	080063a8 	.word	0x080063a8
 8000924:	080063c4 	.word	0x080063c4

08000928 <printStatus>:
static void printStatus(ArducamController* pCtrl){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	printf("**********Status Report**********\n");
 8000930:	4809      	ldr	r0, [pc, #36]	; (8000958 <printStatus+0x30>)
 8000932:	f004 fe0b 	bl	800554c <puts>
	printf("Arducam Status: %x\n", pCtrl->status);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	7a1b      	ldrb	r3, [r3, #8]
 800093a:	4619      	mov	r1, r3
 800093c:	4807      	ldr	r0, [pc, #28]	; (800095c <printStatus+0x34>)
 800093e:	f004 fd9f 	bl	8005480 <iprintf>
	registerDump(pCtrl);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff56 	bl	80007f4 <registerDump>
	printf("*******************************\n");
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <printStatus+0x38>)
 800094a:	f004 fdff 	bl	800554c <puts>

}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	080063d0 	.word	0x080063d0
 800095c:	080063f4 	.word	0x080063f4
 8000960:	08006408 	.word	0x08006408

08000964 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(pHuart, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <__io_putchar+0x24>)
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	1d39      	adds	r1, r7, #4
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	2201      	movs	r2, #1
 8000978:	f003 ff68 	bl	800484c <HAL_UART_Transmit>
  return ch;
 800097c:	687b      	ldr	r3, [r7, #4]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000084 	.word	0x20000084

0800098c <initHelpers>:

void initHelpers(UART_HandleTypeDef* pUHandle){
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	pHuart = pUHandle;
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <initHelpers+0x1c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000084 	.word	0x20000084

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b2:	f000 fbb7 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b6:	f000 f81d 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f000 f91b 	bl	8000bf4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009be:	f000 f86b 	bl	8000a98 <MX_I2C1_Init>
  MX_SPI1_Init();
 80009c2:	f000 f8a9 	bl	8000b18 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80009c6:	f000 f8e5 	bl	8000b94 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Initialize Helper Functions
  initHelpers(&huart2);
 80009ca:	4807      	ldr	r0, [pc, #28]	; (80009e8 <main+0x3c>)
 80009cc:	f7ff ffde 	bl	800098c <initHelpers>

  //Initialize the Arducam
  //ArducamController* pArducam = malloc(sizeof(ArducamController));
  ArducamController arducam;
  initArducam(&arducam, &hi2c1, &hspi1, CAM_CS_GPIO_Port, CAM_CS_Pin);
 80009d0:	1d38      	adds	r0, r7, #4
 80009d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009dc:	4a03      	ldr	r2, [pc, #12]	; (80009ec <main+0x40>)
 80009de:	4904      	ldr	r1, [pc, #16]	; (80009f0 <main+0x44>)
 80009e0:	f7ff fdc4 	bl	800056c <initArducam>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <main+0x38>
 80009e6:	bf00      	nop
 80009e8:	20000140 	.word	0x20000140
 80009ec:	200000dc 	.word	0x200000dc
 80009f0:	20000088 	.word	0x20000088

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b096      	sub	sp, #88	; 0x58
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2244      	movs	r2, #68	; 0x44
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 fe82 	bl	800570c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a1a:	f001 fc89 	bl	8002330 <HAL_PWREx_ControlVoltageScaling>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a24:	f000 f94e 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a32:	2310      	movs	r3, #16
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a36:	2302      	movs	r3, #2
 8000a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a42:	230a      	movs	r3, #10
 8000a44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a46:	2307      	movs	r3, #7
 8000a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fcc0 	bl	80023dc <HAL_RCC_OscConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a62:	f000 f92f 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	230f      	movs	r3, #15
 8000a68:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 f888 	bl	8002b94 <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a8a:	f000 f91b 	bl	8000cc4 <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3758      	adds	r7, #88	; 0x58
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	; (8000b10 <MX_I2C1_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <MX_I2C1_Init+0x7c>)
 8000aa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad2:	480e      	ldr	r0, [pc, #56]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ad4:	f000 fe4a 	bl	800176c <HAL_I2C_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ade:	f000 f8f1 	bl	8000cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4809      	ldr	r0, [pc, #36]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ae6:	f001 fb7d 	bl	80021e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000af0:	f000 f8e8 	bl	8000cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000af8:	f001 fbbf 	bl	800227a <HAL_I2CEx_ConfigDigitalFilter>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b02:	f000 f8df 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000088 	.word	0x20000088
 8000b10:	40005400 	.word	0x40005400
 8000b14:	10909cec 	.word	0x10909cec

08000b18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <MX_SPI1_Init+0x78>)
 8000b20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b66:	2207      	movs	r2, #7
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b78:	f002 feec 	bl	8003954 <HAL_SPI_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b82:	f000 f89f 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000dc 	.word	0x200000dc
 8000b90:	40013000 	.word	0x40013000

08000b94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <MX_USART2_UART_Init+0x5c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_USART2_UART_Init+0x58>)
 8000bd8:	f003 fdea 	bl	80047b0 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000be2:	f000 f86f 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000140 	.word	0x20000140
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <MX_GPIO_Init+0xc8>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a2b      	ldr	r2, [pc, #172]	; (8000cbc <MX_GPIO_Init+0xc8>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <MX_GPIO_Init+0xc8>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <MX_GPIO_Init+0xc8>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a25      	ldr	r2, [pc, #148]	; (8000cbc <MX_GPIO_Init+0xc8>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <MX_GPIO_Init+0xc8>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <MX_GPIO_Init+0xc8>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <MX_GPIO_Init+0xc8>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_GPIO_Init+0xc8>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_GPIO_Init+0xc8>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <MX_GPIO_Init+0xc8>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_GPIO_Init+0xc8>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_CS_GPIO_Port, CAM_CS_Pin, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f000 fd62 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <MX_GPIO_Init+0xcc>)
 8000c90:	f000 fbaa 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_CS_Pin */
  GPIO_InitStruct.Pin = CAM_CS_Pin;
 8000c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_CS_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb0:	f000 fb9a 	bl	80013e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	; 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	48000800 	.word	0x48000800

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_MspInit+0x44>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_MspInit+0x44>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_MspInit+0x44>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x44>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0ac      	sub	sp, #176	; 0xb0
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2288      	movs	r2, #136	; 0x88
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 fce7 	bl	800570c <memset>
  if(hi2c->Instance==I2C1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <HAL_I2C_MspInit+0xb0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d13b      	bne.n	8000dc0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d48:	2340      	movs	r3, #64	; 0x40
 8000d4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 f941 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d60:	f7ff ffb0 	bl	8000cc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d84:	2312      	movs	r3, #18
 8000d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d96:	2304      	movs	r3, #4
 8000d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000da0:	4619      	mov	r1, r3
 8000da2:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <HAL_I2C_MspInit+0xb8>)
 8000da4:	f000 fb20 	bl	80013e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000dae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db2:	6593      	str	r3, [r2, #88]	; 0x58
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	37b0      	adds	r7, #176	; 0xb0
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000400 	.word	0x48000400

08000dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <HAL_SPI_MspInit+0x7c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d128      	bne.n	8000e48 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_SPI_MspInit+0x80>)
 8000df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfa:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <HAL_SPI_MspInit+0x80>)
 8000dfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e00:	6613      	str	r3, [r2, #96]	; 0x60
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_SPI_MspInit+0x80>)
 8000e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_SPI_MspInit+0x80>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_SPI_MspInit+0x80>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_SPI_MspInit+0x80>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e26:	23e0      	movs	r3, #224	; 0xe0
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e36:	2305      	movs	r3, #5
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f000 fad0 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3728      	adds	r7, #40	; 0x28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40013000 	.word	0x40013000
 8000e54:	40021000 	.word	0x40021000

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0ac      	sub	sp, #176	; 0xb0
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2288      	movs	r2, #136	; 0x88
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f004 fc47 	bl	800570c <memset>
  if(huart->Instance==USART2)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <HAL_UART_MspInit+0xb0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d13b      	bne.n	8000f00 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 f8a1 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea0:	f7ff ff10 	bl	8000cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea8:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eae:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_UART_MspInit+0xb4>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eec:	2307      	movs	r3, #7
 8000eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f000 fa74 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	37b0      	adds	r7, #176	; 0xb0
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	40021000 	.word	0x40021000

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 f93e 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	e00a      	b.n	8000f8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f76:	f3af 8000 	nop.w
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf0      	blt.n	8000f76 <_read+0x12>
  }

  return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e009      	b.n	8000fc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fcd3 	bl	8000964 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbf1      	blt.n	8000fb0 <_write+0x12>
  }
  return len;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_close>:

int _close(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffe:	605a      	str	r2, [r3, #4]
  return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_isatty>:

int _isatty(int file)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f004 fb9a 	bl	80057a8 <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20018000 	.word	0x20018000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	200001c8 	.word	0x200001c8
 80010a8:	20000320 	.word	0x20000320

080010ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d4:	f7ff ffea 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <LoopForever+0x6>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	; (8001110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <LoopForever+0xe>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	; (800111c <LoopForever+0x16>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f004 fb59 	bl	80057b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001102:	f7ff fc53 	bl	80009ac <main>

08001106 <LoopForever>:

LoopForever:
    b LoopForever
 8001106:	e7fe      	b.n	8001106 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001108:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001114:	080064b4 	.word	0x080064b4
  ldr r2, =_sbss
 8001118:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800111c:	2000031c 	.word	0x2000031c

08001120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_2_IRQHandler>
	...

08001124 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_Init+0x3c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_Init+0x3c>)
 8001134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001138:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113a:	2003      	movs	r0, #3
 800113c:	f000 f920 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001140:	2000      	movs	r0, #0
 8001142:	f000 f80f 	bl	8001164 <HAL_InitTick>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	e001      	b.n	8001156 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001152:	f7ff fdbd 	bl	8000cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001156:	79fb      	ldrb	r3, [r7, #7]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40022000 	.word	0x40022000

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_InitTick+0x6c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d023      	beq.n	80011c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_InitTick+0x70>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_InitTick+0x6c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f91d 	bl	80013ce <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10f      	bne.n	80011ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d809      	bhi.n	80011b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 f8f5 	bl	8001396 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_InitTick+0x74>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e007      	b.n	80011c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e004      	b.n	80011c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e001      	b.n	80011c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	200001cc 	.word	0x200001cc

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	200001cc 	.word	0x200001cc

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff47 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff5c 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff8e 	bl	80012d4 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffb0 	bl	800133c <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	e17f      	b.n	80016f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8171 	beq.w	80016f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d005      	beq.n	8001428 <HAL_GPIO_Init+0x40>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d130      	bne.n	800148a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145e:	2201      	movs	r2, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	f003 0201 	and.w	r2, r3, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b03      	cmp	r3, #3
 8001494:	d118      	bne.n	80014c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800149c:	2201      	movs	r2, #1
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	08db      	lsrs	r3, r3, #3
 80014b2:	f003 0201 	and.w	r2, r3, #1
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d017      	beq.n	8001504 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d123      	bne.n	8001558 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	08da      	lsrs	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3208      	adds	r2, #8
 8001518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	220f      	movs	r2, #15
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	691a      	ldr	r2, [r3, #16]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3208      	adds	r2, #8
 8001552:	6939      	ldr	r1, [r7, #16]
 8001554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0203 	and.w	r2, r3, #3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80ac 	beq.w	80016f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b5f      	ldr	r3, [pc, #380]	; (8001718 <HAL_GPIO_Init+0x330>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159e:	4a5e      	ldr	r2, [pc, #376]	; (8001718 <HAL_GPIO_Init+0x330>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6613      	str	r3, [r2, #96]	; 0x60
 80015a6:	4b5c      	ldr	r3, [pc, #368]	; (8001718 <HAL_GPIO_Init+0x330>)
 80015a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015b2:	4a5a      	ldr	r2, [pc, #360]	; (800171c <HAL_GPIO_Init+0x334>)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015dc:	d025      	beq.n	800162a <HAL_GPIO_Init+0x242>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4f      	ldr	r2, [pc, #316]	; (8001720 <HAL_GPIO_Init+0x338>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d01f      	beq.n	8001626 <HAL_GPIO_Init+0x23e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4e      	ldr	r2, [pc, #312]	; (8001724 <HAL_GPIO_Init+0x33c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d019      	beq.n	8001622 <HAL_GPIO_Init+0x23a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4d      	ldr	r2, [pc, #308]	; (8001728 <HAL_GPIO_Init+0x340>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0x236>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4c      	ldr	r2, [pc, #304]	; (800172c <HAL_GPIO_Init+0x344>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00d      	beq.n	800161a <HAL_GPIO_Init+0x232>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4b      	ldr	r2, [pc, #300]	; (8001730 <HAL_GPIO_Init+0x348>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x22e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4a      	ldr	r2, [pc, #296]	; (8001734 <HAL_GPIO_Init+0x34c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_GPIO_Init+0x22a>
 800160e:	2306      	movs	r3, #6
 8001610:	e00c      	b.n	800162c <HAL_GPIO_Init+0x244>
 8001612:	2307      	movs	r3, #7
 8001614:	e00a      	b.n	800162c <HAL_GPIO_Init+0x244>
 8001616:	2305      	movs	r3, #5
 8001618:	e008      	b.n	800162c <HAL_GPIO_Init+0x244>
 800161a:	2304      	movs	r3, #4
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x244>
 800161e:	2303      	movs	r3, #3
 8001620:	e004      	b.n	800162c <HAL_GPIO_Init+0x244>
 8001622:	2302      	movs	r3, #2
 8001624:	e002      	b.n	800162c <HAL_GPIO_Init+0x244>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x244>
 800162a:	2300      	movs	r3, #0
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	f002 0203 	and.w	r2, r2, #3
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	4093      	lsls	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800163c:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x334>)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800164a:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_GPIO_Init+0x350>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800166e:	4a32      	ldr	r2, [pc, #200]	; (8001738 <HAL_GPIO_Init+0x350>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001674:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HAL_GPIO_Init+0x350>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001698:	4a27      	ldr	r2, [pc, #156]	; (8001738 <HAL_GPIO_Init+0x350>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_GPIO_Init+0x350>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <HAL_GPIO_Init+0x350>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_GPIO_Init+0x350>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <HAL_GPIO_Init+0x350>)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	f47f ae78 	bne.w	80013f8 <HAL_GPIO_Init+0x10>
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	48001800 	.word	0x48001800
 8001738:	40010400 	.word	0x40010400

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001758:	e002      	b.n	8001760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e08d      	b.n	800189a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fac0 	bl	8000d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2224      	movs	r2, #36	; 0x24
 800179c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d107      	bne.n	80017e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	e006      	b.n	80017f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d108      	bne.n	800180e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	e007      	b.n	800181e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800181c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800182c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001830:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001840:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69d9      	ldr	r1, [r3, #28]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1a      	ldr	r2, [r3, #32]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0201 	orr.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2220      	movs	r2, #32
 8001886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	461a      	mov	r2, r3
 80018b0:	460b      	mov	r3, r1
 80018b2:	817b      	strh	r3, [r7, #10]
 80018b4:	4613      	mov	r3, r2
 80018b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b20      	cmp	r3, #32
 80018c2:	f040 80fd 	bne.w	8001ac0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_I2C_Master_Transmit+0x30>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e0f6      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x21e>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018dc:	f7ff fc92 	bl	8001204 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2319      	movs	r3, #25
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fa0a 	bl	8001d08 <I2C_WaitOnFlagUntilTimeout>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0e1      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2221      	movs	r2, #33	; 0x21
 8001902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2210      	movs	r2, #16
 800190a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	893a      	ldrh	r2, [r7, #8]
 800191e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192a:	b29b      	uxth	r3, r3
 800192c:	2bff      	cmp	r3, #255	; 0xff
 800192e:	d906      	bls.n	800193e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	22ff      	movs	r2, #255	; 0xff
 8001934:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001936:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e007      	b.n	800194e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800194c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001952:	2b00      	cmp	r3, #0
 8001954:	d024      	beq.n	80019a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197e:	3b01      	subs	r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198a:	b2db      	uxtb	r3, r3
 800198c:	3301      	adds	r3, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	8979      	ldrh	r1, [r7, #10]
 8001992:	4b4e      	ldr	r3, [pc, #312]	; (8001acc <HAL_I2C_Master_Transmit+0x228>)
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 fbf1 	bl	8002180 <I2C_TransferConfig>
 800199e:	e066      	b.n	8001a6e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	8979      	ldrh	r1, [r7, #10]
 80019a8:	4b48      	ldr	r3, [pc, #288]	; (8001acc <HAL_I2C_Master_Transmit+0x228>)
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fbe6 	bl	8002180 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80019b4:	e05b      	b.n	8001a6e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	6a39      	ldr	r1, [r7, #32]
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 f9f3 	bl	8001da6 <I2C_WaitOnTXISFlagUntilTimeout>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e07b      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d034      	beq.n	8001a6e <HAL_I2C_Master_Transmit+0x1ca>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d130      	bne.n	8001a6e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	2200      	movs	r2, #0
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f976 	bl	8001d08 <I2C_WaitOnFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e04d      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2bff      	cmp	r3, #255	; 0xff
 8001a2e:	d90e      	bls.n	8001a4e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	22ff      	movs	r2, #255	; 0xff
 8001a34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	8979      	ldrh	r1, [r7, #10]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fb9a 	bl	8002180 <I2C_TransferConfig>
 8001a4c:	e00f      	b.n	8001a6e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	8979      	ldrh	r1, [r7, #10]
 8001a60:	2300      	movs	r3, #0
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 fb89 	bl	8002180 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d19e      	bne.n	80019b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	6a39      	ldr	r1, [r7, #32]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f9d9 	bl	8001e34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e01a      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2220      	movs	r2, #32
 8001a92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6859      	ldr	r1, [r3, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_I2C_Master_Transmit+0x22c>)
 8001aa0:	400b      	ands	r3, r1
 8001aa2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001ac0:	2302      	movs	r3, #2
  }
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	80002000 	.word	0x80002000
 8001ad0:	fe00e800 	.word	0xfe00e800

08001ad4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	817b      	strh	r3, [r7, #10]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	f040 80db 	bne.w	8001cac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_I2C_Master_Receive+0x30>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e0d4      	b.n	8001cae <HAL_I2C_Master_Receive+0x1da>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b0c:	f7ff fb7a 	bl	8001204 <HAL_GetTick>
 8001b10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2319      	movs	r3, #25
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f8f2 	bl	8001d08 <I2C_WaitOnFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0bf      	b.n	8001cae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2222      	movs	r2, #34	; 0x22
 8001b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	893a      	ldrh	r2, [r7, #8]
 8001b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2bff      	cmp	r3, #255	; 0xff
 8001b5e:	d90e      	bls.n	8001b7e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	22ff      	movs	r2, #255	; 0xff
 8001b64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	8979      	ldrh	r1, [r7, #10]
 8001b6e:	4b52      	ldr	r3, [pc, #328]	; (8001cb8 <HAL_I2C_Master_Receive+0x1e4>)
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fb02 	bl	8002180 <I2C_TransferConfig>
 8001b7c:	e06d      	b.n	8001c5a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	8979      	ldrh	r1, [r7, #10]
 8001b90:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <HAL_I2C_Master_Receive+0x1e4>)
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 faf1 	bl	8002180 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001b9e:	e05c      	b.n	8001c5a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	6a39      	ldr	r1, [r7, #32]
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 f989 	bl	8001ebc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e07c      	b.n	8001cae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d034      	beq.n	8001c5a <HAL_I2C_Master_Receive+0x186>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d130      	bne.n	8001c5a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f880 	bl	8001d08 <I2C_WaitOnFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e04d      	b.n	8001cae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2bff      	cmp	r3, #255	; 0xff
 8001c1a:	d90e      	bls.n	8001c3a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	22ff      	movs	r2, #255	; 0xff
 8001c20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	8979      	ldrh	r1, [r7, #10]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 faa4 	bl	8002180 <I2C_TransferConfig>
 8001c38:	e00f      	b.n	8001c5a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	8979      	ldrh	r1, [r7, #10]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 fa93 	bl	8002180 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d19d      	bne.n	8001ba0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	6a39      	ldr	r1, [r7, #32]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f8e3 	bl	8001e34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e01a      	b.n	8001cae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6859      	ldr	r1, [r3, #4]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_I2C_Master_Receive+0x1e8>)
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e000      	b.n	8001cae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001cac:	2302      	movs	r3, #2
  }
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	80002400 	.word	0x80002400
 8001cbc:	fe00e800 	.word	0xfe00e800

08001cc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d103      	bne.n	8001cde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d007      	beq.n	8001cfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	619a      	str	r2, [r3, #24]
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	4613      	mov	r3, r2
 8001d16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d18:	e031      	b.n	8001d7e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d02d      	beq.n	8001d7e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d22:	f7ff fa6f 	bl	8001204 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d302      	bcc.n	8001d38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d122      	bne.n	8001d7e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	4013      	ands	r3, r2
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d113      	bne.n	8001d7e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f043 0220 	orr.w	r2, r3, #32
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2220      	movs	r2, #32
 8001d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4013      	ands	r3, r2
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	bf0c      	ite	eq
 8001d8e:	2301      	moveq	r3, #1
 8001d90:	2300      	movne	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d0be      	beq.n	8001d1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001db2:	e033      	b.n	8001e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f901 	bl	8001fc0 <I2C_IsErrorOccurred>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e031      	b.n	8001e2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dce:	d025      	beq.n	8001e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd0:	f7ff fa18 	bl	8001204 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d302      	bcc.n	8001de6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d11a      	bne.n	8001e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d013      	beq.n	8001e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e007      	b.n	8001e2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d1c4      	bne.n	8001db4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e40:	e02f      	b.n	8001ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f8ba 	bl	8001fc0 <I2C_IsErrorOccurred>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e02d      	b.n	8001eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e56:	f7ff f9d5 	bl	8001204 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d302      	bcc.n	8001e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d11a      	bne.n	8001ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d013      	beq.n	8001ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f043 0220 	orr.w	r2, r3, #32
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e007      	b.n	8001eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d1c8      	bne.n	8001e42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ec8:	e06b      	b.n	8001fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f876 	bl	8001fc0 <I2C_IsErrorOccurred>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e069      	b.n	8001fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d138      	bne.n	8001f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d105      	bne.n	8001f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e055      	b.n	8001fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b10      	cmp	r3, #16
 8001f12:	d107      	bne.n	8001f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2210      	movs	r2, #16
 8001f1a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
 8001f22:	e002      	b.n	8001f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001f3e:	400b      	ands	r3, r1
 8001f40:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e029      	b.n	8001fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5e:	f7ff f951 	bl	8001204 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d302      	bcc.n	8001f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d116      	bne.n	8001fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d00f      	beq.n	8001fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f043 0220 	orr.w	r2, r3, #32
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e007      	b.n	8001fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d18c      	bne.n	8001eca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	fe00e800 	.word	0xfe00e800

08001fc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d068      	beq.n	80020be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ff4:	e049      	b.n	800208a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d045      	beq.n	800208a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ffe:	f7ff f901 	bl	8001204 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	429a      	cmp	r2, r3
 800200c:	d302      	bcc.n	8002014 <I2C_IsErrorOccurred+0x54>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d13a      	bne.n	800208a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002026:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002036:	d121      	bne.n	800207c <I2C_IsErrorOccurred+0xbc>
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800203e:	d01d      	beq.n	800207c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002040:	7cfb      	ldrb	r3, [r7, #19]
 8002042:	2b20      	cmp	r3, #32
 8002044:	d01a      	beq.n	800207c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002054:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002056:	f7ff f8d5 	bl	8001204 <HAL_GetTick>
 800205a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800205c:	e00e      	b.n	800207c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800205e:	f7ff f8d1 	bl	8001204 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b19      	cmp	r3, #25
 800206a:	d907      	bls.n	800207c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	f043 0320 	orr.w	r3, r3, #32
 8002072:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800207a:	e006      	b.n	800208a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b20      	cmp	r3, #32
 8002088:	d1e9      	bne.n	800205e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b20      	cmp	r3, #32
 8002096:	d003      	beq.n	80020a0 <I2C_IsErrorOccurred+0xe0>
 8002098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0aa      	beq.n	8001ff6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80020a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d103      	bne.n	80020b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2220      	movs	r2, #32
 80020ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00b      	beq.n	80020e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002102:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	f043 0302 	orr.w	r3, r3, #2
 800211a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002124:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800212c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01c      	beq.n	800216e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff fdc3 	bl	8001cc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <I2C_IsErrorOccurred+0x1bc>)
 8002146:	400b      	ands	r3, r1
 8002148:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	431a      	orrs	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800216e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002172:	4618      	mov	r0, r3
 8002174:	3728      	adds	r7, #40	; 0x28
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	fe00e800 	.word	0xfe00e800

08002180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	817b      	strh	r3, [r7, #10]
 800218e:	4613      	mov	r3, r2
 8002190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002192:	897b      	ldrh	r3, [r7, #10]
 8002194:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002198:	7a7b      	ldrb	r3, [r7, #9]
 800219a:	041b      	lsls	r3, r3, #16
 800219c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	0d5b      	lsrs	r3, r3, #21
 80021ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <I2C_TransferConfig+0x60>)
 80021c0:	430b      	orrs	r3, r1
 80021c2:	43db      	mvns	r3, r3
 80021c4:	ea02 0103 	and.w	r1, r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	03ff63ff 	.word	0x03ff63ff

080021e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d138      	bne.n	800226c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002204:	2302      	movs	r3, #2
 8002206:	e032      	b.n	800226e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2224      	movs	r2, #36	; 0x24
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002236:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6819      	ldr	r1, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	e000      	b.n	800226e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800226c:	2302      	movs	r3, #2
  }
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800227a:	b480      	push	{r7}
 800227c:	b085      	sub	sp, #20
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b20      	cmp	r3, #32
 800228e:	d139      	bne.n	8002304 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800229a:	2302      	movs	r3, #2
 800229c:	e033      	b.n	8002306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2224      	movs	r2, #36	; 0x24
 80022aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0201 	bic.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e000      	b.n	8002306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002304:	2302      	movs	r3, #2
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <HAL_PWREx_GetVoltageRange+0x18>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40007000 	.word	0x40007000

08002330 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800233e:	d130      	bne.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002340:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234c:	d038      	beq.n	80023c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002356:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002358:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800235c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2232      	movs	r2, #50	; 0x32
 8002364:	fb02 f303 	mul.w	r3, r2, r3
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0c9b      	lsrs	r3, r3, #18
 8002370:	3301      	adds	r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002374:	e002      	b.n	800237c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3b01      	subs	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002388:	d102      	bne.n	8002390 <HAL_PWREx_ControlVoltageScaling+0x60>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f2      	bne.n	8002376 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239c:	d110      	bne.n	80023c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e00f      	b.n	80023c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ae:	d007      	beq.n	80023c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023b8:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40007000 	.word	0x40007000
 80023d4:	20000000 	.word	0x20000000
 80023d8:	431bde83 	.word	0x431bde83

080023dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e3ca      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ee:	4b97      	ldr	r3, [pc, #604]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f8:	4b94      	ldr	r3, [pc, #592]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80e4 	beq.w	80025d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_RCC_OscConfig+0x4a>
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b0c      	cmp	r3, #12
 800241a:	f040 808b 	bne.w	8002534 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b01      	cmp	r3, #1
 8002422:	f040 8087 	bne.w	8002534 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002426:	4b89      	ldr	r3, [pc, #548]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x62>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e3a2      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1a      	ldr	r2, [r3, #32]
 8002442:	4b82      	ldr	r3, [pc, #520]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d004      	beq.n	8002458 <HAL_RCC_OscConfig+0x7c>
 800244e:	4b7f      	ldr	r3, [pc, #508]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002456:	e005      	b.n	8002464 <HAL_RCC_OscConfig+0x88>
 8002458:	4b7c      	ldr	r3, [pc, #496]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800245a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002464:	4293      	cmp	r3, r2
 8002466:	d223      	bcs.n	80024b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fd55 	bl	8002f1c <RCC_SetFlashLatencyFromMSIRange>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e383      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247c:	4b73      	ldr	r3, [pc, #460]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a72      	ldr	r2, [pc, #456]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002482:	f043 0308 	orr.w	r3, r3, #8
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b70      	ldr	r3, [pc, #448]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	496d      	ldr	r1, [pc, #436]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800249a:	4b6c      	ldr	r3, [pc, #432]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	4968      	ldr	r1, [pc, #416]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
 80024ae:	e025      	b.n	80024fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b0:	4b66      	ldr	r3, [pc, #408]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024b6:	f043 0308 	orr.w	r3, r3, #8
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4960      	ldr	r1, [pc, #384]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ce:	4b5f      	ldr	r3, [pc, #380]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	495b      	ldr	r1, [pc, #364]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fd15 	bl	8002f1c <RCC_SetFlashLatencyFromMSIRange>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e343      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024fc:	f000 fc4a 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b52      	ldr	r3, [pc, #328]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	4950      	ldr	r1, [pc, #320]	; (8002650 <HAL_RCC_OscConfig+0x274>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	4a4e      	ldr	r2, [pc, #312]	; (8002654 <HAL_RCC_OscConfig+0x278>)
 800251a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800251c:	4b4e      	ldr	r3, [pc, #312]	; (8002658 <HAL_RCC_OscConfig+0x27c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fe1f 	bl	8001164 <HAL_InitTick>
 8002526:	4603      	mov	r3, r0
 8002528:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d052      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	e327      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d032      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800253c:	4b43      	ldr	r3, [pc, #268]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a42      	ldr	r2, [pc, #264]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002548:	f7fe fe5c 	bl	8001204 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002550:	f7fe fe58 	bl	8001204 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e310      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002562:	4b3a      	ldr	r3, [pc, #232]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a36      	ldr	r2, [pc, #216]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4931      	ldr	r1, [pc, #196]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800258c:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	492c      	ldr	r1, [pc, #176]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	e01a      	b.n	80025d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025a2:	4b2a      	ldr	r3, [pc, #168]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a29      	ldr	r2, [pc, #164]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ae:	f7fe fe29 	bl	8001204 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b6:	f7fe fe25 	bl	8001204 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e2dd      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025c8:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x1da>
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d074      	beq.n	80026ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x21a>
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	d10e      	bne.n	800260e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d10b      	bne.n	800260e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d064      	beq.n	80026cc <HAL_RCC_OscConfig+0x2f0>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d160      	bne.n	80026cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e2ba      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x24a>
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0b      	ldr	r2, [pc, #44]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800261e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	e026      	b.n	8002674 <HAL_RCC_OscConfig+0x298>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800262e:	d115      	bne.n	800265c <HAL_RCC_OscConfig+0x280>
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a05      	ldr	r2, [pc, #20]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a02      	ldr	r2, [pc, #8]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e014      	b.n	8002674 <HAL_RCC_OscConfig+0x298>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	08006428 	.word	0x08006428
 8002654:	20000000 	.word	0x20000000
 8002658:	20000004 	.word	0x20000004
 800265c:	4ba0      	ldr	r3, [pc, #640]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a9f      	ldr	r2, [pc, #636]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b9d      	ldr	r3, [pc, #628]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a9c      	ldr	r2, [pc, #624]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe fdc2 	bl	8001204 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe fdbe 	bl	8001204 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e276      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002696:	4b92      	ldr	r3, [pc, #584]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x2a8>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fdae 	bl	8001204 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe fdaa 	bl	8001204 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e262      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026be:	4b88      	ldr	r3, [pc, #544]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x2d0>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d060      	beq.n	800279c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d005      	beq.n	80026ec <HAL_RCC_OscConfig+0x310>
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	d119      	bne.n	800271a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d116      	bne.n	800271a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ec:	4b7c      	ldr	r3, [pc, #496]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_OscConfig+0x328>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e23f      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b76      	ldr	r3, [pc, #472]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	4973      	ldr	r1, [pc, #460]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002718:	e040      	b.n	800279c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d023      	beq.n	800276a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002722:	4b6f      	ldr	r3, [pc, #444]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a6e      	ldr	r2, [pc, #440]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe fd69 	bl	8001204 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002736:	f7fe fd65 	bl	8001204 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e21d      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002748:	4b65      	ldr	r3, [pc, #404]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b62      	ldr	r3, [pc, #392]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	061b      	lsls	r3, r3, #24
 8002762:	495f      	ldr	r1, [pc, #380]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
 8002768:	e018      	b.n	800279c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276a:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a5c      	ldr	r2, [pc, #368]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fe fd45 	bl	8001204 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277e:	f7fe fd41 	bl	8001204 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1f9      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002790:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d03c      	beq.n	8002822 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01c      	beq.n	80027ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b0:	4b4b      	ldr	r3, [pc, #300]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80027b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b6:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe fd20 	bl	8001204 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c8:	f7fe fd1c 	bl	8001204 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e1d4      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027da:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80027dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ef      	beq.n	80027c8 <HAL_RCC_OscConfig+0x3ec>
 80027e8:	e01b      	b.n	8002822 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ea:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80027ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f0:	4a3b      	ldr	r2, [pc, #236]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe fd03 	bl	8001204 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002802:	f7fe fcff 	bl	8001204 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1b7      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002814:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ef      	bne.n	8002802 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80a6 	beq.w	800297c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002834:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10d      	bne.n	800285c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	4a26      	ldr	r2, [pc, #152]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284a:	6593      	str	r3, [r2, #88]	; 0x58
 800284c:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002858:	2301      	movs	r3, #1
 800285a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285c:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <HAL_RCC_OscConfig+0x508>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d118      	bne.n	800289a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_RCC_OscConfig+0x508>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_RCC_OscConfig+0x508>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002872:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002874:	f7fe fcc6 	bl	8001204 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287c:	f7fe fcc2 	bl	8001204 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e17a      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_RCC_OscConfig+0x508>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d108      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4d8>
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b2:	e029      	b.n	8002908 <HAL_RCC_OscConfig+0x52c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d115      	bne.n	80028e8 <HAL_RCC_OscConfig+0x50c>
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028dc:	e014      	b.n	8002908 <HAL_RCC_OscConfig+0x52c>
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40007000 	.word	0x40007000
 80028e8:	4b9c      	ldr	r3, [pc, #624]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ee:	4a9b      	ldr	r2, [pc, #620]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f8:	4b98      	ldr	r3, [pc, #608]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	4a97      	ldr	r2, [pc, #604]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002900:	f023 0304 	bic.w	r3, r3, #4
 8002904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d016      	beq.n	800293e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe fc78 	bl	8001204 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002916:	e00a      	b.n	800292e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002918:	f7fe fc74 	bl	8001204 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e12a      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800292e:	4b8b      	ldr	r3, [pc, #556]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ed      	beq.n	8002918 <HAL_RCC_OscConfig+0x53c>
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293e:	f7fe fc61 	bl	8001204 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe fc5d 	bl	8001204 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e113      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800295c:	4b7f      	ldr	r3, [pc, #508]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ed      	bne.n	8002946 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800296a:	7ffb      	ldrb	r3, [r7, #31]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002970:	4b7a      	ldr	r3, [pc, #488]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	4a79      	ldr	r2, [pc, #484]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80fe 	beq.w	8002b82 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	2b02      	cmp	r3, #2
 800298c:	f040 80d0 	bne.w	8002b30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002990:	4b72      	ldr	r3, [pc, #456]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d130      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	3b01      	subs	r3, #1
 80029b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d127      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d11f      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029d0:	2a07      	cmp	r2, #7
 80029d2:	bf14      	ite	ne
 80029d4:	2201      	movne	r2, #1
 80029d6:	2200      	moveq	r2, #0
 80029d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029da:	4293      	cmp	r3, r2
 80029dc:	d113      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e8:	085b      	lsrs	r3, r3, #1
 80029ea:	3b01      	subs	r3, #1
 80029ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	3b01      	subs	r3, #1
 8002a00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d06e      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b0c      	cmp	r3, #12
 8002a0a:	d069      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a0c:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a18:	4b50      	ldr	r3, [pc, #320]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0ad      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a28:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a4b      	ldr	r2, [pc, #300]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a34:	f7fe fbe6 	bl	8001204 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe fbe2 	bl	8001204 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e09a      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a4e:	4b43      	ldr	r3, [pc, #268]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5a:	4b40      	ldr	r3, [pc, #256]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a6a:	3a01      	subs	r2, #1
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	4311      	orrs	r1, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a74:	0212      	lsls	r2, r2, #8
 8002a76:	4311      	orrs	r1, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a7c:	0852      	lsrs	r2, r2, #1
 8002a7e:	3a01      	subs	r2, #1
 8002a80:	0552      	lsls	r2, r2, #21
 8002a82:	4311      	orrs	r1, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a88:	0852      	lsrs	r2, r2, #1
 8002a8a:	3a01      	subs	r2, #1
 8002a8c:	0652      	lsls	r2, r2, #25
 8002a8e:	4311      	orrs	r1, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a94:	0912      	lsrs	r2, r2, #4
 8002a96:	0452      	lsls	r2, r2, #17
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	4930      	ldr	r1, [pc, #192]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002aa0:	4b2e      	ldr	r3, [pc, #184]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2d      	ldr	r2, [pc, #180]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ab8:	f7fe fba4 	bl	8001204 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe fba0 	bl	8001204 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e058      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad2:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ade:	e050      	b.n	8002b82 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e04f      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d148      	bne.n	8002b82 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a19      	ldr	r2, [pc, #100]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b08:	f7fe fb7c 	bl	8001204 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe fb78 	bl	8001204 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e030      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x734>
 8002b2e:	e028      	b.n	8002b82 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d023      	beq.n	8002b7e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <HAL_RCC_OscConfig+0x780>)
 8002b3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7fe fb5f 	bl	8001204 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b48:	e00c      	b.n	8002b64 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe fb5b 	bl	8001204 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d905      	bls.n	8002b64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e013      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_OscConfig+0x7b0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1ec      	bne.n	8002b4a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_RCC_OscConfig+0x7b0>)
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	4905      	ldr	r1, [pc, #20]	; (8002b8c <HAL_RCC_OscConfig+0x7b0>)
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_RCC_OscConfig+0x7b4>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60cb      	str	r3, [r1, #12]
 8002b7c:	e001      	b.n	8002b82 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	feeefffc 	.word	0xfeeefffc

08002b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0e7      	b.n	8002d78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b75      	ldr	r3, [pc, #468]	; (8002d80 <HAL_RCC_ClockConfig+0x1ec>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d910      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b72      	ldr	r3, [pc, #456]	; (8002d80 <HAL_RCC_ClockConfig+0x1ec>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 0207 	bic.w	r2, r3, #7
 8002bbe:	4970      	ldr	r1, [pc, #448]	; (8002d80 <HAL_RCC_ClockConfig+0x1ec>)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b6e      	ldr	r3, [pc, #440]	; (8002d80 <HAL_RCC_ClockConfig+0x1ec>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0cf      	b.n	8002d78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	4b66      	ldr	r3, [pc, #408]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d908      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4960      	ldr	r1, [pc, #384]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d04c      	beq.n	8002cac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1a:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d121      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0a6      	b.n	8002d78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c32:	4b54      	ldr	r3, [pc, #336]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d115      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e09a      	b.n	8002d78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d107      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c4a:	4b4e      	ldr	r3, [pc, #312]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e08e      	b.n	8002d78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c5a:	4b4a      	ldr	r3, [pc, #296]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e086      	b.n	8002d78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c6a:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f023 0203 	bic.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4943      	ldr	r1, [pc, #268]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7c:	f7fe fac2 	bl	8001204 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c84:	f7fe fabe 	bl	8001204 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e06e      	b.n	8002d78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 020c 	and.w	r2, r3, #12
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d1eb      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d010      	beq.n	8002cda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d208      	bcs.n	8002cda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc8:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	492b      	ldr	r1, [pc, #172]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cda:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <HAL_RCC_ClockConfig+0x1ec>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d210      	bcs.n	8002d0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <HAL_RCC_ClockConfig+0x1ec>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f023 0207 	bic.w	r2, r3, #7
 8002cf0:	4923      	ldr	r1, [pc, #140]	; (8002d80 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <HAL_RCC_ClockConfig+0x1ec>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e036      	b.n	8002d78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	4918      	ldr	r1, [pc, #96]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4910      	ldr	r1, [pc, #64]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d48:	f000 f824 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_RCC_ClockConfig+0x1f0>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	490b      	ldr	r1, [pc, #44]	; (8002d88 <HAL_RCC_ClockConfig+0x1f4>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
 8002d64:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <HAL_RCC_ClockConfig+0x1f8>)
 8002d66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1fc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe f9f9 	bl	8001164 <HAL_InitTick>
 8002d72:	4603      	mov	r3, r0
 8002d74:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d76:	7afb      	ldrb	r3, [r7, #11]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08006428 	.word	0x08006428
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	20000004 	.word	0x20000004

08002d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da2:	4b3e      	ldr	r3, [pc, #248]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dac:	4b3b      	ldr	r3, [pc, #236]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	2b0c      	cmp	r3, #12
 8002dc0:	d121      	bne.n	8002e06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d11e      	bne.n	8002e06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dc8:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	e005      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002de4:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002df0:	4a2b      	ldr	r2, [pc, #172]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10d      	bne.n	8002e1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e0c:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e0e:	61bb      	str	r3, [r7, #24]
 8002e10:	e004      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e18:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d134      	bne.n	8002e8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e22:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d003      	beq.n	8002e3a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d003      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0xac>
 8002e38:	e005      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e3c:	617b      	str	r3, [r7, #20]
      break;
 8002e3e:	e005      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e42:	617b      	str	r3, [r7, #20]
      break;
 8002e44:	e002      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	617b      	str	r3, [r7, #20]
      break;
 8002e4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	3301      	adds	r3, #1
 8002e58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	fb03 f202 	mul.w	r2, r3, r2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e72:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	0e5b      	lsrs	r3, r3, #25
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e8c:	69bb      	ldr	r3, [r7, #24]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3724      	adds	r7, #36	; 0x24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08006440 	.word	0x08006440
 8002ea4:	00f42400 	.word	0x00f42400
 8002ea8:	007a1200 	.word	0x007a1200

08002eac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000000 	.word	0x20000000

08002ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ec8:	f7ff fff0 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	4904      	ldr	r1, [pc, #16]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eda:	5ccb      	ldrb	r3, [r1, r3]
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08006438 	.word	0x08006438

08002ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ef4:	f7ff ffda 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0adb      	lsrs	r3, r3, #11
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4904      	ldr	r1, [pc, #16]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	08006438 	.word	0x08006438

08002f1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f28:	4b2a      	ldr	r3, [pc, #168]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f34:	f7ff f9ee 	bl	8002314 <HAL_PWREx_GetVoltageRange>
 8002f38:	6178      	str	r0, [r7, #20]
 8002f3a:	e014      	b.n	8002f66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f3c:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	4a24      	ldr	r2, [pc, #144]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f46:	6593      	str	r3, [r2, #88]	; 0x58
 8002f48:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f54:	f7ff f9de 	bl	8002314 <HAL_PWREx_GetVoltageRange>
 8002f58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6c:	d10b      	bne.n	8002f86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d919      	bls.n	8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2ba0      	cmp	r3, #160	; 0xa0
 8002f78:	d902      	bls.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	e013      	b.n	8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f80:	2301      	movs	r3, #1
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	e010      	b.n	8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b80      	cmp	r3, #128	; 0x80
 8002f8a:	d902      	bls.n	8002f92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	e00a      	b.n	8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d102      	bne.n	8002f9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f98:	2302      	movs	r3, #2
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	e004      	b.n	8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b70      	cmp	r3, #112	; 0x70
 8002fa2:	d101      	bne.n	8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 0207 	bic.w	r2, r3, #7
 8002fb0:	4909      	ldr	r1, [pc, #36]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fb8:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d001      	beq.n	8002fca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40022000 	.word	0x40022000

08002fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d041      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ffc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003000:	d02a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003002:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003006:	d824      	bhi.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800300c:	d008      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800300e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003012:	d81e      	bhi.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301c:	d010      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800301e:	e018      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003020:	4b86      	ldr	r3, [pc, #536]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4a85      	ldr	r2, [pc, #532]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800302c:	e015      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3304      	adds	r3, #4
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fabb 	bl	80035b0 <RCCEx_PLLSAI1_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800303e:	e00c      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3320      	adds	r3, #32
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fba6 	bl	8003798 <RCCEx_PLLSAI2_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003050:	e003      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	74fb      	strb	r3, [r7, #19]
      break;
 8003056:	e000      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10b      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003060:	4b76      	ldr	r3, [pc, #472]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800306e:	4973      	ldr	r1, [pc, #460]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003076:	e001      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d041      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800308c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003090:	d02a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003092:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003096:	d824      	bhi.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800309c:	d008      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800309e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030a2:	d81e      	bhi.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ac:	d010      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030ae:	e018      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030b0:	4b62      	ldr	r3, [pc, #392]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a61      	ldr	r2, [pc, #388]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030bc:	e015      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fa73 	bl	80035b0 <RCCEx_PLLSAI1_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ce:	e00c      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3320      	adds	r3, #32
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fb5e 	bl	8003798 <RCCEx_PLLSAI2_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030e0:	e003      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	74fb      	strb	r3, [r7, #19]
      break;
 80030e6:	e000      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030f0:	4b52      	ldr	r3, [pc, #328]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030fe:	494f      	ldr	r1, [pc, #316]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003106:	e001      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a0 	beq.w	800325a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800311e:	4b47      	ldr	r3, [pc, #284]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800312e:	2300      	movs	r3, #0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00d      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003134:	4b41      	ldr	r3, [pc, #260]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	4a40      	ldr	r2, [pc, #256]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313e:	6593      	str	r3, [r2, #88]	; 0x58
 8003140:	4b3e      	ldr	r3, [pc, #248]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314c:	2301      	movs	r3, #1
 800314e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003150:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a3a      	ldr	r2, [pc, #232]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800315c:	f7fe f852 	bl	8001204 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003162:	e009      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003164:	f7fe f84e 	bl	8001204 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d902      	bls.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	74fb      	strb	r3, [r7, #19]
        break;
 8003176:	e005      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003178:	4b31      	ldr	r3, [pc, #196]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ef      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d15c      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800318a:	4b2c      	ldr	r3, [pc, #176]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003194:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01f      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d019      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031a8:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031b4:	4b21      	ldr	r3, [pc, #132]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ba:	4a20      	ldr	r2, [pc, #128]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	4a1c      	ldr	r2, [pc, #112]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031d4:	4a19      	ldr	r2, [pc, #100]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fe f80d 	bl	8001204 <HAL_GetTick>
 80031ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ec:	e00b      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe f809 	bl	8001204 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d902      	bls.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	74fb      	strb	r3, [r7, #19]
            break;
 8003204:	e006      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003206:	4b0d      	ldr	r3, [pc, #52]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ec      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322a:	4904      	ldr	r1, [pc, #16]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003232:	e009      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	74bb      	strb	r3, [r7, #18]
 8003238:	e006      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000
 8003240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003244:	7cfb      	ldrb	r3, [r7, #19]
 8003246:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003248:	7c7b      	ldrb	r3, [r7, #17]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d105      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324e:	4b9e      	ldr	r3, [pc, #632]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	4a9d      	ldr	r2, [pc, #628]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003258:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003266:	4b98      	ldr	r3, [pc, #608]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f023 0203 	bic.w	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	4994      	ldr	r1, [pc, #592]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003288:	4b8f      	ldr	r3, [pc, #572]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	f023 020c 	bic.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	498c      	ldr	r1, [pc, #560]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032aa:	4b87      	ldr	r3, [pc, #540]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	4983      	ldr	r1, [pc, #524]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032cc:	4b7e      	ldr	r3, [pc, #504]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	497b      	ldr	r1, [pc, #492]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032ee:	4b76      	ldr	r3, [pc, #472]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fc:	4972      	ldr	r1, [pc, #456]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003310:	4b6d      	ldr	r3, [pc, #436]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331e:	496a      	ldr	r1, [pc, #424]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003332:	4b65      	ldr	r3, [pc, #404]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003340:	4961      	ldr	r1, [pc, #388]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003354:	4b5c      	ldr	r3, [pc, #368]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003362:	4959      	ldr	r1, [pc, #356]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003376:	4b54      	ldr	r3, [pc, #336]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003384:	4950      	ldr	r1, [pc, #320]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003398:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	4948      	ldr	r1, [pc, #288]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033ba:	4b43      	ldr	r3, [pc, #268]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	493f      	ldr	r1, [pc, #252]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d028      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033dc:	4b3a      	ldr	r3, [pc, #232]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ea:	4937      	ldr	r1, [pc, #220]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033fa:	d106      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033fc:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a31      	ldr	r2, [pc, #196]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003406:	60d3      	str	r3, [r2, #12]
 8003408:	e011      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800340e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003412:	d10c      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3304      	adds	r3, #4
 8003418:	2101      	movs	r1, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f8c8 	bl	80035b0 <RCCEx_PLLSAI1_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800342a:	7cfb      	ldrb	r3, [r7, #19]
 800342c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d028      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800343a:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	491f      	ldr	r1, [pc, #124]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003458:	d106      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800345a:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	4a1a      	ldr	r2, [pc, #104]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003464:	60d3      	str	r3, [r2, #12]
 8003466:	e011      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003470:	d10c      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3304      	adds	r3, #4
 8003476:	2101      	movs	r1, #1
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f899 	bl	80035b0 <RCCEx_PLLSAI1_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d02b      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a6:	4908      	ldr	r1, [pc, #32]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034b6:	d109      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4a02      	ldr	r2, [pc, #8]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c2:	60d3      	str	r3, [r2, #12]
 80034c4:	e014      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3304      	adds	r3, #4
 80034da:	2101      	movs	r1, #1
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f867 	bl	80035b0 <RCCEx_PLLSAI1_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d02f      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034fc:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800350a:	4928      	ldr	r1, [pc, #160]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800351a:	d10d      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	2102      	movs	r1, #2
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f844 	bl	80035b0 <RCCEx_PLLSAI1_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d014      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003532:	7cfb      	ldrb	r3, [r7, #19]
 8003534:	74bb      	strb	r3, [r7, #18]
 8003536:	e011      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800353c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003540:	d10c      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3320      	adds	r3, #32
 8003546:	2102      	movs	r1, #2
 8003548:	4618      	mov	r0, r3
 800354a:	f000 f925 	bl	8003798 <RCCEx_PLLSAI2_Config>
 800354e:	4603      	mov	r3, r0
 8003550:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003568:	4b10      	ldr	r3, [pc, #64]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003576:	490d      	ldr	r1, [pc, #52]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003590:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800359a:	4904      	ldr	r1, [pc, #16]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000

080035b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035be:	4b75      	ldr	r3, [pc, #468]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d018      	beq.n	80035fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ca:	4b72      	ldr	r3, [pc, #456]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0203 	and.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d10d      	bne.n	80035f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
       ||
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d009      	beq.n	80035f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035e2:	4b6c      	ldr	r3, [pc, #432]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
       ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d047      	beq.n	8003686 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
 80035fa:	e044      	b.n	8003686 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d018      	beq.n	8003636 <RCCEx_PLLSAI1_Config+0x86>
 8003604:	2b03      	cmp	r3, #3
 8003606:	d825      	bhi.n	8003654 <RCCEx_PLLSAI1_Config+0xa4>
 8003608:	2b01      	cmp	r3, #1
 800360a:	d002      	beq.n	8003612 <RCCEx_PLLSAI1_Config+0x62>
 800360c:	2b02      	cmp	r3, #2
 800360e:	d009      	beq.n	8003624 <RCCEx_PLLSAI1_Config+0x74>
 8003610:	e020      	b.n	8003654 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003612:	4b60      	ldr	r3, [pc, #384]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d11d      	bne.n	800365a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003622:	e01a      	b.n	800365a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003624:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d116      	bne.n	800365e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003634:	e013      	b.n	800365e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003636:	4b57      	ldr	r3, [pc, #348]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003642:	4b54      	ldr	r3, [pc, #336]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003652:	e006      	b.n	8003662 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      break;
 8003658:	e004      	b.n	8003664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800365a:	bf00      	nop
 800365c:	e002      	b.n	8003664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003662:	bf00      	nop
    }

    if(status == HAL_OK)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10d      	bne.n	8003686 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800366a:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	430b      	orrs	r3, r1
 8003680:	4944      	ldr	r1, [pc, #272]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003682:	4313      	orrs	r3, r2
 8003684:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d17d      	bne.n	8003788 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800368c:	4b41      	ldr	r3, [pc, #260]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a40      	ldr	r2, [pc, #256]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003692:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003698:	f7fd fdb4 	bl	8001204 <HAL_GetTick>
 800369c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800369e:	e009      	b.n	80036b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036a0:	f7fd fdb0 	bl	8001204 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d902      	bls.n	80036b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	73fb      	strb	r3, [r7, #15]
        break;
 80036b2:	e005      	b.n	80036c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036b4:	4b37      	ldr	r3, [pc, #220]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ef      	bne.n	80036a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d160      	bne.n	8003788 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d111      	bne.n	80036f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036cc:	4b31      	ldr	r3, [pc, #196]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6892      	ldr	r2, [r2, #8]
 80036dc:	0211      	lsls	r1, r2, #8
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68d2      	ldr	r2, [r2, #12]
 80036e2:	0912      	lsrs	r2, r2, #4
 80036e4:	0452      	lsls	r2, r2, #17
 80036e6:	430a      	orrs	r2, r1
 80036e8:	492a      	ldr	r1, [pc, #168]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	610b      	str	r3, [r1, #16]
 80036ee:	e027      	b.n	8003740 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d112      	bne.n	800371c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036f6:	4b27      	ldr	r3, [pc, #156]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6892      	ldr	r2, [r2, #8]
 8003706:	0211      	lsls	r1, r2, #8
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6912      	ldr	r2, [r2, #16]
 800370c:	0852      	lsrs	r2, r2, #1
 800370e:	3a01      	subs	r2, #1
 8003710:	0552      	lsls	r2, r2, #21
 8003712:	430a      	orrs	r2, r1
 8003714:	491f      	ldr	r1, [pc, #124]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003716:	4313      	orrs	r3, r2
 8003718:	610b      	str	r3, [r1, #16]
 800371a:	e011      	b.n	8003740 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003724:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6892      	ldr	r2, [r2, #8]
 800372c:	0211      	lsls	r1, r2, #8
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6952      	ldr	r2, [r2, #20]
 8003732:	0852      	lsrs	r2, r2, #1
 8003734:	3a01      	subs	r2, #1
 8003736:	0652      	lsls	r2, r2, #25
 8003738:	430a      	orrs	r2, r1
 800373a:	4916      	ldr	r1, [pc, #88]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373c:	4313      	orrs	r3, r2
 800373e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a13      	ldr	r2, [pc, #76]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003746:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800374a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fd fd5a 	bl	8001204 <HAL_GetTick>
 8003750:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003752:	e009      	b.n	8003768 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003754:	f7fd fd56 	bl	8001204 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d902      	bls.n	8003768 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	73fb      	strb	r3, [r7, #15]
          break;
 8003766:	e005      	b.n	8003774 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ef      	beq.n	8003754 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	4904      	ldr	r1, [pc, #16]	; (8003794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000

08003798 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037a6:	4b6a      	ldr	r3, [pc, #424]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d018      	beq.n	80037e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037b2:	4b67      	ldr	r3, [pc, #412]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0203 	and.w	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d10d      	bne.n	80037de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
       ||
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037ca:	4b61      	ldr	r3, [pc, #388]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
       ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d047      	beq.n	800386e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
 80037e2:	e044      	b.n	800386e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d018      	beq.n	800381e <RCCEx_PLLSAI2_Config+0x86>
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d825      	bhi.n	800383c <RCCEx_PLLSAI2_Config+0xa4>
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d002      	beq.n	80037fa <RCCEx_PLLSAI2_Config+0x62>
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d009      	beq.n	800380c <RCCEx_PLLSAI2_Config+0x74>
 80037f8:	e020      	b.n	800383c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037fa:	4b55      	ldr	r3, [pc, #340]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11d      	bne.n	8003842 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380a:	e01a      	b.n	8003842 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800380c:	4b50      	ldr	r3, [pc, #320]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003814:	2b00      	cmp	r3, #0
 8003816:	d116      	bne.n	8003846 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381c:	e013      	b.n	8003846 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800381e:	4b4c      	ldr	r3, [pc, #304]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10f      	bne.n	800384a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800382a:	4b49      	ldr	r3, [pc, #292]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800383a:	e006      	b.n	800384a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      break;
 8003840:	e004      	b.n	800384c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003842:	bf00      	nop
 8003844:	e002      	b.n	800384c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800384a:	bf00      	nop
    }

    if(status == HAL_OK)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10d      	bne.n	800386e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003852:	4b3f      	ldr	r3, [pc, #252]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	430b      	orrs	r3, r1
 8003868:	4939      	ldr	r1, [pc, #228]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386a:	4313      	orrs	r3, r2
 800386c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d167      	bne.n	8003944 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003874:	4b36      	ldr	r3, [pc, #216]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a35      	ldr	r2, [pc, #212]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003880:	f7fd fcc0 	bl	8001204 <HAL_GetTick>
 8003884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003886:	e009      	b.n	800389c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003888:	f7fd fcbc 	bl	8001204 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d902      	bls.n	800389c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	73fb      	strb	r3, [r7, #15]
        break;
 800389a:	e005      	b.n	80038a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800389c:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ef      	bne.n	8003888 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d14a      	bne.n	8003944 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d111      	bne.n	80038d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038b4:	4b26      	ldr	r3, [pc, #152]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6892      	ldr	r2, [r2, #8]
 80038c4:	0211      	lsls	r1, r2, #8
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68d2      	ldr	r2, [r2, #12]
 80038ca:	0912      	lsrs	r2, r2, #4
 80038cc:	0452      	lsls	r2, r2, #17
 80038ce:	430a      	orrs	r2, r1
 80038d0:	491f      	ldr	r1, [pc, #124]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	614b      	str	r3, [r1, #20]
 80038d6:	e011      	b.n	80038fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6892      	ldr	r2, [r2, #8]
 80038e8:	0211      	lsls	r1, r2, #8
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6912      	ldr	r2, [r2, #16]
 80038ee:	0852      	lsrs	r2, r2, #1
 80038f0:	3a01      	subs	r2, #1
 80038f2:	0652      	lsls	r2, r2, #25
 80038f4:	430a      	orrs	r2, r1
 80038f6:	4916      	ldr	r1, [pc, #88]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038fc:	4b14      	ldr	r3, [pc, #80]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a13      	ldr	r2, [pc, #76]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003906:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fd fc7c 	bl	8001204 <HAL_GetTick>
 800390c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800390e:	e009      	b.n	8003924 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003910:	f7fd fc78 	bl	8001204 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d902      	bls.n	8003924 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	73fb      	strb	r3, [r7, #15]
          break;
 8003922:	e005      	b.n	8003930 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ef      	beq.n	8003910 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4904      	ldr	r1, [pc, #16]	; (8003950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003940:	4313      	orrs	r3, r2
 8003942:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000

08003954 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e095      	b.n	8003a92 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	2b00      	cmp	r3, #0
 800396c:	d108      	bne.n	8003980 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003976:	d009      	beq.n	800398c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	61da      	str	r2, [r3, #28]
 800397e:	e005      	b.n	800398c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fa14 	bl	8000dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039cc:	d902      	bls.n	80039d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	e002      	b.n	80039da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039e2:	d007      	beq.n	80039f4 <HAL_SPI_Init+0xa0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039ec:	d002      	beq.n	80039f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	ea42 0103 	orr.w	r1, r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	0c1b      	lsrs	r3, r3, #16
 8003a50:	f003 0204 	and.w	r2, r3, #4
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a70:	ea42 0103 	orr.w	r1, r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b088      	sub	sp, #32
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_SPI_Transmit+0x22>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e15f      	b.n	8003d7c <HAL_SPI_Transmit+0x2e2>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ac4:	f7fd fb9e 	bl	8001204 <HAL_GetTick>
 8003ac8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d002      	beq.n	8003ae0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
 8003adc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ade:	e148      	b.n	8003d72 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <HAL_SPI_Transmit+0x52>
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d102      	bne.n	8003af2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003af0:	e13f      	b.n	8003d72 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2203      	movs	r2, #3
 8003af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	88fa      	ldrh	r2, [r7, #6]
 8003b0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	88fa      	ldrh	r2, [r7, #6]
 8003b10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3c:	d10f      	bne.n	8003b5e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d007      	beq.n	8003b7c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b84:	d94f      	bls.n	8003c26 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_SPI_Transmit+0xfa>
 8003b8e:	8afb      	ldrh	r3, [r7, #22]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d142      	bne.n	8003c1a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	881a      	ldrh	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	1c9a      	adds	r2, r3, #2
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bb8:	e02f      	b.n	8003c1a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d112      	bne.n	8003bee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	881a      	ldrh	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	1c9a      	adds	r2, r3, #2
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bec:	e015      	b.n	8003c1a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bee:	f7fd fb09 	bl	8001204 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d803      	bhi.n	8003c06 <HAL_SPI_Transmit+0x16c>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d102      	bne.n	8003c0c <HAL_SPI_Transmit+0x172>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003c18:	e0ab      	b.n	8003d72 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ca      	bne.n	8003bba <HAL_SPI_Transmit+0x120>
 8003c24:	e080      	b.n	8003d28 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_SPI_Transmit+0x19a>
 8003c2e:	8afb      	ldrh	r3, [r7, #22]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d174      	bne.n	8003d1e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d912      	bls.n	8003c64 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	881a      	ldrh	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	1c9a      	adds	r2, r3, #2
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b02      	subs	r3, #2
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c62:	e05c      	b.n	8003d1e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	7812      	ldrb	r2, [r2, #0]
 8003c70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c8a:	e048      	b.n	8003d1e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d12b      	bne.n	8003cf2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d912      	bls.n	8003cca <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	881a      	ldrh	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	1c9a      	adds	r2, r3, #2
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b02      	subs	r3, #2
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cc8:	e029      	b.n	8003d1e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	7812      	ldrb	r2, [r2, #0]
 8003cd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cf0:	e015      	b.n	8003d1e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf2:	f7fd fa87 	bl	8001204 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d803      	bhi.n	8003d0a <HAL_SPI_Transmit+0x270>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d102      	bne.n	8003d10 <HAL_SPI_Transmit+0x276>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d106      	bne.n	8003d1e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003d1c:	e029      	b.n	8003d72 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1b1      	bne.n	8003c8c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	6839      	ldr	r1, [r7, #0]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fcf9 	bl	8004724 <SPI_EndRxTxTransaction>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e003      	b.n	8003d72 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d002      	beq.n	8003daa <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
 8003da6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003da8:	e11a      	b.n	8003fe0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db2:	d112      	bne.n	8003dda <HAL_SPI_Receive+0x56>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10e      	bne.n	8003dda <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003dc4:	88fa      	ldrh	r2, [r7, #6]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f90e 	bl	8003ff2 <HAL_SPI_TransmitReceive>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	e107      	b.n	8003fea <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_SPI_Receive+0x64>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e100      	b.n	8003fea <HAL_SPI_Receive+0x266>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df0:	f7fd fa08 	bl	8001204 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_SPI_Receive+0x7e>
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e06:	e0eb      	b.n	8003fe0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	88fa      	ldrh	r2, [r7, #6]
 8003e20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e52:	d908      	bls.n	8003e66 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e62:	605a      	str	r2, [r3, #4]
 8003e64:	e007      	b.n	8003e76 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e74:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7e:	d10f      	bne.n	8003ea0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e9e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	d007      	beq.n	8003ebe <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ec6:	d86f      	bhi.n	8003fa8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ec8:	e034      	b.n	8003f34 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d117      	bne.n	8003f08 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f103 020c 	add.w	r2, r3, #12
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	7812      	ldrb	r2, [r2, #0]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f06:	e015      	b.n	8003f34 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f08:	f7fd f97c 	bl	8001204 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d803      	bhi.n	8003f20 <HAL_SPI_Receive+0x19c>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1e:	d102      	bne.n	8003f26 <HAL_SPI_Receive+0x1a2>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003f32:	e055      	b.n	8003fe0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1c4      	bne.n	8003eca <HAL_SPI_Receive+0x146>
 8003f40:	e038      	b.n	8003fb4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d115      	bne.n	8003f7c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	b292      	uxth	r2, r2
 8003f5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	1c9a      	adds	r2, r3, #2
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f7a:	e015      	b.n	8003fa8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f7c:	f7fd f942 	bl	8001204 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d803      	bhi.n	8003f94 <HAL_SPI_Receive+0x210>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d102      	bne.n	8003f9a <HAL_SPI_Receive+0x216>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003fa6:	e01b      	b.n	8003fe0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1c6      	bne.n	8003f42 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	6839      	ldr	r1, [r7, #0]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fb5b 	bl	8004674 <SPI_EndRxTransaction>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	75fb      	strb	r3, [r7, #23]
 8003fd6:	e003      	b.n	8003fe0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b08a      	sub	sp, #40	; 0x28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004000:	2301      	movs	r3, #1
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x26>
 8004014:	2302      	movs	r3, #2
 8004016:	e20a      	b.n	800442e <HAL_SPI_TransmitReceive+0x43c>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004020:	f7fd f8f0 	bl	8001204 <HAL_GetTick>
 8004024:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800402c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004034:	887b      	ldrh	r3, [r7, #2]
 8004036:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004038:	887b      	ldrh	r3, [r7, #2]
 800403a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800403c:	7efb      	ldrb	r3, [r7, #27]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d00e      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x6e>
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004048:	d106      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x66>
 8004052:	7efb      	ldrb	r3, [r7, #27]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d003      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004058:	2302      	movs	r3, #2
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800405e:	e1e0      	b.n	8004422 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_SPI_TransmitReceive+0x80>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_SPI_TransmitReceive+0x80>
 800406c:	887b      	ldrh	r3, [r7, #2]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d103      	bne.n	800407a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004078:	e1d3      	b.n	8004422 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b04      	cmp	r3, #4
 8004084:	d003      	beq.n	800408e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2205      	movs	r2, #5
 800408a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	887a      	ldrh	r2, [r7, #2]
 800409e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	887a      	ldrh	r2, [r7, #2]
 80040a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	887a      	ldrh	r2, [r7, #2]
 80040b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	887a      	ldrh	r2, [r7, #2]
 80040ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040d0:	d802      	bhi.n	80040d8 <HAL_SPI_TransmitReceive+0xe6>
 80040d2:	8a3b      	ldrh	r3, [r7, #16]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d908      	bls.n	80040ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	e007      	b.n	80040fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d007      	beq.n	8004118 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004116:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004120:	f240 8081 	bls.w	8004226 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <HAL_SPI_TransmitReceive+0x140>
 800412c:	8a7b      	ldrh	r3, [r7, #18]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d16d      	bne.n	800420e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	881a      	ldrh	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	1c9a      	adds	r2, r3, #2
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004156:	e05a      	b.n	800420e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b02      	cmp	r3, #2
 8004164:	d11b      	bne.n	800419e <HAL_SPI_TransmitReceive+0x1ac>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d016      	beq.n	800419e <HAL_SPI_TransmitReceive+0x1ac>
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	2b01      	cmp	r3, #1
 8004174:	d113      	bne.n	800419e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	881a      	ldrh	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	1c9a      	adds	r2, r3, #2
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d11c      	bne.n	80041e6 <HAL_SPI_TransmitReceive+0x1f4>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d016      	beq.n	80041e6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	b292      	uxth	r2, r2
 80041c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	1c9a      	adds	r2, r3, #2
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041e2:	2301      	movs	r3, #1
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041e6:	f7fd f80d 	bl	8001204 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d80b      	bhi.n	800420e <HAL_SPI_TransmitReceive+0x21c>
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d007      	beq.n	800420e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800420c:	e109      	b.n	8004422 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d19f      	bne.n	8004158 <HAL_SPI_TransmitReceive+0x166>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d199      	bne.n	8004158 <HAL_SPI_TransmitReceive+0x166>
 8004224:	e0e3      	b.n	80043ee <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_SPI_TransmitReceive+0x244>
 800422e:	8a7b      	ldrh	r3, [r7, #18]
 8004230:	2b01      	cmp	r3, #1
 8004232:	f040 80cf 	bne.w	80043d4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d912      	bls.n	8004266 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	881a      	ldrh	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	1c9a      	adds	r2, r3, #2
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b02      	subs	r3, #2
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004264:	e0b6      	b.n	80043d4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	7812      	ldrb	r2, [r2, #0]
 8004272:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800428c:	e0a2      	b.n	80043d4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b02      	cmp	r3, #2
 800429a:	d134      	bne.n	8004306 <HAL_SPI_TransmitReceive+0x314>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d02f      	beq.n	8004306 <HAL_SPI_TransmitReceive+0x314>
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d12c      	bne.n	8004306 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d912      	bls.n	80042dc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	881a      	ldrh	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	1c9a      	adds	r2, r3, #2
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b02      	subs	r3, #2
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042da:	e012      	b.n	8004302 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	7812      	ldrb	r2, [r2, #0]
 80042e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b01      	cmp	r3, #1
 8004312:	d148      	bne.n	80043a6 <HAL_SPI_TransmitReceive+0x3b4>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d042      	beq.n	80043a6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d923      	bls.n	8004374 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	b292      	uxth	r2, r2
 8004338:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	1c9a      	adds	r2, r3, #2
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b02      	subs	r3, #2
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d81f      	bhi.n	80043a2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	e016      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f103 020c 	add.w	r2, r3, #12
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	7812      	ldrb	r2, [r2, #0]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043a2:	2301      	movs	r3, #1
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043a6:	f7fc ff2d 	bl	8001204 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d803      	bhi.n	80043be <HAL_SPI_TransmitReceive+0x3cc>
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d102      	bne.n	80043c4 <HAL_SPI_TransmitReceive+0x3d2>
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d107      	bne.n	80043d4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80043d2:	e026      	b.n	8004422 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f47f af57 	bne.w	800428e <HAL_SPI_TransmitReceive+0x29c>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f47f af50 	bne.w	800428e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f996 	bl	8004724 <SPI_EndRxTxTransaction>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004418:	e003      	b.n	8004422 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800442a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800442e:	4618      	mov	r0, r3
 8004430:	3728      	adds	r7, #40	; 0x28
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004448:	f7fc fedc 	bl	8001204 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	4413      	add	r3, r2
 8004456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004458:	f7fc fed4 	bl	8001204 <HAL_GetTick>
 800445c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800445e:	4b39      	ldr	r3, [pc, #228]	; (8004544 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	015b      	lsls	r3, r3, #5
 8004464:	0d1b      	lsrs	r3, r3, #20
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	fb02 f303 	mul.w	r3, r2, r3
 800446c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800446e:	e054      	b.n	800451a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	d050      	beq.n	800451a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004478:	f7fc fec4 	bl	8001204 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	429a      	cmp	r2, r3
 8004486:	d902      	bls.n	800448e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d13d      	bne.n	800450a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800449c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044a6:	d111      	bne.n	80044cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b0:	d004      	beq.n	80044bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ba:	d107      	bne.n	80044cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d4:	d10f      	bne.n	80044f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e017      	b.n	800453a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	3b01      	subs	r3, #1
 8004518:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4013      	ands	r3, r2
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	429a      	cmp	r2, r3
 8004528:	bf0c      	ite	eq
 800452a:	2301      	moveq	r3, #1
 800452c:	2300      	movne	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	429a      	cmp	r2, r3
 8004536:	d19b      	bne.n	8004470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000000 	.word	0x20000000

08004548 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800455a:	f7fc fe53 	bl	8001204 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	4413      	add	r3, r2
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800456a:	f7fc fe4b 	bl	8001204 <HAL_GetTick>
 800456e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004578:	4b3d      	ldr	r3, [pc, #244]	; (8004670 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	00da      	lsls	r2, r3, #3
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	0d1b      	lsrs	r3, r3, #20
 8004588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004590:	e060      	b.n	8004654 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004598:	d107      	bne.n	80045aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d104      	bne.n	80045aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d050      	beq.n	8004654 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045b2:	f7fc fe27 	bl	8001204 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045be:	429a      	cmp	r2, r3
 80045c0:	d902      	bls.n	80045c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d13d      	bne.n	8004644 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e0:	d111      	bne.n	8004606 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ea:	d004      	beq.n	80045f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f4:	d107      	bne.n	8004606 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004604:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460e:	d10f      	bne.n	8004630 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800462e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e010      	b.n	8004666 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	3b01      	subs	r3, #1
 8004652:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4013      	ands	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d196      	bne.n	8004592 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3728      	adds	r7, #40	; 0x28
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000000 	.word	0x20000000

08004674 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004688:	d111      	bne.n	80046ae <SPI_EndRxTransaction+0x3a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004692:	d004      	beq.n	800469e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469c:	d107      	bne.n	80046ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ac:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2200      	movs	r2, #0
 80046b6:	2180      	movs	r1, #128	; 0x80
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff febd 	bl	8004438 <SPI_WaitFlagStateUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c8:	f043 0220 	orr.w	r2, r3, #32
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e023      	b.n	800471c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046dc:	d11d      	bne.n	800471a <SPI_EndRxTransaction+0xa6>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e6:	d004      	beq.n	80046f2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f0:	d113      	bne.n	800471a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7ff ff22 	bl	8004548 <SPI_WaitFifoStateUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800470e:	f043 0220 	orr.w	r2, r3, #32
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e000      	b.n	800471c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2200      	movs	r2, #0
 8004738:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7ff ff03 	bl	8004548 <SPI_WaitFifoStateUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e027      	b.n	80047a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2200      	movs	r2, #0
 8004760:	2180      	movs	r1, #128	; 0x80
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff fe68 	bl	8004438 <SPI_WaitFlagStateUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e014      	b.n	80047a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2200      	movs	r2, #0
 8004786:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7ff fedc 	bl	8004548 <SPI_WaitFifoStateUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479a:	f043 0220 	orr.w	r2, r3, #32
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e000      	b.n	80047a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e040      	b.n	8004844 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fc fb40 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2224      	movs	r2, #36	; 0x24
 80047dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fb6a 	bl	8004ed0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f8af 	bl	8004960 <UART_SetConfig>
 8004802:	4603      	mov	r3, r0
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e01b      	b.n	8004844 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800481a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800482a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fbe9 	bl	8005014 <UART_CheckIdleState>
 8004842:	4603      	mov	r3, r0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004860:	2b20      	cmp	r3, #32
 8004862:	d178      	bne.n	8004956 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_UART_Transmit+0x24>
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e071      	b.n	8004958 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2221      	movs	r2, #33	; 0x21
 8004880:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004882:	f7fc fcbf 	bl	8001204 <HAL_GetTick>
 8004886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	88fa      	ldrh	r2, [r7, #6]
 8004894:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a0:	d108      	bne.n	80048b4 <HAL_UART_Transmit+0x68>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d104      	bne.n	80048b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	e003      	b.n	80048bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048bc:	e030      	b.n	8004920 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2200      	movs	r2, #0
 80048c6:	2180      	movs	r1, #128	; 0x80
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 fc4b 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e03c      	b.n	8004958 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10b      	bne.n	80048fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	881a      	ldrh	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048f0:	b292      	uxth	r2, r2
 80048f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	3302      	adds	r3, #2
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	e008      	b.n	800490e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	b292      	uxth	r2, r2
 8004906:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	3301      	adds	r3, #1
 800490c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1c8      	bne.n	80048be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	2200      	movs	r2, #0
 8004934:	2140      	movs	r1, #64	; 0x40
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fc14 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e005      	b.n	8004958 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e000      	b.n	8004958 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004956:	2302      	movs	r3, #2
  }
}
 8004958:	4618      	mov	r0, r3
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004964:	b08a      	sub	sp, #40	; 0x28
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	431a      	orrs	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	431a      	orrs	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	4313      	orrs	r3, r2
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4ba4      	ldr	r3, [pc, #656]	; (8004c20 <UART_SetConfig+0x2c0>)
 8004990:	4013      	ands	r3, r2
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004998:	430b      	orrs	r3, r1
 800499a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a99      	ldr	r2, [pc, #612]	; (8004c24 <UART_SetConfig+0x2c4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	4313      	orrs	r3, r2
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049dc:	430a      	orrs	r2, r1
 80049de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a90      	ldr	r2, [pc, #576]	; (8004c28 <UART_SetConfig+0x2c8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d126      	bne.n	8004a38 <UART_SetConfig+0xd8>
 80049ea:	4b90      	ldr	r3, [pc, #576]	; (8004c2c <UART_SetConfig+0x2cc>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d81b      	bhi.n	8004a30 <UART_SetConfig+0xd0>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0xa0>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a11 	.word	0x08004a11
 8004a04:	08004a21 	.word	0x08004a21
 8004a08:	08004a19 	.word	0x08004a19
 8004a0c:	08004a29 	.word	0x08004a29
 8004a10:	2301      	movs	r3, #1
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a16:	e116      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1e:	e112      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004a20:	2304      	movs	r3, #4
 8004a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a26:	e10e      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004a28:	2308      	movs	r3, #8
 8004a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2e:	e10a      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004a30:	2310      	movs	r3, #16
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a36:	e106      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a7c      	ldr	r2, [pc, #496]	; (8004c30 <UART_SetConfig+0x2d0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d138      	bne.n	8004ab4 <UART_SetConfig+0x154>
 8004a42:	4b7a      	ldr	r3, [pc, #488]	; (8004c2c <UART_SetConfig+0x2cc>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	d82d      	bhi.n	8004aac <UART_SetConfig+0x14c>
 8004a50:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <UART_SetConfig+0xf8>)
 8004a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a56:	bf00      	nop
 8004a58:	08004a8d 	.word	0x08004a8d
 8004a5c:	08004aad 	.word	0x08004aad
 8004a60:	08004aad 	.word	0x08004aad
 8004a64:	08004aad 	.word	0x08004aad
 8004a68:	08004a9d 	.word	0x08004a9d
 8004a6c:	08004aad 	.word	0x08004aad
 8004a70:	08004aad 	.word	0x08004aad
 8004a74:	08004aad 	.word	0x08004aad
 8004a78:	08004a95 	.word	0x08004a95
 8004a7c:	08004aad 	.word	0x08004aad
 8004a80:	08004aad 	.word	0x08004aad
 8004a84:	08004aad 	.word	0x08004aad
 8004a88:	08004aa5 	.word	0x08004aa5
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a92:	e0d8      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004a94:	2302      	movs	r3, #2
 8004a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9a:	e0d4      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa2:	e0d0      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aaa:	e0cc      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004aac:	2310      	movs	r3, #16
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab2:	e0c8      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a5e      	ldr	r2, [pc, #376]	; (8004c34 <UART_SetConfig+0x2d4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d125      	bne.n	8004b0a <UART_SetConfig+0x1aa>
 8004abe:	4b5b      	ldr	r3, [pc, #364]	; (8004c2c <UART_SetConfig+0x2cc>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ac8:	2b30      	cmp	r3, #48	; 0x30
 8004aca:	d016      	beq.n	8004afa <UART_SetConfig+0x19a>
 8004acc:	2b30      	cmp	r3, #48	; 0x30
 8004ace:	d818      	bhi.n	8004b02 <UART_SetConfig+0x1a2>
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d00a      	beq.n	8004aea <UART_SetConfig+0x18a>
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d814      	bhi.n	8004b02 <UART_SetConfig+0x1a2>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <UART_SetConfig+0x182>
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d008      	beq.n	8004af2 <UART_SetConfig+0x192>
 8004ae0:	e00f      	b.n	8004b02 <UART_SetConfig+0x1a2>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae8:	e0ad      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004aea:	2302      	movs	r3, #2
 8004aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af0:	e0a9      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004af2:	2304      	movs	r3, #4
 8004af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af8:	e0a5      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004afa:	2308      	movs	r3, #8
 8004afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b00:	e0a1      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004b02:	2310      	movs	r3, #16
 8004b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b08:	e09d      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a4a      	ldr	r2, [pc, #296]	; (8004c38 <UART_SetConfig+0x2d8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d125      	bne.n	8004b60 <UART_SetConfig+0x200>
 8004b14:	4b45      	ldr	r3, [pc, #276]	; (8004c2c <UART_SetConfig+0x2cc>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b20:	d016      	beq.n	8004b50 <UART_SetConfig+0x1f0>
 8004b22:	2bc0      	cmp	r3, #192	; 0xc0
 8004b24:	d818      	bhi.n	8004b58 <UART_SetConfig+0x1f8>
 8004b26:	2b80      	cmp	r3, #128	; 0x80
 8004b28:	d00a      	beq.n	8004b40 <UART_SetConfig+0x1e0>
 8004b2a:	2b80      	cmp	r3, #128	; 0x80
 8004b2c:	d814      	bhi.n	8004b58 <UART_SetConfig+0x1f8>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <UART_SetConfig+0x1d8>
 8004b32:	2b40      	cmp	r3, #64	; 0x40
 8004b34:	d008      	beq.n	8004b48 <UART_SetConfig+0x1e8>
 8004b36:	e00f      	b.n	8004b58 <UART_SetConfig+0x1f8>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3e:	e082      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004b40:	2302      	movs	r3, #2
 8004b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b46:	e07e      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4e:	e07a      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004b50:	2308      	movs	r3, #8
 8004b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b56:	e076      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5e:	e072      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a35      	ldr	r2, [pc, #212]	; (8004c3c <UART_SetConfig+0x2dc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d12a      	bne.n	8004bc0 <UART_SetConfig+0x260>
 8004b6a:	4b30      	ldr	r3, [pc, #192]	; (8004c2c <UART_SetConfig+0x2cc>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b78:	d01a      	beq.n	8004bb0 <UART_SetConfig+0x250>
 8004b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b7e:	d81b      	bhi.n	8004bb8 <UART_SetConfig+0x258>
 8004b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b84:	d00c      	beq.n	8004ba0 <UART_SetConfig+0x240>
 8004b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b8a:	d815      	bhi.n	8004bb8 <UART_SetConfig+0x258>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <UART_SetConfig+0x238>
 8004b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b94:	d008      	beq.n	8004ba8 <UART_SetConfig+0x248>
 8004b96:	e00f      	b.n	8004bb8 <UART_SetConfig+0x258>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9e:	e052      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba6:	e04e      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bae:	e04a      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004bb0:	2308      	movs	r3, #8
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb6:	e046      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bbe:	e042      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a17      	ldr	r2, [pc, #92]	; (8004c24 <UART_SetConfig+0x2c4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d13a      	bne.n	8004c40 <UART_SetConfig+0x2e0>
 8004bca:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <UART_SetConfig+0x2cc>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bd8:	d01a      	beq.n	8004c10 <UART_SetConfig+0x2b0>
 8004bda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bde:	d81b      	bhi.n	8004c18 <UART_SetConfig+0x2b8>
 8004be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be4:	d00c      	beq.n	8004c00 <UART_SetConfig+0x2a0>
 8004be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bea:	d815      	bhi.n	8004c18 <UART_SetConfig+0x2b8>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <UART_SetConfig+0x298>
 8004bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf4:	d008      	beq.n	8004c08 <UART_SetConfig+0x2a8>
 8004bf6:	e00f      	b.n	8004c18 <UART_SetConfig+0x2b8>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfe:	e022      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004c00:	2302      	movs	r3, #2
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c06:	e01e      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0e:	e01a      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004c10:	2308      	movs	r3, #8
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c16:	e016      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e012      	b.n	8004c46 <UART_SetConfig+0x2e6>
 8004c20:	efff69f3 	.word	0xefff69f3
 8004c24:	40008000 	.word	0x40008000
 8004c28:	40013800 	.word	0x40013800
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	40004400 	.word	0x40004400
 8004c34:	40004800 	.word	0x40004800
 8004c38:	40004c00 	.word	0x40004c00
 8004c3c:	40005000 	.word	0x40005000
 8004c40:	2310      	movs	r3, #16
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a9f      	ldr	r2, [pc, #636]	; (8004ec8 <UART_SetConfig+0x568>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d17a      	bne.n	8004d46 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d824      	bhi.n	8004ca2 <UART_SetConfig+0x342>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <UART_SetConfig+0x300>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004ca3 	.word	0x08004ca3
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004ca3 	.word	0x08004ca3
 8004c70:	08004c93 	.word	0x08004c93
 8004c74:	08004ca3 	.word	0x08004ca3
 8004c78:	08004ca3 	.word	0x08004ca3
 8004c7c:	08004ca3 	.word	0x08004ca3
 8004c80:	08004c9b 	.word	0x08004c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c84:	f7fe f91e 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8004c88:	61f8      	str	r0, [r7, #28]
        break;
 8004c8a:	e010      	b.n	8004cae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c8c:	4b8f      	ldr	r3, [pc, #572]	; (8004ecc <UART_SetConfig+0x56c>)
 8004c8e:	61fb      	str	r3, [r7, #28]
        break;
 8004c90:	e00d      	b.n	8004cae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c92:	f7fe f87f 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8004c96:	61f8      	str	r0, [r7, #28]
        break;
 8004c98:	e009      	b.n	8004cae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c9e:	61fb      	str	r3, [r7, #28]
        break;
 8004ca0:	e005      	b.n	8004cae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80fb 	beq.w	8004eac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d305      	bcc.n	8004cd2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d903      	bls.n	8004cda <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cd8:	e0e8      	b.n	8004eac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	461c      	mov	r4, r3
 8004ce0:	4615      	mov	r5, r2
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	022b      	lsls	r3, r5, #8
 8004cec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004cf0:	0222      	lsls	r2, r4, #8
 8004cf2:	68f9      	ldr	r1, [r7, #12]
 8004cf4:	6849      	ldr	r1, [r1, #4]
 8004cf6:	0849      	lsrs	r1, r1, #1
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	4688      	mov	r8, r1
 8004cfc:	4681      	mov	r9, r0
 8004cfe:	eb12 0a08 	adds.w	sl, r2, r8
 8004d02:	eb43 0b09 	adc.w	fp, r3, r9
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d14:	4650      	mov	r0, sl
 8004d16:	4659      	mov	r1, fp
 8004d18:	f7fb faaa 	bl	8000270 <__aeabi_uldivmod>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4613      	mov	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2a:	d308      	bcc.n	8004d3e <UART_SetConfig+0x3de>
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d32:	d204      	bcs.n	8004d3e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	60da      	str	r2, [r3, #12]
 8004d3c:	e0b6      	b.n	8004eac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d44:	e0b2      	b.n	8004eac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4e:	d15e      	bne.n	8004e0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d828      	bhi.n	8004daa <UART_SetConfig+0x44a>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0x400>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	08004dab 	.word	0x08004dab
 8004d70:	08004d9b 	.word	0x08004d9b
 8004d74:	08004dab 	.word	0x08004dab
 8004d78:	08004dab 	.word	0x08004dab
 8004d7c:	08004dab 	.word	0x08004dab
 8004d80:	08004da3 	.word	0x08004da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d84:	f7fe f89e 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8004d88:	61f8      	str	r0, [r7, #28]
        break;
 8004d8a:	e014      	b.n	8004db6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d8c:	f7fe f8b0 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8004d90:	61f8      	str	r0, [r7, #28]
        break;
 8004d92:	e010      	b.n	8004db6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d94:	4b4d      	ldr	r3, [pc, #308]	; (8004ecc <UART_SetConfig+0x56c>)
 8004d96:	61fb      	str	r3, [r7, #28]
        break;
 8004d98:	e00d      	b.n	8004db6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d9a:	f7fd fffb 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8004d9e:	61f8      	str	r0, [r7, #28]
        break;
 8004da0:	e009      	b.n	8004db6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da6:	61fb      	str	r3, [r7, #28]
        break;
 8004da8:	e005      	b.n	8004db6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004db4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d077      	beq.n	8004eac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	005a      	lsls	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	441a      	add	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b0f      	cmp	r3, #15
 8004dd6:	d916      	bls.n	8004e06 <UART_SetConfig+0x4a6>
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dde:	d212      	bcs.n	8004e06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f023 030f 	bic.w	r3, r3, #15
 8004de8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	8afb      	ldrh	r3, [r7, #22]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	8afa      	ldrh	r2, [r7, #22]
 8004e02:	60da      	str	r2, [r3, #12]
 8004e04:	e052      	b.n	8004eac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e0c:	e04e      	b.n	8004eac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d827      	bhi.n	8004e66 <UART_SetConfig+0x506>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <UART_SetConfig+0x4bc>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08004e49 	.word	0x08004e49
 8004e24:	08004e51 	.word	0x08004e51
 8004e28:	08004e67 	.word	0x08004e67
 8004e2c:	08004e57 	.word	0x08004e57
 8004e30:	08004e67 	.word	0x08004e67
 8004e34:	08004e67 	.word	0x08004e67
 8004e38:	08004e67 	.word	0x08004e67
 8004e3c:	08004e5f 	.word	0x08004e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e40:	f7fe f840 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8004e44:	61f8      	str	r0, [r7, #28]
        break;
 8004e46:	e014      	b.n	8004e72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e48:	f7fe f852 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8004e4c:	61f8      	str	r0, [r7, #28]
        break;
 8004e4e:	e010      	b.n	8004e72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e50:	4b1e      	ldr	r3, [pc, #120]	; (8004ecc <UART_SetConfig+0x56c>)
 8004e52:	61fb      	str	r3, [r7, #28]
        break;
 8004e54:	e00d      	b.n	8004e72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e56:	f7fd ff9d 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8004e5a:	61f8      	str	r0, [r7, #28]
        break;
 8004e5c:	e009      	b.n	8004e72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e62:	61fb      	str	r3, [r7, #28]
        break;
 8004e64:	e005      	b.n	8004e72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e70:	bf00      	nop
    }

    if (pclk != 0U)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d019      	beq.n	8004eac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	085a      	lsrs	r2, r3, #1
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	441a      	add	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b0f      	cmp	r3, #15
 8004e90:	d909      	bls.n	8004ea6 <UART_SetConfig+0x546>
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e98:	d205      	bcs.n	8004ea6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60da      	str	r2, [r3, #12]
 8004ea4:	e002      	b.n	8004eac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004eb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3728      	adds	r7, #40	; 0x28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40008000 	.word	0x40008000
 8004ecc:	00f42400 	.word	0x00f42400

08004ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fce:	d10a      	bne.n	8004fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b098      	sub	sp, #96	; 0x60
 8005018:	af02      	add	r7, sp, #8
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005024:	f7fc f8ee 	bl	8001204 <HAL_GetTick>
 8005028:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b08      	cmp	r3, #8
 8005036:	d12e      	bne.n	8005096 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005040:	2200      	movs	r2, #0
 8005042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f88c 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d021      	beq.n	8005096 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	653b      	str	r3, [r7, #80]	; 0x50
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005070:	647b      	str	r3, [r7, #68]	; 0x44
 8005072:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800507e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e062      	b.n	800515c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d149      	bne.n	8005138 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ac:	2200      	movs	r2, #0
 80050ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f856 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d03c      	beq.n	8005138 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	623b      	str	r3, [r7, #32]
   return(result);
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
 80050de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e6      	bne.n	80050be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3308      	adds	r3, #8
 80050f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	64bb      	str	r3, [r7, #72]	; 0x48
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3308      	adds	r3, #8
 800510e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005110:	61fa      	str	r2, [r7, #28]
 8005112:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	69b9      	ldr	r1, [r7, #24]
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	617b      	str	r3, [r7, #20]
   return(result);
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e5      	bne.n	80050f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e011      	b.n	800515c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3758      	adds	r7, #88	; 0x58
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	4613      	mov	r3, r2
 8005172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005174:	e049      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d045      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517e:	f7fc f841 	bl	8001204 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	429a      	cmp	r2, r3
 800518c:	d302      	bcc.n	8005194 <UART_WaitOnFlagUntilTimeout+0x30>
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e048      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d031      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d110      	bne.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2208      	movs	r2, #8
 80051ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f838 	bl	8005232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2208      	movs	r2, #8
 80051c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e029      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e4:	d111      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f81e 	bl	8005232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e00f      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	429a      	cmp	r2, r3
 8005226:	d0a6      	beq.n	8005176 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005232:	b480      	push	{r7}
 8005234:	b095      	sub	sp, #84	; 0x54
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800524e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005258:	643b      	str	r3, [r7, #64]	; 0x40
 800525a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800525e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e6      	bne.n	800523a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	61fb      	str	r3, [r7, #28]
   return(result);
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	64bb      	str	r3, [r7, #72]	; 0x48
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3308      	adds	r3, #8
 800528a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800528c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e5      	bne.n	800526c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d118      	bne.n	80052da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f023 0310 	bic.w	r3, r3, #16
 80052bc:	647b      	str	r3, [r7, #68]	; 0x44
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6979      	ldr	r1, [r7, #20]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	613b      	str	r3, [r7, #16]
   return(result);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e6      	bne.n	80052a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052ee:	bf00      	nop
 80052f0:	3754      	adds	r7, #84	; 0x54
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <std>:
 80052fc:	2300      	movs	r3, #0
 80052fe:	b510      	push	{r4, lr}
 8005300:	4604      	mov	r4, r0
 8005302:	e9c0 3300 	strd	r3, r3, [r0]
 8005306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800530a:	6083      	str	r3, [r0, #8]
 800530c:	8181      	strh	r1, [r0, #12]
 800530e:	6643      	str	r3, [r0, #100]	; 0x64
 8005310:	81c2      	strh	r2, [r0, #14]
 8005312:	6183      	str	r3, [r0, #24]
 8005314:	4619      	mov	r1, r3
 8005316:	2208      	movs	r2, #8
 8005318:	305c      	adds	r0, #92	; 0x5c
 800531a:	f000 f9f7 	bl	800570c <memset>
 800531e:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <std+0x58>)
 8005320:	6263      	str	r3, [r4, #36]	; 0x24
 8005322:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <std+0x5c>)
 8005324:	62a3      	str	r3, [r4, #40]	; 0x28
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <std+0x60>)
 8005328:	62e3      	str	r3, [r4, #44]	; 0x2c
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <std+0x64>)
 800532c:	6323      	str	r3, [r4, #48]	; 0x30
 800532e:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <std+0x68>)
 8005330:	6224      	str	r4, [r4, #32]
 8005332:	429c      	cmp	r4, r3
 8005334:	d006      	beq.n	8005344 <std+0x48>
 8005336:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800533a:	4294      	cmp	r4, r2
 800533c:	d002      	beq.n	8005344 <std+0x48>
 800533e:	33d0      	adds	r3, #208	; 0xd0
 8005340:	429c      	cmp	r4, r3
 8005342:	d105      	bne.n	8005350 <std+0x54>
 8005344:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800534c:	f000 ba56 	b.w	80057fc <__retarget_lock_init_recursive>
 8005350:	bd10      	pop	{r4, pc}
 8005352:	bf00      	nop
 8005354:	0800555d 	.word	0x0800555d
 8005358:	0800557f 	.word	0x0800557f
 800535c:	080055b7 	.word	0x080055b7
 8005360:	080055db 	.word	0x080055db
 8005364:	200001d0 	.word	0x200001d0

08005368 <stdio_exit_handler>:
 8005368:	4a02      	ldr	r2, [pc, #8]	; (8005374 <stdio_exit_handler+0xc>)
 800536a:	4903      	ldr	r1, [pc, #12]	; (8005378 <stdio_exit_handler+0x10>)
 800536c:	4803      	ldr	r0, [pc, #12]	; (800537c <stdio_exit_handler+0x14>)
 800536e:	f000 b869 	b.w	8005444 <_fwalk_sglue>
 8005372:	bf00      	nop
 8005374:	2000000c 	.word	0x2000000c
 8005378:	080060a9 	.word	0x080060a9
 800537c:	20000018 	.word	0x20000018

08005380 <cleanup_stdio>:
 8005380:	6841      	ldr	r1, [r0, #4]
 8005382:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <cleanup_stdio+0x34>)
 8005384:	4299      	cmp	r1, r3
 8005386:	b510      	push	{r4, lr}
 8005388:	4604      	mov	r4, r0
 800538a:	d001      	beq.n	8005390 <cleanup_stdio+0x10>
 800538c:	f000 fe8c 	bl	80060a8 <_fflush_r>
 8005390:	68a1      	ldr	r1, [r4, #8]
 8005392:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <cleanup_stdio+0x38>)
 8005394:	4299      	cmp	r1, r3
 8005396:	d002      	beq.n	800539e <cleanup_stdio+0x1e>
 8005398:	4620      	mov	r0, r4
 800539a:	f000 fe85 	bl	80060a8 <_fflush_r>
 800539e:	68e1      	ldr	r1, [r4, #12]
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <cleanup_stdio+0x3c>)
 80053a2:	4299      	cmp	r1, r3
 80053a4:	d004      	beq.n	80053b0 <cleanup_stdio+0x30>
 80053a6:	4620      	mov	r0, r4
 80053a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ac:	f000 be7c 	b.w	80060a8 <_fflush_r>
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	bf00      	nop
 80053b4:	200001d0 	.word	0x200001d0
 80053b8:	20000238 	.word	0x20000238
 80053bc:	200002a0 	.word	0x200002a0

080053c0 <global_stdio_init.part.0>:
 80053c0:	b510      	push	{r4, lr}
 80053c2:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <global_stdio_init.part.0+0x30>)
 80053c4:	4c0b      	ldr	r4, [pc, #44]	; (80053f4 <global_stdio_init.part.0+0x34>)
 80053c6:	4a0c      	ldr	r2, [pc, #48]	; (80053f8 <global_stdio_init.part.0+0x38>)
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	4620      	mov	r0, r4
 80053cc:	2200      	movs	r2, #0
 80053ce:	2104      	movs	r1, #4
 80053d0:	f7ff ff94 	bl	80052fc <std>
 80053d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80053d8:	2201      	movs	r2, #1
 80053da:	2109      	movs	r1, #9
 80053dc:	f7ff ff8e 	bl	80052fc <std>
 80053e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80053e4:	2202      	movs	r2, #2
 80053e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ea:	2112      	movs	r1, #18
 80053ec:	f7ff bf86 	b.w	80052fc <std>
 80053f0:	20000308 	.word	0x20000308
 80053f4:	200001d0 	.word	0x200001d0
 80053f8:	08005369 	.word	0x08005369

080053fc <__sfp_lock_acquire>:
 80053fc:	4801      	ldr	r0, [pc, #4]	; (8005404 <__sfp_lock_acquire+0x8>)
 80053fe:	f000 b9fe 	b.w	80057fe <__retarget_lock_acquire_recursive>
 8005402:	bf00      	nop
 8005404:	20000311 	.word	0x20000311

08005408 <__sfp_lock_release>:
 8005408:	4801      	ldr	r0, [pc, #4]	; (8005410 <__sfp_lock_release+0x8>)
 800540a:	f000 b9f9 	b.w	8005800 <__retarget_lock_release_recursive>
 800540e:	bf00      	nop
 8005410:	20000311 	.word	0x20000311

08005414 <__sinit>:
 8005414:	b510      	push	{r4, lr}
 8005416:	4604      	mov	r4, r0
 8005418:	f7ff fff0 	bl	80053fc <__sfp_lock_acquire>
 800541c:	6a23      	ldr	r3, [r4, #32]
 800541e:	b11b      	cbz	r3, 8005428 <__sinit+0x14>
 8005420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005424:	f7ff bff0 	b.w	8005408 <__sfp_lock_release>
 8005428:	4b04      	ldr	r3, [pc, #16]	; (800543c <__sinit+0x28>)
 800542a:	6223      	str	r3, [r4, #32]
 800542c:	4b04      	ldr	r3, [pc, #16]	; (8005440 <__sinit+0x2c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f5      	bne.n	8005420 <__sinit+0xc>
 8005434:	f7ff ffc4 	bl	80053c0 <global_stdio_init.part.0>
 8005438:	e7f2      	b.n	8005420 <__sinit+0xc>
 800543a:	bf00      	nop
 800543c:	08005381 	.word	0x08005381
 8005440:	20000308 	.word	0x20000308

08005444 <_fwalk_sglue>:
 8005444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005448:	4607      	mov	r7, r0
 800544a:	4688      	mov	r8, r1
 800544c:	4614      	mov	r4, r2
 800544e:	2600      	movs	r6, #0
 8005450:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005454:	f1b9 0901 	subs.w	r9, r9, #1
 8005458:	d505      	bpl.n	8005466 <_fwalk_sglue+0x22>
 800545a:	6824      	ldr	r4, [r4, #0]
 800545c:	2c00      	cmp	r4, #0
 800545e:	d1f7      	bne.n	8005450 <_fwalk_sglue+0xc>
 8005460:	4630      	mov	r0, r6
 8005462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005466:	89ab      	ldrh	r3, [r5, #12]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d907      	bls.n	800547c <_fwalk_sglue+0x38>
 800546c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005470:	3301      	adds	r3, #1
 8005472:	d003      	beq.n	800547c <_fwalk_sglue+0x38>
 8005474:	4629      	mov	r1, r5
 8005476:	4638      	mov	r0, r7
 8005478:	47c0      	blx	r8
 800547a:	4306      	orrs	r6, r0
 800547c:	3568      	adds	r5, #104	; 0x68
 800547e:	e7e9      	b.n	8005454 <_fwalk_sglue+0x10>

08005480 <iprintf>:
 8005480:	b40f      	push	{r0, r1, r2, r3}
 8005482:	b507      	push	{r0, r1, r2, lr}
 8005484:	4906      	ldr	r1, [pc, #24]	; (80054a0 <iprintf+0x20>)
 8005486:	ab04      	add	r3, sp, #16
 8005488:	6808      	ldr	r0, [r1, #0]
 800548a:	f853 2b04 	ldr.w	r2, [r3], #4
 800548e:	6881      	ldr	r1, [r0, #8]
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	f000 fad9 	bl	8005a48 <_vfiprintf_r>
 8005496:	b003      	add	sp, #12
 8005498:	f85d eb04 	ldr.w	lr, [sp], #4
 800549c:	b004      	add	sp, #16
 800549e:	4770      	bx	lr
 80054a0:	20000064 	.word	0x20000064

080054a4 <_puts_r>:
 80054a4:	6a03      	ldr	r3, [r0, #32]
 80054a6:	b570      	push	{r4, r5, r6, lr}
 80054a8:	6884      	ldr	r4, [r0, #8]
 80054aa:	4605      	mov	r5, r0
 80054ac:	460e      	mov	r6, r1
 80054ae:	b90b      	cbnz	r3, 80054b4 <_puts_r+0x10>
 80054b0:	f7ff ffb0 	bl	8005414 <__sinit>
 80054b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054b6:	07db      	lsls	r3, r3, #31
 80054b8:	d405      	bmi.n	80054c6 <_puts_r+0x22>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	0598      	lsls	r0, r3, #22
 80054be:	d402      	bmi.n	80054c6 <_puts_r+0x22>
 80054c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054c2:	f000 f99c 	bl	80057fe <__retarget_lock_acquire_recursive>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	0719      	lsls	r1, r3, #28
 80054ca:	d513      	bpl.n	80054f4 <_puts_r+0x50>
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	b18b      	cbz	r3, 80054f4 <_puts_r+0x50>
 80054d0:	3e01      	subs	r6, #1
 80054d2:	68a3      	ldr	r3, [r4, #8]
 80054d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054d8:	3b01      	subs	r3, #1
 80054da:	60a3      	str	r3, [r4, #8]
 80054dc:	b9e9      	cbnz	r1, 800551a <_puts_r+0x76>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	da2e      	bge.n	8005540 <_puts_r+0x9c>
 80054e2:	4622      	mov	r2, r4
 80054e4:	210a      	movs	r1, #10
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 f87b 	bl	80055e2 <__swbuf_r>
 80054ec:	3001      	adds	r0, #1
 80054ee:	d007      	beq.n	8005500 <_puts_r+0x5c>
 80054f0:	250a      	movs	r5, #10
 80054f2:	e007      	b.n	8005504 <_puts_r+0x60>
 80054f4:	4621      	mov	r1, r4
 80054f6:	4628      	mov	r0, r5
 80054f8:	f000 f8b0 	bl	800565c <__swsetup_r>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d0e7      	beq.n	80054d0 <_puts_r+0x2c>
 8005500:	f04f 35ff 	mov.w	r5, #4294967295
 8005504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005506:	07da      	lsls	r2, r3, #31
 8005508:	d405      	bmi.n	8005516 <_puts_r+0x72>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	059b      	lsls	r3, r3, #22
 800550e:	d402      	bmi.n	8005516 <_puts_r+0x72>
 8005510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005512:	f000 f975 	bl	8005800 <__retarget_lock_release_recursive>
 8005516:	4628      	mov	r0, r5
 8005518:	bd70      	pop	{r4, r5, r6, pc}
 800551a:	2b00      	cmp	r3, #0
 800551c:	da04      	bge.n	8005528 <_puts_r+0x84>
 800551e:	69a2      	ldr	r2, [r4, #24]
 8005520:	429a      	cmp	r2, r3
 8005522:	dc06      	bgt.n	8005532 <_puts_r+0x8e>
 8005524:	290a      	cmp	r1, #10
 8005526:	d004      	beq.n	8005532 <_puts_r+0x8e>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	6022      	str	r2, [r4, #0]
 800552e:	7019      	strb	r1, [r3, #0]
 8005530:	e7cf      	b.n	80054d2 <_puts_r+0x2e>
 8005532:	4622      	mov	r2, r4
 8005534:	4628      	mov	r0, r5
 8005536:	f000 f854 	bl	80055e2 <__swbuf_r>
 800553a:	3001      	adds	r0, #1
 800553c:	d1c9      	bne.n	80054d2 <_puts_r+0x2e>
 800553e:	e7df      	b.n	8005500 <_puts_r+0x5c>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	250a      	movs	r5, #10
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	6022      	str	r2, [r4, #0]
 8005548:	701d      	strb	r5, [r3, #0]
 800554a:	e7db      	b.n	8005504 <_puts_r+0x60>

0800554c <puts>:
 800554c:	4b02      	ldr	r3, [pc, #8]	; (8005558 <puts+0xc>)
 800554e:	4601      	mov	r1, r0
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	f7ff bfa7 	b.w	80054a4 <_puts_r>
 8005556:	bf00      	nop
 8005558:	20000064 	.word	0x20000064

0800555c <__sread>:
 800555c:	b510      	push	{r4, lr}
 800555e:	460c      	mov	r4, r1
 8005560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005564:	f000 f8fc 	bl	8005760 <_read_r>
 8005568:	2800      	cmp	r0, #0
 800556a:	bfab      	itete	ge
 800556c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800556e:	89a3      	ldrhlt	r3, [r4, #12]
 8005570:	181b      	addge	r3, r3, r0
 8005572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005576:	bfac      	ite	ge
 8005578:	6563      	strge	r3, [r4, #84]	; 0x54
 800557a:	81a3      	strhlt	r3, [r4, #12]
 800557c:	bd10      	pop	{r4, pc}

0800557e <__swrite>:
 800557e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005582:	461f      	mov	r7, r3
 8005584:	898b      	ldrh	r3, [r1, #12]
 8005586:	05db      	lsls	r3, r3, #23
 8005588:	4605      	mov	r5, r0
 800558a:	460c      	mov	r4, r1
 800558c:	4616      	mov	r6, r2
 800558e:	d505      	bpl.n	800559c <__swrite+0x1e>
 8005590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005594:	2302      	movs	r3, #2
 8005596:	2200      	movs	r2, #0
 8005598:	f000 f8d0 	bl	800573c <_lseek_r>
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	4632      	mov	r2, r6
 80055aa:	463b      	mov	r3, r7
 80055ac:	4628      	mov	r0, r5
 80055ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055b2:	f000 b8e7 	b.w	8005784 <_write_r>

080055b6 <__sseek>:
 80055b6:	b510      	push	{r4, lr}
 80055b8:	460c      	mov	r4, r1
 80055ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055be:	f000 f8bd 	bl	800573c <_lseek_r>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	89a3      	ldrh	r3, [r4, #12]
 80055c6:	bf15      	itete	ne
 80055c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80055ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055d2:	81a3      	strheq	r3, [r4, #12]
 80055d4:	bf18      	it	ne
 80055d6:	81a3      	strhne	r3, [r4, #12]
 80055d8:	bd10      	pop	{r4, pc}

080055da <__sclose>:
 80055da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055de:	f000 b89d 	b.w	800571c <_close_r>

080055e2 <__swbuf_r>:
 80055e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e4:	460e      	mov	r6, r1
 80055e6:	4614      	mov	r4, r2
 80055e8:	4605      	mov	r5, r0
 80055ea:	b118      	cbz	r0, 80055f4 <__swbuf_r+0x12>
 80055ec:	6a03      	ldr	r3, [r0, #32]
 80055ee:	b90b      	cbnz	r3, 80055f4 <__swbuf_r+0x12>
 80055f0:	f7ff ff10 	bl	8005414 <__sinit>
 80055f4:	69a3      	ldr	r3, [r4, #24]
 80055f6:	60a3      	str	r3, [r4, #8]
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	071a      	lsls	r2, r3, #28
 80055fc:	d525      	bpl.n	800564a <__swbuf_r+0x68>
 80055fe:	6923      	ldr	r3, [r4, #16]
 8005600:	b31b      	cbz	r3, 800564a <__swbuf_r+0x68>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	6922      	ldr	r2, [r4, #16]
 8005606:	1a98      	subs	r0, r3, r2
 8005608:	6963      	ldr	r3, [r4, #20]
 800560a:	b2f6      	uxtb	r6, r6
 800560c:	4283      	cmp	r3, r0
 800560e:	4637      	mov	r7, r6
 8005610:	dc04      	bgt.n	800561c <__swbuf_r+0x3a>
 8005612:	4621      	mov	r1, r4
 8005614:	4628      	mov	r0, r5
 8005616:	f000 fd47 	bl	80060a8 <_fflush_r>
 800561a:	b9e0      	cbnz	r0, 8005656 <__swbuf_r+0x74>
 800561c:	68a3      	ldr	r3, [r4, #8]
 800561e:	3b01      	subs	r3, #1
 8005620:	60a3      	str	r3, [r4, #8]
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	6022      	str	r2, [r4, #0]
 8005628:	701e      	strb	r6, [r3, #0]
 800562a:	6962      	ldr	r2, [r4, #20]
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	429a      	cmp	r2, r3
 8005630:	d004      	beq.n	800563c <__swbuf_r+0x5a>
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	07db      	lsls	r3, r3, #31
 8005636:	d506      	bpl.n	8005646 <__swbuf_r+0x64>
 8005638:	2e0a      	cmp	r6, #10
 800563a:	d104      	bne.n	8005646 <__swbuf_r+0x64>
 800563c:	4621      	mov	r1, r4
 800563e:	4628      	mov	r0, r5
 8005640:	f000 fd32 	bl	80060a8 <_fflush_r>
 8005644:	b938      	cbnz	r0, 8005656 <__swbuf_r+0x74>
 8005646:	4638      	mov	r0, r7
 8005648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564a:	4621      	mov	r1, r4
 800564c:	4628      	mov	r0, r5
 800564e:	f000 f805 	bl	800565c <__swsetup_r>
 8005652:	2800      	cmp	r0, #0
 8005654:	d0d5      	beq.n	8005602 <__swbuf_r+0x20>
 8005656:	f04f 37ff 	mov.w	r7, #4294967295
 800565a:	e7f4      	b.n	8005646 <__swbuf_r+0x64>

0800565c <__swsetup_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4b2a      	ldr	r3, [pc, #168]	; (8005708 <__swsetup_r+0xac>)
 8005660:	4605      	mov	r5, r0
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	460c      	mov	r4, r1
 8005666:	b118      	cbz	r0, 8005670 <__swsetup_r+0x14>
 8005668:	6a03      	ldr	r3, [r0, #32]
 800566a:	b90b      	cbnz	r3, 8005670 <__swsetup_r+0x14>
 800566c:	f7ff fed2 	bl	8005414 <__sinit>
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005676:	0718      	lsls	r0, r3, #28
 8005678:	d422      	bmi.n	80056c0 <__swsetup_r+0x64>
 800567a:	06d9      	lsls	r1, r3, #27
 800567c:	d407      	bmi.n	800568e <__swsetup_r+0x32>
 800567e:	2309      	movs	r3, #9
 8005680:	602b      	str	r3, [r5, #0]
 8005682:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	e034      	b.n	80056f8 <__swsetup_r+0x9c>
 800568e:	0758      	lsls	r0, r3, #29
 8005690:	d512      	bpl.n	80056b8 <__swsetup_r+0x5c>
 8005692:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005694:	b141      	cbz	r1, 80056a8 <__swsetup_r+0x4c>
 8005696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800569a:	4299      	cmp	r1, r3
 800569c:	d002      	beq.n	80056a4 <__swsetup_r+0x48>
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 f8b0 	bl	8005804 <_free_r>
 80056a4:	2300      	movs	r3, #0
 80056a6:	6363      	str	r3, [r4, #52]	; 0x34
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	2300      	movs	r3, #0
 80056b2:	6063      	str	r3, [r4, #4]
 80056b4:	6923      	ldr	r3, [r4, #16]
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	f043 0308 	orr.w	r3, r3, #8
 80056be:	81a3      	strh	r3, [r4, #12]
 80056c0:	6923      	ldr	r3, [r4, #16]
 80056c2:	b94b      	cbnz	r3, 80056d8 <__swsetup_r+0x7c>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ce:	d003      	beq.n	80056d8 <__swsetup_r+0x7c>
 80056d0:	4621      	mov	r1, r4
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 fd36 	bl	8006144 <__smakebuf_r>
 80056d8:	89a0      	ldrh	r0, [r4, #12]
 80056da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056de:	f010 0301 	ands.w	r3, r0, #1
 80056e2:	d00a      	beq.n	80056fa <__swsetup_r+0x9e>
 80056e4:	2300      	movs	r3, #0
 80056e6:	60a3      	str	r3, [r4, #8]
 80056e8:	6963      	ldr	r3, [r4, #20]
 80056ea:	425b      	negs	r3, r3
 80056ec:	61a3      	str	r3, [r4, #24]
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	b943      	cbnz	r3, 8005704 <__swsetup_r+0xa8>
 80056f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056f6:	d1c4      	bne.n	8005682 <__swsetup_r+0x26>
 80056f8:	bd38      	pop	{r3, r4, r5, pc}
 80056fa:	0781      	lsls	r1, r0, #30
 80056fc:	bf58      	it	pl
 80056fe:	6963      	ldrpl	r3, [r4, #20]
 8005700:	60a3      	str	r3, [r4, #8]
 8005702:	e7f4      	b.n	80056ee <__swsetup_r+0x92>
 8005704:	2000      	movs	r0, #0
 8005706:	e7f7      	b.n	80056f8 <__swsetup_r+0x9c>
 8005708:	20000064 	.word	0x20000064

0800570c <memset>:
 800570c:	4402      	add	r2, r0
 800570e:	4603      	mov	r3, r0
 8005710:	4293      	cmp	r3, r2
 8005712:	d100      	bne.n	8005716 <memset+0xa>
 8005714:	4770      	bx	lr
 8005716:	f803 1b01 	strb.w	r1, [r3], #1
 800571a:	e7f9      	b.n	8005710 <memset+0x4>

0800571c <_close_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4d06      	ldr	r5, [pc, #24]	; (8005738 <_close_r+0x1c>)
 8005720:	2300      	movs	r3, #0
 8005722:	4604      	mov	r4, r0
 8005724:	4608      	mov	r0, r1
 8005726:	602b      	str	r3, [r5, #0]
 8005728:	f7fb fc55 	bl	8000fd6 <_close>
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	d102      	bne.n	8005736 <_close_r+0x1a>
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	b103      	cbz	r3, 8005736 <_close_r+0x1a>
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	bd38      	pop	{r3, r4, r5, pc}
 8005738:	2000030c 	.word	0x2000030c

0800573c <_lseek_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4d07      	ldr	r5, [pc, #28]	; (800575c <_lseek_r+0x20>)
 8005740:	4604      	mov	r4, r0
 8005742:	4608      	mov	r0, r1
 8005744:	4611      	mov	r1, r2
 8005746:	2200      	movs	r2, #0
 8005748:	602a      	str	r2, [r5, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	f7fb fc6a 	bl	8001024 <_lseek>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	d102      	bne.n	800575a <_lseek_r+0x1e>
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	b103      	cbz	r3, 800575a <_lseek_r+0x1e>
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	bd38      	pop	{r3, r4, r5, pc}
 800575c:	2000030c 	.word	0x2000030c

08005760 <_read_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4d07      	ldr	r5, [pc, #28]	; (8005780 <_read_r+0x20>)
 8005764:	4604      	mov	r4, r0
 8005766:	4608      	mov	r0, r1
 8005768:	4611      	mov	r1, r2
 800576a:	2200      	movs	r2, #0
 800576c:	602a      	str	r2, [r5, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	f7fb fbf8 	bl	8000f64 <_read>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d102      	bne.n	800577e <_read_r+0x1e>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b103      	cbz	r3, 800577e <_read_r+0x1e>
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	2000030c 	.word	0x2000030c

08005784 <_write_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4d07      	ldr	r5, [pc, #28]	; (80057a4 <_write_r+0x20>)
 8005788:	4604      	mov	r4, r0
 800578a:	4608      	mov	r0, r1
 800578c:	4611      	mov	r1, r2
 800578e:	2200      	movs	r2, #0
 8005790:	602a      	str	r2, [r5, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	f7fb fc03 	bl	8000f9e <_write>
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	d102      	bne.n	80057a2 <_write_r+0x1e>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	b103      	cbz	r3, 80057a2 <_write_r+0x1e>
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	2000030c 	.word	0x2000030c

080057a8 <__errno>:
 80057a8:	4b01      	ldr	r3, [pc, #4]	; (80057b0 <__errno+0x8>)
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000064 	.word	0x20000064

080057b4 <__libc_init_array>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	4d0d      	ldr	r5, [pc, #52]	; (80057ec <__libc_init_array+0x38>)
 80057b8:	4c0d      	ldr	r4, [pc, #52]	; (80057f0 <__libc_init_array+0x3c>)
 80057ba:	1b64      	subs	r4, r4, r5
 80057bc:	10a4      	asrs	r4, r4, #2
 80057be:	2600      	movs	r6, #0
 80057c0:	42a6      	cmp	r6, r4
 80057c2:	d109      	bne.n	80057d8 <__libc_init_array+0x24>
 80057c4:	4d0b      	ldr	r5, [pc, #44]	; (80057f4 <__libc_init_array+0x40>)
 80057c6:	4c0c      	ldr	r4, [pc, #48]	; (80057f8 <__libc_init_array+0x44>)
 80057c8:	f000 fd2a 	bl	8006220 <_init>
 80057cc:	1b64      	subs	r4, r4, r5
 80057ce:	10a4      	asrs	r4, r4, #2
 80057d0:	2600      	movs	r6, #0
 80057d2:	42a6      	cmp	r6, r4
 80057d4:	d105      	bne.n	80057e2 <__libc_init_array+0x2e>
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
 80057d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057dc:	4798      	blx	r3
 80057de:	3601      	adds	r6, #1
 80057e0:	e7ee      	b.n	80057c0 <__libc_init_array+0xc>
 80057e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e6:	4798      	blx	r3
 80057e8:	3601      	adds	r6, #1
 80057ea:	e7f2      	b.n	80057d2 <__libc_init_array+0x1e>
 80057ec:	080064ac 	.word	0x080064ac
 80057f0:	080064ac 	.word	0x080064ac
 80057f4:	080064ac 	.word	0x080064ac
 80057f8:	080064b0 	.word	0x080064b0

080057fc <__retarget_lock_init_recursive>:
 80057fc:	4770      	bx	lr

080057fe <__retarget_lock_acquire_recursive>:
 80057fe:	4770      	bx	lr

08005800 <__retarget_lock_release_recursive>:
 8005800:	4770      	bx	lr
	...

08005804 <_free_r>:
 8005804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005806:	2900      	cmp	r1, #0
 8005808:	d044      	beq.n	8005894 <_free_r+0x90>
 800580a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800580e:	9001      	str	r0, [sp, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	f1a1 0404 	sub.w	r4, r1, #4
 8005816:	bfb8      	it	lt
 8005818:	18e4      	addlt	r4, r4, r3
 800581a:	f000 f8df 	bl	80059dc <__malloc_lock>
 800581e:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <_free_r+0x94>)
 8005820:	9801      	ldr	r0, [sp, #4]
 8005822:	6813      	ldr	r3, [r2, #0]
 8005824:	b933      	cbnz	r3, 8005834 <_free_r+0x30>
 8005826:	6063      	str	r3, [r4, #4]
 8005828:	6014      	str	r4, [r2, #0]
 800582a:	b003      	add	sp, #12
 800582c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005830:	f000 b8da 	b.w	80059e8 <__malloc_unlock>
 8005834:	42a3      	cmp	r3, r4
 8005836:	d908      	bls.n	800584a <_free_r+0x46>
 8005838:	6825      	ldr	r5, [r4, #0]
 800583a:	1961      	adds	r1, r4, r5
 800583c:	428b      	cmp	r3, r1
 800583e:	bf01      	itttt	eq
 8005840:	6819      	ldreq	r1, [r3, #0]
 8005842:	685b      	ldreq	r3, [r3, #4]
 8005844:	1949      	addeq	r1, r1, r5
 8005846:	6021      	streq	r1, [r4, #0]
 8005848:	e7ed      	b.n	8005826 <_free_r+0x22>
 800584a:	461a      	mov	r2, r3
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	b10b      	cbz	r3, 8005854 <_free_r+0x50>
 8005850:	42a3      	cmp	r3, r4
 8005852:	d9fa      	bls.n	800584a <_free_r+0x46>
 8005854:	6811      	ldr	r1, [r2, #0]
 8005856:	1855      	adds	r5, r2, r1
 8005858:	42a5      	cmp	r5, r4
 800585a:	d10b      	bne.n	8005874 <_free_r+0x70>
 800585c:	6824      	ldr	r4, [r4, #0]
 800585e:	4421      	add	r1, r4
 8005860:	1854      	adds	r4, r2, r1
 8005862:	42a3      	cmp	r3, r4
 8005864:	6011      	str	r1, [r2, #0]
 8005866:	d1e0      	bne.n	800582a <_free_r+0x26>
 8005868:	681c      	ldr	r4, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	6053      	str	r3, [r2, #4]
 800586e:	440c      	add	r4, r1
 8005870:	6014      	str	r4, [r2, #0]
 8005872:	e7da      	b.n	800582a <_free_r+0x26>
 8005874:	d902      	bls.n	800587c <_free_r+0x78>
 8005876:	230c      	movs	r3, #12
 8005878:	6003      	str	r3, [r0, #0]
 800587a:	e7d6      	b.n	800582a <_free_r+0x26>
 800587c:	6825      	ldr	r5, [r4, #0]
 800587e:	1961      	adds	r1, r4, r5
 8005880:	428b      	cmp	r3, r1
 8005882:	bf04      	itt	eq
 8005884:	6819      	ldreq	r1, [r3, #0]
 8005886:	685b      	ldreq	r3, [r3, #4]
 8005888:	6063      	str	r3, [r4, #4]
 800588a:	bf04      	itt	eq
 800588c:	1949      	addeq	r1, r1, r5
 800588e:	6021      	streq	r1, [r4, #0]
 8005890:	6054      	str	r4, [r2, #4]
 8005892:	e7ca      	b.n	800582a <_free_r+0x26>
 8005894:	b003      	add	sp, #12
 8005896:	bd30      	pop	{r4, r5, pc}
 8005898:	20000314 	.word	0x20000314

0800589c <sbrk_aligned>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	4e0e      	ldr	r6, [pc, #56]	; (80058d8 <sbrk_aligned+0x3c>)
 80058a0:	460c      	mov	r4, r1
 80058a2:	6831      	ldr	r1, [r6, #0]
 80058a4:	4605      	mov	r5, r0
 80058a6:	b911      	cbnz	r1, 80058ae <sbrk_aligned+0x12>
 80058a8:	f000 fcaa 	bl	8006200 <_sbrk_r>
 80058ac:	6030      	str	r0, [r6, #0]
 80058ae:	4621      	mov	r1, r4
 80058b0:	4628      	mov	r0, r5
 80058b2:	f000 fca5 	bl	8006200 <_sbrk_r>
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	d00a      	beq.n	80058d0 <sbrk_aligned+0x34>
 80058ba:	1cc4      	adds	r4, r0, #3
 80058bc:	f024 0403 	bic.w	r4, r4, #3
 80058c0:	42a0      	cmp	r0, r4
 80058c2:	d007      	beq.n	80058d4 <sbrk_aligned+0x38>
 80058c4:	1a21      	subs	r1, r4, r0
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 fc9a 	bl	8006200 <_sbrk_r>
 80058cc:	3001      	adds	r0, #1
 80058ce:	d101      	bne.n	80058d4 <sbrk_aligned+0x38>
 80058d0:	f04f 34ff 	mov.w	r4, #4294967295
 80058d4:	4620      	mov	r0, r4
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	20000318 	.word	0x20000318

080058dc <_malloc_r>:
 80058dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e0:	1ccd      	adds	r5, r1, #3
 80058e2:	f025 0503 	bic.w	r5, r5, #3
 80058e6:	3508      	adds	r5, #8
 80058e8:	2d0c      	cmp	r5, #12
 80058ea:	bf38      	it	cc
 80058ec:	250c      	movcc	r5, #12
 80058ee:	2d00      	cmp	r5, #0
 80058f0:	4607      	mov	r7, r0
 80058f2:	db01      	blt.n	80058f8 <_malloc_r+0x1c>
 80058f4:	42a9      	cmp	r1, r5
 80058f6:	d905      	bls.n	8005904 <_malloc_r+0x28>
 80058f8:	230c      	movs	r3, #12
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	2600      	movs	r6, #0
 80058fe:	4630      	mov	r0, r6
 8005900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005904:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059d8 <_malloc_r+0xfc>
 8005908:	f000 f868 	bl	80059dc <__malloc_lock>
 800590c:	f8d8 3000 	ldr.w	r3, [r8]
 8005910:	461c      	mov	r4, r3
 8005912:	bb5c      	cbnz	r4, 800596c <_malloc_r+0x90>
 8005914:	4629      	mov	r1, r5
 8005916:	4638      	mov	r0, r7
 8005918:	f7ff ffc0 	bl	800589c <sbrk_aligned>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	4604      	mov	r4, r0
 8005920:	d155      	bne.n	80059ce <_malloc_r+0xf2>
 8005922:	f8d8 4000 	ldr.w	r4, [r8]
 8005926:	4626      	mov	r6, r4
 8005928:	2e00      	cmp	r6, #0
 800592a:	d145      	bne.n	80059b8 <_malloc_r+0xdc>
 800592c:	2c00      	cmp	r4, #0
 800592e:	d048      	beq.n	80059c2 <_malloc_r+0xe6>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	4631      	mov	r1, r6
 8005934:	4638      	mov	r0, r7
 8005936:	eb04 0903 	add.w	r9, r4, r3
 800593a:	f000 fc61 	bl	8006200 <_sbrk_r>
 800593e:	4581      	cmp	r9, r0
 8005940:	d13f      	bne.n	80059c2 <_malloc_r+0xe6>
 8005942:	6821      	ldr	r1, [r4, #0]
 8005944:	1a6d      	subs	r5, r5, r1
 8005946:	4629      	mov	r1, r5
 8005948:	4638      	mov	r0, r7
 800594a:	f7ff ffa7 	bl	800589c <sbrk_aligned>
 800594e:	3001      	adds	r0, #1
 8005950:	d037      	beq.n	80059c2 <_malloc_r+0xe6>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	442b      	add	r3, r5
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	f8d8 3000 	ldr.w	r3, [r8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d038      	beq.n	80059d2 <_malloc_r+0xf6>
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	42a2      	cmp	r2, r4
 8005964:	d12b      	bne.n	80059be <_malloc_r+0xe2>
 8005966:	2200      	movs	r2, #0
 8005968:	605a      	str	r2, [r3, #4]
 800596a:	e00f      	b.n	800598c <_malloc_r+0xb0>
 800596c:	6822      	ldr	r2, [r4, #0]
 800596e:	1b52      	subs	r2, r2, r5
 8005970:	d41f      	bmi.n	80059b2 <_malloc_r+0xd6>
 8005972:	2a0b      	cmp	r2, #11
 8005974:	d917      	bls.n	80059a6 <_malloc_r+0xca>
 8005976:	1961      	adds	r1, r4, r5
 8005978:	42a3      	cmp	r3, r4
 800597a:	6025      	str	r5, [r4, #0]
 800597c:	bf18      	it	ne
 800597e:	6059      	strne	r1, [r3, #4]
 8005980:	6863      	ldr	r3, [r4, #4]
 8005982:	bf08      	it	eq
 8005984:	f8c8 1000 	streq.w	r1, [r8]
 8005988:	5162      	str	r2, [r4, r5]
 800598a:	604b      	str	r3, [r1, #4]
 800598c:	4638      	mov	r0, r7
 800598e:	f104 060b 	add.w	r6, r4, #11
 8005992:	f000 f829 	bl	80059e8 <__malloc_unlock>
 8005996:	f026 0607 	bic.w	r6, r6, #7
 800599a:	1d23      	adds	r3, r4, #4
 800599c:	1af2      	subs	r2, r6, r3
 800599e:	d0ae      	beq.n	80058fe <_malloc_r+0x22>
 80059a0:	1b9b      	subs	r3, r3, r6
 80059a2:	50a3      	str	r3, [r4, r2]
 80059a4:	e7ab      	b.n	80058fe <_malloc_r+0x22>
 80059a6:	42a3      	cmp	r3, r4
 80059a8:	6862      	ldr	r2, [r4, #4]
 80059aa:	d1dd      	bne.n	8005968 <_malloc_r+0x8c>
 80059ac:	f8c8 2000 	str.w	r2, [r8]
 80059b0:	e7ec      	b.n	800598c <_malloc_r+0xb0>
 80059b2:	4623      	mov	r3, r4
 80059b4:	6864      	ldr	r4, [r4, #4]
 80059b6:	e7ac      	b.n	8005912 <_malloc_r+0x36>
 80059b8:	4634      	mov	r4, r6
 80059ba:	6876      	ldr	r6, [r6, #4]
 80059bc:	e7b4      	b.n	8005928 <_malloc_r+0x4c>
 80059be:	4613      	mov	r3, r2
 80059c0:	e7cc      	b.n	800595c <_malloc_r+0x80>
 80059c2:	230c      	movs	r3, #12
 80059c4:	603b      	str	r3, [r7, #0]
 80059c6:	4638      	mov	r0, r7
 80059c8:	f000 f80e 	bl	80059e8 <__malloc_unlock>
 80059cc:	e797      	b.n	80058fe <_malloc_r+0x22>
 80059ce:	6025      	str	r5, [r4, #0]
 80059d0:	e7dc      	b.n	800598c <_malloc_r+0xb0>
 80059d2:	605b      	str	r3, [r3, #4]
 80059d4:	deff      	udf	#255	; 0xff
 80059d6:	bf00      	nop
 80059d8:	20000314 	.word	0x20000314

080059dc <__malloc_lock>:
 80059dc:	4801      	ldr	r0, [pc, #4]	; (80059e4 <__malloc_lock+0x8>)
 80059de:	f7ff bf0e 	b.w	80057fe <__retarget_lock_acquire_recursive>
 80059e2:	bf00      	nop
 80059e4:	20000310 	.word	0x20000310

080059e8 <__malloc_unlock>:
 80059e8:	4801      	ldr	r0, [pc, #4]	; (80059f0 <__malloc_unlock+0x8>)
 80059ea:	f7ff bf09 	b.w	8005800 <__retarget_lock_release_recursive>
 80059ee:	bf00      	nop
 80059f0:	20000310 	.word	0x20000310

080059f4 <__sfputc_r>:
 80059f4:	6893      	ldr	r3, [r2, #8]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	b410      	push	{r4}
 80059fc:	6093      	str	r3, [r2, #8]
 80059fe:	da08      	bge.n	8005a12 <__sfputc_r+0x1e>
 8005a00:	6994      	ldr	r4, [r2, #24]
 8005a02:	42a3      	cmp	r3, r4
 8005a04:	db01      	blt.n	8005a0a <__sfputc_r+0x16>
 8005a06:	290a      	cmp	r1, #10
 8005a08:	d103      	bne.n	8005a12 <__sfputc_r+0x1e>
 8005a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a0e:	f7ff bde8 	b.w	80055e2 <__swbuf_r>
 8005a12:	6813      	ldr	r3, [r2, #0]
 8005a14:	1c58      	adds	r0, r3, #1
 8005a16:	6010      	str	r0, [r2, #0]
 8005a18:	7019      	strb	r1, [r3, #0]
 8005a1a:	4608      	mov	r0, r1
 8005a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <__sfputs_r>:
 8005a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a24:	4606      	mov	r6, r0
 8005a26:	460f      	mov	r7, r1
 8005a28:	4614      	mov	r4, r2
 8005a2a:	18d5      	adds	r5, r2, r3
 8005a2c:	42ac      	cmp	r4, r5
 8005a2e:	d101      	bne.n	8005a34 <__sfputs_r+0x12>
 8005a30:	2000      	movs	r0, #0
 8005a32:	e007      	b.n	8005a44 <__sfputs_r+0x22>
 8005a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a38:	463a      	mov	r2, r7
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f7ff ffda 	bl	80059f4 <__sfputc_r>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d1f3      	bne.n	8005a2c <__sfputs_r+0xa>
 8005a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a48 <_vfiprintf_r>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	460d      	mov	r5, r1
 8005a4e:	b09d      	sub	sp, #116	; 0x74
 8005a50:	4614      	mov	r4, r2
 8005a52:	4698      	mov	r8, r3
 8005a54:	4606      	mov	r6, r0
 8005a56:	b118      	cbz	r0, 8005a60 <_vfiprintf_r+0x18>
 8005a58:	6a03      	ldr	r3, [r0, #32]
 8005a5a:	b90b      	cbnz	r3, 8005a60 <_vfiprintf_r+0x18>
 8005a5c:	f7ff fcda 	bl	8005414 <__sinit>
 8005a60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a62:	07d9      	lsls	r1, r3, #31
 8005a64:	d405      	bmi.n	8005a72 <_vfiprintf_r+0x2a>
 8005a66:	89ab      	ldrh	r3, [r5, #12]
 8005a68:	059a      	lsls	r2, r3, #22
 8005a6a:	d402      	bmi.n	8005a72 <_vfiprintf_r+0x2a>
 8005a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a6e:	f7ff fec6 	bl	80057fe <__retarget_lock_acquire_recursive>
 8005a72:	89ab      	ldrh	r3, [r5, #12]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	d501      	bpl.n	8005a7c <_vfiprintf_r+0x34>
 8005a78:	692b      	ldr	r3, [r5, #16]
 8005a7a:	b99b      	cbnz	r3, 8005aa4 <_vfiprintf_r+0x5c>
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7ff fdec 	bl	800565c <__swsetup_r>
 8005a84:	b170      	cbz	r0, 8005aa4 <_vfiprintf_r+0x5c>
 8005a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a88:	07dc      	lsls	r4, r3, #31
 8005a8a:	d504      	bpl.n	8005a96 <_vfiprintf_r+0x4e>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	b01d      	add	sp, #116	; 0x74
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a96:	89ab      	ldrh	r3, [r5, #12]
 8005a98:	0598      	lsls	r0, r3, #22
 8005a9a:	d4f7      	bmi.n	8005a8c <_vfiprintf_r+0x44>
 8005a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a9e:	f7ff feaf 	bl	8005800 <__retarget_lock_release_recursive>
 8005aa2:	e7f3      	b.n	8005a8c <_vfiprintf_r+0x44>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa8:	2320      	movs	r3, #32
 8005aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ab2:	2330      	movs	r3, #48	; 0x30
 8005ab4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c68 <_vfiprintf_r+0x220>
 8005ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005abc:	f04f 0901 	mov.w	r9, #1
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	469a      	mov	sl, r3
 8005ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac8:	b10a      	cbz	r2, 8005ace <_vfiprintf_r+0x86>
 8005aca:	2a25      	cmp	r2, #37	; 0x25
 8005acc:	d1f9      	bne.n	8005ac2 <_vfiprintf_r+0x7a>
 8005ace:	ebba 0b04 	subs.w	fp, sl, r4
 8005ad2:	d00b      	beq.n	8005aec <_vfiprintf_r+0xa4>
 8005ad4:	465b      	mov	r3, fp
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	4630      	mov	r0, r6
 8005adc:	f7ff ffa1 	bl	8005a22 <__sfputs_r>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f000 80a9 	beq.w	8005c38 <_vfiprintf_r+0x1f0>
 8005ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae8:	445a      	add	r2, fp
 8005aea:	9209      	str	r2, [sp, #36]	; 0x24
 8005aec:	f89a 3000 	ldrb.w	r3, [sl]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80a1 	beq.w	8005c38 <_vfiprintf_r+0x1f0>
 8005af6:	2300      	movs	r3, #0
 8005af8:	f04f 32ff 	mov.w	r2, #4294967295
 8005afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b00:	f10a 0a01 	add.w	sl, sl, #1
 8005b04:	9304      	str	r3, [sp, #16]
 8005b06:	9307      	str	r3, [sp, #28]
 8005b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8005b0e:	4654      	mov	r4, sl
 8005b10:	2205      	movs	r2, #5
 8005b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b16:	4854      	ldr	r0, [pc, #336]	; (8005c68 <_vfiprintf_r+0x220>)
 8005b18:	f7fa fb5a 	bl	80001d0 <memchr>
 8005b1c:	9a04      	ldr	r2, [sp, #16]
 8005b1e:	b9d8      	cbnz	r0, 8005b58 <_vfiprintf_r+0x110>
 8005b20:	06d1      	lsls	r1, r2, #27
 8005b22:	bf44      	itt	mi
 8005b24:	2320      	movmi	r3, #32
 8005b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b2a:	0713      	lsls	r3, r2, #28
 8005b2c:	bf44      	itt	mi
 8005b2e:	232b      	movmi	r3, #43	; 0x2b
 8005b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b34:	f89a 3000 	ldrb.w	r3, [sl]
 8005b38:	2b2a      	cmp	r3, #42	; 0x2a
 8005b3a:	d015      	beq.n	8005b68 <_vfiprintf_r+0x120>
 8005b3c:	9a07      	ldr	r2, [sp, #28]
 8005b3e:	4654      	mov	r4, sl
 8005b40:	2000      	movs	r0, #0
 8005b42:	f04f 0c0a 	mov.w	ip, #10
 8005b46:	4621      	mov	r1, r4
 8005b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b4c:	3b30      	subs	r3, #48	; 0x30
 8005b4e:	2b09      	cmp	r3, #9
 8005b50:	d94d      	bls.n	8005bee <_vfiprintf_r+0x1a6>
 8005b52:	b1b0      	cbz	r0, 8005b82 <_vfiprintf_r+0x13a>
 8005b54:	9207      	str	r2, [sp, #28]
 8005b56:	e014      	b.n	8005b82 <_vfiprintf_r+0x13a>
 8005b58:	eba0 0308 	sub.w	r3, r0, r8
 8005b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b60:	4313      	orrs	r3, r2
 8005b62:	9304      	str	r3, [sp, #16]
 8005b64:	46a2      	mov	sl, r4
 8005b66:	e7d2      	b.n	8005b0e <_vfiprintf_r+0xc6>
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	1d19      	adds	r1, r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	9103      	str	r1, [sp, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bfbb      	ittet	lt
 8005b74:	425b      	neglt	r3, r3
 8005b76:	f042 0202 	orrlt.w	r2, r2, #2
 8005b7a:	9307      	strge	r3, [sp, #28]
 8005b7c:	9307      	strlt	r3, [sp, #28]
 8005b7e:	bfb8      	it	lt
 8005b80:	9204      	strlt	r2, [sp, #16]
 8005b82:	7823      	ldrb	r3, [r4, #0]
 8005b84:	2b2e      	cmp	r3, #46	; 0x2e
 8005b86:	d10c      	bne.n	8005ba2 <_vfiprintf_r+0x15a>
 8005b88:	7863      	ldrb	r3, [r4, #1]
 8005b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8c:	d134      	bne.n	8005bf8 <_vfiprintf_r+0x1b0>
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	1d1a      	adds	r2, r3, #4
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	9203      	str	r2, [sp, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	bfb8      	it	lt
 8005b9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b9e:	3402      	adds	r4, #2
 8005ba0:	9305      	str	r3, [sp, #20]
 8005ba2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c78 <_vfiprintf_r+0x230>
 8005ba6:	7821      	ldrb	r1, [r4, #0]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	4650      	mov	r0, sl
 8005bac:	f7fa fb10 	bl	80001d0 <memchr>
 8005bb0:	b138      	cbz	r0, 8005bc2 <_vfiprintf_r+0x17a>
 8005bb2:	9b04      	ldr	r3, [sp, #16]
 8005bb4:	eba0 000a 	sub.w	r0, r0, sl
 8005bb8:	2240      	movs	r2, #64	; 0x40
 8005bba:	4082      	lsls	r2, r0
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	3401      	adds	r4, #1
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc6:	4829      	ldr	r0, [pc, #164]	; (8005c6c <_vfiprintf_r+0x224>)
 8005bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bcc:	2206      	movs	r2, #6
 8005bce:	f7fa faff 	bl	80001d0 <memchr>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d03f      	beq.n	8005c56 <_vfiprintf_r+0x20e>
 8005bd6:	4b26      	ldr	r3, [pc, #152]	; (8005c70 <_vfiprintf_r+0x228>)
 8005bd8:	bb1b      	cbnz	r3, 8005c22 <_vfiprintf_r+0x1da>
 8005bda:	9b03      	ldr	r3, [sp, #12]
 8005bdc:	3307      	adds	r3, #7
 8005bde:	f023 0307 	bic.w	r3, r3, #7
 8005be2:	3308      	adds	r3, #8
 8005be4:	9303      	str	r3, [sp, #12]
 8005be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be8:	443b      	add	r3, r7
 8005bea:	9309      	str	r3, [sp, #36]	; 0x24
 8005bec:	e768      	b.n	8005ac0 <_vfiprintf_r+0x78>
 8005bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	e7a6      	b.n	8005b46 <_vfiprintf_r+0xfe>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	3401      	adds	r4, #1
 8005bfc:	9305      	str	r3, [sp, #20]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	f04f 0c0a 	mov.w	ip, #10
 8005c04:	4620      	mov	r0, r4
 8005c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c0a:	3a30      	subs	r2, #48	; 0x30
 8005c0c:	2a09      	cmp	r2, #9
 8005c0e:	d903      	bls.n	8005c18 <_vfiprintf_r+0x1d0>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0c6      	beq.n	8005ba2 <_vfiprintf_r+0x15a>
 8005c14:	9105      	str	r1, [sp, #20]
 8005c16:	e7c4      	b.n	8005ba2 <_vfiprintf_r+0x15a>
 8005c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e7f0      	b.n	8005c04 <_vfiprintf_r+0x1bc>
 8005c22:	ab03      	add	r3, sp, #12
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	462a      	mov	r2, r5
 8005c28:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <_vfiprintf_r+0x22c>)
 8005c2a:	a904      	add	r1, sp, #16
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f3af 8000 	nop.w
 8005c32:	4607      	mov	r7, r0
 8005c34:	1c78      	adds	r0, r7, #1
 8005c36:	d1d6      	bne.n	8005be6 <_vfiprintf_r+0x19e>
 8005c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c3a:	07d9      	lsls	r1, r3, #31
 8005c3c:	d405      	bmi.n	8005c4a <_vfiprintf_r+0x202>
 8005c3e:	89ab      	ldrh	r3, [r5, #12]
 8005c40:	059a      	lsls	r2, r3, #22
 8005c42:	d402      	bmi.n	8005c4a <_vfiprintf_r+0x202>
 8005c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c46:	f7ff fddb 	bl	8005800 <__retarget_lock_release_recursive>
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	065b      	lsls	r3, r3, #25
 8005c4e:	f53f af1d 	bmi.w	8005a8c <_vfiprintf_r+0x44>
 8005c52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c54:	e71c      	b.n	8005a90 <_vfiprintf_r+0x48>
 8005c56:	ab03      	add	r3, sp, #12
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	462a      	mov	r2, r5
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <_vfiprintf_r+0x22c>)
 8005c5e:	a904      	add	r1, sp, #16
 8005c60:	4630      	mov	r0, r6
 8005c62:	f000 f879 	bl	8005d58 <_printf_i>
 8005c66:	e7e4      	b.n	8005c32 <_vfiprintf_r+0x1ea>
 8005c68:	08006470 	.word	0x08006470
 8005c6c:	0800647a 	.word	0x0800647a
 8005c70:	00000000 	.word	0x00000000
 8005c74:	08005a23 	.word	0x08005a23
 8005c78:	08006476 	.word	0x08006476

08005c7c <_printf_common>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	4616      	mov	r6, r2
 8005c82:	4699      	mov	r9, r3
 8005c84:	688a      	ldr	r2, [r1, #8]
 8005c86:	690b      	ldr	r3, [r1, #16]
 8005c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bfb8      	it	lt
 8005c90:	4613      	movlt	r3, r2
 8005c92:	6033      	str	r3, [r6, #0]
 8005c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c98:	4607      	mov	r7, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_printf_common+0x26>
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	0699      	lsls	r1, r3, #26
 8005ca6:	bf42      	ittt	mi
 8005ca8:	6833      	ldrmi	r3, [r6, #0]
 8005caa:	3302      	addmi	r3, #2
 8005cac:	6033      	strmi	r3, [r6, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	f015 0506 	ands.w	r5, r5, #6
 8005cb4:	d106      	bne.n	8005cc4 <_printf_common+0x48>
 8005cb6:	f104 0a19 	add.w	sl, r4, #25
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	6832      	ldr	r2, [r6, #0]
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dc26      	bgt.n	8005d12 <_printf_common+0x96>
 8005cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cc8:	1e13      	subs	r3, r2, #0
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d42b      	bmi.n	8005d2c <_printf_common+0xb0>
 8005cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd8:	4649      	mov	r1, r9
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c0      	blx	r8
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d01e      	beq.n	8005d20 <_printf_common+0xa4>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	6922      	ldr	r2, [r4, #16]
 8005ce6:	f003 0306 	and.w	r3, r3, #6
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	bf02      	ittt	eq
 8005cee:	68e5      	ldreq	r5, [r4, #12]
 8005cf0:	6833      	ldreq	r3, [r6, #0]
 8005cf2:	1aed      	subeq	r5, r5, r3
 8005cf4:	68a3      	ldr	r3, [r4, #8]
 8005cf6:	bf0c      	ite	eq
 8005cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cfc:	2500      	movne	r5, #0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bfc4      	itt	gt
 8005d02:	1a9b      	subgt	r3, r3, r2
 8005d04:	18ed      	addgt	r5, r5, r3
 8005d06:	2600      	movs	r6, #0
 8005d08:	341a      	adds	r4, #26
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d11a      	bne.n	8005d44 <_printf_common+0xc8>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e008      	b.n	8005d24 <_printf_common+0xa8>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4649      	mov	r1, r9
 8005d18:	4638      	mov	r0, r7
 8005d1a:	47c0      	blx	r8
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d103      	bne.n	8005d28 <_printf_common+0xac>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	3501      	adds	r5, #1
 8005d2a:	e7c6      	b.n	8005cba <_printf_common+0x3e>
 8005d2c:	18e1      	adds	r1, r4, r3
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	2030      	movs	r0, #48	; 0x30
 8005d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d36:	4422      	add	r2, r4
 8005d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d40:	3302      	adds	r3, #2
 8005d42:	e7c7      	b.n	8005cd4 <_printf_common+0x58>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4622      	mov	r2, r4
 8005d48:	4649      	mov	r1, r9
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0e6      	beq.n	8005d20 <_printf_common+0xa4>
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7d9      	b.n	8005d0a <_printf_common+0x8e>
	...

08005d58 <_printf_i>:
 8005d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	7e0f      	ldrb	r7, [r1, #24]
 8005d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d60:	2f78      	cmp	r7, #120	; 0x78
 8005d62:	4691      	mov	r9, r2
 8005d64:	4680      	mov	r8, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	469a      	mov	sl, r3
 8005d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d6e:	d807      	bhi.n	8005d80 <_printf_i+0x28>
 8005d70:	2f62      	cmp	r7, #98	; 0x62
 8005d72:	d80a      	bhi.n	8005d8a <_printf_i+0x32>
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	f000 80d4 	beq.w	8005f22 <_printf_i+0x1ca>
 8005d7a:	2f58      	cmp	r7, #88	; 0x58
 8005d7c:	f000 80c0 	beq.w	8005f00 <_printf_i+0x1a8>
 8005d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d88:	e03a      	b.n	8005e00 <_printf_i+0xa8>
 8005d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d8e:	2b15      	cmp	r3, #21
 8005d90:	d8f6      	bhi.n	8005d80 <_printf_i+0x28>
 8005d92:	a101      	add	r1, pc, #4	; (adr r1, 8005d98 <_printf_i+0x40>)
 8005d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d98:	08005df1 	.word	0x08005df1
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005d81 	.word	0x08005d81
 8005da4:	08005d81 	.word	0x08005d81
 8005da8:	08005d81 	.word	0x08005d81
 8005dac:	08005d81 	.word	0x08005d81
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005d81 	.word	0x08005d81
 8005db8:	08005d81 	.word	0x08005d81
 8005dbc:	08005d81 	.word	0x08005d81
 8005dc0:	08005d81 	.word	0x08005d81
 8005dc4:	08005f09 	.word	0x08005f09
 8005dc8:	08005e31 	.word	0x08005e31
 8005dcc:	08005ec3 	.word	0x08005ec3
 8005dd0:	08005d81 	.word	0x08005d81
 8005dd4:	08005d81 	.word	0x08005d81
 8005dd8:	08005f2b 	.word	0x08005f2b
 8005ddc:	08005d81 	.word	0x08005d81
 8005de0:	08005e31 	.word	0x08005e31
 8005de4:	08005d81 	.word	0x08005d81
 8005de8:	08005d81 	.word	0x08005d81
 8005dec:	08005ecb 	.word	0x08005ecb
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	602a      	str	r2, [r5, #0]
 8005df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e00:	2301      	movs	r3, #1
 8005e02:	e09f      	b.n	8005f44 <_printf_i+0x1ec>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	682b      	ldr	r3, [r5, #0]
 8005e08:	0607      	lsls	r7, r0, #24
 8005e0a:	f103 0104 	add.w	r1, r3, #4
 8005e0e:	6029      	str	r1, [r5, #0]
 8005e10:	d501      	bpl.n	8005e16 <_printf_i+0xbe>
 8005e12:	681e      	ldr	r6, [r3, #0]
 8005e14:	e003      	b.n	8005e1e <_printf_i+0xc6>
 8005e16:	0646      	lsls	r6, r0, #25
 8005e18:	d5fb      	bpl.n	8005e12 <_printf_i+0xba>
 8005e1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e1e:	2e00      	cmp	r6, #0
 8005e20:	da03      	bge.n	8005e2a <_printf_i+0xd2>
 8005e22:	232d      	movs	r3, #45	; 0x2d
 8005e24:	4276      	negs	r6, r6
 8005e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e2a:	485a      	ldr	r0, [pc, #360]	; (8005f94 <_printf_i+0x23c>)
 8005e2c:	230a      	movs	r3, #10
 8005e2e:	e012      	b.n	8005e56 <_printf_i+0xfe>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	6820      	ldr	r0, [r4, #0]
 8005e34:	1d19      	adds	r1, r3, #4
 8005e36:	6029      	str	r1, [r5, #0]
 8005e38:	0605      	lsls	r5, r0, #24
 8005e3a:	d501      	bpl.n	8005e40 <_printf_i+0xe8>
 8005e3c:	681e      	ldr	r6, [r3, #0]
 8005e3e:	e002      	b.n	8005e46 <_printf_i+0xee>
 8005e40:	0641      	lsls	r1, r0, #25
 8005e42:	d5fb      	bpl.n	8005e3c <_printf_i+0xe4>
 8005e44:	881e      	ldrh	r6, [r3, #0]
 8005e46:	4853      	ldr	r0, [pc, #332]	; (8005f94 <_printf_i+0x23c>)
 8005e48:	2f6f      	cmp	r7, #111	; 0x6f
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2308      	moveq	r3, #8
 8005e4e:	230a      	movne	r3, #10
 8005e50:	2100      	movs	r1, #0
 8005e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e56:	6865      	ldr	r5, [r4, #4]
 8005e58:	60a5      	str	r5, [r4, #8]
 8005e5a:	2d00      	cmp	r5, #0
 8005e5c:	bfa2      	ittt	ge
 8005e5e:	6821      	ldrge	r1, [r4, #0]
 8005e60:	f021 0104 	bicge.w	r1, r1, #4
 8005e64:	6021      	strge	r1, [r4, #0]
 8005e66:	b90e      	cbnz	r6, 8005e6c <_printf_i+0x114>
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	d04b      	beq.n	8005f04 <_printf_i+0x1ac>
 8005e6c:	4615      	mov	r5, r2
 8005e6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e72:	fb03 6711 	mls	r7, r3, r1, r6
 8005e76:	5dc7      	ldrb	r7, [r0, r7]
 8005e78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e7c:	4637      	mov	r7, r6
 8005e7e:	42bb      	cmp	r3, r7
 8005e80:	460e      	mov	r6, r1
 8005e82:	d9f4      	bls.n	8005e6e <_printf_i+0x116>
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d10b      	bne.n	8005ea0 <_printf_i+0x148>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	07de      	lsls	r6, r3, #31
 8005e8c:	d508      	bpl.n	8005ea0 <_printf_i+0x148>
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	6861      	ldr	r1, [r4, #4]
 8005e92:	4299      	cmp	r1, r3
 8005e94:	bfde      	ittt	le
 8005e96:	2330      	movle	r3, #48	; 0x30
 8005e98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ea0:	1b52      	subs	r2, r2, r5
 8005ea2:	6122      	str	r2, [r4, #16]
 8005ea4:	f8cd a000 	str.w	sl, [sp]
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	aa03      	add	r2, sp, #12
 8005eac:	4621      	mov	r1, r4
 8005eae:	4640      	mov	r0, r8
 8005eb0:	f7ff fee4 	bl	8005c7c <_printf_common>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d14a      	bne.n	8005f4e <_printf_i+0x1f6>
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebc:	b004      	add	sp, #16
 8005ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f043 0320 	orr.w	r3, r3, #32
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	4833      	ldr	r0, [pc, #204]	; (8005f98 <_printf_i+0x240>)
 8005ecc:	2778      	movs	r7, #120	; 0x78
 8005ece:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	6829      	ldr	r1, [r5, #0]
 8005ed6:	061f      	lsls	r7, r3, #24
 8005ed8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005edc:	d402      	bmi.n	8005ee4 <_printf_i+0x18c>
 8005ede:	065f      	lsls	r7, r3, #25
 8005ee0:	bf48      	it	mi
 8005ee2:	b2b6      	uxthmi	r6, r6
 8005ee4:	07df      	lsls	r7, r3, #31
 8005ee6:	bf48      	it	mi
 8005ee8:	f043 0320 	orrmi.w	r3, r3, #32
 8005eec:	6029      	str	r1, [r5, #0]
 8005eee:	bf48      	it	mi
 8005ef0:	6023      	strmi	r3, [r4, #0]
 8005ef2:	b91e      	cbnz	r6, 8005efc <_printf_i+0x1a4>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	f023 0320 	bic.w	r3, r3, #32
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	2310      	movs	r3, #16
 8005efe:	e7a7      	b.n	8005e50 <_printf_i+0xf8>
 8005f00:	4824      	ldr	r0, [pc, #144]	; (8005f94 <_printf_i+0x23c>)
 8005f02:	e7e4      	b.n	8005ece <_printf_i+0x176>
 8005f04:	4615      	mov	r5, r2
 8005f06:	e7bd      	b.n	8005e84 <_printf_i+0x12c>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	6826      	ldr	r6, [r4, #0]
 8005f0c:	6961      	ldr	r1, [r4, #20]
 8005f0e:	1d18      	adds	r0, r3, #4
 8005f10:	6028      	str	r0, [r5, #0]
 8005f12:	0635      	lsls	r5, r6, #24
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	d501      	bpl.n	8005f1c <_printf_i+0x1c4>
 8005f18:	6019      	str	r1, [r3, #0]
 8005f1a:	e002      	b.n	8005f22 <_printf_i+0x1ca>
 8005f1c:	0670      	lsls	r0, r6, #25
 8005f1e:	d5fb      	bpl.n	8005f18 <_printf_i+0x1c0>
 8005f20:	8019      	strh	r1, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	4615      	mov	r5, r2
 8005f28:	e7bc      	b.n	8005ea4 <_printf_i+0x14c>
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	602a      	str	r2, [r5, #0]
 8005f30:	681d      	ldr	r5, [r3, #0]
 8005f32:	6862      	ldr	r2, [r4, #4]
 8005f34:	2100      	movs	r1, #0
 8005f36:	4628      	mov	r0, r5
 8005f38:	f7fa f94a 	bl	80001d0 <memchr>
 8005f3c:	b108      	cbz	r0, 8005f42 <_printf_i+0x1ea>
 8005f3e:	1b40      	subs	r0, r0, r5
 8005f40:	6060      	str	r0, [r4, #4]
 8005f42:	6863      	ldr	r3, [r4, #4]
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	2300      	movs	r3, #0
 8005f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f4c:	e7aa      	b.n	8005ea4 <_printf_i+0x14c>
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	462a      	mov	r2, r5
 8005f52:	4649      	mov	r1, r9
 8005f54:	4640      	mov	r0, r8
 8005f56:	47d0      	blx	sl
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d0ad      	beq.n	8005eb8 <_printf_i+0x160>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	079b      	lsls	r3, r3, #30
 8005f60:	d413      	bmi.n	8005f8a <_printf_i+0x232>
 8005f62:	68e0      	ldr	r0, [r4, #12]
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	4298      	cmp	r0, r3
 8005f68:	bfb8      	it	lt
 8005f6a:	4618      	movlt	r0, r3
 8005f6c:	e7a6      	b.n	8005ebc <_printf_i+0x164>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4632      	mov	r2, r6
 8005f72:	4649      	mov	r1, r9
 8005f74:	4640      	mov	r0, r8
 8005f76:	47d0      	blx	sl
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d09d      	beq.n	8005eb8 <_printf_i+0x160>
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	68e3      	ldr	r3, [r4, #12]
 8005f80:	9903      	ldr	r1, [sp, #12]
 8005f82:	1a5b      	subs	r3, r3, r1
 8005f84:	42ab      	cmp	r3, r5
 8005f86:	dcf2      	bgt.n	8005f6e <_printf_i+0x216>
 8005f88:	e7eb      	b.n	8005f62 <_printf_i+0x20a>
 8005f8a:	2500      	movs	r5, #0
 8005f8c:	f104 0619 	add.w	r6, r4, #25
 8005f90:	e7f5      	b.n	8005f7e <_printf_i+0x226>
 8005f92:	bf00      	nop
 8005f94:	08006481 	.word	0x08006481
 8005f98:	08006492 	.word	0x08006492

08005f9c <__sflush_r>:
 8005f9c:	898a      	ldrh	r2, [r1, #12]
 8005f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	0710      	lsls	r0, r2, #28
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	d458      	bmi.n	800605c <__sflush_r+0xc0>
 8005faa:	684b      	ldr	r3, [r1, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	dc05      	bgt.n	8005fbc <__sflush_r+0x20>
 8005fb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	dc02      	bgt.n	8005fbc <__sflush_r+0x20>
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fbe:	2e00      	cmp	r6, #0
 8005fc0:	d0f9      	beq.n	8005fb6 <__sflush_r+0x1a>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fc8:	682f      	ldr	r7, [r5, #0]
 8005fca:	6a21      	ldr	r1, [r4, #32]
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	d032      	beq.n	8006036 <__sflush_r+0x9a>
 8005fd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	075a      	lsls	r2, r3, #29
 8005fd6:	d505      	bpl.n	8005fe4 <__sflush_r+0x48>
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	1ac0      	subs	r0, r0, r3
 8005fdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fde:	b10b      	cbz	r3, 8005fe4 <__sflush_r+0x48>
 8005fe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fe2:	1ac0      	subs	r0, r0, r3
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fea:	6a21      	ldr	r1, [r4, #32]
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b0      	blx	r6
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	d106      	bne.n	8006004 <__sflush_r+0x68>
 8005ff6:	6829      	ldr	r1, [r5, #0]
 8005ff8:	291d      	cmp	r1, #29
 8005ffa:	d82b      	bhi.n	8006054 <__sflush_r+0xb8>
 8005ffc:	4a29      	ldr	r2, [pc, #164]	; (80060a4 <__sflush_r+0x108>)
 8005ffe:	410a      	asrs	r2, r1
 8006000:	07d6      	lsls	r6, r2, #31
 8006002:	d427      	bmi.n	8006054 <__sflush_r+0xb8>
 8006004:	2200      	movs	r2, #0
 8006006:	6062      	str	r2, [r4, #4]
 8006008:	04d9      	lsls	r1, r3, #19
 800600a:	6922      	ldr	r2, [r4, #16]
 800600c:	6022      	str	r2, [r4, #0]
 800600e:	d504      	bpl.n	800601a <__sflush_r+0x7e>
 8006010:	1c42      	adds	r2, r0, #1
 8006012:	d101      	bne.n	8006018 <__sflush_r+0x7c>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	b903      	cbnz	r3, 800601a <__sflush_r+0x7e>
 8006018:	6560      	str	r0, [r4, #84]	; 0x54
 800601a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800601c:	602f      	str	r7, [r5, #0]
 800601e:	2900      	cmp	r1, #0
 8006020:	d0c9      	beq.n	8005fb6 <__sflush_r+0x1a>
 8006022:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006026:	4299      	cmp	r1, r3
 8006028:	d002      	beq.n	8006030 <__sflush_r+0x94>
 800602a:	4628      	mov	r0, r5
 800602c:	f7ff fbea 	bl	8005804 <_free_r>
 8006030:	2000      	movs	r0, #0
 8006032:	6360      	str	r0, [r4, #52]	; 0x34
 8006034:	e7c0      	b.n	8005fb8 <__sflush_r+0x1c>
 8006036:	2301      	movs	r3, #1
 8006038:	4628      	mov	r0, r5
 800603a:	47b0      	blx	r6
 800603c:	1c41      	adds	r1, r0, #1
 800603e:	d1c8      	bne.n	8005fd2 <__sflush_r+0x36>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0c5      	beq.n	8005fd2 <__sflush_r+0x36>
 8006046:	2b1d      	cmp	r3, #29
 8006048:	d001      	beq.n	800604e <__sflush_r+0xb2>
 800604a:	2b16      	cmp	r3, #22
 800604c:	d101      	bne.n	8006052 <__sflush_r+0xb6>
 800604e:	602f      	str	r7, [r5, #0]
 8006050:	e7b1      	b.n	8005fb6 <__sflush_r+0x1a>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006058:	81a3      	strh	r3, [r4, #12]
 800605a:	e7ad      	b.n	8005fb8 <__sflush_r+0x1c>
 800605c:	690f      	ldr	r7, [r1, #16]
 800605e:	2f00      	cmp	r7, #0
 8006060:	d0a9      	beq.n	8005fb6 <__sflush_r+0x1a>
 8006062:	0793      	lsls	r3, r2, #30
 8006064:	680e      	ldr	r6, [r1, #0]
 8006066:	bf08      	it	eq
 8006068:	694b      	ldreq	r3, [r1, #20]
 800606a:	600f      	str	r7, [r1, #0]
 800606c:	bf18      	it	ne
 800606e:	2300      	movne	r3, #0
 8006070:	eba6 0807 	sub.w	r8, r6, r7
 8006074:	608b      	str	r3, [r1, #8]
 8006076:	f1b8 0f00 	cmp.w	r8, #0
 800607a:	dd9c      	ble.n	8005fb6 <__sflush_r+0x1a>
 800607c:	6a21      	ldr	r1, [r4, #32]
 800607e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006080:	4643      	mov	r3, r8
 8006082:	463a      	mov	r2, r7
 8006084:	4628      	mov	r0, r5
 8006086:	47b0      	blx	r6
 8006088:	2800      	cmp	r0, #0
 800608a:	dc06      	bgt.n	800609a <__sflush_r+0xfe>
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006092:	81a3      	strh	r3, [r4, #12]
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	e78e      	b.n	8005fb8 <__sflush_r+0x1c>
 800609a:	4407      	add	r7, r0
 800609c:	eba8 0800 	sub.w	r8, r8, r0
 80060a0:	e7e9      	b.n	8006076 <__sflush_r+0xda>
 80060a2:	bf00      	nop
 80060a4:	dfbffffe 	.word	0xdfbffffe

080060a8 <_fflush_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	690b      	ldr	r3, [r1, #16]
 80060ac:	4605      	mov	r5, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	b913      	cbnz	r3, 80060b8 <_fflush_r+0x10>
 80060b2:	2500      	movs	r5, #0
 80060b4:	4628      	mov	r0, r5
 80060b6:	bd38      	pop	{r3, r4, r5, pc}
 80060b8:	b118      	cbz	r0, 80060c2 <_fflush_r+0x1a>
 80060ba:	6a03      	ldr	r3, [r0, #32]
 80060bc:	b90b      	cbnz	r3, 80060c2 <_fflush_r+0x1a>
 80060be:	f7ff f9a9 	bl	8005414 <__sinit>
 80060c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f3      	beq.n	80060b2 <_fflush_r+0xa>
 80060ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060cc:	07d0      	lsls	r0, r2, #31
 80060ce:	d404      	bmi.n	80060da <_fflush_r+0x32>
 80060d0:	0599      	lsls	r1, r3, #22
 80060d2:	d402      	bmi.n	80060da <_fflush_r+0x32>
 80060d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060d6:	f7ff fb92 	bl	80057fe <__retarget_lock_acquire_recursive>
 80060da:	4628      	mov	r0, r5
 80060dc:	4621      	mov	r1, r4
 80060de:	f7ff ff5d 	bl	8005f9c <__sflush_r>
 80060e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060e4:	07da      	lsls	r2, r3, #31
 80060e6:	4605      	mov	r5, r0
 80060e8:	d4e4      	bmi.n	80060b4 <_fflush_r+0xc>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	059b      	lsls	r3, r3, #22
 80060ee:	d4e1      	bmi.n	80060b4 <_fflush_r+0xc>
 80060f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060f2:	f7ff fb85 	bl	8005800 <__retarget_lock_release_recursive>
 80060f6:	e7dd      	b.n	80060b4 <_fflush_r+0xc>

080060f8 <__swhatbuf_r>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	460c      	mov	r4, r1
 80060fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006100:	2900      	cmp	r1, #0
 8006102:	b096      	sub	sp, #88	; 0x58
 8006104:	4615      	mov	r5, r2
 8006106:	461e      	mov	r6, r3
 8006108:	da0d      	bge.n	8006126 <__swhatbuf_r+0x2e>
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	bf0c      	ite	eq
 8006116:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800611a:	2340      	movne	r3, #64	; 0x40
 800611c:	2000      	movs	r0, #0
 800611e:	6031      	str	r1, [r6, #0]
 8006120:	602b      	str	r3, [r5, #0]
 8006122:	b016      	add	sp, #88	; 0x58
 8006124:	bd70      	pop	{r4, r5, r6, pc}
 8006126:	466a      	mov	r2, sp
 8006128:	f000 f848 	bl	80061bc <_fstat_r>
 800612c:	2800      	cmp	r0, #0
 800612e:	dbec      	blt.n	800610a <__swhatbuf_r+0x12>
 8006130:	9901      	ldr	r1, [sp, #4]
 8006132:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006136:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800613a:	4259      	negs	r1, r3
 800613c:	4159      	adcs	r1, r3
 800613e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006142:	e7eb      	b.n	800611c <__swhatbuf_r+0x24>

08006144 <__smakebuf_r>:
 8006144:	898b      	ldrh	r3, [r1, #12]
 8006146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006148:	079d      	lsls	r5, r3, #30
 800614a:	4606      	mov	r6, r0
 800614c:	460c      	mov	r4, r1
 800614e:	d507      	bpl.n	8006160 <__smakebuf_r+0x1c>
 8006150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	6123      	str	r3, [r4, #16]
 8006158:	2301      	movs	r3, #1
 800615a:	6163      	str	r3, [r4, #20]
 800615c:	b002      	add	sp, #8
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	ab01      	add	r3, sp, #4
 8006162:	466a      	mov	r2, sp
 8006164:	f7ff ffc8 	bl	80060f8 <__swhatbuf_r>
 8006168:	9900      	ldr	r1, [sp, #0]
 800616a:	4605      	mov	r5, r0
 800616c:	4630      	mov	r0, r6
 800616e:	f7ff fbb5 	bl	80058dc <_malloc_r>
 8006172:	b948      	cbnz	r0, 8006188 <__smakebuf_r+0x44>
 8006174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006178:	059a      	lsls	r2, r3, #22
 800617a:	d4ef      	bmi.n	800615c <__smakebuf_r+0x18>
 800617c:	f023 0303 	bic.w	r3, r3, #3
 8006180:	f043 0302 	orr.w	r3, r3, #2
 8006184:	81a3      	strh	r3, [r4, #12]
 8006186:	e7e3      	b.n	8006150 <__smakebuf_r+0xc>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	6020      	str	r0, [r4, #0]
 800618c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006190:	81a3      	strh	r3, [r4, #12]
 8006192:	9b00      	ldr	r3, [sp, #0]
 8006194:	6163      	str	r3, [r4, #20]
 8006196:	9b01      	ldr	r3, [sp, #4]
 8006198:	6120      	str	r0, [r4, #16]
 800619a:	b15b      	cbz	r3, 80061b4 <__smakebuf_r+0x70>
 800619c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061a0:	4630      	mov	r0, r6
 80061a2:	f000 f81d 	bl	80061e0 <_isatty_r>
 80061a6:	b128      	cbz	r0, 80061b4 <__smakebuf_r+0x70>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	f043 0301 	orr.w	r3, r3, #1
 80061b2:	81a3      	strh	r3, [r4, #12]
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	431d      	orrs	r5, r3
 80061b8:	81a5      	strh	r5, [r4, #12]
 80061ba:	e7cf      	b.n	800615c <__smakebuf_r+0x18>

080061bc <_fstat_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d07      	ldr	r5, [pc, #28]	; (80061dc <_fstat_r+0x20>)
 80061c0:	2300      	movs	r3, #0
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	602b      	str	r3, [r5, #0]
 80061ca:	f7fa ff10 	bl	8000fee <_fstat>
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	d102      	bne.n	80061d8 <_fstat_r+0x1c>
 80061d2:	682b      	ldr	r3, [r5, #0]
 80061d4:	b103      	cbz	r3, 80061d8 <_fstat_r+0x1c>
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	bd38      	pop	{r3, r4, r5, pc}
 80061da:	bf00      	nop
 80061dc:	2000030c 	.word	0x2000030c

080061e0 <_isatty_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4d06      	ldr	r5, [pc, #24]	; (80061fc <_isatty_r+0x1c>)
 80061e4:	2300      	movs	r3, #0
 80061e6:	4604      	mov	r4, r0
 80061e8:	4608      	mov	r0, r1
 80061ea:	602b      	str	r3, [r5, #0]
 80061ec:	f7fa ff0f 	bl	800100e <_isatty>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d102      	bne.n	80061fa <_isatty_r+0x1a>
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	b103      	cbz	r3, 80061fa <_isatty_r+0x1a>
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	2000030c 	.word	0x2000030c

08006200 <_sbrk_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4d06      	ldr	r5, [pc, #24]	; (800621c <_sbrk_r+0x1c>)
 8006204:	2300      	movs	r3, #0
 8006206:	4604      	mov	r4, r0
 8006208:	4608      	mov	r0, r1
 800620a:	602b      	str	r3, [r5, #0]
 800620c:	f7fa ff18 	bl	8001040 <_sbrk>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d102      	bne.n	800621a <_sbrk_r+0x1a>
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	b103      	cbz	r3, 800621a <_sbrk_r+0x1a>
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	2000030c 	.word	0x2000030c

08006220 <_init>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	bf00      	nop
 8006224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006226:	bc08      	pop	{r3}
 8006228:	469e      	mov	lr, r3
 800622a:	4770      	bx	lr

0800622c <_fini>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	bf00      	nop
 8006230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006232:	bc08      	pop	{r3}
 8006234:	469e      	mov	lr, r3
 8006236:	4770      	bx	lr
