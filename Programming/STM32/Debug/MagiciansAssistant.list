
MagiciansAssistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800897c  0800897c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800897c  0800897c  0001897c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008984  08008984  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008988  08008988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800898c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000084  08008a10  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08008a10  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000179e9  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea6  00000000  00000000  00037ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  0003a988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010cb  00000000  00000000  0003bf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000293c6  00000000  00000000  0003cfcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a885  00000000  00000000  00066391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9ba3  00000000  00000000  00080c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006368  00000000  00000000  0017a7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00180b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800800c 	.word	0x0800800c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800800c 	.word	0x0800800c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <initArducam>:
/* Notes:
 * The chip select signal should always be LOW during the SPI read or write bus cycle
 * I2C interfaces directly with the OV2640 sensor (the camera itself)
 * SPI interfaces with the Chip as a whole, to indirectly control the camera
 */
void initArducam(ArducamController* pCtrl, I2C_HandleTypeDef* pHI2C, SPI_HandleTypeDef* pHSPI, GPIO_TypeDef* pCSPort, uint16_t csPinNo, GPIO_TypeDef* pFlashPort, uint16_t flashPinNo){
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	603b      	str	r3, [r7, #0]
	printf("Initializing ArduCam\n");
 800059a:	4831      	ldr	r0, [pc, #196]	; (8000660 <initArducam+0xd4>)
 800059c:	f006 ff78 	bl	8007490 <puts>
	pCtrl->pI2CHandle = pHI2C;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	601a      	str	r2, [r3, #0]
	pCtrl->pSPIHandle = pHSPI;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	605a      	str	r2, [r3, #4]
	pCtrl->status = HAL_OK;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2200      	movs	r2, #0
 80005b0:	721a      	strb	r2, [r3, #8]
	pCtrl -> pCSPort = pCSPort;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	60da      	str	r2, [r3, #12]
	pCtrl -> csPinNo = csPinNo;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	8b3a      	ldrh	r2, [r7, #24]
 80005bc:	821a      	strh	r2, [r3, #16]
	pCtrl -> pFlashPort = pFlashPort;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	69fa      	ldr	r2, [r7, #28]
 80005c2:	615a      	str	r2, [r3, #20]
	pCtrl -> flashPinNo = flashPinNo;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	8c3a      	ldrh	r2, [r7, #32]
 80005c8:	831a      	strh	r2, [r3, #24]

	resetCPLD(pCtrl);
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	f000 fa56 	bl	8000a7c <resetCPLD>
	if((pCtrl->status = HAL_I2C_IsDeviceReady(pHI2C, I2C_ADDR_WRITE, 1, HAL_MAX_DELAY)) != HAL_OK ||
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	2201      	movs	r2, #1
 80005d6:	2160      	movs	r1, #96	; 0x60
 80005d8:	68b8      	ldr	r0, [r7, #8]
 80005da:	f002 f89d 	bl	8002718 <HAL_I2C_IsDeviceReady>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	721a      	strb	r2, [r3, #8]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	7a1b      	ldrb	r3, [r3, #8]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d10d      	bne.n	800060a <initArducam+0x7e>
			(pCtrl->status = HAL_I2C_IsDeviceReady(pHI2C, I2C_ADDR_READ, 1, HAL_MAX_DELAY != HAL_OK))){
 80005ee:	2301      	movs	r3, #1
 80005f0:	2201      	movs	r2, #1
 80005f2:	2161      	movs	r1, #97	; 0x61
 80005f4:	68b8      	ldr	r0, [r7, #8]
 80005f6:	f002 f88f 	bl	8002718 <HAL_I2C_IsDeviceReady>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	721a      	strb	r2, [r3, #8]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	7a1b      	ldrb	r3, [r3, #8]
	if((pCtrl->status = HAL_I2C_IsDeviceReady(pHI2C, I2C_ADDR_WRITE, 1, HAL_MAX_DELAY)) != HAL_OK ||
 8000606:	2b00      	cmp	r3, #0
 8000608:	d003      	beq.n	8000612 <initArducam+0x86>
		printf("Arducam I2C Error.\n");
 800060a:	4816      	ldr	r0, [pc, #88]	; (8000664 <initArducam+0xd8>)
 800060c:	f006 ff40 	bl	8007490 <puts>
 8000610:	e016      	b.n	8000640 <initArducam+0xb4>
	} else if(!isSPIWorking(pCtrl)){
 8000612:	68f8      	ldr	r0, [r7, #12]
 8000614:	f000 f916 	bl	8000844 <isSPIWorking>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d103      	bne.n	8000626 <initArducam+0x9a>
		printf("Arducam SPI Error.\n");
 800061e:	4812      	ldr	r0, [pc, #72]	; (8000668 <initArducam+0xdc>)
 8000620:	f006 ff36 	bl	8007490 <puts>
 8000624:	e00c      	b.n	8000640 <initArducam+0xb4>
	} else {
		printf("I2C Check Passed |");
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <initArducam+0xe0>)
 8000628:	f006 fecc 	bl	80073c4 <iprintf>
		printf("SPI Check Passed\n");
 800062c:	4810      	ldr	r0, [pc, #64]	; (8000670 <initArducam+0xe4>)
 800062e:	f006 ff2f 	bl	8007490 <puts>
		setDefaultSettings(pCtrl);
 8000632:	68f8      	ldr	r0, [r7, #12]
 8000634:	f000 f8b6 	bl	80007a4 <setDefaultSettings>
		HAL_Delay(1000);
 8000638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063c:	f001 fbec 	bl	8001e18 <HAL_Delay>
	}

	if(pCtrl->status != HAL_OK){
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	7a1b      	ldrb	r3, [r3, #8]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d003      	beq.n	8000650 <initArducam+0xc4>
		printf("Arducam Init Fail\n");
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <initArducam+0xe8>)
 800064a:	f006 ff21 	bl	8007490 <puts>
	} else {
		printf("Arducam Init Success!\n");
	}

	//printStatus(pCtrl);
}
 800064e:	e002      	b.n	8000656 <initArducam+0xca>
		printf("Arducam Init Success!\n");
 8000650:	4809      	ldr	r0, [pc, #36]	; (8000678 <initArducam+0xec>)
 8000652:	f006 ff1d 	bl	8007490 <puts>
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	08008024 	.word	0x08008024
 8000664:	0800803c 	.word	0x0800803c
 8000668:	08008050 	.word	0x08008050
 800066c:	08008064 	.word	0x08008064
 8000670:	08008078 	.word	0x08008078
 8000674:	0800808c 	.word	0x0800808c
 8000678:	080080a0 	.word	0x080080a0

0800067c <singleCapture>:

//Fills *ppBuffer with the Picture Data
//Returns the # of bytes read from the FIFO
uint16_t singleCapture(ArducamController* pCtrl, uint8_t **ppBuffer){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
		printf("Starting Capture\n");
 8000686:	4819      	ldr	r0, [pc, #100]	; (80006ec <singleCapture+0x70>)
 8000688:	f006 ff02 	bl	8007490 <puts>

		flashOn(pCtrl);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 fab9 	bl	8000c04 <flashOn>
		clearFIFOFlag(pCtrl);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 fa12 	bl	8000abc <clearFIFOFlag>
		resetFIFOPointers(pCtrl);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 fa20 	bl	8000ade <resetFIFOPointers>
		setNCaptureFrames(pCtrl, 1);
 800069e:	2101      	movs	r1, #1
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 fa3e 	bl	8000b22 <setNCaptureFrames>
		setCaptureFlag(pCtrl);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 fa2a 	bl	8000b00 <setCaptureFlag>
		while(!isFIFOReady(pCtrl)){
 80006ac:	e003      	b.n	80006b6 <singleCapture+0x3a>
			HAL_Delay(CAPTURE_DELAY);//    Wait 'til Finished Flag is set
 80006ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b2:	f001 fbb1 	bl	8001e18 <HAL_Delay>
		while(!isFIFOReady(pCtrl)){
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f9c2 	bl	8000a40 <isFIFOReady>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0f5      	beq.n	80006ae <singleCapture+0x32>
		}
		printf("FIFO Write Finished!\n");
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <singleCapture+0x74>)
 80006c4:	f006 fee4 	bl	8007490 <puts>
		flashOff(pCtrl);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 faab 	bl	8000c24 <flashOff>

		uint16_t bufferSize = burstReadFIFO(pCtrl, ppBuffer);
 80006ce:	6839      	ldr	r1, [r7, #0]
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 f811 	bl	80006f8 <burstReadFIFO>
 80006d6:	4603      	mov	r3, r0
 80006d8:	81fb      	strh	r3, [r7, #14]

		printf("Capture Complete!\n");
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <singleCapture+0x78>)
 80006dc:	f006 fed8 	bl	8007490 <puts>
			printf("%x", (*ppBuffer)[i]);
			//if(!(i % 100)){printf("\n");}
		}
		printf("\n");
		*/
		return bufferSize;
 80006e0:	89fb      	ldrh	r3, [r7, #14]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	080080b8 	.word	0x080080b8
 80006f0:	080080cc 	.word	0x080080cc
 80006f4:	080080e4 	.word	0x080080e4

080006f8 <burstReadFIFO>:

//Returns the amount of data (in bytes) read from FIFO
uint16_t burstReadFIFO(ArducamController *pCtrl, uint8_t **ppBuffer){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
	uint8_t cmd = FIFO_BURST_READ;
 8000702:	233c      	movs	r3, #60	; 0x3c
 8000704:	73fb      	strb	r3, [r7, #15]
	uint32_t fifoLength = getFIFOLength(pCtrl);
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 fa26 	bl	8000b58 <getFIFOLength>
 800070c:	6138      	str	r0, [r7, #16]
	uint32_t transmissionSize = fifoLength;
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	617b      	str	r3, [r7, #20]
	if(fifoLength >= 0xFFFF){
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000718:	4293      	cmp	r3, r2
 800071a:	d905      	bls.n	8000728 <burstReadFIFO+0x30>
		printf("Had to Truncate FIFO Transfer\n");
 800071c:	481f      	ldr	r0, [pc, #124]	; (800079c <burstReadFIFO+0xa4>)
 800071e:	f006 feb7 	bl	8007490 <puts>
		transmissionSize = 0xFFFF;
 8000722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000726:	617b      	str	r3, [r7, #20]
	}

	// Allocate some space for the buffer
	*ppBuffer = calloc(transmissionSize, sizeof(uint8_t));
 8000728:	2101      	movs	r1, #1
 800072a:	6978      	ldr	r0, [r7, #20]
 800072c:	f006 fcb6 	bl	800709c <calloc>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	601a      	str	r2, [r3, #0]

	printf("Reading %lu bytes from Arducam\n", transmissionSize);
 8000738:	6979      	ldr	r1, [r7, #20]
 800073a:	4819      	ldr	r0, [pc, #100]	; (80007a0 <burstReadFIFO+0xa8>)
 800073c:	f006 fe42 	bl	80073c4 <iprintf>
	enable(pCtrl);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f000 fa3f 	bl	8000bc4 <enable>
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &cmd, *ppBuffer, 1, HAL_MAX_DELAY);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6858      	ldr	r0, [r3, #4]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	f107 010f 	add.w	r1, r7, #15
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	f004 f9fc 	bl	8004b56 <HAL_SPI_TransmitReceive>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	721a      	strb	r2, [r3, #8]
	pCtrl -> status = HAL_SPI_Receive(pCtrl->pSPIHandle, *ppBuffer, transmissionSize, HAL_MAX_DELAY);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6858      	ldr	r0, [r3, #4]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	6819      	ldr	r1, [r3, #0]
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	b29a      	uxth	r2, r3
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	f004 f8b7 	bl	80048e8 <HAL_SPI_Receive>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	721a      	strb	r2, [r3, #8]
	HAL_Delay(1000); // Just making sure all the data makes it through
 8000782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000786:	f001 fb47 	bl	8001e18 <HAL_Delay>
	disable(pCtrl);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 fa2a 	bl	8000be4 <disable>

	return transmissionSize;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	b29b      	uxth	r3, r3
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	080080f8 	.word	0x080080f8
 80007a0:	08008118 	.word	0x08008118

080007a4 <setDefaultSettings>:

void setDefaultSettings(ArducamController* pCtrl){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	printf("Configuring Default Settings\n");
 80007ac:	4821      	ldr	r0, [pc, #132]	; (8000834 <setDefaultSettings+0x90>)
 80007ae:	f006 fe6f 	bl	8007490 <puts>
	uint8_t data = 0x01;
 80007b2:	2301      	movs	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0xFF, &data, 1);
 80007b6:	f107 020f 	add.w	r2, r7, #15
 80007ba:	2301      	movs	r3, #1
 80007bc:	21ff      	movs	r1, #255	; 0xff
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f862 	bl	8000888 <i2cRegWrite>
	data = 0x80;
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0x12, &data, 1);
 80007c8:	f107 020f 	add.w	r2, r7, #15
 80007cc:	2301      	movs	r3, #1
 80007ce:	2112      	movs	r1, #18
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 f859 	bl	8000888 <i2cRegWrite>
	HAL_Delay(100);
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f001 fb1e 	bl	8001e18 <HAL_Delay>

	i2cWriteMultiple(pCtrl, OV2640_JPEG_INIT);
 80007dc:	4916      	ldr	r1, [pc, #88]	; (8000838 <setDefaultSettings+0x94>)
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f888 	bl	80008f4 <i2cWriteMultiple>
	//i2cWriteMultiple(pCtrl, OV2640_YUV422);
	i2cWriteMultiple(pCtrl, OV2640_JPEG);
 80007e4:	4915      	ldr	r1, [pc, #84]	; (800083c <setDefaultSettings+0x98>)
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f000 f884 	bl	80008f4 <i2cWriteMultiple>
	data = 0x01;
 80007ec:	2301      	movs	r3, #1
 80007ee:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0xFF, &data, 1);
 80007f0:	f107 020f 	add.w	r2, r7, #15
 80007f4:	2301      	movs	r3, #1
 80007f6:	21ff      	movs	r1, #255	; 0xff
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f000 f845 	bl	8000888 <i2cRegWrite>
	data = 0x00;
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0x15, &data, 1);
 8000802:	f107 020f 	add.w	r2, r7, #15
 8000806:	2301      	movs	r3, #1
 8000808:	2115      	movs	r1, #21
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f83c 	bl	8000888 <i2cRegWrite>
	i2cWriteMultiple(pCtrl, OV2640_320x240_JPEG);
 8000810:	490b      	ldr	r1, [pc, #44]	; (8000840 <setDefaultSettings+0x9c>)
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f000 f86e 	bl	80008f4 <i2cWriteMultiple>

	data = 0x02;
 8000818:	2302      	movs	r3, #2
 800081a:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, (uint8_t)0x03, &data, 1);
 800081c:	f107 020f 	add.w	r2, r7, #15
 8000820:	2301      	movs	r3, #1
 8000822:	2103      	movs	r1, #3
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 f885 	bl	8000934 <spiRegWrite>

}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	08008138 	.word	0x08008138
 8000838:	080086d4 	.word	0x080086d4
 800083c:	08008854 	.word	0x08008854
 8000840:	08008868 	.word	0x08008868

08000844 <isSPIWorking>:


int isSPIWorking(ArducamController *pCtrl){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	uint8_t testVal = 0xAB;
 800084c:	23ab      	movs	r3, #171	; 0xab
 800084e:	73fb      	strb	r3, [r7, #15]
	uint8_t readVal = 0x00;
 8000850:	2300      	movs	r3, #0
 8000852:	73bb      	strb	r3, [r7, #14]
	spiRegWrite(pCtrl, 0x00, &testVal, 1);
 8000854:	f107 020f 	add.w	r2, r7, #15
 8000858:	2301      	movs	r3, #1
 800085a:	2100      	movs	r1, #0
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 f869 	bl	8000934 <spiRegWrite>
	spiRegRead(pCtrl, 0x00, &readVal, 1);
 8000862:	f107 020e 	add.w	r2, r7, #14
 8000866:	2301      	movs	r3, #1
 8000868:	2100      	movs	r1, #0
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f8a2 	bl	80009b4 <spiRegRead>

	return (readVal == testVal);
 8000870:	7bba      	ldrb	r2, [r7, #14]
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	429a      	cmp	r2, r3
 8000876:	bf0c      	ite	eq
 8000878:	2301      	moveq	r3, #1
 800087a:	2300      	movne	r3, #0
 800087c:	b2db      	uxtb	r3, r3
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <i2cRegWrite>:
//TODO: Make it so that when Register Writes/Reads fail (status != 00), we print error data and throw an interrupt? or maybe just halt the function?
//
/*To Write over i2c:
* Request I2C_ADDR_WRITE -> Send Cam Register Address (left shift device addr's by 1) -> Send Data bytes
*/
void i2cRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t *pData, uint16_t size){
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af02      	add	r7, sp, #8
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	461a      	mov	r2, r3
 8000894:	460b      	mov	r3, r1
 8000896:	72fb      	strb	r3, [r7, #11]
 8000898:	4613      	mov	r3, r2
 800089a:	813b      	strh	r3, [r7, #8]
	printf("(I2C) Writing 0x%04X to Reg 0x%02X\n", *pData, reg);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	7afb      	ldrb	r3, [r7, #11]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4812      	ldr	r0, [pc, #72]	; (80008f0 <i2cRegWrite+0x68>)
 80008a8:	f006 fd8c 	bl	80073c4 <iprintf>
	//printf("Before T1: %x\n", pCtrl->status);
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, &reg, (uint16_t) 1, CAM_TIMEOUT);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	f107 020b 	add.w	r2, r7, #11
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	2160      	movs	r1, #96	; 0x60
 80008be:	f001 fe13 	bl	80024e8 <HAL_I2C_Master_Transmit>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	721a      	strb	r2, [r3, #8]
	//printf("After T1: %x\n", pCtrl->status);
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, pData, (uint16_t) size, CAM_TIMEOUT);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	893b      	ldrh	r3, [r7, #8]
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	9200      	str	r2, [sp, #0]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	2160      	movs	r1, #96	; 0x60
 80008da:	f001 fe05 	bl	80024e8 <HAL_I2C_Master_Transmit>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	721a      	strb	r2, [r3, #8]
	//printf("After T2: %x\n", pCtrl->status);
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	08008158 	.word	0x08008158

080008f4 <i2cWriteMultiple>:
	pCtrl->status = HAL_I2C_Master_Receive(pCtrl->pI2CHandle, I2C_ADDR_READ, pBuffer, size, CAM_TIMEOUT);
	//printf("After R1: %x\n", pCtrl->status);
	printf("(I2C) Read 0x%02X from 0x%02X\n", *pBuffer, reg);
}

void i2cWriteMultiple(ArducamController* pCtrl, const struct SensorReg *regList){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
	struct SensorReg *current = (struct SensorReg *) regList;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	60fb      	str	r3, [r7, #12]

	while(current->addr != 0xFF || current->val != 0xFF){
 8000902:	e00a      	b.n	800091a <i2cWriteMultiple+0x26>
		i2cRegWrite(pCtrl, current->addr, &(current->val), 1);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	7819      	ldrb	r1, [r3, #0]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	2301      	movs	r3, #1
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffba 	bl	8000888 <i2cRegWrite>
		current++;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3302      	adds	r3, #2
 8000918:	60fb      	str	r3, [r7, #12]
	while(current->addr != 0xFF || current->val != 0xFF){
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2bff      	cmp	r3, #255	; 0xff
 8000920:	d1f0      	bne.n	8000904 <i2cWriteMultiple+0x10>
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	785b      	ldrb	r3, [r3, #1]
 8000926:	2bff      	cmp	r3, #255	; 0xff
 8000928:	d1ec      	bne.n	8000904 <i2cWriteMultiple+0x10>
	}

}
 800092a:	bf00      	nop
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <spiRegWrite>:

void spiRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t *pData, uint16_t size){
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	461a      	mov	r2, r3
 8000940:	460b      	mov	r3, r1
 8000942:	72fb      	strb	r3, [r7, #11]
 8000944:	4613      	mov	r3, r2
 8000946:	813b      	strh	r3, [r7, #8]

	enable(pCtrl); // CS Pin Set LOW
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f000 f93b 	bl	8000bc4 <enable>
	HAL_Delay(CS_DELAY);
 800094e:	200a      	movs	r0, #10
 8000950:	f001 fa62 	bl	8001e18 <HAL_Delay>
	uint8_t maskedAddr = reg | SPI_WRITE_MASK; // a 1 followed by Reg addr, to write to reg
 8000954:	7afb      	ldrb	r3, [r7, #11]
 8000956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800095a:	b2db      	uxtb	r3, r3
 800095c:	75fb      	strb	r3, [r7, #23]

	printf("(SPI) Writing 0x%02X to 0x%02X | cmd = 0x%02X\n", *pData, reg, maskedAddr);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4619      	mov	r1, r3
 8000964:	7afa      	ldrb	r2, [r7, #11]
 8000966:	7dfb      	ldrb	r3, [r7, #23]
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <spiRegWrite+0x7c>)
 800096a:	f006 fd2b 	bl	80073c4 <iprintf>
	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, &maskedAddr, (uint16_t)1, CAM_TIMEOUT);
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	6858      	ldr	r0, [r3, #4]
 8000972:	f107 0117 	add.w	r1, r7, #23
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	2201      	movs	r2, #1
 800097c:	f003 fe3f 	bl	80045fe <HAL_SPI_Transmit>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	721a      	strb	r2, [r3, #8]
	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, pData, size, CAM_TIMEOUT);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	6858      	ldr	r0, [r3, #4]
 800098c:	893a      	ldrh	r2, [r7, #8]
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f003 fe33 	bl	80045fe <HAL_SPI_Transmit>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	721a      	strb	r2, [r3, #8]

	disable(pCtrl);
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f000 f91f 	bl	8000be4 <disable>
}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	0800819c 	.word	0x0800819c

080009b4 <spiRegRead>:

void spiRegRead(ArducamController* pCtrl, uint8_t reg, uint8_t *pBuffer, uint16_t size){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	461a      	mov	r2, r3
 80009c0:	460b      	mov	r3, r1
 80009c2:	72fb      	strb	r3, [r7, #11]
 80009c4:	4613      	mov	r3, r2
 80009c6:	813b      	strh	r3, [r7, #8]
	enable(pCtrl);
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f000 f8fb 	bl	8000bc4 <enable>
	HAL_Delay(CS_DELAY);
 80009ce:	200a      	movs	r0, #10
 80009d0:	f001 fa22 	bl	8001e18 <HAL_Delay>
	uint8_t maskedAddr = reg & SPI_READ_MASK; // a 0 followed by register to read
 80009d4:	7afb      	ldrb	r3, [r7, #11]
 80009d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	75fb      	strb	r3, [r7, #23]
	uint8_t dummyByte = 0x00;
 80009de:	2300      	movs	r3, #0
 80009e0:	75bb      	strb	r3, [r7, #22]
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &maskedAddr, pBuffer, (uint16_t)1, CAM_TIMEOUT);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6858      	ldr	r0, [r3, #4]
 80009e6:	f107 0117 	add.w	r1, r7, #23
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2301      	movs	r3, #1
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	f004 f8af 	bl	8004b56 <HAL_SPI_TransmitReceive>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	721a      	strb	r2, [r3, #8]
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &dummyByte, pBuffer, size, CAM_TIMEOUT);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6858      	ldr	r0, [r3, #4]
 8000a04:	893b      	ldrh	r3, [r7, #8]
 8000a06:	f107 0116 	add.w	r1, r7, #22
 8000a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0e:	9200      	str	r2, [sp, #0]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	f004 f8a0 	bl	8004b56 <HAL_SPI_TransmitReceive>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	721a      	strb	r2, [r3, #8]
	disable(pCtrl);
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f000 f8e0 	bl	8000be4 <disable>
	printf("(SPI) Read 0x%02X from 0x%02X\n", *pBuffer, reg);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	7afb      	ldrb	r3, [r7, #11]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <spiRegRead+0x88>)
 8000a30:	f006 fcc8 	bl	80073c4 <iprintf>
}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	080081cc 	.word	0x080081cc

08000a40 <isFIFOReady>:

//Returns FIFO 'finished' flag. 0 -> FIFO is busy, 1 -> capture is finished

int isFIFOReady(ArducamController* pCtrl){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	uint8_t registerData = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	72fb      	strb	r3, [r7, #11]
	spiRegRead(pCtrl, FIFO_STATUS_REG, &registerData, 1);
 8000a4c:	f107 020b 	add.w	r2, r7, #11
 8000a50:	2301      	movs	r3, #1
 8000a52:	2141      	movs	r1, #65	; 0x41
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ffad 	bl	80009b4 <spiRegRead>
	int isFinished = checkBit(registerData, 3);
 8000a5a:	7afb      	ldrb	r3, [r7, #11]
 8000a5c:	2103      	movs	r1, #3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fa8c 	bl	8000f7c <checkBit>
 8000a64:	60f8      	str	r0, [r7, #12]
	printf("FIFO Ready Flag : %d\n", isFinished);
 8000a66:	68f9      	ldr	r1, [r7, #12]
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <isFIFOReady+0x38>)
 8000a6a:	f006 fcab 	bl	80073c4 <iprintf>
	return isFinished;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	080081ec 	.word	0x080081ec

08000a7c <resetCPLD>:
	}

}

//Resets the CPLD
void resetCPLD(ArducamController* pCtrl){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0x80;
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, 0x07, &cmd, 1);
 8000a88:	f107 020f 	add.w	r2, r7, #15
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	2107      	movs	r1, #7
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ff4f 	bl	8000934 <spiRegWrite>
	HAL_Delay(100);
 8000a96:	2064      	movs	r0, #100	; 0x64
 8000a98:	f001 f9be 	bl	8001e18 <HAL_Delay>
	cmd = 0x00;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, 0x07, &cmd, 1);
 8000aa0:	f107 020f 	add.w	r2, r7, #15
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	2107      	movs	r1, #7
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff43 	bl	8000934 <spiRegWrite>
	HAL_Delay(100);
 8000aae:	2064      	movs	r0, #100	; 0x64
 8000ab0:	f001 f9b2 	bl	8001e18 <HAL_Delay>
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <clearFIFOFlag>:
	clearFIFOFlag(pCtrl);
	//printf("Reseting FIFO Pointers\n");
	//resetFIFOPointers(pCtrl);
}

void clearFIFOFlag(ArducamController* pCtrl){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_FLAG_CLR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 8000ac8:	f107 020f 	add.w	r2, r7, #15
 8000acc:	2301      	movs	r3, #1
 8000ace:	2104      	movs	r1, #4
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff2f 	bl	8000934 <spiRegWrite>
}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <resetFIFOPointers>:

void resetFIFOPointers(ArducamController* pCtrl){
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_PTR_CLR;
 8000ae6:	2330      	movs	r3, #48	; 0x30
 8000ae8:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 8000aea:	f107 020f 	add.w	r2, r7, #15
 8000aee:	2301      	movs	r3, #1
 8000af0:	2104      	movs	r1, #4
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ff1e 	bl	8000934 <spiRegWrite>
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <setCaptureFlag>:

void setCaptureFlag(ArducamController* pCtrl){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	uint8_t cmd = SET_CAPTURE_FLAG;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 8000b0c:	f107 020f 	add.w	r2, r7, #15
 8000b10:	2301      	movs	r3, #1
 8000b12:	2104      	movs	r1, #4
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff0d 	bl	8000934 <spiRegWrite>
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <setNCaptureFrames>:

void setNCaptureFrames(ArducamController* pCtrl, int n){
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
	uint8_t cmd = 0b00000001;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
	if((0 < n) && (n <= 7)){ cmd = (uint8_t) n; }
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	dd05      	ble.n	8000b42 <setNCaptureFrames+0x20>
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	dc02      	bgt.n	8000b42 <setNCaptureFrames+0x20>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	73fb      	strb	r3, [r7, #15]

	spiRegWrite(pCtrl, CAPTURE_CONTROL_REG, &cmd, 1);
 8000b42:	f107 020f 	add.w	r2, r7, #15
 8000b46:	2301      	movs	r3, #1
 8000b48:	2101      	movs	r1, #1
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fef2 	bl	8000934 <spiRegWrite>
}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <getFIFOLength>:

//How we find the number of bytes the FIFO is holding (for burst reading)
uint32_t getFIFOLength(ArducamController *pCtrl){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	uint32_t reg0, reg1, reg2 = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
	uint32_t fifoLength = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

	spiRegRead(pCtrl, FIFO_BYTE0, (uint8_t*) &reg0, 1);
 8000b68:	f107 0210 	add.w	r2, r7, #16
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	2142      	movs	r1, #66	; 0x42
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff1f 	bl	80009b4 <spiRegRead>
	spiRegRead(pCtrl, FIFO_BYTE1, (uint8_t*) &reg1, 1);
 8000b76:	f107 020c 	add.w	r2, r7, #12
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	2143      	movs	r1, #67	; 0x43
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ff18 	bl	80009b4 <spiRegRead>
	spiRegRead(pCtrl, FIFO_BYTE2, (uint8_t*) &reg2, 1);
 8000b84:	f107 0208 	add.w	r2, r7, #8
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2144      	movs	r1, #68	; 0x44
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff11 	bl	80009b4 <spiRegRead>
	reg2 = reg2 & 0x7F;
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b98:	60bb      	str	r3, [r7, #8]

	fifoLength = ((reg2 << 16) | (reg1 << 8) | reg0) & 0x007FFFFF;
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	041a      	lsls	r2, r3, #16
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000bac:	617b      	str	r3, [r7, #20]
	printf("FIFO Length : %lu\n", fifoLength);
 8000bae:	6979      	ldr	r1, [r7, #20]
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <getFIFOLength+0x68>)
 8000bb2:	f006 fc07 	bl	80073c4 <iprintf>
	return fifoLength;
 8000bb6:	697b      	ldr	r3, [r7, #20]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	08008250 	.word	0x08008250

08000bc4 <enable>:

void enable(ArducamController* pCtrl){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pCSPort, pCtrl->csPinNo, GPIO_PIN_RESET);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68d8      	ldr	r0, [r3, #12]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	8a1b      	ldrh	r3, [r3, #16]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f001 fbd2 	bl	8002380 <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <disable>:

void disable(ArducamController* pCtrl){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pCSPort, pCtrl->csPinNo, GPIO_PIN_SET);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68d8      	ldr	r0, [r3, #12]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	8a1b      	ldrh	r3, [r3, #16]
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f001 fbc2 	bl	8002380 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <flashOn>:

void flashOn(ArducamController* pCtrl){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pFlashPort, pCtrl->flashPinNo, GPIO_PIN_SET);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6958      	ldr	r0, [r3, #20]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	8b1b      	ldrh	r3, [r3, #24]
 8000c14:	2201      	movs	r2, #1
 8000c16:	4619      	mov	r1, r3
 8000c18:	f001 fbb2 	bl	8002380 <HAL_GPIO_WritePin>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <flashOff>:

void flashOff(ArducamController* pCtrl){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pFlashPort, pCtrl->flashPinNo, GPIO_PIN_RESET);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6958      	ldr	r0, [r3, #20]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	8b1b      	ldrh	r3, [r3, #24]
 8000c34:	2200      	movs	r2, #0
 8000c36:	4619      	mov	r1, r3
 8000c38:	f001 fba2 	bl	8002380 <HAL_GPIO_WritePin>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <initServoController>:
#include "ServoController.h"

void initServoController(ServoController *pCtrl, Servo *servoList[]){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	printf("Initializing Servo Controller\n");
 8000c4e:	481e      	ldr	r0, [pc, #120]	; (8000cc8 <initServoController+0x84>)
 8000c50:	f006 fc1e 	bl	8007490 <puts>
	pCtrl->servoList = servoList;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	605a      	str	r2, [r3, #4]
	pCtrl->status = HAL_OK;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	721a      	strb	r2, [r3, #8]

	//TODO:Will need to fix the indexing of the Servo list to be safer
	int i = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
	Servo *pServo = pCtrl->servoList[0];
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	60bb      	str	r3, [r7, #8]
	while(pServo != NULL){
 8000c6c:	e022      	b.n	8000cb4 <initServoController+0x70>
		pServo = pCtrl -> servoList[i];
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	60bb      	str	r3, [r7, #8]
		pCtrl->status = HAL_TIM_PWM_Start(pServo->pTIMHandle, pServo->channel);
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4610      	mov	r0, r2
 8000c88:	f004 fbfc 	bl	8005484 <HAL_TIM_PWM_Start>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	721a      	strb	r2, [r3, #8]
		if(pCtrl->status != HAL_OK){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7a1b      	ldrb	r3, [r3, #8]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d008      	beq.n	8000cae <initServoController+0x6a>
			printf("Failed to Start PWM for Servo #%lu | Status : %d\n", pServo->channel, pCtrl->status);
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	6859      	ldr	r1, [r3, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7a1b      	ldrb	r3, [r3, #8]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4809      	ldr	r0, [pc, #36]	; (8000ccc <initServoController+0x88>)
 8000ca8:	f006 fb8c 	bl	80073c4 <iprintf>
			break;
 8000cac:	e005      	b.n	8000cba <initServoController+0x76>
		}
		i++;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
	while(pServo != NULL){
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1d9      	bne.n	8000c6e <initServoController+0x2a>
	}
	resetAllServos(pCtrl);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f000 f808 	bl	8000cd0 <resetAllServos>
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	080083b4 	.word	0x080083b4
 8000ccc:	080083d4 	.word	0x080083d4

08000cd0 <resetAllServos>:

void resetAllServos(ServoController *pCtrl){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	printf("Resetting Servos\n");
 8000cd8:	4818      	ldr	r0, [pc, #96]	; (8000d3c <resetAllServos+0x6c>)
 8000cda:	f006 fbd9 	bl	8007490 <puts>

	int i = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
	Servo *pServo = pCtrl->servoList[0];
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	613b      	str	r3, [r7, #16]
	while(pServo != NULL){
 8000cea:	e01e      	b.n	8000d2a <resetAllServos+0x5a>
		Servo *pServo = pCtrl->servoList[i];
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
		pCtrl->status = setServoPosition(pServo, SERVO_POS_CENTER);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	68f8      	ldr	r0, [r7, #12]
 8000cfe:	f000 f821 	bl	8000d44 <setServoPosition>
 8000d02:	4603      	mov	r3, r0
 8000d04:	461a      	mov	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	721a      	strb	r2, [r3, #8]
		if(pCtrl->status != HAL_OK){
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7a1b      	ldrb	r3, [r3, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d008      	beq.n	8000d24 <resetAllServos+0x54>
			printf("Failed to Reset Servo #%lu\n | Status : %d", pServo->channel, pCtrl->status);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6859      	ldr	r1, [r3, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7a1b      	ldrb	r3, [r3, #8]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4808      	ldr	r0, [pc, #32]	; (8000d40 <resetAllServos+0x70>)
 8000d1e:	f006 fb51 	bl	80073c4 <iprintf>
			break;
 8000d22:	e006      	b.n	8000d32 <resetAllServos+0x62>
		}
		i++;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
	while(pServo != NULL){
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1dd      	bne.n	8000cec <resetAllServos+0x1c>
	}
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	08008408 	.word	0x08008408
 8000d40:	0800841c 	.word	0x0800841c

08000d44 <setServoPosition>:

//https://www.youtube.com/watch?v=AjN58ceQaF4
//http://www.ee.ic.ac.uk/pcheung/teaching/DE1_EE/stores/sg90_datasheet.pdf
//Position in degrees
HAL_StatusTypeDef setServoPosition(Servo* pServo, int position){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	// TODO: Learn the PWM part to change servo position
	//Just a guess
	printf("Setting Servo #%lu to %d\n", pServo->channel, position);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	481b      	ldr	r0, [pc, #108]	; (8000dc4 <setServoPosition+0x80>)
 8000d58:	f006 fb34 	bl	80073c4 <iprintf>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	619a      	str	r2, [r3, #24]
	uint32_t positionAsPulse = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
	if(position == SERVO_POS_LEFT){
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8000d7a:	d103      	bne.n	8000d84 <setServoPosition+0x40>
		positionAsPulse = 2800;
 8000d7c:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
 8000d82:	e009      	b.n	8000d98 <setServoPosition+0x54>
	} else if(position == SERVO_POS_CENTER){
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d103      	bne.n	8000d92 <setServoPosition+0x4e>
		positionAsPulse = 4200;
 8000d8a:	f241 0368 	movw	r3, #4200	; 0x1068
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d90:	e002      	b.n	8000d98 <setServoPosition+0x54>
	} else {
		positionAsPulse = 5600;
 8000d92:	f44f 53af 	mov.w	r3, #5600	; 0x15e0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d98:	2360      	movs	r3, #96	; 0x60
 8000d9a:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = positionAsPulse; //TODO: Period = 140000 rn, see if this makes Servo pulsewidth 1.5ms (0 position)
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]

	return HAL_TIM_PWM_ConfigChannel(pServo->pTIMHandle, &sConfigOC, pServo->channel);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4619      	mov	r1, r3
 8000db6:	f004 fc6b 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 8000dba:	4603      	mov	r3, r0

}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	08008448 	.word	0x08008448

08000dc8 <initESP>:
const char* STATUS_SNAP = "Taking a Picture\n";
const char* STATUS_ARCHIDEKT = "Sending Deck to Archidekt\n";
const char* STATUS_SHUTDOWN = "Shutting Down\n";
const char* STATUS_UNKNOWN = "Unknown Action";

void initESP(WiFiController* pCtrl, UART_HandleTypeDef* pUARTHandle, GPIO_TypeDef* pGPIOPort, uint16_t readyFlagPin){
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	807b      	strh	r3, [r7, #2]
	pCtrl->pUARTHandle = pUARTHandle;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	68ba      	ldr	r2, [r7, #8]
 8000dda:	601a      	str	r2, [r3, #0]
	pCtrl->pGPIOPort = pGPIOPort;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	605a      	str	r2, [r3, #4]
	pCtrl->readyFlagPin = readyFlagPin;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	887a      	ldrh	r2, [r7, #2]
 8000de6:	811a      	strh	r2, [r3, #8]
	pCtrl->status = HAL_OK;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2200      	movs	r2, #0
 8000dec:	729a      	strb	r2, [r3, #10]
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <signalReady>:

void signalReady(WiFiController* pCtrl){
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->readyFlagPin, GPIO_PIN_SET);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6858      	ldr	r0, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	891b      	ldrh	r3, [r3, #8]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f001 fab7 	bl	8002380 <HAL_GPIO_WritePin>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <signalBusy>:

void signalBusy(WiFiController* pCtrl){
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->readyFlagPin, GPIO_PIN_RESET);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6858      	ldr	r0, [r3, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	891b      	ldrh	r3, [r3, #8]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f001 faa7 	bl	8002380 <HAL_GPIO_WritePin>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <getNextCMD>:

HAL_StatusTypeDef getNextCMD(WiFiController* pCtrl, char *pCMDBuffer){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef cmdStatus = HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
	printf("Waiting for next CMD...\n");
 8000e4a:	481e      	ldr	r0, [pc, #120]	; (8000ec4 <getNextCMD+0x88>)
 8000e4c:	f006 fb20 	bl	8007490 <puts>
	signalReady(pCtrl);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffd2 	bl	8000dfa <signalReady>
	HAL_Delay(ESP_READY_DELAY); // Wait for ESP to send the data
 8000e56:	2064      	movs	r0, #100	; 0x64
 8000e58:	f000 ffde 	bl	8001e18 <HAL_Delay>
	cmdStatus = HAL_UART_Receive(pCtrl->pUARTHandle, (uint8_t*) pCMDBuffer, 8, ESP_CMD_TIMEOUT); // Waits 60s for a CMD, then yields control
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6818      	ldr	r0, [r3, #0]
 8000e60:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000e64:	2208      	movs	r2, #8
 8000e66:	6839      	ldr	r1, [r7, #0]
 8000e68:	f005 fb80 	bl	800656c <HAL_UART_Receive>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73fb      	strb	r3, [r7, #15]
	switch(cmdStatus){
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d81e      	bhi.n	8000eb4 <getNextCMD+0x78>
 8000e76:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <getNextCMD+0x40>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000e8d 	.word	0x08000e8d
 8000e80:	08000e9f 	.word	0x08000e9f
 8000e84:	08000e97 	.word	0x08000e97
 8000e88:	08000ead 	.word	0x08000ead
		case HAL_OK:
			printf("CMD: %s\n", pCMDBuffer);
 8000e8c:	6839      	ldr	r1, [r7, #0]
 8000e8e:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <getNextCMD+0x8c>)
 8000e90:	f006 fa98 	bl	80073c4 <iprintf>
			break;
 8000e94:	e00e      	b.n	8000eb4 <getNextCMD+0x78>
		case HAL_BUSY:
			printf("CMD Buffer (RX) Busy\n");
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <getNextCMD+0x90>)
 8000e98:	f006 fafa 	bl	8007490 <puts>
			break;
 8000e9c:	e00a      	b.n	8000eb4 <getNextCMD+0x78>
		case HAL_ERROR:
			printf("Error reading CMD from ESP\n");
 8000e9e:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <getNextCMD+0x94>)
 8000ea0:	f006 faf6 	bl	8007490 <puts>
			pCtrl->status = HAL_ERROR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	729a      	strb	r2, [r3, #10]
			break;
 8000eaa:	e003      	b.n	8000eb4 <getNextCMD+0x78>
		case HAL_TIMEOUT:
			printf("Timed out waiting for CMD\n");
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <getNextCMD+0x98>)
 8000eae:	f006 faef 	bl	8007490 <puts>
			break;
 8000eb2:	bf00      	nop
	}

	signalBusy(pCtrl);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ffb0 	bl	8000e1a <signalBusy>
	return cmdStatus;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	080084f0 	.word	0x080084f0
 8000ec8:	08008508 	.word	0x08008508
 8000ecc:	08008514 	.word	0x08008514
 8000ed0:	0800852c 	.word	0x0800852c
 8000ed4:	08008548 	.word	0x08008548

08000ed8 <flushCMDBuffer>:

// Cleans out the ESP_RX buffer
// Note: Using this in the loop removes the ability to make a "Command Queue", so the buffer can only ever have one CMD at a time
void flushCMDBuffer(WiFiController* pCtrl){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	uint8_t byteRead = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
	while(status == HAL_OK){
 8000ee8:	e009      	b.n	8000efe <flushCMDBuffer+0x26>
		status = HAL_UART_Receive(pCtrl->pUARTHandle, &byteRead, 1, 0); //Should become HAL_TIMEOUT when there is no data left
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	f107 010e 	add.w	r1, r7, #14
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f005 fb39 	bl	800656c <HAL_UART_Receive>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]
	while(status == HAL_OK){
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f2      	beq.n	8000eea <flushCMDBuffer+0x12>
	}
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <sendData>:

HAL_StatusTypeDef sendData(WiFiController* pCtrl, uint8_t* pDataBuffer, uint16_t size){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	80fb      	strh	r3, [r7, #6]
	printf("Sending %u bytes to ESP\n", size);
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	4619      	mov	r1, r3
 8000f22:	480a      	ldr	r0, [pc, #40]	; (8000f4c <sendData+0x3c>)
 8000f24:	f006 fa4e 	bl	80073c4 <iprintf>
	pCtrl->status = HAL_UART_Transmit(pCtrl->pUARTHandle, pDataBuffer, size, HAL_MAX_DELAY);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	88fa      	ldrh	r2, [r7, #6]
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	f005 fa90 	bl	8006458 <HAL_UART_Transmit>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	729a      	strb	r2, [r3, #10]
	return pCtrl -> status;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	7a9b      	ldrb	r3, [r3, #10]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	08008564 	.word	0x08008564

08000f50 <initHelpers>:
#include "helpers.h"

UART_HandleTypeDef *pHUART;
I2C_HandleTypeDef *pHI2C;

void initHelpers(UART_HandleTypeDef* pUHandle, I2C_HandleTypeDef *pIHandle){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	pHUART = pUHandle;
 8000f5a:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <initHelpers+0x24>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6013      	str	r3, [r2, #0]
	pHI2C = pIHandle;
 8000f60:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <initHelpers+0x28>)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	6013      	str	r3, [r2, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200000a0 	.word	0x200000a0
 8000f78:	200000a4 	.word	0x200000a4

08000f7c <checkBit>:

//Returns the value of the bit at index in num
//Ex: checkBit(0x05, 2) == 2
int checkBit(uint8_t num, int index){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
	return (int) ((num >> index) & 0x01);
 8000f88:	79fa      	ldrb	r2, [r7, #7]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	fa42 f303 	asr.w	r3, r2, r3
 8000f90:	f003 0301 	and.w	r3, r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(pHUART, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <__io_putchar+0x24>)
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	1d39      	adds	r1, r7, #4
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f005 fa50 	bl	8006458 <HAL_UART_Transmit>
  return ch;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200000a0 	.word	0x200000a0

08000fc8 <statusToString>:
			printf("Device found at Addr 0x%02X", i);
		}
	}
}

char* statusToString(HAL_StatusTypeDef status){
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	switch(status){
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d813      	bhi.n	8001000 <statusToString+0x38>
 8000fd8:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <statusToString+0x18>)
 8000fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fde:	bf00      	nop
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	08000ff5 	.word	0x08000ff5
 8000fe8:	08000ff9 	.word	0x08000ff9
 8000fec:	08000ffd 	.word	0x08000ffd
		case HAL_OK:
			return "HAL_OK";
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <statusToString+0x48>)
 8000ff2:	e006      	b.n	8001002 <statusToString+0x3a>
		case HAL_ERROR:
			return "HAL_ERROR";
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <statusToString+0x4c>)
 8000ff6:	e004      	b.n	8001002 <statusToString+0x3a>
		case HAL_BUSY:
			return "HAL_BUSY";
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <statusToString+0x50>)
 8000ffa:	e002      	b.n	8001002 <statusToString+0x3a>
		case HAL_TIMEOUT:
			return "HAL_TIMEOUT";
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <statusToString+0x54>)
 8000ffe:	e000      	b.n	8001002 <statusToString+0x3a>
		default:
			return "UNKNOWN STATUS";
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <statusToString+0x58>)
	}
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	0800859c 	.word	0x0800859c
 8001014:	080085a4 	.word	0x080085a4
 8001018:	080085b0 	.word	0x080085b0
 800101c:	080085bc 	.word	0x080085bc
 8001020:	080085c8 	.word	0x080085c8

08001024 <fullStatusReport>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void fullStatusReport(ArducamController* pArducam, WiFiController* pESP, ServoController* pServoController){
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]

	if(!pArducam){ printf("Null Arducam Pointer!\n"); }
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d102      	bne.n	800103c <fullStatusReport+0x18>
 8001036:	4815      	ldr	r0, [pc, #84]	; (800108c <fullStatusReport+0x68>)
 8001038:	f006 fa2a 	bl	8007490 <puts>
	if(!pESP){ printf("Null WiFiController Pointer!\n"); }
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d102      	bne.n	8001048 <fullStatusReport+0x24>
 8001042:	4813      	ldr	r0, [pc, #76]	; (8001090 <fullStatusReport+0x6c>)
 8001044:	f006 fa24 	bl	8007490 <puts>
	if(!pServoController){ printf("Null ServoController Pointer!\n"); }
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <fullStatusReport+0x30>
 800104e:	4811      	ldr	r0, [pc, #68]	; (8001094 <fullStatusReport+0x70>)
 8001050:	f006 fa1e 	bl	8007490 <puts>

	printf("Arducam Status : %s\nESP Status : %s\nServo Status : %s\n", statusToString(pArducam->status), statusToString(pESP->status), statusToString(pServoController->status));
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	7a1b      	ldrb	r3, [r3, #8]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ffb5 	bl	8000fc8 <statusToString>
 800105e:	4604      	mov	r4, r0
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	7a9b      	ldrb	r3, [r3, #10]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ffaf 	bl	8000fc8 <statusToString>
 800106a:	4605      	mov	r5, r0
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7a1b      	ldrb	r3, [r3, #8]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ffa9 	bl	8000fc8 <statusToString>
 8001076:	4603      	mov	r3, r0
 8001078:	462a      	mov	r2, r5
 800107a:	4621      	mov	r1, r4
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <fullStatusReport+0x74>)
 800107e:	f006 f9a1 	bl	80073c4 <iprintf>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bdb0      	pop	{r4, r5, r7, pc}
 800108a:	bf00      	nop
 800108c:	080085d8 	.word	0x080085d8
 8001090:	080085f0 	.word	0x080085f0
 8001094:	08008610 	.word	0x08008610
 8001098:	08008630 	.word	0x08008630

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b09c      	sub	sp, #112	; 0x70
 80010a0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a2:	f000 fe3d 	bl	8001d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a6:	f000 f945 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010aa:	f000 faf5 	bl	8001698 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010ae:	f000 f993 	bl	80013d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010b2:	f000 f9d1 	bl	8001458 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80010b6:	f000 fabf 	bl	8001638 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80010ba:	f000 fa8d 	bl	80015d8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010be:	f000 fa09 	bl	80014d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //Initialize Helper Functions


  initHelpers(&huart2, &hi2c1);
 80010c2:	4983      	ldr	r1, [pc, #524]	; (80012d0 <main+0x234>)
 80010c4:	4883      	ldr	r0, [pc, #524]	; (80012d4 <main+0x238>)
 80010c6:	f7ff ff43 	bl	8000f50 <initHelpers>

  //Set up buffers
  uint8_t *pictureBuffer = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	65bb      	str	r3, [r7, #88]	; 0x58
  uint16_t pictureBufferSize = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

  char pCMDBuffer[] = "CMDBUFFR";
 80010d4:	4a80      	ldr	r2, [pc, #512]	; (80012d8 <main+0x23c>)
 80010d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010da:	ca07      	ldmia	r2, {r0, r1, r2}
 80010dc:	c303      	stmia	r3!, {r0, r1}
 80010de:	701a      	strb	r2, [r3, #0]

  //Initialize the Peripheral Controllers
  ArducamController arducam;
  WiFiController esp32;
  ServoController servoController;
  Servo leftServo = {.pTIMHandle = &htim2, .channel = TIM_CHANNEL_1};
 80010e0:	4b7e      	ldr	r3, [pc, #504]	; (80012dc <main+0x240>)
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  Servo rightServo = {.pTIMHandle = &htim2, .channel = TIM_CHANNEL_2};
 80010e8:	4a7d      	ldr	r2, [pc, #500]	; (80012e0 <main+0x244>)
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f2:	e883 0003 	stmia.w	r3, {r0, r1}
  Servo *servoList[] = {&leftServo, &rightServo};
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	607b      	str	r3, [r7, #4]

  initServoController(&servoController, servoList);
 8001102:	463a      	mov	r2, r7
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fd9a 	bl	8000c44 <initServoController>
  initArducam(&arducam, &hi2c1, &hspi1, CAM_CS_GPIO_Port, CAM_CS_Pin, CAM_FLASH_GPIO_Port, CAM_FLASH_Pin);
 8001110:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001114:	2340      	movs	r3, #64	; 0x40
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <main+0x248>)
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001126:	4a70      	ldr	r2, [pc, #448]	; (80012e8 <main+0x24c>)
 8001128:	4969      	ldr	r1, [pc, #420]	; (80012d0 <main+0x234>)
 800112a:	f7ff fa2f 	bl	800058c <initArducam>
  initESP(&esp32, &huart1, READY_FLAG_GPIO_Port, READY_FLAG_Pin);
 800112e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	4a6b      	ldr	r2, [pc, #428]	; (80012e4 <main+0x248>)
 8001136:	496d      	ldr	r1, [pc, #436]	; (80012ec <main+0x250>)
 8001138:	f7ff fe46 	bl	8000dc8 <initESP>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  flushCMDBuffer(&esp32); //Clear out any old commands that may have come in while Assistant wasn't looking
 800113c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fec9 	bl	8000ed8 <flushCMDBuffer>
  while (esp32.status == HAL_OK) // Might add the other Controllers here if needed
 8001146:	e0a1      	b.n	800128c <main+0x1f0>
  {
	// Continuously look for commands on ESP_RX, as long as ESP is working
	if(getNextCMD(&esp32, pCMDBuffer) == HAL_OK){
 8001148:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fe72 	bl	8000e3c <getNextCMD>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	f040 808c 	bne.w	8001278 <main+0x1dc>
		if(strcmp(pCMDBuffer, LIGHTS_ON) == 0){
 8001160:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001164:	4962      	ldr	r1, [pc, #392]	; (80012f0 <main+0x254>)
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f832 	bl	80001d0 <strcmp>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10a      	bne.n	8001188 <main+0xec>
			//Turn the Flash On
			printf(STATUS_LIGHTS_ON);
 8001172:	4b60      	ldr	r3, [pc, #384]	; (80012f4 <main+0x258>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f006 f924 	bl	80073c4 <iprintf>
			flashOn(&arducam);
 800117c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fd3f 	bl	8000c04 <flashOn>
 8001186:	e077      	b.n	8001278 <main+0x1dc>
		} else if (strcmp(pCMDBuffer, LIGHTS_OFF) == 0){
 8001188:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800118c:	495a      	ldr	r1, [pc, #360]	; (80012f8 <main+0x25c>)
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f81e 	bl	80001d0 <strcmp>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10a      	bne.n	80011b0 <main+0x114>
			//Turn the Flash Off
			printf(STATUS_LIGHTS_OFF);
 800119a:	4b58      	ldr	r3, [pc, #352]	; (80012fc <main+0x260>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f006 f910 	bl	80073c4 <iprintf>
			flashOff(&arducam);
 80011a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fd3b 	bl	8000c24 <flashOff>
 80011ae:	e063      	b.n	8001278 <main+0x1dc>
		} else if (strcmp(pCMDBuffer, SHUFFLE) == 0){
 80011b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011b4:	4952      	ldr	r1, [pc, #328]	; (8001300 <main+0x264>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f80a 	bl	80001d0 <strcmp>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d105      	bne.n	80011ce <main+0x132>
			//Begin Shuffle Sequence
			//TODO: Make a ServoController Module
			printf(STATUS_SHUFFLE);
 80011c2:	4b50      	ldr	r3, [pc, #320]	; (8001304 <main+0x268>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f006 f8fc 	bl	80073c4 <iprintf>
 80011cc:	e054      	b.n	8001278 <main+0x1dc>
		} else if (strcmp(pCMDBuffer, SNAP) == 0){
 80011ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011d2:	494d      	ldr	r1, [pc, #308]	; (8001308 <main+0x26c>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7fe fffb 	bl	80001d0 <strcmp>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d125      	bne.n	800122c <main+0x190>
			//Take a Single Picture and Sends it to the ESP
			//TODO: Will need to store picture data in SD card instead
			printf(STATUS_SNAP);
 80011e0:	4b4a      	ldr	r3, [pc, #296]	; (800130c <main+0x270>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f006 f8ed 	bl	80073c4 <iprintf>
			pictureBufferSize = singleCapture(&arducam, &pictureBuffer);
 80011ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80011ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fa41 	bl	800067c <singleCapture>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			if(sendData(&esp32, pictureBuffer, pictureBufferSize) != HAL_OK){
 8001200:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001202:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fe80 	bl	8000f10 <sendData>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d030      	beq.n	8001278 <main+0x1dc>
				printf("Failed to send photo data to ESP | Status = %s\n", statusToString(esp32.status));
 8001216:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fed4 	bl	8000fc8 <statusToString>
 8001220:	4603      	mov	r3, r0
 8001222:	4619      	mov	r1, r3
 8001224:	483a      	ldr	r0, [pc, #232]	; (8001310 <main+0x274>)
 8001226:	f006 f8cd 	bl	80073c4 <iprintf>
 800122a:	e025      	b.n	8001278 <main+0x1dc>
			}
		} else if (strcmp(pCMDBuffer, ARCHIDEKT) == 0){
 800122c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001230:	4938      	ldr	r1, [pc, #224]	; (8001314 <main+0x278>)
 8001232:	4618      	mov	r0, r3
 8001234:	f7fe ffcc 	bl	80001d0 <strcmp>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d105      	bne.n	800124a <main+0x1ae>
			// Send the Deck to Archidekt
			// Idea : Capture 100 photos, send each to ESP to go to curl for Image to Text API, then Receive Text, (display it?), send out to Archidekt
			// Might be best to split into a "SCAN" cmd that scans a single card and prints the card name (at least for testing) and an "Archidekt" CMD
			printf(STATUS_ARCHIDEKT);
 800123e:	4b36      	ldr	r3, [pc, #216]	; (8001318 <main+0x27c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f006 f8be 	bl	80073c4 <iprintf>
 8001248:	e016      	b.n	8001278 <main+0x1dc>
		} else if (strcmp(pCMDBuffer, SHUTDOWN) == 0){
 800124a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800124e:	4933      	ldr	r1, [pc, #204]	; (800131c <main+0x280>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7fe ffbd 	bl	80001d0 <strcmp>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <main+0x1cc>
			//Stop waiting for commands and exit the loop
			printf(STATUS_SHUTDOWN);
 800125c:	4b30      	ldr	r3, [pc, #192]	; (8001320 <main+0x284>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f006 f8af 	bl	80073c4 <iprintf>
			break;
 8001266:	e016      	b.n	8001296 <main+0x1fa>
		} else { //Some strange command
			printf("%s: \'%s\'\n", STATUS_UNKNOWN, pCMDBuffer);
 8001268:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <main+0x288>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001270:	4619      	mov	r1, r3
 8001272:	482d      	ldr	r0, [pc, #180]	; (8001328 <main+0x28c>)
 8001274:	f006 f8a6 	bl	80073c4 <iprintf>
		}
	}

	flushCMDBuffer(&esp32); // Flush again just to be sure the buffer is clear for the next command
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe2b 	bl	8000ed8 <flushCMDBuffer>
	signalReady(&esp32);
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fdb7 	bl	8000dfa <signalReady>
  while (esp32.status == HAL_OK) // Might add the other Controllers here if needed
 800128c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001290:	2b00      	cmp	r3, #0
 8001292:	f43f af59 	beq.w	8001148 <main+0xac>
  }
  	printf("Exited Loop.\n");
 8001296:	4825      	ldr	r0, [pc, #148]	; (800132c <main+0x290>)
 8001298:	f006 f8fa 	bl	8007490 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	fullStatusReport(&arducam, &esp32, &servoController); // Just prints the statuses of every peripheral
 800129c:	f107 0218 	add.w	r2, r7, #24
 80012a0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff febb 	bl	8001024 <fullStatusReport>
	flushCMDBuffer(&esp32);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe10 	bl	8000ed8 <flushCMDBuffer>
	free(pictureBuffer);
 80012b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 ff0c 	bl	80070d8 <free>
	printf("Goodbye!\n");
 80012c0:	481b      	ldr	r0, [pc, #108]	; (8001330 <main+0x294>)
 80012c2:	f006 f8e5 	bl	8007490 <puts>
 80012c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3760      	adds	r7, #96	; 0x60
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000a8 	.word	0x200000a8
 80012d4:	20000234 	.word	0x20000234
 80012d8:	080086c0 	.word	0x080086c0
 80012dc:	20000160 	.word	0x20000160
 80012e0:	080086cc 	.word	0x080086cc
 80012e4:	48000800 	.word	0x48000800
 80012e8:	200000fc 	.word	0x200000fc
 80012ec:	200001ac 	.word	0x200001ac
 80012f0:	080088b8 	.word	0x080088b8
 80012f4:	20000000 	.word	0x20000000
 80012f8:	080088c4 	.word	0x080088c4
 80012fc:	20000004 	.word	0x20000004
 8001300:	080088d0 	.word	0x080088d0
 8001304:	20000008 	.word	0x20000008
 8001308:	080088dc 	.word	0x080088dc
 800130c:	2000000c 	.word	0x2000000c
 8001310:	08008668 	.word	0x08008668
 8001314:	080088e8 	.word	0x080088e8
 8001318:	20000010 	.word	0x20000010
 800131c:	080088f4 	.word	0x080088f4
 8001320:	20000014 	.word	0x20000014
 8001324:	20000018 	.word	0x20000018
 8001328:	08008698 	.word	0x08008698
 800132c:	080086a4 	.word	0x080086a4
 8001330:	080086b4 	.word	0x080086b4

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b096      	sub	sp, #88	; 0x58
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	2244      	movs	r2, #68	; 0x44
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f006 f984 	bl	8007650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	463b      	mov	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001356:	f44f 7000 	mov.w	r0, #512	; 0x200
 800135a:	f001 fd9b 	bl	8002e94 <HAL_PWREx_ControlVoltageScaling>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001364:	f000 fa14 	bl	8001790 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001368:	2302      	movs	r3, #2
 800136a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001370:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001372:	2310      	movs	r3, #16
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001376:	2302      	movs	r3, #2
 8001378:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800137a:	2302      	movs	r3, #2
 800137c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800137e:	2301      	movs	r3, #1
 8001380:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 14;
 8001382:	230e      	movs	r3, #14
 8001384:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001386:	2307      	movs	r3, #7
 8001388:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800138a:	2302      	movs	r3, #2
 800138c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800138e:	2304      	movs	r3, #4
 8001390:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4618      	mov	r0, r3
 8001398:	f001 fdd2 	bl	8002f40 <HAL_RCC_OscConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013a2:	f000 f9f5 	bl	8001790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a6:	230f      	movs	r3, #15
 80013a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013aa:	2303      	movs	r3, #3
 80013ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80013ae:	23a0      	movs	r3, #160	; 0xa0
 80013b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 f99a 	bl	80036f8 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013ca:	f000 f9e1 	bl	8001790 <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3758      	adds	r7, #88	; 0x58
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_I2C1_Init+0x74>)
 80013de:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <MX_I2C1_Init+0x78>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101926;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_I2C1_Init+0x74>)
 80013e4:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <MX_I2C1_Init+0x7c>)
 80013e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_I2C1_Init+0x74>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_I2C1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_I2C1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_I2C1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001412:	480e      	ldr	r0, [pc, #56]	; (800144c <MX_I2C1_Init+0x74>)
 8001414:	f000 ffcc 	bl	80023b0 <HAL_I2C_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800141e:	f000 f9b7 	bl	8001790 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001422:	2100      	movs	r1, #0
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <MX_I2C1_Init+0x74>)
 8001426:	f001 fc8f 	bl	8002d48 <HAL_I2CEx_ConfigAnalogFilter>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001430:	f000 f9ae 	bl	8001790 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001434:	2100      	movs	r1, #0
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_I2C1_Init+0x74>)
 8001438:	f001 fcd1 	bl	8002dde <HAL_I2CEx_ConfigDigitalFilter>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001442:	f000 f9a5 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000a8 	.word	0x200000a8
 8001450:	40005400 	.word	0x40005400
 8001454:	00101926 	.word	0x00101926

08001458 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <MX_SPI1_Init+0x74>)
 800145e:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <MX_SPI1_Init+0x78>)
 8001460:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_SPI1_Init+0x74>)
 8001464:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001468:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_SPI1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_SPI1_Init+0x74>)
 8001472:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001476:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_SPI1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_SPI1_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_SPI1_Init+0x74>)
 8001486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_SPI1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_SPI1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_SPI1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_SPI1_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_SPI1_Init+0x74>)
 80014a6:	2207      	movs	r2, #7
 80014a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_SPI1_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_SPI1_Init+0x74>)
 80014b2:	2208      	movs	r2, #8
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_SPI1_Init+0x74>)
 80014b8:	f002 fffe 	bl	80044b8 <HAL_SPI_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014c2:	f000 f965 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000fc 	.word	0x200000fc
 80014d0:	40013000 	.word	0x40013000

080014d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	; 0x38
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f4:	463b      	mov	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001506:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <MX_TIM2_Init+0xfc>)
 8001508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800150c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <MX_TIM2_Init+0xfc>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <MX_TIM2_Init+0xfc>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 140000;
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <MX_TIM2_Init+0xfc>)
 800151c:	4a2d      	ldr	r2, [pc, #180]	; (80015d4 <MX_TIM2_Init+0x100>)
 800151e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MX_TIM2_Init+0xfc>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <MX_TIM2_Init+0xfc>)
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800152c:	4828      	ldr	r0, [pc, #160]	; (80015d0 <MX_TIM2_Init+0xfc>)
 800152e:	f003 fef1 	bl	8005314 <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001538:	f000 f92a 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001546:	4619      	mov	r1, r3
 8001548:	4821      	ldr	r0, [pc, #132]	; (80015d0 <MX_TIM2_Init+0xfc>)
 800154a:	f004 f9b5 	bl	80058b8 <HAL_TIM_ConfigClockSource>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001554:	f000 f91c 	bl	8001790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001558:	481d      	ldr	r0, [pc, #116]	; (80015d0 <MX_TIM2_Init+0xfc>)
 800155a:	f003 ff32 	bl	80053c2 <HAL_TIM_PWM_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001564:	f000 f914 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	4816      	ldr	r0, [pc, #88]	; (80015d0 <MX_TIM2_Init+0xfc>)
 8001578:	f004 fe98 	bl	80062ac <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001582:	f000 f905 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001586:	2360      	movs	r3, #96	; 0x60
 8001588:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001596:	463b      	mov	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <MX_TIM2_Init+0xfc>)
 800159e:	f004 f877 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015a8:	f000 f8f2 	bl	8001790 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	2204      	movs	r2, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <MX_TIM2_Init+0xfc>)
 80015b4:	f004 f86c 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80015be:	f000 f8e7 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015c2:	4803      	ldr	r0, [pc, #12]	; (80015d0 <MX_TIM2_Init+0xfc>)
 80015c4:	f000 f9cc 	bl	8001960 <HAL_TIM_MspPostInit>

}
 80015c8:	bf00      	nop
 80015ca:	3738      	adds	r7, #56	; 0x38
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000160 	.word	0x20000160
 80015d4:	000222e0 	.word	0x000222e0

080015d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_USART1_UART_Init+0x58>)
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <MX_USART1_UART_Init+0x5c>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_USART1_UART_Init+0x58>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_USART1_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_USART1_UART_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_USART1_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART1_UART_Init+0x58>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_USART1_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART1_UART_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_USART1_UART_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_USART1_UART_Init+0x58>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_USART1_UART_Init+0x58>)
 800161c:	f004 fece 	bl	80063bc <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001626:	f000 f8b3 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001ac 	.word	0x200001ac
 8001634:	40013800 	.word	0x40013800

08001638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_USART2_UART_Init+0x58>)
 800163e:	4a15      	ldr	r2, [pc, #84]	; (8001694 <MX_USART2_UART_Init+0x5c>)
 8001640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_USART2_UART_Init+0x58>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART2_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_USART2_UART_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART2_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART2_UART_Init+0x58>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART2_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART2_UART_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART2_UART_Init+0x58>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART2_UART_Init+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART2_UART_Init+0x58>)
 800167c:	f004 fe9e 	bl	80063bc <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001686:	f000 f883 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000234 	.word	0x20000234
 8001694:	40004400 	.word	0x40004400

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	4b36      	ldr	r3, [pc, #216]	; (8001788 <MX_GPIO_Init+0xf0>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a35      	ldr	r2, [pc, #212]	; (8001788 <MX_GPIO_Init+0xf0>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b33      	ldr	r3, [pc, #204]	; (8001788 <MX_GPIO_Init+0xf0>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <MX_GPIO_Init+0xf0>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a2f      	ldr	r2, [pc, #188]	; (8001788 <MX_GPIO_Init+0xf0>)
 80016cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <MX_GPIO_Init+0xf0>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <MX_GPIO_Init+0xf0>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a29      	ldr	r2, [pc, #164]	; (8001788 <MX_GPIO_Init+0xf0>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b27      	ldr	r3, [pc, #156]	; (8001788 <MX_GPIO_Init+0xf0>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b24      	ldr	r3, [pc, #144]	; (8001788 <MX_GPIO_Init+0xf0>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4a23      	ldr	r2, [pc, #140]	; (8001788 <MX_GPIO_Init+0xf0>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <MX_GPIO_Init+0xf0>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAM_FLASH_Pin|READY_FLAG_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	21c0      	movs	r1, #192	; 0xc0
 8001712:	481e      	ldr	r0, [pc, #120]	; (800178c <MX_GPIO_Init+0xf4>)
 8001714:	f000 fe34 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_CS_GPIO_Port, CAM_CS_Pin, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f000 fe2d 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800172c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4813      	ldr	r0, [pc, #76]	; (800178c <MX_GPIO_Init+0xf4>)
 800173e:	f000 fc75 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_FLASH_Pin READY_FLAG_Pin */
  GPIO_InitStruct.Pin = CAM_FLASH_Pin|READY_FLAG_Pin;
 8001742:	23c0      	movs	r3, #192	; 0xc0
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800174a:	2302      	movs	r3, #2
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <MX_GPIO_Init+0xf4>)
 800175a:	f000 fc67 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_CS_Pin */
  GPIO_InitStruct.Pin = CAM_CS_Pin;
 800175e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_CS_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177a:	f000 fc57 	bl	800202c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000
 800178c:	48000800 	.word	0x48000800

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
}
 8001796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001798:	e7fe      	b.n	8001798 <Error_Handler+0x8>
	...

0800179c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_MspInit+0x44>)
 80017a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_MspInit+0x44>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6613      	str	r3, [r2, #96]	; 0x60
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_MspInit+0x44>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_MspInit+0x44>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_MspInit+0x44>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6593      	str	r3, [r2, #88]	; 0x58
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_MspInit+0x44>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000

080017e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b0ac      	sub	sp, #176	; 0xb0
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2288      	movs	r2, #136	; 0x88
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f005 ff23 	bl	8007650 <memset>
  if(hi2c->Instance==I2C1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a21      	ldr	r2, [pc, #132]	; (8001894 <HAL_I2C_MspInit+0xb0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d13b      	bne.n	800188c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001814:	2340      	movs	r3, #64	; 0x40
 8001816:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001818:	2300      	movs	r3, #0
 800181a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4618      	mov	r0, r3
 8001822:	f002 f98d 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800182c:	f7ff ffb0 	bl	8001790 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_I2C_MspInit+0xb4>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_I2C_MspInit+0xb4>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_I2C_MspInit+0xb4>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001848:	f44f 7340 	mov.w	r3, #768	; 0x300
 800184c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001850:	2312      	movs	r3, #18
 8001852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001862:	2304      	movs	r3, #4
 8001864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800186c:	4619      	mov	r1, r3
 800186e:	480b      	ldr	r0, [pc, #44]	; (800189c <HAL_I2C_MspInit+0xb8>)
 8001870:	f000 fbdc 	bl	800202c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_I2C_MspInit+0xb4>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_I2C_MspInit+0xb4>)
 800187a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800187e:	6593      	str	r3, [r2, #88]	; 0x58
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_I2C_MspInit+0xb4>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	37b0      	adds	r7, #176	; 0xb0
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40005400 	.word	0x40005400
 8001898:	40021000 	.word	0x40021000
 800189c:	48000400 	.word	0x48000400

080018a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a17      	ldr	r2, [pc, #92]	; (800191c <HAL_SPI_MspInit+0x7c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d128      	bne.n	8001914 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_SPI_MspInit+0x80>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c6:	4a16      	ldr	r2, [pc, #88]	; (8001920 <HAL_SPI_MspInit+0x80>)
 80018c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018cc:	6613      	str	r3, [r2, #96]	; 0x60
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_SPI_MspInit+0x80>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_SPI_MspInit+0x80>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_SPI_MspInit+0x80>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_SPI_MspInit+0x80>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018f2:	23e0      	movs	r3, #224	; 0xe0
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001902:	2305      	movs	r3, #5
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001910:	f000 fb8c 	bl	800202c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001914:	bf00      	nop
 8001916:	3728      	adds	r7, #40	; 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40013000 	.word	0x40013000
 8001920:	40021000 	.word	0x40021000

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001934:	d10b      	bne.n	800194e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_TIM_Base_MspInit+0x38>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_TIM_Base_MspInit+0x38>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6593      	str	r3, [r2, #88]	; 0x58
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_TIM_Base_MspInit+0x38>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000

08001960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001980:	d11c      	bne.n	80019bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_TIM_MspPostInit+0x64>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_TIM_MspPostInit+0x64>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_TIM_MspPostInit+0x64>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800199a:	2303      	movs	r3, #3
 800199c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019aa:	2301      	movs	r3, #1
 80019ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f000 fb38 	bl	800202c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b0ae      	sub	sp, #184	; 0xb8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	2288      	movs	r2, #136	; 0x88
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f005 fe31 	bl	8007650 <memset>
  if(huart->Instance==USART1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a43      	ldr	r2, [pc, #268]	; (8001b00 <HAL_UART_MspInit+0x138>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d13d      	bne.n	8001a74 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019fc:	2300      	movs	r3, #0
 80019fe:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 f89b 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a10:	f7ff febe 	bl	8001790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a14:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_UART_MspInit+0x13c>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a18:	4a3a      	ldr	r2, [pc, #232]	; (8001b04 <HAL_UART_MspInit+0x13c>)
 8001a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a20:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_UART_MspInit+0x13c>)
 8001a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2c:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <HAL_UART_MspInit+0x13c>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	4a34      	ldr	r2, [pc, #208]	; (8001b04 <HAL_UART_MspInit+0x13c>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a38:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <HAL_UART_MspInit+0x13c>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a5e:	2307      	movs	r3, #7
 8001a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6e:	f000 fadd 	bl	800202c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a72:	e040      	b.n	8001af6 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <HAL_UART_MspInit+0x140>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d13b      	bne.n	8001af6 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 f858 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001a96:	f7ff fe7b 	bl	8001790 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_UART_MspInit+0x13c>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <HAL_UART_MspInit+0x13c>)
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_UART_MspInit+0x13c>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_UART_MspInit+0x13c>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <HAL_UART_MspInit+0x13c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_UART_MspInit+0x13c>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aca:	230c      	movs	r3, #12
 8001acc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aec:	4619      	mov	r1, r3
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af2:	f000 fa9b 	bl	800202c <HAL_GPIO_Init>
}
 8001af6:	bf00      	nop
 8001af8:	37b8      	adds	r7, #184	; 0xb8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40013800 	.word	0x40013800
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40004400 	.word	0x40004400

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <NMI_Handler+0x4>

08001b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <MemManage_Handler+0x4>

08001b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b58:	f000 f93e 	bl	8001dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e00a      	b.n	8001b88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b72:	f3af 8000 	nop.w
 8001b76:	4601      	mov	r1, r0
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	60ba      	str	r2, [r7, #8]
 8001b7e:	b2ca      	uxtb	r2, r1
 8001b80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dbf0      	blt.n	8001b72 <_read+0x12>
  }

  return len;
 8001b90:	687b      	ldr	r3, [r7, #4]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e009      	b.n	8001bc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	60ba      	str	r2, [r7, #8]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff f9f3 	bl	8000fa0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf1      	blt.n	8001bac <_write+0x12>
  }
  return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_close>:

int _close(int file)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfa:	605a      	str	r2, [r3, #4]
  return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <_isatty>:

int _isatty(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <_sbrk+0x5c>)
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <_sbrk+0x60>)
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <_sbrk+0x64>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <_sbrk+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d207      	bcs.n	8001c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c6c:	f005 fd4e 	bl	800770c <__errno>
 8001c70:	4603      	mov	r3, r0
 8001c72:	220c      	movs	r2, #12
 8001c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e009      	b.n	8001c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <_sbrk+0x64>)
 8001c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20018000 	.word	0x20018000
 8001c9c:	00000400 	.word	0x00000400
 8001ca0:	200002bc 	.word	0x200002bc
 8001ca4:	20000410 	.word	0x20000410

08001ca8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <SystemInit+0x20>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb2:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <SystemInit+0x20>)
 8001cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd0:	f7ff ffea 	bl	8001ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cd6:	490d      	ldr	r1, [pc, #52]	; (8001d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <LoopForever+0xe>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cec:	4c0a      	ldr	r4, [pc, #40]	; (8001d18 <LoopForever+0x16>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f005 fd0d 	bl	8007718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cfe:	f7ff f9cd 	bl	800109c <main>

08001d02 <LoopForever>:

LoopForever:
    b LoopForever
 8001d02:	e7fe      	b.n	8001d02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001d10:	0800898c 	.word	0x0800898c
  ldr r2, =_sbss
 8001d14:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001d18:	20000410 	.word	0x20000410

08001d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC1_2_IRQHandler>
	...

08001d20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_Init+0x3c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <HAL_Init+0x3c>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d36:	2003      	movs	r0, #3
 8001d38:	f000 f944 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f000 f80f 	bl	8001d60 <HAL_InitTick>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	71fb      	strb	r3, [r7, #7]
 8001d4c:	e001      	b.n	8001d52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d4e:	f7ff fd25 	bl	800179c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d52:	79fb      	ldrb	r3, [r7, #7]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40022000 	.word	0x40022000

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_InitTick+0x6c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d023      	beq.n	8001dbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_InitTick+0x70>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <HAL_InitTick+0x6c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f941 	bl	8002012 <HAL_SYSTICK_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10f      	bne.n	8001db6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d809      	bhi.n	8001db0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f000 f919 	bl	8001fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_InitTick+0x74>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e007      	b.n	8001dc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e004      	b.n	8001dc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e001      	b.n	8001dc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000024 	.word	0x20000024
 8001dd0:	2000001c 	.word	0x2000001c
 8001dd4:	20000020 	.word	0x20000020

08001dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x20>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x24>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_IncTick+0x24>)
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000024 	.word	0x20000024
 8001dfc:	200002c0 	.word	0x200002c0

08001e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_GetTick+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	200002c0 	.word	0x200002c0

08001e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff ffee 	bl	8001e00 <HAL_GetTick>
 8001e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d005      	beq.n	8001e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_Delay+0x44>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3e:	bf00      	nop
 8001e40:	f7ff ffde 	bl	8001e00 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d8f7      	bhi.n	8001e40 <HAL_Delay+0x28>
  {
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000024 	.word	0x20000024

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	; (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	; (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f90:	d301      	bcc.n	8001f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <SysTick_Config+0x40>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f7ff ff8e 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SysTick_Config+0x40>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SysTick_Config+0x40>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff47 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fec:	f7ff ff5c 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 8001ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7ff ff8e 	bl	8001f18 <NVIC_EncodePriority>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff5d 	bl	8001ec4 <__NVIC_SetPriority>
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffb0 	bl	8001f80 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	e17f      	b.n	800233c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2101      	movs	r1, #1
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8171 	beq.w	8002336 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d005      	beq.n	800206c <HAL_GPIO_Init+0x40>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d130      	bne.n	80020ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020a2:	2201      	movs	r2, #1
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	f003 0201 	and.w	r2, r3, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d118      	bne.n	800210c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020e0:	2201      	movs	r2, #1
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	f003 0201 	and.w	r2, r3, #1
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b03      	cmp	r3, #3
 8002116:	d017      	beq.n	8002148 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d123      	bne.n	800219c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	6939      	ldr	r1, [r7, #16]
 8002198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80ac 	beq.w	8002336 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	4b5f      	ldr	r3, [pc, #380]	; (800235c <HAL_GPIO_Init+0x330>)
 80021e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e2:	4a5e      	ldr	r2, [pc, #376]	; (800235c <HAL_GPIO_Init+0x330>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6613      	str	r3, [r2, #96]	; 0x60
 80021ea:	4b5c      	ldr	r3, [pc, #368]	; (800235c <HAL_GPIO_Init+0x330>)
 80021ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021f6:	4a5a      	ldr	r2, [pc, #360]	; (8002360 <HAL_GPIO_Init+0x334>)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002220:	d025      	beq.n	800226e <HAL_GPIO_Init+0x242>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4f      	ldr	r2, [pc, #316]	; (8002364 <HAL_GPIO_Init+0x338>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01f      	beq.n	800226a <HAL_GPIO_Init+0x23e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4e      	ldr	r2, [pc, #312]	; (8002368 <HAL_GPIO_Init+0x33c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d019      	beq.n	8002266 <HAL_GPIO_Init+0x23a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4d      	ldr	r2, [pc, #308]	; (800236c <HAL_GPIO_Init+0x340>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0x236>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4c      	ldr	r2, [pc, #304]	; (8002370 <HAL_GPIO_Init+0x344>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00d      	beq.n	800225e <HAL_GPIO_Init+0x232>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4b      	ldr	r2, [pc, #300]	; (8002374 <HAL_GPIO_Init+0x348>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d007      	beq.n	800225a <HAL_GPIO_Init+0x22e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4a      	ldr	r2, [pc, #296]	; (8002378 <HAL_GPIO_Init+0x34c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_GPIO_Init+0x22a>
 8002252:	2306      	movs	r3, #6
 8002254:	e00c      	b.n	8002270 <HAL_GPIO_Init+0x244>
 8002256:	2307      	movs	r3, #7
 8002258:	e00a      	b.n	8002270 <HAL_GPIO_Init+0x244>
 800225a:	2305      	movs	r3, #5
 800225c:	e008      	b.n	8002270 <HAL_GPIO_Init+0x244>
 800225e:	2304      	movs	r3, #4
 8002260:	e006      	b.n	8002270 <HAL_GPIO_Init+0x244>
 8002262:	2303      	movs	r3, #3
 8002264:	e004      	b.n	8002270 <HAL_GPIO_Init+0x244>
 8002266:	2302      	movs	r3, #2
 8002268:	e002      	b.n	8002270 <HAL_GPIO_Init+0x244>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_GPIO_Init+0x244>
 800226e:	2300      	movs	r3, #0
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	f002 0203 	and.w	r2, r2, #3
 8002276:	0092      	lsls	r2, r2, #2
 8002278:	4093      	lsls	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002280:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_GPIO_Init+0x334>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800228e:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_GPIO_Init+0x350>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022b2:	4a32      	ldr	r2, [pc, #200]	; (800237c <HAL_GPIO_Init+0x350>)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022b8:	4b30      	ldr	r3, [pc, #192]	; (800237c <HAL_GPIO_Init+0x350>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022dc:	4a27      	ldr	r2, [pc, #156]	; (800237c <HAL_GPIO_Init+0x350>)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_GPIO_Init+0x350>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002306:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_GPIO_Init+0x350>)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_GPIO_Init+0x350>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002330:	4a12      	ldr	r2, [pc, #72]	; (800237c <HAL_GPIO_Init+0x350>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	f47f ae78 	bne.w	800203c <HAL_GPIO_Init+0x10>
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	48000400 	.word	0x48000400
 8002368:	48000800 	.word	0x48000800
 800236c:	48000c00 	.word	0x48000c00
 8002370:	48001000 	.word	0x48001000
 8002374:	48001400 	.word	0x48001400
 8002378:	48001800 	.word	0x48001800
 800237c:	40010400 	.word	0x40010400

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800239c:	e002      	b.n	80023a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e08d      	b.n	80024de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fa04 	bl	80017e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2224      	movs	r2, #36	; 0x24
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002400:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002410:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e006      	b.n	8002438 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002436:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d108      	bne.n	8002452 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	e007      	b.n	8002462 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002460:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002474:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002484:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69d9      	ldr	r1, [r3, #28]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1a      	ldr	r2, [r3, #32]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	461a      	mov	r2, r3
 80024f4:	460b      	mov	r3, r1
 80024f6:	817b      	strh	r3, [r7, #10]
 80024f8:	4613      	mov	r3, r2
 80024fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b20      	cmp	r3, #32
 8002506:	f040 80fd 	bne.w	8002704 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_I2C_Master_Transmit+0x30>
 8002514:	2302      	movs	r3, #2
 8002516:	e0f6      	b.n	8002706 <HAL_I2C_Master_Transmit+0x21e>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002520:	f7ff fc6e 	bl	8001e00 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	2319      	movs	r3, #25
 800252c:	2201      	movs	r2, #1
 800252e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 fa1d 	bl	8002972 <I2C_WaitOnFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0e1      	b.n	8002706 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2221      	movs	r2, #33	; 0x21
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2210      	movs	r2, #16
 800254e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	893a      	ldrh	r2, [r7, #8]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	2bff      	cmp	r3, #255	; 0xff
 8002572:	d906      	bls.n	8002582 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	22ff      	movs	r2, #255	; 0xff
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800257a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e007      	b.n	8002592 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800258c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002590:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	2b00      	cmp	r3, #0
 8002598:	d024      	beq.n	80025e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	8979      	ldrh	r1, [r7, #10]
 80025d6:	4b4e      	ldr	r3, [pc, #312]	; (8002710 <HAL_I2C_Master_Transmit+0x228>)
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fb81 	bl	8002ce4 <I2C_TransferConfig>
 80025e2:	e066      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	8979      	ldrh	r1, [r7, #10]
 80025ec:	4b48      	ldr	r3, [pc, #288]	; (8002710 <HAL_I2C_Master_Transmit+0x228>)
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fb76 	bl	8002ce4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025f8:	e05b      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	6a39      	ldr	r1, [r7, #32]
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fa06 	bl	8002a10 <I2C_WaitOnTXISFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07b      	b.n	8002706 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	781a      	ldrb	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d034      	beq.n	80026b2 <HAL_I2C_Master_Transmit+0x1ca>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	d130      	bne.n	80026b2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	2200      	movs	r2, #0
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f989 	bl	8002972 <I2C_WaitOnFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e04d      	b.n	8002706 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	2bff      	cmp	r3, #255	; 0xff
 8002672:	d90e      	bls.n	8002692 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	22ff      	movs	r2, #255	; 0xff
 8002678:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267e:	b2da      	uxtb	r2, r3
 8002680:	8979      	ldrh	r1, [r7, #10]
 8002682:	2300      	movs	r3, #0
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fb2a 	bl	8002ce4 <I2C_TransferConfig>
 8002690:	e00f      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	8979      	ldrh	r1, [r7, #10]
 80026a4:	2300      	movs	r3, #0
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fb19 	bl	8002ce4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d19e      	bne.n	80025fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	6a39      	ldr	r1, [r7, #32]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f9ec 	bl	8002a9e <I2C_WaitOnSTOPFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e01a      	b.n	8002706 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2220      	movs	r2, #32
 80026d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6859      	ldr	r1, [r3, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_I2C_Master_Transmit+0x22c>)
 80026e4:	400b      	ands	r3, r1
 80026e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002704:	2302      	movs	r3, #2
  }
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	80002000 	.word	0x80002000
 8002714:	fe00e800 	.word	0xfe00e800

08002718 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	460b      	mov	r3, r1
 8002726:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b20      	cmp	r3, #32
 8002736:	f040 80f3 	bne.w	8002920 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002748:	d101      	bne.n	800274e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
 800274c:	e0e9      	b.n	8002922 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_I2C_IsDeviceReady+0x44>
 8002758:	2302      	movs	r3, #2
 800275a:	e0e2      	b.n	8002922 <HAL_I2C_IsDeviceReady+0x20a>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2224      	movs	r2, #36	; 0x24
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_I2C_IsDeviceReady+0x72>
 800277a:	897b      	ldrh	r3, [r7, #10]
 800277c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002784:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002788:	e006      	b.n	8002798 <HAL_I2C_IsDeviceReady+0x80>
 800278a:	897b      	ldrh	r3, [r7, #10]
 800278c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002794:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800279e:	f7ff fb2f 	bl	8001e00 <HAL_GetTick>
 80027a2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80027d0:	e034      	b.n	800283c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d01a      	beq.n	8002810 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027da:	f7ff fb11 	bl	8001e00 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d302      	bcc.n	80027f0 <HAL_I2C_IsDeviceReady+0xd8>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10f      	bne.n	8002810 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e088      	b.n	8002922 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b20      	cmp	r3, #32
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b10      	cmp	r3, #16
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800283c:	7ffb      	ldrb	r3, [r7, #31]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <HAL_I2C_IsDeviceReady+0x130>
 8002842:	7fbb      	ldrb	r3, [r7, #30]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0c4      	beq.n	80027d2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b10      	cmp	r3, #16
 8002854:	d01a      	beq.n	800288c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2200      	movs	r2, #0
 800285e:	2120      	movs	r1, #32
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f886 	bl	8002972 <I2C_WaitOnFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e058      	b.n	8002922 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2220      	movs	r2, #32
 8002876:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e04a      	b.n	8002922 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2200      	movs	r2, #0
 8002894:	2120      	movs	r1, #32
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f86b 	bl	8002972 <I2C_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e03d      	b.n	8002922 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2210      	movs	r2, #16
 80028ac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2220      	movs	r2, #32
 80028b4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d118      	bne.n	80028f0 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028cc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2200      	movs	r2, #0
 80028d6:	2120      	movs	r1, #32
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f84a 	bl	8002972 <I2C_WaitOnFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e01c      	b.n	8002922 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2220      	movs	r2, #32
 80028ee:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3301      	adds	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	f63f af39 	bhi.w	8002772 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b02      	cmp	r3, #2
 800293e:	d103      	bne.n	8002948 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2200      	movs	r2, #0
 8002946:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d007      	beq.n	8002966 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699a      	ldr	r2, [r3, #24]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	619a      	str	r2, [r3, #24]
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	4613      	mov	r3, r2
 8002980:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002982:	e031      	b.n	80029e8 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d02d      	beq.n	80029e8 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298c:	f7ff fa38 	bl	8001e00 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d302      	bcc.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x30>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d122      	bne.n	80029e8 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d113      	bne.n	80029e8 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	f043 0220 	orr.w	r2, r3, #32
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e00f      	b.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4013      	ands	r3, r2
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d0be      	beq.n	8002984 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a1c:	e033      	b.n	8002a86 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f87e 	bl	8002b24 <I2C_IsErrorOccurred>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e031      	b.n	8002a96 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d025      	beq.n	8002a86 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7ff f9e1 	bl	8001e00 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d11a      	bne.n	8002a86 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d013      	beq.n	8002a86 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e007      	b.n	8002a96 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d1c4      	bne.n	8002a1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aaa:	e02f      	b.n	8002b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f837 	bl	8002b24 <I2C_IsErrorOccurred>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e02d      	b.n	8002b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac0:	f7ff f99e 	bl	8001e00 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d302      	bcc.n	8002ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d11a      	bne.n	8002b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d013      	beq.n	8002b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e007      	b.n	8002b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d1c8      	bne.n	8002aac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d068      	beq.n	8002c22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2210      	movs	r2, #16
 8002b56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b58:	e049      	b.n	8002bee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d045      	beq.n	8002bee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b62:	f7ff f94d 	bl	8001e00 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d302      	bcc.n	8002b78 <I2C_IsErrorOccurred+0x54>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d13a      	bne.n	8002bee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b9a:	d121      	bne.n	8002be0 <I2C_IsErrorOccurred+0xbc>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ba2:	d01d      	beq.n	8002be0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ba4:	7cfb      	ldrb	r3, [r7, #19]
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d01a      	beq.n	8002be0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bba:	f7ff f921 	bl	8001e00 <HAL_GetTick>
 8002bbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bc0:	e00e      	b.n	8002be0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bc2:	f7ff f91d 	bl	8001e00 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b19      	cmp	r3, #25
 8002bce:	d907      	bls.n	8002be0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	f043 0320 	orr.w	r3, r3, #32
 8002bd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002bde:	e006      	b.n	8002bee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d1e9      	bne.n	8002bc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d003      	beq.n	8002c04 <I2C_IsErrorOccurred+0xe0>
 8002bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0aa      	beq.n	8002b5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d103      	bne.n	8002c14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2220      	movs	r2, #32
 8002c12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	f043 0304 	orr.w	r3, r3, #4
 8002c1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
 8002c7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01c      	beq.n	8002cd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff fe46 	bl	800292a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <I2C_IsErrorOccurred+0x1bc>)
 8002caa:	400b      	ands	r3, r1
 8002cac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3728      	adds	r7, #40	; 0x28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	fe00e800 	.word	0xfe00e800

08002ce4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	817b      	strh	r3, [r7, #10]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cfc:	7a7b      	ldrb	r3, [r7, #9]
 8002cfe:	041b      	lsls	r3, r3, #16
 8002d00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	0d5b      	lsrs	r3, r3, #21
 8002d1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <I2C_TransferConfig+0x60>)
 8002d24:	430b      	orrs	r3, r1
 8002d26:	43db      	mvns	r3, r3
 8002d28:	ea02 0103 	and.w	r1, r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	03ff63ff 	.word	0x03ff63ff

08002d48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d138      	bne.n	8002dd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e032      	b.n	8002dd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2224      	movs	r2, #36	; 0x24
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0201 	bic.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6819      	ldr	r1, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d139      	bne.n	8002e68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e033      	b.n	8002e6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2224      	movs	r2, #36	; 0x24
 8002e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e000      	b.n	8002e6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
  }
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40007000 	.word	0x40007000

08002e94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea2:	d130      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb0:	d038      	beq.n	8002f24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eba:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ebc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2232      	movs	r2, #50	; 0x32
 8002ec8:	fb02 f303 	mul.w	r3, r2, r3
 8002ecc:	4a1b      	ldr	r2, [pc, #108]	; (8002f3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0c9b      	lsrs	r3, r3, #18
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ed8:	e002      	b.n	8002ee0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eec:	d102      	bne.n	8002ef4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f2      	bne.n	8002eda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f00:	d110      	bne.n	8002f24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e00f      	b.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d007      	beq.n	8002f24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f14:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f1c:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40007000 	.word	0x40007000
 8002f38:	2000001c 	.word	0x2000001c
 8002f3c:	431bde83 	.word	0x431bde83

08002f40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e3ca      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f52:	4b97      	ldr	r3, [pc, #604]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f5c:	4b94      	ldr	r3, [pc, #592]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80e4 	beq.w	800313c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_RCC_OscConfig+0x4a>
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	f040 808b 	bne.w	8003098 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	f040 8087 	bne.w	8003098 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f8a:	4b89      	ldr	r3, [pc, #548]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x62>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e3a2      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	4b82      	ldr	r3, [pc, #520]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <HAL_RCC_OscConfig+0x7c>
 8002fb2:	4b7f      	ldr	r3, [pc, #508]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_OscConfig+0x88>
 8002fbc:	4b7c      	ldr	r3, [pc, #496]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d223      	bcs.n	8003014 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fd55 	bl	8003a80 <RCC_SetFlashLatencyFromMSIRange>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e383      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fe0:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	f043 0308 	orr.w	r3, r3, #8
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b70      	ldr	r3, [pc, #448]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	496d      	ldr	r1, [pc, #436]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ffe:	4b6c      	ldr	r3, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	4968      	ldr	r1, [pc, #416]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
 8003012:	e025      	b.n	8003060 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003014:	4b66      	ldr	r3, [pc, #408]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a65      	ldr	r2, [pc, #404]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b63      	ldr	r3, [pc, #396]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4960      	ldr	r1, [pc, #384]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	495b      	ldr	r1, [pc, #364]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fd15 	bl	8003a80 <RCC_SetFlashLatencyFromMSIRange>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e343      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003060:	f000 fc4a 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	4950      	ldr	r1, [pc, #320]	; (80031b4 <HAL_RCC_OscConfig+0x274>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	4a4e      	ldr	r2, [pc, #312]	; (80031b8 <HAL_RCC_OscConfig+0x278>)
 800307e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003080:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <HAL_RCC_OscConfig+0x27c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe fe6b 	bl	8001d60 <HAL_InitTick>
 800308a:	4603      	mov	r3, r0
 800308c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d052      	beq.n	800313a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	e327      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d032      	beq.n	8003106 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030a0:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a42      	ldr	r2, [pc, #264]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030ac:	f7fe fea8 	bl	8001e00 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030b4:	f7fe fea4 	bl	8001e00 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e310      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c6:	4b3a      	ldr	r3, [pc, #232]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d2:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a36      	ldr	r2, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4931      	ldr	r1, [pc, #196]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f0:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	492c      	ldr	r1, [pc, #176]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
 8003104:	e01a      	b.n	800313c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003106:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003112:	f7fe fe75 	bl	8001e00 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800311a:	f7fe fe71 	bl	8001e00 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e2dd      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <HAL_RCC_OscConfig+0x1da>
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800313a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d074      	beq.n	8003232 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b08      	cmp	r3, #8
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x21a>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	d10e      	bne.n	8003172 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d10b      	bne.n	8003172 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d064      	beq.n	8003230 <HAL_RCC_OscConfig+0x2f0>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d160      	bne.n	8003230 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e2ba      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x24a>
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	e026      	b.n	80031d8 <HAL_RCC_OscConfig+0x298>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003192:	d115      	bne.n	80031c0 <HAL_RCC_OscConfig+0x280>
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800319a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a02      	ldr	r2, [pc, #8]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	e014      	b.n	80031d8 <HAL_RCC_OscConfig+0x298>
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	08008900 	.word	0x08008900
 80031b8:	2000001c 	.word	0x2000001c
 80031bc:	20000020 	.word	0x20000020
 80031c0:	4ba0      	ldr	r3, [pc, #640]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a9f      	ldr	r2, [pc, #636]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b9d      	ldr	r3, [pc, #628]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a9c      	ldr	r2, [pc, #624]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fe0e 	bl	8001e00 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fe0a 	bl	8001e00 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e276      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fa:	4b92      	ldr	r3, [pc, #584]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x2a8>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe fdfa 	bl	8001e00 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe fdf6 	bl	8001e00 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e262      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x2d0>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d060      	beq.n	8003300 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b04      	cmp	r3, #4
 8003242:	d005      	beq.n	8003250 <HAL_RCC_OscConfig+0x310>
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d119      	bne.n	800327e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d116      	bne.n	800327e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003250:	4b7c      	ldr	r3, [pc, #496]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_OscConfig+0x328>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e23f      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b76      	ldr	r3, [pc, #472]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	4973      	ldr	r1, [pc, #460]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800327c:	e040      	b.n	8003300 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d023      	beq.n	80032ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003286:	4b6f      	ldr	r3, [pc, #444]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6e      	ldr	r2, [pc, #440]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fe fdb5 	bl	8001e00 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329a:	f7fe fdb1 	bl	8001e00 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e21d      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ac:	4b65      	ldr	r3, [pc, #404]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b62      	ldr	r3, [pc, #392]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	495f      	ldr	r1, [pc, #380]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
 80032cc:	e018      	b.n	8003300 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ce:	4b5d      	ldr	r3, [pc, #372]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5c      	ldr	r2, [pc, #368]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe fd91 	bl	8001e00 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fe fd8d 	bl	8001e00 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e1f9      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d03c      	beq.n	8003386 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01c      	beq.n	800334e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003314:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331a:	4a4a      	ldr	r2, [pc, #296]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fe fd6c 	bl	8001e00 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332c:	f7fe fd68 	bl	8001e00 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1d4      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ef      	beq.n	800332c <HAL_RCC_OscConfig+0x3ec>
 800334c:	e01b      	b.n	8003386 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334e:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003354:	4a3b      	ldr	r2, [pc, #236]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fe fd4f 	bl	8001e00 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003366:	f7fe fd4b 	bl	8001e00 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1b7      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003378:	4b32      	ldr	r3, [pc, #200]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ef      	bne.n	8003366 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80a6 	beq.w	80034e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003398:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	4a26      	ldr	r2, [pc, #152]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6593      	str	r3, [r2, #88]	; 0x58
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d118      	bne.n	80033fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d8:	f7fe fd12 	bl	8001e00 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e0:	f7fe fd0e 	bl	8001e00 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e17a      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d108      	bne.n	8003418 <HAL_RCC_OscConfig+0x4d8>
 8003406:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003416:	e029      	b.n	800346c <HAL_RCC_OscConfig+0x52c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b05      	cmp	r3, #5
 800341e:	d115      	bne.n	800344c <HAL_RCC_OscConfig+0x50c>
 8003420:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	4a07      	ldr	r2, [pc, #28]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003428:	f043 0304 	orr.w	r3, r3, #4
 800342c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	4a03      	ldr	r2, [pc, #12]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003440:	e014      	b.n	800346c <HAL_RCC_OscConfig+0x52c>
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
 800344c:	4b9c      	ldr	r3, [pc, #624]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	4a9b      	ldr	r2, [pc, #620]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800345c:	4b98      	ldr	r3, [pc, #608]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	4a97      	ldr	r2, [pc, #604]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d016      	beq.n	80034a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7fe fcc4 	bl	8001e00 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7fe fcc0 	bl	8001e00 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e12a      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003492:	4b8b      	ldr	r3, [pc, #556]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ed      	beq.n	800347c <HAL_RCC_OscConfig+0x53c>
 80034a0:	e015      	b.n	80034ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fe fcad 	bl	8001e00 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fe fca9 	bl	8001e00 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e113      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c0:	4b7f      	ldr	r3, [pc, #508]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ed      	bne.n	80034aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ce:	7ffb      	ldrb	r3, [r7, #31]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d105      	bne.n	80034e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d4:	4b7a      	ldr	r3, [pc, #488]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d8:	4a79      	ldr	r2, [pc, #484]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80fe 	beq.w	80036e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	f040 80d0 	bne.w	8003694 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034f4:	4b72      	ldr	r3, [pc, #456]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	429a      	cmp	r2, r3
 8003506:	d130      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	3b01      	subs	r3, #1
 8003514:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d127      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d11f      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003534:	2a07      	cmp	r2, #7
 8003536:	bf14      	ite	ne
 8003538:	2201      	movne	r2, #1
 800353a:	2200      	moveq	r2, #0
 800353c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353e:	4293      	cmp	r3, r2
 8003540:	d113      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	3b01      	subs	r3, #1
 8003550:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d109      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	3b01      	subs	r3, #1
 8003564:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d06e      	beq.n	8003648 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	d069      	beq.n	8003644 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003570:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800357c:	4b50      	ldr	r3, [pc, #320]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0ad      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800358c:	4b4c      	ldr	r3, [pc, #304]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a4b      	ldr	r2, [pc, #300]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003596:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003598:	f7fe fc32 	bl	8001e00 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe fc2e 	bl	8001e00 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e09a      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b2:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	4b40      	ldr	r3, [pc, #256]	; (80036c4 <HAL_RCC_OscConfig+0x784>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035ce:	3a01      	subs	r2, #1
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	4311      	orrs	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035d8:	0212      	lsls	r2, r2, #8
 80035da:	4311      	orrs	r1, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035e0:	0852      	lsrs	r2, r2, #1
 80035e2:	3a01      	subs	r2, #1
 80035e4:	0552      	lsls	r2, r2, #21
 80035e6:	4311      	orrs	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035ec:	0852      	lsrs	r2, r2, #1
 80035ee:	3a01      	subs	r2, #1
 80035f0:	0652      	lsls	r2, r2, #25
 80035f2:	4311      	orrs	r1, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f8:	0912      	lsrs	r2, r2, #4
 80035fa:	0452      	lsls	r2, r2, #17
 80035fc:	430a      	orrs	r2, r1
 80035fe:	4930      	ldr	r1, [pc, #192]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003600:	4313      	orrs	r3, r2
 8003602:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003604:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2d      	ldr	r2, [pc, #180]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800361c:	f7fe fbf0 	bl	8001e00 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe fbec 	bl	8001e00 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e058      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003642:	e050      	b.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e04f      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d148      	bne.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003654:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800366c:	f7fe fbc8 	bl	8001e00 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fbc4 	bl	8001e00 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e030      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x734>
 8003692:	e028      	b.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d023      	beq.n	80036e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80036a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fe fbab 	bl	8001e00 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ac:	e00c      	b.n	80036c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fe fba7 	bl	8001e00 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d905      	bls.n	80036c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e013      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
 80036c0:	40021000 	.word	0x40021000
 80036c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCC_OscConfig+0x7b0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ec      	bne.n	80036ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_OscConfig+0x7b0>)
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	4905      	ldr	r1, [pc, #20]	; (80036f0 <HAL_RCC_OscConfig+0x7b0>)
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_RCC_OscConfig+0x7b4>)
 80036dc:	4013      	ands	r3, r2
 80036de:	60cb      	str	r3, [r1, #12]
 80036e0:	e001      	b.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000
 80036f4:	feeefffc 	.word	0xfeeefffc

080036f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0e7      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b75      	ldr	r3, [pc, #468]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d910      	bls.n	800373c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b72      	ldr	r3, [pc, #456]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 0207 	bic.w	r2, r3, #7
 8003722:	4970      	ldr	r1, [pc, #448]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b6e      	ldr	r3, [pc, #440]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0cf      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	4b66      	ldr	r3, [pc, #408]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003754:	429a      	cmp	r2, r3
 8003756:	d908      	bls.n	800376a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003758:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4960      	ldr	r1, [pc, #384]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d04c      	beq.n	8003810 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377e:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d121      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0a6      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003796:	4b54      	ldr	r3, [pc, #336]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d115      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e09a      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ae:	4b4e      	ldr	r3, [pc, #312]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e08e      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037be:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e086      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ce:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 0203 	bic.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4943      	ldr	r1, [pc, #268]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e0:	f7fe fb0e 	bl	8001e00 <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7fe fb0a 	bl	8001e00 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e06e      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 020c 	and.w	r2, r3, #12
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	429a      	cmp	r2, r3
 800380e:	d1eb      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003828:	429a      	cmp	r2, r3
 800382a:	d208      	bcs.n	800383e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	492b      	ldr	r1, [pc, #172]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d210      	bcs.n	800386e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 0207 	bic.w	r2, r3, #7
 8003854:	4923      	ldr	r1, [pc, #140]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e036      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4918      	ldr	r1, [pc, #96]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4910      	ldr	r1, [pc, #64]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ac:	f000 f824 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	490b      	ldr	r1, [pc, #44]	; (80038ec <HAL_RCC_ClockConfig+0x1f4>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1f8>)
 80038ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x1fc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe fa45 	bl	8001d60 <HAL_InitTick>
 80038d6:	4603      	mov	r3, r0
 80038d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80038da:	7afb      	ldrb	r3, [r7, #11]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40021000 	.word	0x40021000
 80038ec:	08008900 	.word	0x08008900
 80038f0:	2000001c 	.word	0x2000001c
 80038f4:	20000020 	.word	0x20000020

080038f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003906:	4b3e      	ldr	r3, [pc, #248]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003910:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x34>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b0c      	cmp	r3, #12
 8003924:	d121      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d11e      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800392c:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	e005      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10d      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003968:	e00a      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d102      	bne.n	8003976 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003970:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	e004      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d101      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800397c:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x114>)
 800397e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b0c      	cmp	r3, #12
 8003984:	d134      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003986:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0xa6>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d003      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0xac>
 800399c:	e005      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x110>)
 80039a0:	617b      	str	r3, [r7, #20]
      break;
 80039a2:	e005      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x114>)
 80039a6:	617b      	str	r3, [r7, #20]
      break;
 80039a8:	e002      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	617b      	str	r3, [r7, #20]
      break;
 80039ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b0:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	3301      	adds	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	fb03 f202 	mul.w	r2, r3, r2
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	0e5b      	lsrs	r3, r3, #25
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	3301      	adds	r3, #1
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039f0:	69bb      	ldr	r3, [r7, #24]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3724      	adds	r7, #36	; 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
 8003a04:	08008918 	.word	0x08008918
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	007a1200 	.word	0x007a1200

08003a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	2000001c 	.word	0x2000001c

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a2c:	f7ff fff0 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4904      	ldr	r1, [pc, #16]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	08008910 	.word	0x08008910

08003a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a58:	f7ff ffda 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0adb      	lsrs	r3, r3, #11
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4904      	ldr	r1, [pc, #16]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	08008910 	.word	0x08008910

08003a80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a8c:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a98:	f7ff f9ee 	bl	8002e78 <HAL_PWREx_GetVoltageRange>
 8003a9c:	6178      	str	r0, [r7, #20]
 8003a9e:	e014      	b.n	8003aca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8003aac:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ab8:	f7ff f9de 	bl	8002e78 <HAL_PWREx_GetVoltageRange>
 8003abc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac2:	4a1d      	ldr	r2, [pc, #116]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad0:	d10b      	bne.n	8003aea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d919      	bls.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2ba0      	cmp	r3, #160	; 0xa0
 8003adc:	d902      	bls.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ade:	2302      	movs	r3, #2
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	e013      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	e010      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b80      	cmp	r3, #128	; 0x80
 8003aee:	d902      	bls.n	8003af6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003af0:	2303      	movs	r3, #3
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	e00a      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d102      	bne.n	8003b02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003afc:	2302      	movs	r3, #2
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	e004      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b70      	cmp	r3, #112	; 0x70
 8003b06:	d101      	bne.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b08:	2301      	movs	r3, #1
 8003b0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 0207 	bic.w	r2, r3, #7
 8003b14:	4909      	ldr	r1, [pc, #36]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d001      	beq.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40022000 	.word	0x40022000

08003b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b48:	2300      	movs	r3, #0
 8003b4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d041      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b64:	d02a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b6a:	d824      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b70:	d008      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b76:	d81e      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b80:	d010      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b82:	e018      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b84:	4b86      	ldr	r3, [pc, #536]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a85      	ldr	r2, [pc, #532]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b90:	e015      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fabb 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ba2:	e00c      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3320      	adds	r3, #32
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fba6 	bl	80042fc <RCCEx_PLLSAI2_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb4:	e003      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	74fb      	strb	r3, [r7, #19]
      break;
 8003bba:	e000      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10b      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bc4:	4b76      	ldr	r3, [pc, #472]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bd2:	4973      	ldr	r1, [pc, #460]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bda:	e001      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d041      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bf4:	d02a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bf6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bfa:	d824      	bhi.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c00:	d008      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c06:	d81e      	bhi.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c10:	d010      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c12:	e018      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c14:	4b62      	ldr	r3, [pc, #392]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4a61      	ldr	r2, [pc, #388]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c20:	e015      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3304      	adds	r3, #4
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fa73 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c32:	e00c      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3320      	adds	r3, #32
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fb5e 	bl	80042fc <RCCEx_PLLSAI2_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c44:	e003      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	74fb      	strb	r3, [r7, #19]
      break;
 8003c4a:	e000      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10b      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c54:	4b52      	ldr	r3, [pc, #328]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c62:	494f      	ldr	r1, [pc, #316]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c6a:	e001      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80a0 	beq.w	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c82:	4b47      	ldr	r3, [pc, #284]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00d      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c98:	4b41      	ldr	r3, [pc, #260]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	4a40      	ldr	r2, [pc, #256]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca4:	4b3e      	ldr	r3, [pc, #248]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb4:	4b3b      	ldr	r3, [pc, #236]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3a      	ldr	r2, [pc, #232]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cc0:	f7fe f89e 	bl	8001e00 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cc6:	e009      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc8:	f7fe f89a 	bl	8001e00 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d902      	bls.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	74fb      	strb	r3, [r7, #19]
        break;
 8003cda:	e005      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cdc:	4b31      	ldr	r3, [pc, #196]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ef      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d15c      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cee:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01f      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d019      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d0c:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d18:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	4a20      	ldr	r2, [pc, #128]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d38:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d016      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fe f859 	bl	8001e00 <HAL_GetTick>
 8003d4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d50:	e00b      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fe f855 	bl	8001e00 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d902      	bls.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	74fb      	strb	r3, [r7, #19]
            break;
 8003d68:	e006      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ec      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8e:	4904      	ldr	r1, [pc, #16]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d96:	e009      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	74bb      	strb	r3, [r7, #18]
 8003d9c:	e006      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dac:	7c7b      	ldrb	r3, [r7, #17]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d105      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db2:	4b9e      	ldr	r3, [pc, #632]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	4a9d      	ldr	r2, [pc, #628]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dca:	4b98      	ldr	r3, [pc, #608]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f023 0203 	bic.w	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	4994      	ldr	r1, [pc, #592]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dec:	4b8f      	ldr	r3, [pc, #572]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 020c 	bic.w	r2, r3, #12
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	498c      	ldr	r1, [pc, #560]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e0e:	4b87      	ldr	r3, [pc, #540]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	4983      	ldr	r1, [pc, #524]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e30:	4b7e      	ldr	r3, [pc, #504]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	497b      	ldr	r1, [pc, #492]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e52:	4b76      	ldr	r3, [pc, #472]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e60:	4972      	ldr	r1, [pc, #456]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e74:	4b6d      	ldr	r3, [pc, #436]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e82:	496a      	ldr	r1, [pc, #424]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e96:	4b65      	ldr	r3, [pc, #404]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	4961      	ldr	r1, [pc, #388]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eb8:	4b5c      	ldr	r3, [pc, #368]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec6:	4959      	ldr	r1, [pc, #356]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eda:	4b54      	ldr	r3, [pc, #336]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	4950      	ldr	r1, [pc, #320]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003efc:	4b4b      	ldr	r3, [pc, #300]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	4948      	ldr	r1, [pc, #288]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f1e:	4b43      	ldr	r3, [pc, #268]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2c:	493f      	ldr	r1, [pc, #252]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d028      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f40:	4b3a      	ldr	r3, [pc, #232]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4e:	4937      	ldr	r1, [pc, #220]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f60:	4b32      	ldr	r3, [pc, #200]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a31      	ldr	r2, [pc, #196]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f6a:	60d3      	str	r3, [r2, #12]
 8003f6c:	e011      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f76:	d10c      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f8c8 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f88:	7cfb      	ldrb	r3, [r7, #19]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d028      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f9e:	4b23      	ldr	r3, [pc, #140]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	491f      	ldr	r1, [pc, #124]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fbc:	d106      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	4a1a      	ldr	r2, [pc, #104]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc8:	60d3      	str	r3, [r2, #12]
 8003fca:	e011      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f899 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d02b      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400a:	4908      	ldr	r1, [pc, #32]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800401a:	d109      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a02      	ldr	r2, [pc, #8]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004026:	60d3      	str	r3, [r2, #12]
 8004028:	e014      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	2101      	movs	r1, #1
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f867 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02f      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004060:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406e:	4928      	ldr	r1, [pc, #160]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800407a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800407e:	d10d      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f844 	bl	8004114 <RCCEx_PLLSAI1_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d014      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	74bb      	strb	r3, [r7, #18]
 800409a:	e011      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3320      	adds	r3, #32
 80040aa:	2102      	movs	r1, #2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 f925 	bl	80042fc <RCCEx_PLLSAI2_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b6:	7cfb      	ldrb	r3, [r7, #19]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040da:	490d      	ldr	r1, [pc, #52]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ee:	4b08      	ldr	r3, [pc, #32]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040fe:	4904      	ldr	r1, [pc, #16]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004106:	7cbb      	ldrb	r3, [r7, #18]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40021000 	.word	0x40021000

08004114 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004122:	4b75      	ldr	r3, [pc, #468]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d018      	beq.n	8004160 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800412e:	4b72      	ldr	r3, [pc, #456]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0203 	and.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d10d      	bne.n	800415a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
       ||
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004146:	4b6c      	ldr	r3, [pc, #432]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
       ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d047      	beq.n	80041ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
 800415e:	e044      	b.n	80041ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d018      	beq.n	800419a <RCCEx_PLLSAI1_Config+0x86>
 8004168:	2b03      	cmp	r3, #3
 800416a:	d825      	bhi.n	80041b8 <RCCEx_PLLSAI1_Config+0xa4>
 800416c:	2b01      	cmp	r3, #1
 800416e:	d002      	beq.n	8004176 <RCCEx_PLLSAI1_Config+0x62>
 8004170:	2b02      	cmp	r3, #2
 8004172:	d009      	beq.n	8004188 <RCCEx_PLLSAI1_Config+0x74>
 8004174:	e020      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004176:	4b60      	ldr	r3, [pc, #384]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d11d      	bne.n	80041be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004186:	e01a      	b.n	80041be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004188:	4b5b      	ldr	r3, [pc, #364]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d116      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004198:	e013      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800419a:	4b57      	ldr	r3, [pc, #348]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041a6:	4b54      	ldr	r3, [pc, #336]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041b6:	e006      	b.n	80041c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
      break;
 80041bc:	e004      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041be:	bf00      	nop
 80041c0:	e002      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10d      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041ce:	4b4a      	ldr	r3, [pc, #296]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6819      	ldr	r1, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	430b      	orrs	r3, r1
 80041e4:	4944      	ldr	r1, [pc, #272]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d17d      	bne.n	80042ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041f0:	4b41      	ldr	r3, [pc, #260]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a40      	ldr	r2, [pc, #256]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041fc:	f7fd fe00 	bl	8001e00 <HAL_GetTick>
 8004200:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004202:	e009      	b.n	8004218 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004204:	f7fd fdfc 	bl	8001e00 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d902      	bls.n	8004218 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	73fb      	strb	r3, [r7, #15]
        break;
 8004216:	e005      	b.n	8004224 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004218:	4b37      	ldr	r3, [pc, #220]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1ef      	bne.n	8004204 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d160      	bne.n	80042ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d111      	bne.n	8004254 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004230:	4b31      	ldr	r3, [pc, #196]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6892      	ldr	r2, [r2, #8]
 8004240:	0211      	lsls	r1, r2, #8
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68d2      	ldr	r2, [r2, #12]
 8004246:	0912      	lsrs	r2, r2, #4
 8004248:	0452      	lsls	r2, r2, #17
 800424a:	430a      	orrs	r2, r1
 800424c:	492a      	ldr	r1, [pc, #168]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	610b      	str	r3, [r1, #16]
 8004252:	e027      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d112      	bne.n	8004280 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800425a:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004262:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6892      	ldr	r2, [r2, #8]
 800426a:	0211      	lsls	r1, r2, #8
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6912      	ldr	r2, [r2, #16]
 8004270:	0852      	lsrs	r2, r2, #1
 8004272:	3a01      	subs	r2, #1
 8004274:	0552      	lsls	r2, r2, #21
 8004276:	430a      	orrs	r2, r1
 8004278:	491f      	ldr	r1, [pc, #124]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	610b      	str	r3, [r1, #16]
 800427e:	e011      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004280:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004288:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6892      	ldr	r2, [r2, #8]
 8004290:	0211      	lsls	r1, r2, #8
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6952      	ldr	r2, [r2, #20]
 8004296:	0852      	lsrs	r2, r2, #1
 8004298:	3a01      	subs	r2, #1
 800429a:	0652      	lsls	r2, r2, #25
 800429c:	430a      	orrs	r2, r1
 800429e:	4916      	ldr	r1, [pc, #88]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042a4:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fd fda6 	bl	8001e00 <HAL_GetTick>
 80042b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b6:	e009      	b.n	80042cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042b8:	f7fd fda2 	bl	8001e00 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d902      	bls.n	80042cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	73fb      	strb	r3, [r7, #15]
          break;
 80042ca:	e005      	b.n	80042d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0ef      	beq.n	80042b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	4904      	ldr	r1, [pc, #16]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000

080042fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800430a:	4b6a      	ldr	r3, [pc, #424]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d018      	beq.n	8004348 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004316:	4b67      	ldr	r3, [pc, #412]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0203 	and.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d10d      	bne.n	8004342 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
       ||
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800432e:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
       ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d047      	beq.n	80043d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
 8004346:	e044      	b.n	80043d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d018      	beq.n	8004382 <RCCEx_PLLSAI2_Config+0x86>
 8004350:	2b03      	cmp	r3, #3
 8004352:	d825      	bhi.n	80043a0 <RCCEx_PLLSAI2_Config+0xa4>
 8004354:	2b01      	cmp	r3, #1
 8004356:	d002      	beq.n	800435e <RCCEx_PLLSAI2_Config+0x62>
 8004358:	2b02      	cmp	r3, #2
 800435a:	d009      	beq.n	8004370 <RCCEx_PLLSAI2_Config+0x74>
 800435c:	e020      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800435e:	4b55      	ldr	r3, [pc, #340]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d11d      	bne.n	80043a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436e:	e01a      	b.n	80043a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004370:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004378:	2b00      	cmp	r3, #0
 800437a:	d116      	bne.n	80043aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004380:	e013      	b.n	80043aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004382:	4b4c      	ldr	r3, [pc, #304]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800438e:	4b49      	ldr	r3, [pc, #292]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800439e:	e006      	b.n	80043ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
      break;
 80043a4:	e004      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043a6:	bf00      	nop
 80043a8:	e002      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043aa:	bf00      	nop
 80043ac:	e000      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10d      	bne.n	80043d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043b6:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6819      	ldr	r1, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	430b      	orrs	r3, r1
 80043cc:	4939      	ldr	r1, [pc, #228]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d167      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043d8:	4b36      	ldr	r3, [pc, #216]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a35      	ldr	r2, [pc, #212]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e4:	f7fd fd0c 	bl	8001e00 <HAL_GetTick>
 80043e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043ea:	e009      	b.n	8004400 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043ec:	f7fd fd08 	bl	8001e00 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d902      	bls.n	8004400 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	73fb      	strb	r3, [r7, #15]
        break;
 80043fe:	e005      	b.n	800440c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004400:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ef      	bne.n	80043ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d14a      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d111      	bne.n	800443c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004418:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6892      	ldr	r2, [r2, #8]
 8004428:	0211      	lsls	r1, r2, #8
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68d2      	ldr	r2, [r2, #12]
 800442e:	0912      	lsrs	r2, r2, #4
 8004430:	0452      	lsls	r2, r2, #17
 8004432:	430a      	orrs	r2, r1
 8004434:	491f      	ldr	r1, [pc, #124]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004436:	4313      	orrs	r3, r2
 8004438:	614b      	str	r3, [r1, #20]
 800443a:	e011      	b.n	8004460 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800443c:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004444:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6892      	ldr	r2, [r2, #8]
 800444c:	0211      	lsls	r1, r2, #8
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6912      	ldr	r2, [r2, #16]
 8004452:	0852      	lsrs	r2, r2, #1
 8004454:	3a01      	subs	r2, #1
 8004456:	0652      	lsls	r2, r2, #25
 8004458:	430a      	orrs	r2, r1
 800445a:	4916      	ldr	r1, [pc, #88]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445c:	4313      	orrs	r3, r2
 800445e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fd fcc8 	bl	8001e00 <HAL_GetTick>
 8004470:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004472:	e009      	b.n	8004488 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004474:	f7fd fcc4 	bl	8001e00 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d902      	bls.n	8004488 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	73fb      	strb	r3, [r7, #15]
          break;
 8004486:	e005      	b.n	8004494 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ef      	beq.n	8004474 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	4904      	ldr	r1, [pc, #16]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000

080044b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e095      	b.n	80045f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d108      	bne.n	80044e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044da:	d009      	beq.n	80044f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	61da      	str	r2, [r3, #28]
 80044e2:	e005      	b.n	80044f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fd f9c8 	bl	80018a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004526:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004530:	d902      	bls.n	8004538 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	e002      	b.n	800453e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800453c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004546:	d007      	beq.n	8004558 <HAL_SPI_Init+0xa0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004550:	d002      	beq.n	8004558 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	ea42 0103 	orr.w	r1, r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	0c1b      	lsrs	r3, r3, #16
 80045b4:	f003 0204 	and.w	r2, r3, #4
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045d4:	ea42 0103 	orr.w	r1, r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b088      	sub	sp, #32
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_SPI_Transmit+0x22>
 800461c:	2302      	movs	r3, #2
 800461e:	e15f      	b.n	80048e0 <HAL_SPI_Transmit+0x2e2>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004628:	f7fd fbea 	bl	8001e00 <HAL_GetTick>
 800462c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d002      	beq.n	8004644 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800463e:	2302      	movs	r3, #2
 8004640:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004642:	e148      	b.n	80048d6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_SPI_Transmit+0x52>
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d102      	bne.n	8004656 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004654:	e13f      	b.n	80048d6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2203      	movs	r2, #3
 800465a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	88fa      	ldrh	r2, [r7, #6]
 800466e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a0:	d10f      	bne.n	80046c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046cc:	2b40      	cmp	r3, #64	; 0x40
 80046ce:	d007      	beq.n	80046e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046e8:	d94f      	bls.n	800478a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_SPI_Transmit+0xfa>
 80046f2:	8afb      	ldrh	r3, [r7, #22]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d142      	bne.n	800477e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	881a      	ldrh	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	1c9a      	adds	r2, r3, #2
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800471c:	e02f      	b.n	800477e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b02      	cmp	r3, #2
 800472a:	d112      	bne.n	8004752 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	881a      	ldrh	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	1c9a      	adds	r2, r3, #2
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004750:	e015      	b.n	800477e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004752:	f7fd fb55 	bl	8001e00 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d803      	bhi.n	800476a <HAL_SPI_Transmit+0x16c>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d102      	bne.n	8004770 <HAL_SPI_Transmit+0x172>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800477c:	e0ab      	b.n	80048d6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ca      	bne.n	800471e <HAL_SPI_Transmit+0x120>
 8004788:	e080      	b.n	800488c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <HAL_SPI_Transmit+0x19a>
 8004792:	8afb      	ldrh	r3, [r7, #22]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d174      	bne.n	8004882 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d912      	bls.n	80047c8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	881a      	ldrh	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	1c9a      	adds	r2, r3, #2
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b02      	subs	r3, #2
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047c6:	e05c      	b.n	8004882 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	7812      	ldrb	r2, [r2, #0]
 80047d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80047ee:	e048      	b.n	8004882 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d12b      	bne.n	8004856 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d912      	bls.n	800482e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	881a      	ldrh	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b02      	subs	r3, #2
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800482c:	e029      	b.n	8004882 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004854:	e015      	b.n	8004882 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004856:	f7fd fad3 	bl	8001e00 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d803      	bhi.n	800486e <HAL_SPI_Transmit+0x270>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d102      	bne.n	8004874 <HAL_SPI_Transmit+0x276>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004880:	e029      	b.n	80048d6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1b1      	bne.n	80047f0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	6839      	ldr	r1, [r7, #0]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fcf9 	bl	8005288 <SPI_EndRxTxTransaction>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e003      	b.n	80048d6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048de:	7ffb      	ldrb	r3, [r7, #31]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d002      	beq.n	800490e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004908:	2302      	movs	r3, #2
 800490a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800490c:	e11a      	b.n	8004b44 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004916:	d112      	bne.n	800493e <HAL_SPI_Receive+0x56>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10e      	bne.n	800493e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2204      	movs	r2, #4
 8004924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004928:	88fa      	ldrh	r2, [r7, #6]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	4613      	mov	r3, r2
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f90e 	bl	8004b56 <HAL_SPI_TransmitReceive>
 800493a:	4603      	mov	r3, r0
 800493c:	e107      	b.n	8004b4e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_SPI_Receive+0x64>
 8004948:	2302      	movs	r3, #2
 800494a:	e100      	b.n	8004b4e <HAL_SPI_Receive+0x266>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004954:	f7fd fa54 	bl	8001e00 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_SPI_Receive+0x7e>
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d102      	bne.n	800496c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	75fb      	strb	r3, [r7, #23]
    goto error;
 800496a:	e0eb      	b.n	8004b44 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2204      	movs	r2, #4
 8004970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049b6:	d908      	bls.n	80049ca <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049c6:	605a      	str	r2, [r3, #4]
 80049c8:	e007      	b.n	80049da <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049d8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e2:	d10f      	bne.n	8004a04 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a02:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d007      	beq.n	8004a22 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a2a:	d86f      	bhi.n	8004b0c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a2c:	e034      	b.n	8004a98 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d117      	bne.n	8004a6c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f103 020c 	add.w	r2, r3, #12
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	7812      	ldrb	r2, [r2, #0]
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004a6a:	e015      	b.n	8004a98 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a6c:	f7fd f9c8 	bl	8001e00 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d803      	bhi.n	8004a84 <HAL_SPI_Receive+0x19c>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a82:	d102      	bne.n	8004a8a <HAL_SPI_Receive+0x1a2>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004a96:	e055      	b.n	8004b44 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1c4      	bne.n	8004a2e <HAL_SPI_Receive+0x146>
 8004aa4:	e038      	b.n	8004b18 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d115      	bne.n	8004ae0 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	b292      	uxth	r2, r2
 8004ac0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	1c9a      	adds	r2, r3, #2
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004ade:	e015      	b.n	8004b0c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ae0:	f7fd f98e 	bl	8001e00 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d803      	bhi.n	8004af8 <HAL_SPI_Receive+0x210>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d102      	bne.n	8004afe <HAL_SPI_Receive+0x216>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004b0a:	e01b      	b.n	8004b44 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1c6      	bne.n	8004aa6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	6839      	ldr	r1, [r7, #0]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fb5b 	bl	80051d8 <SPI_EndRxTransaction>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	75fb      	strb	r3, [r7, #23]
 8004b3a:	e003      	b.n	8004b44 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b08a      	sub	sp, #40	; 0x28
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b64:	2301      	movs	r3, #1
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x26>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e20a      	b.n	8004f92 <HAL_SPI_TransmitReceive+0x43c>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b84:	f7fd f93c 	bl	8001e00 <HAL_GetTick>
 8004b88:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b90:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004b98:	887b      	ldrh	r3, [r7, #2]
 8004b9a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004b9c:	887b      	ldrh	r3, [r7, #2]
 8004b9e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ba0:	7efb      	ldrb	r3, [r7, #27]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_SPI_TransmitReceive+0x6e>
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bac:	d106      	bne.n	8004bbc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d102      	bne.n	8004bbc <HAL_SPI_TransmitReceive+0x66>
 8004bb6:	7efb      	ldrb	r3, [r7, #27]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d003      	beq.n	8004bc4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004bc2:	e1e0      	b.n	8004f86 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_SPI_TransmitReceive+0x80>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <HAL_SPI_TransmitReceive+0x80>
 8004bd0:	887b      	ldrh	r3, [r7, #2]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d103      	bne.n	8004bde <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004bdc:	e1d3      	b.n	8004f86 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d003      	beq.n	8004bf2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2205      	movs	r2, #5
 8004bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	887a      	ldrh	r2, [r7, #2]
 8004c02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	887a      	ldrh	r2, [r7, #2]
 8004c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	887a      	ldrh	r2, [r7, #2]
 8004c18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	887a      	ldrh	r2, [r7, #2]
 8004c1e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c34:	d802      	bhi.n	8004c3c <HAL_SPI_TransmitReceive+0xe6>
 8004c36:	8a3b      	ldrh	r3, [r7, #16]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d908      	bls.n	8004c4e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c4a:	605a      	str	r2, [r3, #4]
 8004c4c:	e007      	b.n	8004c5e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c5c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d007      	beq.n	8004c7c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c84:	f240 8081 	bls.w	8004d8a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x140>
 8004c90:	8a7b      	ldrh	r3, [r7, #18]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d16d      	bne.n	8004d72 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	881a      	ldrh	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	1c9a      	adds	r2, r3, #2
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cba:	e05a      	b.n	8004d72 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d11b      	bne.n	8004d02 <HAL_SPI_TransmitReceive+0x1ac>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d016      	beq.n	8004d02 <HAL_SPI_TransmitReceive+0x1ac>
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d113      	bne.n	8004d02 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	881a      	ldrh	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	1c9a      	adds	r2, r3, #2
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d11c      	bne.n	8004d4a <HAL_SPI_TransmitReceive+0x1f4>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d016      	beq.n	8004d4a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	b292      	uxth	r2, r2
 8004d28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d46:	2301      	movs	r3, #1
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d4a:	f7fd f859 	bl	8001e00 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d80b      	bhi.n	8004d72 <HAL_SPI_TransmitReceive+0x21c>
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d60:	d007      	beq.n	8004d72 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004d70:	e109      	b.n	8004f86 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d19f      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x166>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d199      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x166>
 8004d88:	e0e3      	b.n	8004f52 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0x244>
 8004d92:	8a7b      	ldrh	r3, [r7, #18]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	f040 80cf 	bne.w	8004f38 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d912      	bls.n	8004dca <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	881a      	ldrh	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	1c9a      	adds	r2, r3, #2
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b02      	subs	r3, #2
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dc8:	e0b6      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	7812      	ldrb	r2, [r2, #0]
 8004dd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004df0:	e0a2      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d134      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x314>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d02f      	beq.n	8004e6a <HAL_SPI_TransmitReceive+0x314>
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d12c      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d912      	bls.n	8004e40 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	881a      	ldrh	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	1c9a      	adds	r2, r3, #2
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b02      	subs	r3, #2
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e3e:	e012      	b.n	8004e66 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d148      	bne.n	8004f0a <HAL_SPI_TransmitReceive+0x3b4>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d042      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d923      	bls.n	8004ed8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	1c9a      	adds	r2, r3, #2
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b02      	subs	r3, #2
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d81f      	bhi.n	8004f06 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	e016      	b.n	8004f06 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f103 020c 	add.w	r2, r3, #12
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	7812      	ldrb	r2, [r2, #0]
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f06:	2301      	movs	r3, #1
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f0a:	f7fc ff79 	bl	8001e00 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d803      	bhi.n	8004f22 <HAL_SPI_TransmitReceive+0x3cc>
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d102      	bne.n	8004f28 <HAL_SPI_TransmitReceive+0x3d2>
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d107      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004f36:	e026      	b.n	8004f86 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f47f af57 	bne.w	8004df2 <HAL_SPI_TransmitReceive+0x29c>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f47f af50 	bne.w	8004df2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f996 	bl	8005288 <SPI_EndRxTxTransaction>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7c:	e003      	b.n	8004f86 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3728      	adds	r7, #40	; 0x28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fac:	f7fc ff28 	bl	8001e00 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	4413      	add	r3, r2
 8004fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fbc:	f7fc ff20 	bl	8001e00 <HAL_GetTick>
 8004fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fc2:	4b39      	ldr	r3, [pc, #228]	; (80050a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	015b      	lsls	r3, r3, #5
 8004fc8:	0d1b      	lsrs	r3, r3, #20
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	fb02 f303 	mul.w	r3, r2, r3
 8004fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fd2:	e054      	b.n	800507e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fda:	d050      	beq.n	800507e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fdc:	f7fc ff10 	bl	8001e00 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d902      	bls.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d13d      	bne.n	800506e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800500a:	d111      	bne.n	8005030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005014:	d004      	beq.n	8005020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800501e:	d107      	bne.n	8005030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800502e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005038:	d10f      	bne.n	800505a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e017      	b.n	800509e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	3b01      	subs	r3, #1
 800507c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4013      	ands	r3, r2
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	bf0c      	ite	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	2300      	movne	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	429a      	cmp	r2, r3
 800509a:	d19b      	bne.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	2000001c 	.word	0x2000001c

080050ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	; 0x28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80050be:	f7fc fe9f 	bl	8001e00 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	4413      	add	r3, r2
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80050ce:	f7fc fe97 	bl	8001e00 <HAL_GetTick>
 80050d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	330c      	adds	r3, #12
 80050da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050dc:	4b3d      	ldr	r3, [pc, #244]	; (80051d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	00da      	lsls	r2, r3, #3
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	0d1b      	lsrs	r3, r3, #20
 80050ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80050f4:	e060      	b.n	80051b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80050fc:	d107      	bne.n	800510e <SPI_WaitFifoStateUntilTimeout+0x62>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800510c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d050      	beq.n	80051b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005116:	f7fc fe73 	bl	8001e00 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005122:	429a      	cmp	r2, r3
 8005124:	d902      	bls.n	800512c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	2b00      	cmp	r3, #0
 800512a:	d13d      	bne.n	80051a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800513a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005144:	d111      	bne.n	800516a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514e:	d004      	beq.n	800515a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005158:	d107      	bne.n	800516a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005168:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005172:	d10f      	bne.n	8005194 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005192:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e010      	b.n	80051ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4013      	ands	r3, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d196      	bne.n	80050f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3728      	adds	r7, #40	; 0x28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	2000001c 	.word	0x2000001c

080051d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ec:	d111      	bne.n	8005212 <SPI_EndRxTransaction+0x3a>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f6:	d004      	beq.n	8005202 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005200:	d107      	bne.n	8005212 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005210:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2200      	movs	r2, #0
 800521a:	2180      	movs	r1, #128	; 0x80
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f7ff febd 	bl	8004f9c <SPI_WaitFlagStateUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d007      	beq.n	8005238 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522c:	f043 0220 	orr.w	r2, r3, #32
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e023      	b.n	8005280 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005240:	d11d      	bne.n	800527e <SPI_EndRxTransaction+0xa6>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800524a:	d004      	beq.n	8005256 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005254:	d113      	bne.n	800527e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2200      	movs	r2, #0
 800525e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff ff22 	bl	80050ac <SPI_WaitFifoStateUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e000      	b.n	8005280 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2200      	movs	r2, #0
 800529c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7ff ff03 	bl	80050ac <SPI_WaitFifoStateUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d007      	beq.n	80052bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b0:	f043 0220 	orr.w	r2, r3, #32
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e027      	b.n	800530c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2200      	movs	r2, #0
 80052c4:	2180      	movs	r1, #128	; 0x80
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7ff fe68 	bl	8004f9c <SPI_WaitFlagStateUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d6:	f043 0220 	orr.w	r2, r3, #32
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e014      	b.n	800530c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff fedc 	bl	80050ac <SPI_WaitFifoStateUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052fe:	f043 0220 	orr.w	r2, r3, #32
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e000      	b.n	800530c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e049      	b.n	80053ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fc faf2 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3304      	adds	r3, #4
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f000 fb7a 	bl	8005a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e049      	b.n	8005468 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f841 	bl	8005470 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f000 fb23 	bl	8005a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <HAL_TIM_PWM_Start+0x24>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	bf14      	ite	ne
 80054a0:	2301      	movne	r3, #1
 80054a2:	2300      	moveq	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	e03c      	b.n	8005522 <HAL_TIM_PWM_Start+0x9e>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d109      	bne.n	80054c2 <HAL_TIM_PWM_Start+0x3e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	bf14      	ite	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	2300      	moveq	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	e02f      	b.n	8005522 <HAL_TIM_PWM_Start+0x9e>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d109      	bne.n	80054dc <HAL_TIM_PWM_Start+0x58>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e022      	b.n	8005522 <HAL_TIM_PWM_Start+0x9e>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	d109      	bne.n	80054f6 <HAL_TIM_PWM_Start+0x72>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e015      	b.n	8005522 <HAL_TIM_PWM_Start+0x9e>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b10      	cmp	r3, #16
 80054fa:	d109      	bne.n	8005510 <HAL_TIM_PWM_Start+0x8c>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e008      	b.n	8005522 <HAL_TIM_PWM_Start+0x9e>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e09c      	b.n	8005664 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start+0xb6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005538:	e023      	b.n	8005582 <HAL_TIM_PWM_Start+0xfe>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b04      	cmp	r3, #4
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start+0xc6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005548:	e01b      	b.n	8005582 <HAL_TIM_PWM_Start+0xfe>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start+0xd6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005558:	e013      	b.n	8005582 <HAL_TIM_PWM_Start+0xfe>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b0c      	cmp	r3, #12
 800555e:	d104      	bne.n	800556a <HAL_TIM_PWM_Start+0xe6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005568:	e00b      	b.n	8005582 <HAL_TIM_PWM_Start+0xfe>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b10      	cmp	r3, #16
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start+0xf6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005578:	e003      	b.n	8005582 <HAL_TIM_PWM_Start+0xfe>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2201      	movs	r2, #1
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fe68 	bl	8006260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a35      	ldr	r2, [pc, #212]	; (800566c <HAL_TIM_PWM_Start+0x1e8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x13e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a34      	ldr	r2, [pc, #208]	; (8005670 <HAL_TIM_PWM_Start+0x1ec>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00e      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x13e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a32      	ldr	r2, [pc, #200]	; (8005674 <HAL_TIM_PWM_Start+0x1f0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d009      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x13e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a31      	ldr	r2, [pc, #196]	; (8005678 <HAL_TIM_PWM_Start+0x1f4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d004      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x13e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a2f      	ldr	r2, [pc, #188]	; (800567c <HAL_TIM_PWM_Start+0x1f8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d101      	bne.n	80055c6 <HAL_TIM_PWM_Start+0x142>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <HAL_TIM_PWM_Start+0x144>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a22      	ldr	r2, [pc, #136]	; (800566c <HAL_TIM_PWM_Start+0x1e8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01d      	beq.n	8005622 <HAL_TIM_PWM_Start+0x19e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ee:	d018      	beq.n	8005622 <HAL_TIM_PWM_Start+0x19e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a22      	ldr	r2, [pc, #136]	; (8005680 <HAL_TIM_PWM_Start+0x1fc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d013      	beq.n	8005622 <HAL_TIM_PWM_Start+0x19e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a21      	ldr	r2, [pc, #132]	; (8005684 <HAL_TIM_PWM_Start+0x200>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d00e      	beq.n	8005622 <HAL_TIM_PWM_Start+0x19e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <HAL_TIM_PWM_Start+0x204>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d009      	beq.n	8005622 <HAL_TIM_PWM_Start+0x19e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a17      	ldr	r2, [pc, #92]	; (8005670 <HAL_TIM_PWM_Start+0x1ec>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d004      	beq.n	8005622 <HAL_TIM_PWM_Start+0x19e>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a15      	ldr	r2, [pc, #84]	; (8005674 <HAL_TIM_PWM_Start+0x1f0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d115      	bne.n	800564e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	4b18      	ldr	r3, [pc, #96]	; (800568c <HAL_TIM_PWM_Start+0x208>)
 800562a:	4013      	ands	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b06      	cmp	r3, #6
 8005632:	d015      	beq.n	8005660 <HAL_TIM_PWM_Start+0x1dc>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563a:	d011      	beq.n	8005660 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564c:	e008      	b.n	8005660 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e000      	b.n	8005662 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005660:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40013400 	.word	0x40013400
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400
 800567c:	40014800 	.word	0x40014800
 8005680:	40000400 	.word	0x40000400
 8005684:	40000800 	.word	0x40000800
 8005688:	40000c00 	.word	0x40000c00
 800568c:	00010007 	.word	0x00010007

08005690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e0ff      	b.n	80058ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b14      	cmp	r3, #20
 80056ba:	f200 80f0 	bhi.w	800589e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	08005719 	.word	0x08005719
 80056c8:	0800589f 	.word	0x0800589f
 80056cc:	0800589f 	.word	0x0800589f
 80056d0:	0800589f 	.word	0x0800589f
 80056d4:	08005759 	.word	0x08005759
 80056d8:	0800589f 	.word	0x0800589f
 80056dc:	0800589f 	.word	0x0800589f
 80056e0:	0800589f 	.word	0x0800589f
 80056e4:	0800579b 	.word	0x0800579b
 80056e8:	0800589f 	.word	0x0800589f
 80056ec:	0800589f 	.word	0x0800589f
 80056f0:	0800589f 	.word	0x0800589f
 80056f4:	080057db 	.word	0x080057db
 80056f8:	0800589f 	.word	0x0800589f
 80056fc:	0800589f 	.word	0x0800589f
 8005700:	0800589f 	.word	0x0800589f
 8005704:	0800581d 	.word	0x0800581d
 8005708:	0800589f 	.word	0x0800589f
 800570c:	0800589f 	.word	0x0800589f
 8005710:	0800589f 	.word	0x0800589f
 8005714:	0800585d 	.word	0x0800585d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fa2e 	bl	8005b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0208 	orr.w	r2, r2, #8
 8005732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699a      	ldr	r2, [r3, #24]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0204 	bic.w	r2, r2, #4
 8005742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6999      	ldr	r1, [r3, #24]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	619a      	str	r2, [r3, #24]
      break;
 8005756:	e0a5      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fa9e 	bl	8005ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6999      	ldr	r1, [r3, #24]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	021a      	lsls	r2, r3, #8
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	619a      	str	r2, [r3, #24]
      break;
 8005798:	e084      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fb07 	bl	8005db4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0208 	orr.w	r2, r2, #8
 80057b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69da      	ldr	r2, [r3, #28]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0204 	bic.w	r2, r2, #4
 80057c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69d9      	ldr	r1, [r3, #28]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	61da      	str	r2, [r3, #28]
      break;
 80057d8:	e064      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fb6f 	bl	8005ec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69d9      	ldr	r1, [r3, #28]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	021a      	lsls	r2, r3, #8
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	61da      	str	r2, [r3, #28]
      break;
 800581a:	e043      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fbb8 	bl	8005f98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0208 	orr.w	r2, r2, #8
 8005836:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0204 	bic.w	r2, r2, #4
 8005846:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800585a:	e023      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fbfc 	bl	8006060 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005876:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005886:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	021a      	lsls	r2, r3, #8
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800589c:	e002      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	75fb      	strb	r3, [r7, #23]
      break;
 80058a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop

080058b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_TIM_ConfigClockSource+0x1c>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e0b6      	b.n	8005a42 <HAL_TIM_ConfigClockSource+0x18a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005910:	d03e      	beq.n	8005990 <HAL_TIM_ConfigClockSource+0xd8>
 8005912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005916:	f200 8087 	bhi.w	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 800591a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591e:	f000 8086 	beq.w	8005a2e <HAL_TIM_ConfigClockSource+0x176>
 8005922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005926:	d87f      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005928:	2b70      	cmp	r3, #112	; 0x70
 800592a:	d01a      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0xaa>
 800592c:	2b70      	cmp	r3, #112	; 0x70
 800592e:	d87b      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005930:	2b60      	cmp	r3, #96	; 0x60
 8005932:	d050      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0x11e>
 8005934:	2b60      	cmp	r3, #96	; 0x60
 8005936:	d877      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005938:	2b50      	cmp	r3, #80	; 0x50
 800593a:	d03c      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0xfe>
 800593c:	2b50      	cmp	r3, #80	; 0x50
 800593e:	d873      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	d058      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0x13e>
 8005944:	2b40      	cmp	r3, #64	; 0x40
 8005946:	d86f      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005948:	2b30      	cmp	r3, #48	; 0x30
 800594a:	d064      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x15e>
 800594c:	2b30      	cmp	r3, #48	; 0x30
 800594e:	d86b      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005950:	2b20      	cmp	r3, #32
 8005952:	d060      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x15e>
 8005954:	2b20      	cmp	r3, #32
 8005956:	d867      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d05c      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x15e>
 800595c:	2b10      	cmp	r3, #16
 800595e:	d05a      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x15e>
 8005960:	e062      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005972:	f000 fc55 	bl	8006220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005984:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	609a      	str	r2, [r3, #8]
      break;
 800598e:	e04f      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059a0:	f000 fc3e 	bl	8006220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059b2:	609a      	str	r2, [r3, #8]
      break;
 80059b4:	e03c      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059c2:	461a      	mov	r2, r3
 80059c4:	f000 fbb2 	bl	800612c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2150      	movs	r1, #80	; 0x50
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fc0b 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 80059d4:	e02c      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059e2:	461a      	mov	r2, r3
 80059e4:	f000 fbd1 	bl	800618a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2160      	movs	r1, #96	; 0x60
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fbfb 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 80059f4:	e01c      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a02:	461a      	mov	r2, r3
 8005a04:	f000 fb92 	bl	800612c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2140      	movs	r1, #64	; 0x40
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fbeb 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005a14:	e00c      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4610      	mov	r0, r2
 8005a22:	f000 fbe2 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005a26:	e003      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a2c:	e000      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a40      	ldr	r2, [pc, #256]	; (8005b60 <TIM_Base_SetConfig+0x114>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d013      	beq.n	8005a8c <TIM_Base_SetConfig+0x40>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6a:	d00f      	beq.n	8005a8c <TIM_Base_SetConfig+0x40>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a3d      	ldr	r2, [pc, #244]	; (8005b64 <TIM_Base_SetConfig+0x118>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00b      	beq.n	8005a8c <TIM_Base_SetConfig+0x40>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a3c      	ldr	r2, [pc, #240]	; (8005b68 <TIM_Base_SetConfig+0x11c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d007      	beq.n	8005a8c <TIM_Base_SetConfig+0x40>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a3b      	ldr	r2, [pc, #236]	; (8005b6c <TIM_Base_SetConfig+0x120>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d003      	beq.n	8005a8c <TIM_Base_SetConfig+0x40>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a3a      	ldr	r2, [pc, #232]	; (8005b70 <TIM_Base_SetConfig+0x124>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d108      	bne.n	8005a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a2f      	ldr	r2, [pc, #188]	; (8005b60 <TIM_Base_SetConfig+0x114>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01f      	beq.n	8005ae6 <TIM_Base_SetConfig+0x9a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aac:	d01b      	beq.n	8005ae6 <TIM_Base_SetConfig+0x9a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2c      	ldr	r2, [pc, #176]	; (8005b64 <TIM_Base_SetConfig+0x118>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d017      	beq.n	8005ae6 <TIM_Base_SetConfig+0x9a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2b      	ldr	r2, [pc, #172]	; (8005b68 <TIM_Base_SetConfig+0x11c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <TIM_Base_SetConfig+0x9a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a2a      	ldr	r2, [pc, #168]	; (8005b6c <TIM_Base_SetConfig+0x120>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00f      	beq.n	8005ae6 <TIM_Base_SetConfig+0x9a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a29      	ldr	r2, [pc, #164]	; (8005b70 <TIM_Base_SetConfig+0x124>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00b      	beq.n	8005ae6 <TIM_Base_SetConfig+0x9a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a28      	ldr	r2, [pc, #160]	; (8005b74 <TIM_Base_SetConfig+0x128>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d007      	beq.n	8005ae6 <TIM_Base_SetConfig+0x9a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a27      	ldr	r2, [pc, #156]	; (8005b78 <TIM_Base_SetConfig+0x12c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d003      	beq.n	8005ae6 <TIM_Base_SetConfig+0x9a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a26      	ldr	r2, [pc, #152]	; (8005b7c <TIM_Base_SetConfig+0x130>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d108      	bne.n	8005af8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a10      	ldr	r2, [pc, #64]	; (8005b60 <TIM_Base_SetConfig+0x114>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00f      	beq.n	8005b44 <TIM_Base_SetConfig+0xf8>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a12      	ldr	r2, [pc, #72]	; (8005b70 <TIM_Base_SetConfig+0x124>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00b      	beq.n	8005b44 <TIM_Base_SetConfig+0xf8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a11      	ldr	r2, [pc, #68]	; (8005b74 <TIM_Base_SetConfig+0x128>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d007      	beq.n	8005b44 <TIM_Base_SetConfig+0xf8>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a10      	ldr	r2, [pc, #64]	; (8005b78 <TIM_Base_SetConfig+0x12c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_Base_SetConfig+0xf8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a0f      	ldr	r2, [pc, #60]	; (8005b7c <TIM_Base_SetConfig+0x130>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d103      	bne.n	8005b4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	615a      	str	r2, [r3, #20]
}
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40012c00 	.word	0x40012c00
 8005b64:	40000400 	.word	0x40000400
 8005b68:	40000800 	.word	0x40000800
 8005b6c:	40000c00 	.word	0x40000c00
 8005b70:	40013400 	.word	0x40013400
 8005b74:	40014000 	.word	0x40014000
 8005b78:	40014400 	.word	0x40014400
 8005b7c:	40014800 	.word	0x40014800

08005b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f023 0201 	bic.w	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f023 0302 	bic.w	r3, r3, #2
 8005bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a2c      	ldr	r2, [pc, #176]	; (8005c8c <TIM_OC1_SetConfig+0x10c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00f      	beq.n	8005c00 <TIM_OC1_SetConfig+0x80>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a2b      	ldr	r2, [pc, #172]	; (8005c90 <TIM_OC1_SetConfig+0x110>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <TIM_OC1_SetConfig+0x80>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a2a      	ldr	r2, [pc, #168]	; (8005c94 <TIM_OC1_SetConfig+0x114>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_OC1_SetConfig+0x80>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a29      	ldr	r2, [pc, #164]	; (8005c98 <TIM_OC1_SetConfig+0x118>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_OC1_SetConfig+0x80>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a28      	ldr	r2, [pc, #160]	; (8005c9c <TIM_OC1_SetConfig+0x11c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d10c      	bne.n	8005c1a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f023 0308 	bic.w	r3, r3, #8
 8005c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f023 0304 	bic.w	r3, r3, #4
 8005c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <TIM_OC1_SetConfig+0x10c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00f      	beq.n	8005c42 <TIM_OC1_SetConfig+0xc2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a1a      	ldr	r2, [pc, #104]	; (8005c90 <TIM_OC1_SetConfig+0x110>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00b      	beq.n	8005c42 <TIM_OC1_SetConfig+0xc2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a19      	ldr	r2, [pc, #100]	; (8005c94 <TIM_OC1_SetConfig+0x114>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <TIM_OC1_SetConfig+0xc2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a18      	ldr	r2, [pc, #96]	; (8005c98 <TIM_OC1_SetConfig+0x118>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_OC1_SetConfig+0xc2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <TIM_OC1_SetConfig+0x11c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d111      	bne.n	8005c66 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40013400 	.word	0x40013400
 8005c94:	40014000 	.word	0x40014000
 8005c98:	40014400 	.word	0x40014400
 8005c9c:	40014800 	.word	0x40014800

08005ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	f023 0210 	bic.w	r2, r3, #16
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	021b      	lsls	r3, r3, #8
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f023 0320 	bic.w	r3, r3, #32
 8005cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a28      	ldr	r2, [pc, #160]	; (8005da0 <TIM_OC2_SetConfig+0x100>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_OC2_SetConfig+0x6c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a27      	ldr	r2, [pc, #156]	; (8005da4 <TIM_OC2_SetConfig+0x104>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d10d      	bne.n	8005d28 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a1d      	ldr	r2, [pc, #116]	; (8005da0 <TIM_OC2_SetConfig+0x100>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00f      	beq.n	8005d50 <TIM_OC2_SetConfig+0xb0>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a1c      	ldr	r2, [pc, #112]	; (8005da4 <TIM_OC2_SetConfig+0x104>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <TIM_OC2_SetConfig+0xb0>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a1b      	ldr	r2, [pc, #108]	; (8005da8 <TIM_OC2_SetConfig+0x108>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d007      	beq.n	8005d50 <TIM_OC2_SetConfig+0xb0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a1a      	ldr	r2, [pc, #104]	; (8005dac <TIM_OC2_SetConfig+0x10c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_OC2_SetConfig+0xb0>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a19      	ldr	r2, [pc, #100]	; (8005db0 <TIM_OC2_SetConfig+0x110>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d113      	bne.n	8005d78 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40012c00 	.word	0x40012c00
 8005da4:	40013400 	.word	0x40013400
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40014400 	.word	0x40014400
 8005db0:	40014800 	.word	0x40014800

08005db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a27      	ldr	r2, [pc, #156]	; (8005eb0 <TIM_OC3_SetConfig+0xfc>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d003      	beq.n	8005e1e <TIM_OC3_SetConfig+0x6a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a26      	ldr	r2, [pc, #152]	; (8005eb4 <TIM_OC3_SetConfig+0x100>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d10d      	bne.n	8005e3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a1c      	ldr	r2, [pc, #112]	; (8005eb0 <TIM_OC3_SetConfig+0xfc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00f      	beq.n	8005e62 <TIM_OC3_SetConfig+0xae>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <TIM_OC3_SetConfig+0x100>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00b      	beq.n	8005e62 <TIM_OC3_SetConfig+0xae>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a1a      	ldr	r2, [pc, #104]	; (8005eb8 <TIM_OC3_SetConfig+0x104>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d007      	beq.n	8005e62 <TIM_OC3_SetConfig+0xae>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a19      	ldr	r2, [pc, #100]	; (8005ebc <TIM_OC3_SetConfig+0x108>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_OC3_SetConfig+0xae>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a18      	ldr	r2, [pc, #96]	; (8005ec0 <TIM_OC3_SetConfig+0x10c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d113      	bne.n	8005e8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	621a      	str	r2, [r3, #32]
}
 8005ea4:	bf00      	nop
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	40012c00 	.word	0x40012c00
 8005eb4:	40013400 	.word	0x40013400
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800

08005ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	031b      	lsls	r3, r3, #12
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a18      	ldr	r2, [pc, #96]	; (8005f84 <TIM_OC4_SetConfig+0xc0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00f      	beq.n	8005f48 <TIM_OC4_SetConfig+0x84>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a17      	ldr	r2, [pc, #92]	; (8005f88 <TIM_OC4_SetConfig+0xc4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00b      	beq.n	8005f48 <TIM_OC4_SetConfig+0x84>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a16      	ldr	r2, [pc, #88]	; (8005f8c <TIM_OC4_SetConfig+0xc8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d007      	beq.n	8005f48 <TIM_OC4_SetConfig+0x84>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <TIM_OC4_SetConfig+0xcc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d003      	beq.n	8005f48 <TIM_OC4_SetConfig+0x84>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <TIM_OC4_SetConfig+0xd0>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d109      	bne.n	8005f5c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	019b      	lsls	r3, r3, #6
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	621a      	str	r2, [r3, #32]
}
 8005f76:	bf00      	nop
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40013400 	.word	0x40013400
 8005f8c:	40014000 	.word	0x40014000
 8005f90:	40014400 	.word	0x40014400
 8005f94:	40014800 	.word	0x40014800

08005f98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a17      	ldr	r2, [pc, #92]	; (800604c <TIM_OC5_SetConfig+0xb4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00f      	beq.n	8006012 <TIM_OC5_SetConfig+0x7a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a16      	ldr	r2, [pc, #88]	; (8006050 <TIM_OC5_SetConfig+0xb8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00b      	beq.n	8006012 <TIM_OC5_SetConfig+0x7a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a15      	ldr	r2, [pc, #84]	; (8006054 <TIM_OC5_SetConfig+0xbc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d007      	beq.n	8006012 <TIM_OC5_SetConfig+0x7a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a14      	ldr	r2, [pc, #80]	; (8006058 <TIM_OC5_SetConfig+0xc0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_OC5_SetConfig+0x7a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a13      	ldr	r2, [pc, #76]	; (800605c <TIM_OC5_SetConfig+0xc4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d109      	bne.n	8006026 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006018:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	021b      	lsls	r3, r3, #8
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	621a      	str	r2, [r3, #32]
}
 8006040:	bf00      	nop
 8006042:	371c      	adds	r7, #28
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	40012c00 	.word	0x40012c00
 8006050:	40013400 	.word	0x40013400
 8006054:	40014000 	.word	0x40014000
 8006058:	40014400 	.word	0x40014400
 800605c:	40014800 	.word	0x40014800

08006060 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800608e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	051b      	lsls	r3, r3, #20
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a18      	ldr	r2, [pc, #96]	; (8006118 <TIM_OC6_SetConfig+0xb8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00f      	beq.n	80060dc <TIM_OC6_SetConfig+0x7c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a17      	ldr	r2, [pc, #92]	; (800611c <TIM_OC6_SetConfig+0xbc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00b      	beq.n	80060dc <TIM_OC6_SetConfig+0x7c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a16      	ldr	r2, [pc, #88]	; (8006120 <TIM_OC6_SetConfig+0xc0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d007      	beq.n	80060dc <TIM_OC6_SetConfig+0x7c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a15      	ldr	r2, [pc, #84]	; (8006124 <TIM_OC6_SetConfig+0xc4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <TIM_OC6_SetConfig+0x7c>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a14      	ldr	r2, [pc, #80]	; (8006128 <TIM_OC6_SetConfig+0xc8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d109      	bne.n	80060f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	029b      	lsls	r3, r3, #10
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	621a      	str	r2, [r3, #32]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40012c00 	.word	0x40012c00
 800611c:	40013400 	.word	0x40013400
 8006120:	40014000 	.word	0x40014000
 8006124:	40014400 	.word	0x40014400
 8006128:	40014800 	.word	0x40014800

0800612c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0201 	bic.w	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f023 030a 	bic.w	r3, r3, #10
 8006168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800618a:	b480      	push	{r7}
 800618c:	b087      	sub	sp, #28
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	f023 0210 	bic.w	r2, r3, #16
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	031b      	lsls	r3, r3, #12
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b085      	sub	sp, #20
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	f043 0307 	orr.w	r3, r3, #7
 800620c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	609a      	str	r2, [r3, #8]
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800623a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	021a      	lsls	r2, r3, #8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	431a      	orrs	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4313      	orrs	r3, r2
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	609a      	str	r2, [r3, #8]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	2201      	movs	r2, #1
 8006274:	fa02 f303 	lsl.w	r3, r2, r3
 8006278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a1a      	ldr	r2, [r3, #32]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	43db      	mvns	r3, r3
 8006282:	401a      	ands	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a1a      	ldr	r2, [r3, #32]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f003 031f 	and.w	r3, r3, #31
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	fa01 f303 	lsl.w	r3, r1, r3
 8006298:	431a      	orrs	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
	...

080062ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e068      	b.n	8006396 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a2e      	ldr	r2, [pc, #184]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d004      	beq.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a2d      	ldr	r2, [pc, #180]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d108      	bne.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006310:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4313      	orrs	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1e      	ldr	r2, [pc, #120]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d01d      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006336:	d018      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1b      	ldr	r2, [pc, #108]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d013      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1a      	ldr	r2, [pc, #104]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00e      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a18      	ldr	r2, [pc, #96]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d009      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a13      	ldr	r2, [pc, #76]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d004      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d10c      	bne.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	4313      	orrs	r3, r2
 800637a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40012c00 	.word	0x40012c00
 80063a8:	40013400 	.word	0x40013400
 80063ac:	40000400 	.word	0x40000400
 80063b0:	40000800 	.word	0x40000800
 80063b4:	40000c00 	.word	0x40000c00
 80063b8:	40014000 	.word	0x40014000

080063bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e040      	b.n	8006450 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fb faf2 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2224      	movs	r2, #36	; 0x24
 80063e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0201 	bic.w	r2, r2, #1
 80063f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fc34 	bl	8006c70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f979 	bl	8006700 <UART_SetConfig>
 800640e:	4603      	mov	r3, r0
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e01b      	b.n	8006450 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006426:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006436:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fcb3 	bl	8006db4 <UART_CheckIdleState>
 800644e:	4603      	mov	r3, r0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08a      	sub	sp, #40	; 0x28
 800645c:	af02      	add	r7, sp, #8
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	4613      	mov	r3, r2
 8006466:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646c:	2b20      	cmp	r3, #32
 800646e:	d178      	bne.n	8006562 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_UART_Transmit+0x24>
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e071      	b.n	8006564 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2221      	movs	r2, #33	; 0x21
 800648c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800648e:	f7fb fcb7 	bl	8001e00 <HAL_GetTick>
 8006492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	88fa      	ldrh	r2, [r7, #6]
 80064a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ac:	d108      	bne.n	80064c0 <HAL_UART_Transmit+0x68>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d104      	bne.n	80064c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	e003      	b.n	80064c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064c8:	e030      	b.n	800652c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2200      	movs	r2, #0
 80064d2:	2180      	movs	r1, #128	; 0x80
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fd15 	bl	8006f04 <UART_WaitOnFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e03c      	b.n	8006564 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10b      	bne.n	8006508 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	881a      	ldrh	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064fc:	b292      	uxth	r2, r2
 80064fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	3302      	adds	r3, #2
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	e008      	b.n	800651a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	781a      	ldrb	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	b292      	uxth	r2, r2
 8006512:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	3301      	adds	r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1c8      	bne.n	80064ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2200      	movs	r2, #0
 8006540:	2140      	movs	r1, #64	; 0x40
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 fcde 	bl	8006f04 <UART_WaitOnFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e005      	b.n	8006564 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e000      	b.n	8006564 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3720      	adds	r7, #32
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	; 0x28
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006582:	2b20      	cmp	r3, #32
 8006584:	f040 80b6 	bne.w	80066f4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_UART_Receive+0x28>
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e0ae      	b.n	80066f6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2222      	movs	r2, #34	; 0x22
 80065a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ae:	f7fb fc27 	bl	8001e00 <HAL_GetTick>
 80065b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	88fa      	ldrh	r2, [r7, #6]
 80065b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	88fa      	ldrh	r2, [r7, #6]
 80065c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065cc:	d10e      	bne.n	80065ec <HAL_UART_Receive+0x80>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <HAL_UART_Receive+0x76>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80065dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065e0:	e02d      	b.n	800663e <HAL_UART_Receive+0xd2>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	22ff      	movs	r2, #255	; 0xff
 80065e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065ea:	e028      	b.n	800663e <HAL_UART_Receive+0xd2>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10d      	bne.n	8006610 <HAL_UART_Receive+0xa4>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <HAL_UART_Receive+0x9a>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	22ff      	movs	r2, #255	; 0xff
 8006600:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006604:	e01b      	b.n	800663e <HAL_UART_Receive+0xd2>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	227f      	movs	r2, #127	; 0x7f
 800660a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800660e:	e016      	b.n	800663e <HAL_UART_Receive+0xd2>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006618:	d10d      	bne.n	8006636 <HAL_UART_Receive+0xca>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <HAL_UART_Receive+0xc0>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	227f      	movs	r2, #127	; 0x7f
 8006626:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800662a:	e008      	b.n	800663e <HAL_UART_Receive+0xd2>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	223f      	movs	r2, #63	; 0x3f
 8006630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006634:	e003      	b.n	800663e <HAL_UART_Receive+0xd2>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006644:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664e:	d108      	bne.n	8006662 <HAL_UART_Receive+0xf6>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006658:	2300      	movs	r3, #0
 800665a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	e003      	b.n	800666a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800666a:	e037      	b.n	80066dc <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	2120      	movs	r1, #32
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 fc44 	bl	8006f04 <UART_WaitOnFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d005      	beq.n	800668e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e033      	b.n	80066f6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10c      	bne.n	80066ae <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800669a:	b29a      	uxth	r2, r3
 800669c:	8a7b      	ldrh	r3, [r7, #18]
 800669e:	4013      	ands	r3, r2
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	3302      	adds	r3, #2
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	e00d      	b.n	80066ca <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	8a7b      	ldrh	r3, [r7, #18]
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	4013      	ands	r3, r2
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	3301      	adds	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1c1      	bne.n	800666c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	e000      	b.n	80066f6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80066f4:	2302      	movs	r3, #2
  }
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3720      	adds	r7, #32
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006704:	b08a      	sub	sp, #40	; 0x28
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	431a      	orrs	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	431a      	orrs	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	4313      	orrs	r3, r2
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4ba4      	ldr	r3, [pc, #656]	; (80069c0 <UART_SetConfig+0x2c0>)
 8006730:	4013      	ands	r3, r2
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006738:	430b      	orrs	r3, r1
 800673a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a99      	ldr	r2, [pc, #612]	; (80069c4 <UART_SetConfig+0x2c4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d004      	beq.n	800676c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006768:	4313      	orrs	r3, r2
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677c:	430a      	orrs	r2, r1
 800677e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a90      	ldr	r2, [pc, #576]	; (80069c8 <UART_SetConfig+0x2c8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d126      	bne.n	80067d8 <UART_SetConfig+0xd8>
 800678a:	4b90      	ldr	r3, [pc, #576]	; (80069cc <UART_SetConfig+0x2cc>)
 800678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	2b03      	cmp	r3, #3
 8006796:	d81b      	bhi.n	80067d0 <UART_SetConfig+0xd0>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <UART_SetConfig+0xa0>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067b1 	.word	0x080067b1
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	080067b9 	.word	0x080067b9
 80067ac:	080067c9 	.word	0x080067c9
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b6:	e116      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80067b8:	2302      	movs	r3, #2
 80067ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067be:	e112      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c6:	e10e      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80067c8:	2308      	movs	r3, #8
 80067ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ce:	e10a      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d6:	e106      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a7c      	ldr	r2, [pc, #496]	; (80069d0 <UART_SetConfig+0x2d0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d138      	bne.n	8006854 <UART_SetConfig+0x154>
 80067e2:	4b7a      	ldr	r3, [pc, #488]	; (80069cc <UART_SetConfig+0x2cc>)
 80067e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e8:	f003 030c 	and.w	r3, r3, #12
 80067ec:	2b0c      	cmp	r3, #12
 80067ee:	d82d      	bhi.n	800684c <UART_SetConfig+0x14c>
 80067f0:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <UART_SetConfig+0xf8>)
 80067f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	0800682d 	.word	0x0800682d
 80067fc:	0800684d 	.word	0x0800684d
 8006800:	0800684d 	.word	0x0800684d
 8006804:	0800684d 	.word	0x0800684d
 8006808:	0800683d 	.word	0x0800683d
 800680c:	0800684d 	.word	0x0800684d
 8006810:	0800684d 	.word	0x0800684d
 8006814:	0800684d 	.word	0x0800684d
 8006818:	08006835 	.word	0x08006835
 800681c:	0800684d 	.word	0x0800684d
 8006820:	0800684d 	.word	0x0800684d
 8006824:	0800684d 	.word	0x0800684d
 8006828:	08006845 	.word	0x08006845
 800682c:	2300      	movs	r3, #0
 800682e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006832:	e0d8      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006834:	2302      	movs	r3, #2
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683a:	e0d4      	b.n	80069e6 <UART_SetConfig+0x2e6>
 800683c:	2304      	movs	r3, #4
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006842:	e0d0      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006844:	2308      	movs	r3, #8
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684a:	e0cc      	b.n	80069e6 <UART_SetConfig+0x2e6>
 800684c:	2310      	movs	r3, #16
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006852:	e0c8      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a5e      	ldr	r2, [pc, #376]	; (80069d4 <UART_SetConfig+0x2d4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d125      	bne.n	80068aa <UART_SetConfig+0x1aa>
 800685e:	4b5b      	ldr	r3, [pc, #364]	; (80069cc <UART_SetConfig+0x2cc>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006864:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006868:	2b30      	cmp	r3, #48	; 0x30
 800686a:	d016      	beq.n	800689a <UART_SetConfig+0x19a>
 800686c:	2b30      	cmp	r3, #48	; 0x30
 800686e:	d818      	bhi.n	80068a2 <UART_SetConfig+0x1a2>
 8006870:	2b20      	cmp	r3, #32
 8006872:	d00a      	beq.n	800688a <UART_SetConfig+0x18a>
 8006874:	2b20      	cmp	r3, #32
 8006876:	d814      	bhi.n	80068a2 <UART_SetConfig+0x1a2>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <UART_SetConfig+0x182>
 800687c:	2b10      	cmp	r3, #16
 800687e:	d008      	beq.n	8006892 <UART_SetConfig+0x192>
 8006880:	e00f      	b.n	80068a2 <UART_SetConfig+0x1a2>
 8006882:	2300      	movs	r3, #0
 8006884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006888:	e0ad      	b.n	80069e6 <UART_SetConfig+0x2e6>
 800688a:	2302      	movs	r3, #2
 800688c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006890:	e0a9      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006892:	2304      	movs	r3, #4
 8006894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006898:	e0a5      	b.n	80069e6 <UART_SetConfig+0x2e6>
 800689a:	2308      	movs	r3, #8
 800689c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a0:	e0a1      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80068a2:	2310      	movs	r3, #16
 80068a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a8:	e09d      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a4a      	ldr	r2, [pc, #296]	; (80069d8 <UART_SetConfig+0x2d8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d125      	bne.n	8006900 <UART_SetConfig+0x200>
 80068b4:	4b45      	ldr	r3, [pc, #276]	; (80069cc <UART_SetConfig+0x2cc>)
 80068b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068be:	2bc0      	cmp	r3, #192	; 0xc0
 80068c0:	d016      	beq.n	80068f0 <UART_SetConfig+0x1f0>
 80068c2:	2bc0      	cmp	r3, #192	; 0xc0
 80068c4:	d818      	bhi.n	80068f8 <UART_SetConfig+0x1f8>
 80068c6:	2b80      	cmp	r3, #128	; 0x80
 80068c8:	d00a      	beq.n	80068e0 <UART_SetConfig+0x1e0>
 80068ca:	2b80      	cmp	r3, #128	; 0x80
 80068cc:	d814      	bhi.n	80068f8 <UART_SetConfig+0x1f8>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <UART_SetConfig+0x1d8>
 80068d2:	2b40      	cmp	r3, #64	; 0x40
 80068d4:	d008      	beq.n	80068e8 <UART_SetConfig+0x1e8>
 80068d6:	e00f      	b.n	80068f8 <UART_SetConfig+0x1f8>
 80068d8:	2300      	movs	r3, #0
 80068da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068de:	e082      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80068e0:	2302      	movs	r3, #2
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e6:	e07e      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80068e8:	2304      	movs	r3, #4
 80068ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ee:	e07a      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80068f0:	2308      	movs	r3, #8
 80068f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f6:	e076      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80068f8:	2310      	movs	r3, #16
 80068fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068fe:	e072      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a35      	ldr	r2, [pc, #212]	; (80069dc <UART_SetConfig+0x2dc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d12a      	bne.n	8006960 <UART_SetConfig+0x260>
 800690a:	4b30      	ldr	r3, [pc, #192]	; (80069cc <UART_SetConfig+0x2cc>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006918:	d01a      	beq.n	8006950 <UART_SetConfig+0x250>
 800691a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800691e:	d81b      	bhi.n	8006958 <UART_SetConfig+0x258>
 8006920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006924:	d00c      	beq.n	8006940 <UART_SetConfig+0x240>
 8006926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692a:	d815      	bhi.n	8006958 <UART_SetConfig+0x258>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <UART_SetConfig+0x238>
 8006930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006934:	d008      	beq.n	8006948 <UART_SetConfig+0x248>
 8006936:	e00f      	b.n	8006958 <UART_SetConfig+0x258>
 8006938:	2300      	movs	r3, #0
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693e:	e052      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006940:	2302      	movs	r3, #2
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006946:	e04e      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006948:	2304      	movs	r3, #4
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694e:	e04a      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006950:	2308      	movs	r3, #8
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006956:	e046      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006958:	2310      	movs	r3, #16
 800695a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695e:	e042      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a17      	ldr	r2, [pc, #92]	; (80069c4 <UART_SetConfig+0x2c4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d13a      	bne.n	80069e0 <UART_SetConfig+0x2e0>
 800696a:	4b18      	ldr	r3, [pc, #96]	; (80069cc <UART_SetConfig+0x2cc>)
 800696c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006974:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006978:	d01a      	beq.n	80069b0 <UART_SetConfig+0x2b0>
 800697a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800697e:	d81b      	bhi.n	80069b8 <UART_SetConfig+0x2b8>
 8006980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006984:	d00c      	beq.n	80069a0 <UART_SetConfig+0x2a0>
 8006986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698a:	d815      	bhi.n	80069b8 <UART_SetConfig+0x2b8>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <UART_SetConfig+0x298>
 8006990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006994:	d008      	beq.n	80069a8 <UART_SetConfig+0x2a8>
 8006996:	e00f      	b.n	80069b8 <UART_SetConfig+0x2b8>
 8006998:	2300      	movs	r3, #0
 800699a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699e:	e022      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80069a0:	2302      	movs	r3, #2
 80069a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a6:	e01e      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80069a8:	2304      	movs	r3, #4
 80069aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ae:	e01a      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80069b0:	2308      	movs	r3, #8
 80069b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b6:	e016      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80069b8:	2310      	movs	r3, #16
 80069ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069be:	e012      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80069c0:	efff69f3 	.word	0xefff69f3
 80069c4:	40008000 	.word	0x40008000
 80069c8:	40013800 	.word	0x40013800
 80069cc:	40021000 	.word	0x40021000
 80069d0:	40004400 	.word	0x40004400
 80069d4:	40004800 	.word	0x40004800
 80069d8:	40004c00 	.word	0x40004c00
 80069dc:	40005000 	.word	0x40005000
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a9f      	ldr	r2, [pc, #636]	; (8006c68 <UART_SetConfig+0x568>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d17a      	bne.n	8006ae6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d824      	bhi.n	8006a42 <UART_SetConfig+0x342>
 80069f8:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <UART_SetConfig+0x300>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a43 	.word	0x08006a43
 8006a08:	08006a2d 	.word	0x08006a2d
 8006a0c:	08006a43 	.word	0x08006a43
 8006a10:	08006a33 	.word	0x08006a33
 8006a14:	08006a43 	.word	0x08006a43
 8006a18:	08006a43 	.word	0x08006a43
 8006a1c:	08006a43 	.word	0x08006a43
 8006a20:	08006a3b 	.word	0x08006a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a24:	f7fd f800 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8006a28:	61f8      	str	r0, [r7, #28]
        break;
 8006a2a:	e010      	b.n	8006a4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a2c:	4b8f      	ldr	r3, [pc, #572]	; (8006c6c <UART_SetConfig+0x56c>)
 8006a2e:	61fb      	str	r3, [r7, #28]
        break;
 8006a30:	e00d      	b.n	8006a4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a32:	f7fc ff61 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8006a36:	61f8      	str	r0, [r7, #28]
        break;
 8006a38:	e009      	b.n	8006a4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a3e:	61fb      	str	r3, [r7, #28]
        break;
 8006a40:	e005      	b.n	8006a4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80fb 	beq.w	8006c4c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	4413      	add	r3, r2
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d305      	bcc.n	8006a72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d903      	bls.n	8006a7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a78:	e0e8      	b.n	8006c4c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	461c      	mov	r4, r3
 8006a80:	4615      	mov	r5, r2
 8006a82:	f04f 0200 	mov.w	r2, #0
 8006a86:	f04f 0300 	mov.w	r3, #0
 8006a8a:	022b      	lsls	r3, r5, #8
 8006a8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a90:	0222      	lsls	r2, r4, #8
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	6849      	ldr	r1, [r1, #4]
 8006a96:	0849      	lsrs	r1, r1, #1
 8006a98:	2000      	movs	r0, #0
 8006a9a:	4688      	mov	r8, r1
 8006a9c:	4681      	mov	r9, r0
 8006a9e:	eb12 0a08 	adds.w	sl, r2, r8
 8006aa2:	eb43 0b09 	adc.w	fp, r3, r9
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab4:	4650      	mov	r0, sl
 8006ab6:	4659      	mov	r1, fp
 8006ab8:	f7f9 fbea 	bl	8000290 <__aeabi_uldivmod>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aca:	d308      	bcc.n	8006ade <UART_SetConfig+0x3de>
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ad2:	d204      	bcs.n	8006ade <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	60da      	str	r2, [r3, #12]
 8006adc:	e0b6      	b.n	8006c4c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ae4:	e0b2      	b.n	8006c4c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aee:	d15e      	bne.n	8006bae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d828      	bhi.n	8006b4a <UART_SetConfig+0x44a>
 8006af8:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <UART_SetConfig+0x400>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006b25 	.word	0x08006b25
 8006b04:	08006b2d 	.word	0x08006b2d
 8006b08:	08006b35 	.word	0x08006b35
 8006b0c:	08006b4b 	.word	0x08006b4b
 8006b10:	08006b3b 	.word	0x08006b3b
 8006b14:	08006b4b 	.word	0x08006b4b
 8006b18:	08006b4b 	.word	0x08006b4b
 8006b1c:	08006b4b 	.word	0x08006b4b
 8006b20:	08006b43 	.word	0x08006b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b24:	f7fc ff80 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8006b28:	61f8      	str	r0, [r7, #28]
        break;
 8006b2a:	e014      	b.n	8006b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b2c:	f7fc ff92 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8006b30:	61f8      	str	r0, [r7, #28]
        break;
 8006b32:	e010      	b.n	8006b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b34:	4b4d      	ldr	r3, [pc, #308]	; (8006c6c <UART_SetConfig+0x56c>)
 8006b36:	61fb      	str	r3, [r7, #28]
        break;
 8006b38:	e00d      	b.n	8006b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3a:	f7fc fedd 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8006b3e:	61f8      	str	r0, [r7, #28]
        break;
 8006b40:	e009      	b.n	8006b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b46:	61fb      	str	r3, [r7, #28]
        break;
 8006b48:	e005      	b.n	8006b56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d077      	beq.n	8006c4c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	005a      	lsls	r2, r3, #1
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	085b      	lsrs	r3, r3, #1
 8006b66:	441a      	add	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d916      	bls.n	8006ba6 <UART_SetConfig+0x4a6>
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7e:	d212      	bcs.n	8006ba6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f023 030f 	bic.w	r3, r3, #15
 8006b88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	8afb      	ldrh	r3, [r7, #22]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	8afa      	ldrh	r2, [r7, #22]
 8006ba2:	60da      	str	r2, [r3, #12]
 8006ba4:	e052      	b.n	8006c4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bac:	e04e      	b.n	8006c4c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bb2:	2b08      	cmp	r3, #8
 8006bb4:	d827      	bhi.n	8006c06 <UART_SetConfig+0x506>
 8006bb6:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <UART_SetConfig+0x4bc>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006be1 	.word	0x08006be1
 8006bc0:	08006be9 	.word	0x08006be9
 8006bc4:	08006bf1 	.word	0x08006bf1
 8006bc8:	08006c07 	.word	0x08006c07
 8006bcc:	08006bf7 	.word	0x08006bf7
 8006bd0:	08006c07 	.word	0x08006c07
 8006bd4:	08006c07 	.word	0x08006c07
 8006bd8:	08006c07 	.word	0x08006c07
 8006bdc:	08006bff 	.word	0x08006bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be0:	f7fc ff22 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8006be4:	61f8      	str	r0, [r7, #28]
        break;
 8006be6:	e014      	b.n	8006c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be8:	f7fc ff34 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8006bec:	61f8      	str	r0, [r7, #28]
        break;
 8006bee:	e010      	b.n	8006c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bf0:	4b1e      	ldr	r3, [pc, #120]	; (8006c6c <UART_SetConfig+0x56c>)
 8006bf2:	61fb      	str	r3, [r7, #28]
        break;
 8006bf4:	e00d      	b.n	8006c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf6:	f7fc fe7f 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8006bfa:	61f8      	str	r0, [r7, #28]
        break;
 8006bfc:	e009      	b.n	8006c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c02:	61fb      	str	r3, [r7, #28]
        break;
 8006c04:	e005      	b.n	8006c12 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c10:	bf00      	nop
    }

    if (pclk != 0U)
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d019      	beq.n	8006c4c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	085a      	lsrs	r2, r3, #1
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	441a      	add	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b0f      	cmp	r3, #15
 8006c30:	d909      	bls.n	8006c46 <UART_SetConfig+0x546>
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c38:	d205      	bcs.n	8006c46 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60da      	str	r2, [r3, #12]
 8006c44:	e002      	b.n	8006c4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3728      	adds	r7, #40	; 0x28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c66:	bf00      	nop
 8006c68:	40008000 	.word	0x40008000
 8006c6c:	00f42400 	.word	0x00f42400

08006c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00a      	beq.n	8006c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	f003 0304 	and.w	r3, r3, #4
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01a      	beq.n	8006d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d6e:	d10a      	bne.n	8006d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	605a      	str	r2, [r3, #4]
  }
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b098      	sub	sp, #96	; 0x60
 8006db8:	af02      	add	r7, sp, #8
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dc4:	f7fb f81c 	bl	8001e00 <HAL_GetTick>
 8006dc8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0308 	and.w	r3, r3, #8
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d12e      	bne.n	8006e36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006de0:	2200      	movs	r2, #0
 8006de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f88c 	bl	8006f04 <UART_WaitOnFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d021      	beq.n	8006e36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e06:	653b      	str	r3, [r7, #80]	; 0x50
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e10:	647b      	str	r3, [r7, #68]	; 0x44
 8006e12:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e6      	bne.n	8006df2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e062      	b.n	8006efc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d149      	bne.n	8006ed8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f856 	bl	8006f04 <UART_WaitOnFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d03c      	beq.n	8006ed8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	623b      	str	r3, [r7, #32]
   return(result);
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e6      	bne.n	8006e5e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3308      	adds	r3, #8
 8006e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0301 	bic.w	r3, r3, #1
 8006ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3308      	adds	r3, #8
 8006eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eb0:	61fa      	str	r2, [r7, #28]
 8006eb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	69b9      	ldr	r1, [r7, #24]
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e5      	bne.n	8006e90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e011      	b.n	8006efc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3758      	adds	r7, #88	; 0x58
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	4613      	mov	r3, r2
 8006f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f14:	e049      	b.n	8006faa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1c:	d045      	beq.n	8006faa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1e:	f7fa ff6f 	bl	8001e00 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d302      	bcc.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e048      	b.n	8006fca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d031      	beq.n	8006faa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d110      	bne.n	8006f76 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2208      	movs	r2, #8
 8006f5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 f838 	bl	8006fd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2208      	movs	r2, #8
 8006f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e029      	b.n	8006fca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f84:	d111      	bne.n	8006faa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 f81e 	bl	8006fd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e00f      	b.n	8006fca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69da      	ldr	r2, [r3, #28]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	bf0c      	ite	eq
 8006fba:	2301      	moveq	r3, #1
 8006fbc:	2300      	movne	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d0a6      	beq.n	8006f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b095      	sub	sp, #84	; 0x54
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff8:	643b      	str	r3, [r7, #64]	; 0x40
 8006ffa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e6      	bne.n	8006fda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3308      	adds	r3, #8
 8007012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	e853 3f00 	ldrex	r3, [r3]
 800701a:	61fb      	str	r3, [r7, #28]
   return(result);
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	64bb      	str	r3, [r7, #72]	; 0x48
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3308      	adds	r3, #8
 800702a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800702c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007034:	e841 2300 	strex	r3, r2, [r1]
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e5      	bne.n	800700c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007044:	2b01      	cmp	r3, #1
 8007046:	d118      	bne.n	800707a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	60bb      	str	r3, [r7, #8]
   return(result);
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f023 0310 	bic.w	r3, r3, #16
 800705c:	647b      	str	r3, [r7, #68]	; 0x44
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007066:	61bb      	str	r3, [r7, #24]
 8007068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6979      	ldr	r1, [r7, #20]
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	613b      	str	r3, [r7, #16]
   return(result);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e6      	bne.n	8007048 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800708e:	bf00      	nop
 8007090:	3754      	adds	r7, #84	; 0x54
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
	...

0800709c <calloc>:
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <calloc+0xc>)
 800709e:	460a      	mov	r2, r1
 80070a0:	4601      	mov	r1, r0
 80070a2:	6818      	ldr	r0, [r3, #0]
 80070a4:	f000 b802 	b.w	80070ac <_calloc_r>
 80070a8:	20000080 	.word	0x20000080

080070ac <_calloc_r>:
 80070ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ae:	fba1 2402 	umull	r2, r4, r1, r2
 80070b2:	b94c      	cbnz	r4, 80070c8 <_calloc_r+0x1c>
 80070b4:	4611      	mov	r1, r2
 80070b6:	9201      	str	r2, [sp, #4]
 80070b8:	f000 f836 	bl	8007128 <_malloc_r>
 80070bc:	9a01      	ldr	r2, [sp, #4]
 80070be:	4605      	mov	r5, r0
 80070c0:	b930      	cbnz	r0, 80070d0 <_calloc_r+0x24>
 80070c2:	4628      	mov	r0, r5
 80070c4:	b003      	add	sp, #12
 80070c6:	bd30      	pop	{r4, r5, pc}
 80070c8:	220c      	movs	r2, #12
 80070ca:	6002      	str	r2, [r0, #0]
 80070cc:	2500      	movs	r5, #0
 80070ce:	e7f8      	b.n	80070c2 <_calloc_r+0x16>
 80070d0:	4621      	mov	r1, r4
 80070d2:	f000 fabd 	bl	8007650 <memset>
 80070d6:	e7f4      	b.n	80070c2 <_calloc_r+0x16>

080070d8 <free>:
 80070d8:	4b02      	ldr	r3, [pc, #8]	; (80070e4 <free+0xc>)
 80070da:	4601      	mov	r1, r0
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	f000 bb43 	b.w	8007768 <_free_r>
 80070e2:	bf00      	nop
 80070e4:	20000080 	.word	0x20000080

080070e8 <sbrk_aligned>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	4e0e      	ldr	r6, [pc, #56]	; (8007124 <sbrk_aligned+0x3c>)
 80070ec:	460c      	mov	r4, r1
 80070ee:	6831      	ldr	r1, [r6, #0]
 80070f0:	4605      	mov	r5, r0
 80070f2:	b911      	cbnz	r1, 80070fa <sbrk_aligned+0x12>
 80070f4:	f000 fae8 	bl	80076c8 <_sbrk_r>
 80070f8:	6030      	str	r0, [r6, #0]
 80070fa:	4621      	mov	r1, r4
 80070fc:	4628      	mov	r0, r5
 80070fe:	f000 fae3 	bl	80076c8 <_sbrk_r>
 8007102:	1c43      	adds	r3, r0, #1
 8007104:	d00a      	beq.n	800711c <sbrk_aligned+0x34>
 8007106:	1cc4      	adds	r4, r0, #3
 8007108:	f024 0403 	bic.w	r4, r4, #3
 800710c:	42a0      	cmp	r0, r4
 800710e:	d007      	beq.n	8007120 <sbrk_aligned+0x38>
 8007110:	1a21      	subs	r1, r4, r0
 8007112:	4628      	mov	r0, r5
 8007114:	f000 fad8 	bl	80076c8 <_sbrk_r>
 8007118:	3001      	adds	r0, #1
 800711a:	d101      	bne.n	8007120 <sbrk_aligned+0x38>
 800711c:	f04f 34ff 	mov.w	r4, #4294967295
 8007120:	4620      	mov	r0, r4
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	200002c8 	.word	0x200002c8

08007128 <_malloc_r>:
 8007128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800712c:	1ccd      	adds	r5, r1, #3
 800712e:	f025 0503 	bic.w	r5, r5, #3
 8007132:	3508      	adds	r5, #8
 8007134:	2d0c      	cmp	r5, #12
 8007136:	bf38      	it	cc
 8007138:	250c      	movcc	r5, #12
 800713a:	2d00      	cmp	r5, #0
 800713c:	4607      	mov	r7, r0
 800713e:	db01      	blt.n	8007144 <_malloc_r+0x1c>
 8007140:	42a9      	cmp	r1, r5
 8007142:	d905      	bls.n	8007150 <_malloc_r+0x28>
 8007144:	230c      	movs	r3, #12
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	2600      	movs	r6, #0
 800714a:	4630      	mov	r0, r6
 800714c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007150:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007224 <_malloc_r+0xfc>
 8007154:	f000 f868 	bl	8007228 <__malloc_lock>
 8007158:	f8d8 3000 	ldr.w	r3, [r8]
 800715c:	461c      	mov	r4, r3
 800715e:	bb5c      	cbnz	r4, 80071b8 <_malloc_r+0x90>
 8007160:	4629      	mov	r1, r5
 8007162:	4638      	mov	r0, r7
 8007164:	f7ff ffc0 	bl	80070e8 <sbrk_aligned>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	4604      	mov	r4, r0
 800716c:	d155      	bne.n	800721a <_malloc_r+0xf2>
 800716e:	f8d8 4000 	ldr.w	r4, [r8]
 8007172:	4626      	mov	r6, r4
 8007174:	2e00      	cmp	r6, #0
 8007176:	d145      	bne.n	8007204 <_malloc_r+0xdc>
 8007178:	2c00      	cmp	r4, #0
 800717a:	d048      	beq.n	800720e <_malloc_r+0xe6>
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	4631      	mov	r1, r6
 8007180:	4638      	mov	r0, r7
 8007182:	eb04 0903 	add.w	r9, r4, r3
 8007186:	f000 fa9f 	bl	80076c8 <_sbrk_r>
 800718a:	4581      	cmp	r9, r0
 800718c:	d13f      	bne.n	800720e <_malloc_r+0xe6>
 800718e:	6821      	ldr	r1, [r4, #0]
 8007190:	1a6d      	subs	r5, r5, r1
 8007192:	4629      	mov	r1, r5
 8007194:	4638      	mov	r0, r7
 8007196:	f7ff ffa7 	bl	80070e8 <sbrk_aligned>
 800719a:	3001      	adds	r0, #1
 800719c:	d037      	beq.n	800720e <_malloc_r+0xe6>
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	442b      	add	r3, r5
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	f8d8 3000 	ldr.w	r3, [r8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d038      	beq.n	800721e <_malloc_r+0xf6>
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	42a2      	cmp	r2, r4
 80071b0:	d12b      	bne.n	800720a <_malloc_r+0xe2>
 80071b2:	2200      	movs	r2, #0
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	e00f      	b.n	80071d8 <_malloc_r+0xb0>
 80071b8:	6822      	ldr	r2, [r4, #0]
 80071ba:	1b52      	subs	r2, r2, r5
 80071bc:	d41f      	bmi.n	80071fe <_malloc_r+0xd6>
 80071be:	2a0b      	cmp	r2, #11
 80071c0:	d917      	bls.n	80071f2 <_malloc_r+0xca>
 80071c2:	1961      	adds	r1, r4, r5
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	6025      	str	r5, [r4, #0]
 80071c8:	bf18      	it	ne
 80071ca:	6059      	strne	r1, [r3, #4]
 80071cc:	6863      	ldr	r3, [r4, #4]
 80071ce:	bf08      	it	eq
 80071d0:	f8c8 1000 	streq.w	r1, [r8]
 80071d4:	5162      	str	r2, [r4, r5]
 80071d6:	604b      	str	r3, [r1, #4]
 80071d8:	4638      	mov	r0, r7
 80071da:	f104 060b 	add.w	r6, r4, #11
 80071de:	f000 f829 	bl	8007234 <__malloc_unlock>
 80071e2:	f026 0607 	bic.w	r6, r6, #7
 80071e6:	1d23      	adds	r3, r4, #4
 80071e8:	1af2      	subs	r2, r6, r3
 80071ea:	d0ae      	beq.n	800714a <_malloc_r+0x22>
 80071ec:	1b9b      	subs	r3, r3, r6
 80071ee:	50a3      	str	r3, [r4, r2]
 80071f0:	e7ab      	b.n	800714a <_malloc_r+0x22>
 80071f2:	42a3      	cmp	r3, r4
 80071f4:	6862      	ldr	r2, [r4, #4]
 80071f6:	d1dd      	bne.n	80071b4 <_malloc_r+0x8c>
 80071f8:	f8c8 2000 	str.w	r2, [r8]
 80071fc:	e7ec      	b.n	80071d8 <_malloc_r+0xb0>
 80071fe:	4623      	mov	r3, r4
 8007200:	6864      	ldr	r4, [r4, #4]
 8007202:	e7ac      	b.n	800715e <_malloc_r+0x36>
 8007204:	4634      	mov	r4, r6
 8007206:	6876      	ldr	r6, [r6, #4]
 8007208:	e7b4      	b.n	8007174 <_malloc_r+0x4c>
 800720a:	4613      	mov	r3, r2
 800720c:	e7cc      	b.n	80071a8 <_malloc_r+0x80>
 800720e:	230c      	movs	r3, #12
 8007210:	603b      	str	r3, [r7, #0]
 8007212:	4638      	mov	r0, r7
 8007214:	f000 f80e 	bl	8007234 <__malloc_unlock>
 8007218:	e797      	b.n	800714a <_malloc_r+0x22>
 800721a:	6025      	str	r5, [r4, #0]
 800721c:	e7dc      	b.n	80071d8 <_malloc_r+0xb0>
 800721e:	605b      	str	r3, [r3, #4]
 8007220:	deff      	udf	#255	; 0xff
 8007222:	bf00      	nop
 8007224:	200002c4 	.word	0x200002c4

08007228 <__malloc_lock>:
 8007228:	4801      	ldr	r0, [pc, #4]	; (8007230 <__malloc_lock+0x8>)
 800722a:	f000 ba9a 	b.w	8007762 <__retarget_lock_acquire_recursive>
 800722e:	bf00      	nop
 8007230:	2000040c 	.word	0x2000040c

08007234 <__malloc_unlock>:
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <__malloc_unlock+0x8>)
 8007236:	f000 ba95 	b.w	8007764 <__retarget_lock_release_recursive>
 800723a:	bf00      	nop
 800723c:	2000040c 	.word	0x2000040c

08007240 <std>:
 8007240:	2300      	movs	r3, #0
 8007242:	b510      	push	{r4, lr}
 8007244:	4604      	mov	r4, r0
 8007246:	e9c0 3300 	strd	r3, r3, [r0]
 800724a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800724e:	6083      	str	r3, [r0, #8]
 8007250:	8181      	strh	r1, [r0, #12]
 8007252:	6643      	str	r3, [r0, #100]	; 0x64
 8007254:	81c2      	strh	r2, [r0, #14]
 8007256:	6183      	str	r3, [r0, #24]
 8007258:	4619      	mov	r1, r3
 800725a:	2208      	movs	r2, #8
 800725c:	305c      	adds	r0, #92	; 0x5c
 800725e:	f000 f9f7 	bl	8007650 <memset>
 8007262:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <std+0x58>)
 8007264:	6263      	str	r3, [r4, #36]	; 0x24
 8007266:	4b0d      	ldr	r3, [pc, #52]	; (800729c <std+0x5c>)
 8007268:	62a3      	str	r3, [r4, #40]	; 0x28
 800726a:	4b0d      	ldr	r3, [pc, #52]	; (80072a0 <std+0x60>)
 800726c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800726e:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <std+0x64>)
 8007270:	6323      	str	r3, [r4, #48]	; 0x30
 8007272:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <std+0x68>)
 8007274:	6224      	str	r4, [r4, #32]
 8007276:	429c      	cmp	r4, r3
 8007278:	d006      	beq.n	8007288 <std+0x48>
 800727a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800727e:	4294      	cmp	r4, r2
 8007280:	d002      	beq.n	8007288 <std+0x48>
 8007282:	33d0      	adds	r3, #208	; 0xd0
 8007284:	429c      	cmp	r4, r3
 8007286:	d105      	bne.n	8007294 <std+0x54>
 8007288:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800728c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007290:	f000 ba66 	b.w	8007760 <__retarget_lock_init_recursive>
 8007294:	bd10      	pop	{r4, pc}
 8007296:	bf00      	nop
 8007298:	080074a1 	.word	0x080074a1
 800729c:	080074c3 	.word	0x080074c3
 80072a0:	080074fb 	.word	0x080074fb
 80072a4:	0800751f 	.word	0x0800751f
 80072a8:	200002cc 	.word	0x200002cc

080072ac <stdio_exit_handler>:
 80072ac:	4a02      	ldr	r2, [pc, #8]	; (80072b8 <stdio_exit_handler+0xc>)
 80072ae:	4903      	ldr	r1, [pc, #12]	; (80072bc <stdio_exit_handler+0x10>)
 80072b0:	4803      	ldr	r0, [pc, #12]	; (80072c0 <stdio_exit_handler+0x14>)
 80072b2:	f000 b869 	b.w	8007388 <_fwalk_sglue>
 80072b6:	bf00      	nop
 80072b8:	20000028 	.word	0x20000028
 80072bc:	08007eb5 	.word	0x08007eb5
 80072c0:	20000034 	.word	0x20000034

080072c4 <cleanup_stdio>:
 80072c4:	6841      	ldr	r1, [r0, #4]
 80072c6:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <cleanup_stdio+0x34>)
 80072c8:	4299      	cmp	r1, r3
 80072ca:	b510      	push	{r4, lr}
 80072cc:	4604      	mov	r4, r0
 80072ce:	d001      	beq.n	80072d4 <cleanup_stdio+0x10>
 80072d0:	f000 fdf0 	bl	8007eb4 <_fflush_r>
 80072d4:	68a1      	ldr	r1, [r4, #8]
 80072d6:	4b09      	ldr	r3, [pc, #36]	; (80072fc <cleanup_stdio+0x38>)
 80072d8:	4299      	cmp	r1, r3
 80072da:	d002      	beq.n	80072e2 <cleanup_stdio+0x1e>
 80072dc:	4620      	mov	r0, r4
 80072de:	f000 fde9 	bl	8007eb4 <_fflush_r>
 80072e2:	68e1      	ldr	r1, [r4, #12]
 80072e4:	4b06      	ldr	r3, [pc, #24]	; (8007300 <cleanup_stdio+0x3c>)
 80072e6:	4299      	cmp	r1, r3
 80072e8:	d004      	beq.n	80072f4 <cleanup_stdio+0x30>
 80072ea:	4620      	mov	r0, r4
 80072ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f0:	f000 bde0 	b.w	8007eb4 <_fflush_r>
 80072f4:	bd10      	pop	{r4, pc}
 80072f6:	bf00      	nop
 80072f8:	200002cc 	.word	0x200002cc
 80072fc:	20000334 	.word	0x20000334
 8007300:	2000039c 	.word	0x2000039c

08007304 <global_stdio_init.part.0>:
 8007304:	b510      	push	{r4, lr}
 8007306:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <global_stdio_init.part.0+0x30>)
 8007308:	4c0b      	ldr	r4, [pc, #44]	; (8007338 <global_stdio_init.part.0+0x34>)
 800730a:	4a0c      	ldr	r2, [pc, #48]	; (800733c <global_stdio_init.part.0+0x38>)
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	4620      	mov	r0, r4
 8007310:	2200      	movs	r2, #0
 8007312:	2104      	movs	r1, #4
 8007314:	f7ff ff94 	bl	8007240 <std>
 8007318:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800731c:	2201      	movs	r2, #1
 800731e:	2109      	movs	r1, #9
 8007320:	f7ff ff8e 	bl	8007240 <std>
 8007324:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007328:	2202      	movs	r2, #2
 800732a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800732e:	2112      	movs	r1, #18
 8007330:	f7ff bf86 	b.w	8007240 <std>
 8007334:	20000404 	.word	0x20000404
 8007338:	200002cc 	.word	0x200002cc
 800733c:	080072ad 	.word	0x080072ad

08007340 <__sfp_lock_acquire>:
 8007340:	4801      	ldr	r0, [pc, #4]	; (8007348 <__sfp_lock_acquire+0x8>)
 8007342:	f000 ba0e 	b.w	8007762 <__retarget_lock_acquire_recursive>
 8007346:	bf00      	nop
 8007348:	2000040d 	.word	0x2000040d

0800734c <__sfp_lock_release>:
 800734c:	4801      	ldr	r0, [pc, #4]	; (8007354 <__sfp_lock_release+0x8>)
 800734e:	f000 ba09 	b.w	8007764 <__retarget_lock_release_recursive>
 8007352:	bf00      	nop
 8007354:	2000040d 	.word	0x2000040d

08007358 <__sinit>:
 8007358:	b510      	push	{r4, lr}
 800735a:	4604      	mov	r4, r0
 800735c:	f7ff fff0 	bl	8007340 <__sfp_lock_acquire>
 8007360:	6a23      	ldr	r3, [r4, #32]
 8007362:	b11b      	cbz	r3, 800736c <__sinit+0x14>
 8007364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007368:	f7ff bff0 	b.w	800734c <__sfp_lock_release>
 800736c:	4b04      	ldr	r3, [pc, #16]	; (8007380 <__sinit+0x28>)
 800736e:	6223      	str	r3, [r4, #32]
 8007370:	4b04      	ldr	r3, [pc, #16]	; (8007384 <__sinit+0x2c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1f5      	bne.n	8007364 <__sinit+0xc>
 8007378:	f7ff ffc4 	bl	8007304 <global_stdio_init.part.0>
 800737c:	e7f2      	b.n	8007364 <__sinit+0xc>
 800737e:	bf00      	nop
 8007380:	080072c5 	.word	0x080072c5
 8007384:	20000404 	.word	0x20000404

08007388 <_fwalk_sglue>:
 8007388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800738c:	4607      	mov	r7, r0
 800738e:	4688      	mov	r8, r1
 8007390:	4614      	mov	r4, r2
 8007392:	2600      	movs	r6, #0
 8007394:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007398:	f1b9 0901 	subs.w	r9, r9, #1
 800739c:	d505      	bpl.n	80073aa <_fwalk_sglue+0x22>
 800739e:	6824      	ldr	r4, [r4, #0]
 80073a0:	2c00      	cmp	r4, #0
 80073a2:	d1f7      	bne.n	8007394 <_fwalk_sglue+0xc>
 80073a4:	4630      	mov	r0, r6
 80073a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d907      	bls.n	80073c0 <_fwalk_sglue+0x38>
 80073b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073b4:	3301      	adds	r3, #1
 80073b6:	d003      	beq.n	80073c0 <_fwalk_sglue+0x38>
 80073b8:	4629      	mov	r1, r5
 80073ba:	4638      	mov	r0, r7
 80073bc:	47c0      	blx	r8
 80073be:	4306      	orrs	r6, r0
 80073c0:	3568      	adds	r5, #104	; 0x68
 80073c2:	e7e9      	b.n	8007398 <_fwalk_sglue+0x10>

080073c4 <iprintf>:
 80073c4:	b40f      	push	{r0, r1, r2, r3}
 80073c6:	b507      	push	{r0, r1, r2, lr}
 80073c8:	4906      	ldr	r1, [pc, #24]	; (80073e4 <iprintf+0x20>)
 80073ca:	ab04      	add	r3, sp, #16
 80073cc:	6808      	ldr	r0, [r1, #0]
 80073ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d2:	6881      	ldr	r1, [r0, #8]
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	f000 fa3d 	bl	8007854 <_vfiprintf_r>
 80073da:	b003      	add	sp, #12
 80073dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80073e0:	b004      	add	sp, #16
 80073e2:	4770      	bx	lr
 80073e4:	20000080 	.word	0x20000080

080073e8 <_puts_r>:
 80073e8:	6a03      	ldr	r3, [r0, #32]
 80073ea:	b570      	push	{r4, r5, r6, lr}
 80073ec:	6884      	ldr	r4, [r0, #8]
 80073ee:	4605      	mov	r5, r0
 80073f0:	460e      	mov	r6, r1
 80073f2:	b90b      	cbnz	r3, 80073f8 <_puts_r+0x10>
 80073f4:	f7ff ffb0 	bl	8007358 <__sinit>
 80073f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073fa:	07db      	lsls	r3, r3, #31
 80073fc:	d405      	bmi.n	800740a <_puts_r+0x22>
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	0598      	lsls	r0, r3, #22
 8007402:	d402      	bmi.n	800740a <_puts_r+0x22>
 8007404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007406:	f000 f9ac 	bl	8007762 <__retarget_lock_acquire_recursive>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	0719      	lsls	r1, r3, #28
 800740e:	d513      	bpl.n	8007438 <_puts_r+0x50>
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	b18b      	cbz	r3, 8007438 <_puts_r+0x50>
 8007414:	3e01      	subs	r6, #1
 8007416:	68a3      	ldr	r3, [r4, #8]
 8007418:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800741c:	3b01      	subs	r3, #1
 800741e:	60a3      	str	r3, [r4, #8]
 8007420:	b9e9      	cbnz	r1, 800745e <_puts_r+0x76>
 8007422:	2b00      	cmp	r3, #0
 8007424:	da2e      	bge.n	8007484 <_puts_r+0x9c>
 8007426:	4622      	mov	r2, r4
 8007428:	210a      	movs	r1, #10
 800742a:	4628      	mov	r0, r5
 800742c:	f000 f87b 	bl	8007526 <__swbuf_r>
 8007430:	3001      	adds	r0, #1
 8007432:	d007      	beq.n	8007444 <_puts_r+0x5c>
 8007434:	250a      	movs	r5, #10
 8007436:	e007      	b.n	8007448 <_puts_r+0x60>
 8007438:	4621      	mov	r1, r4
 800743a:	4628      	mov	r0, r5
 800743c:	f000 f8b0 	bl	80075a0 <__swsetup_r>
 8007440:	2800      	cmp	r0, #0
 8007442:	d0e7      	beq.n	8007414 <_puts_r+0x2c>
 8007444:	f04f 35ff 	mov.w	r5, #4294967295
 8007448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800744a:	07da      	lsls	r2, r3, #31
 800744c:	d405      	bmi.n	800745a <_puts_r+0x72>
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	059b      	lsls	r3, r3, #22
 8007452:	d402      	bmi.n	800745a <_puts_r+0x72>
 8007454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007456:	f000 f985 	bl	8007764 <__retarget_lock_release_recursive>
 800745a:	4628      	mov	r0, r5
 800745c:	bd70      	pop	{r4, r5, r6, pc}
 800745e:	2b00      	cmp	r3, #0
 8007460:	da04      	bge.n	800746c <_puts_r+0x84>
 8007462:	69a2      	ldr	r2, [r4, #24]
 8007464:	429a      	cmp	r2, r3
 8007466:	dc06      	bgt.n	8007476 <_puts_r+0x8e>
 8007468:	290a      	cmp	r1, #10
 800746a:	d004      	beq.n	8007476 <_puts_r+0x8e>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	6022      	str	r2, [r4, #0]
 8007472:	7019      	strb	r1, [r3, #0]
 8007474:	e7cf      	b.n	8007416 <_puts_r+0x2e>
 8007476:	4622      	mov	r2, r4
 8007478:	4628      	mov	r0, r5
 800747a:	f000 f854 	bl	8007526 <__swbuf_r>
 800747e:	3001      	adds	r0, #1
 8007480:	d1c9      	bne.n	8007416 <_puts_r+0x2e>
 8007482:	e7df      	b.n	8007444 <_puts_r+0x5c>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	250a      	movs	r5, #10
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	6022      	str	r2, [r4, #0]
 800748c:	701d      	strb	r5, [r3, #0]
 800748e:	e7db      	b.n	8007448 <_puts_r+0x60>

08007490 <puts>:
 8007490:	4b02      	ldr	r3, [pc, #8]	; (800749c <puts+0xc>)
 8007492:	4601      	mov	r1, r0
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	f7ff bfa7 	b.w	80073e8 <_puts_r>
 800749a:	bf00      	nop
 800749c:	20000080 	.word	0x20000080

080074a0 <__sread>:
 80074a0:	b510      	push	{r4, lr}
 80074a2:	460c      	mov	r4, r1
 80074a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a8:	f000 f8fc 	bl	80076a4 <_read_r>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	bfab      	itete	ge
 80074b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074b2:	89a3      	ldrhlt	r3, [r4, #12]
 80074b4:	181b      	addge	r3, r3, r0
 80074b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074ba:	bfac      	ite	ge
 80074bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80074be:	81a3      	strhlt	r3, [r4, #12]
 80074c0:	bd10      	pop	{r4, pc}

080074c2 <__swrite>:
 80074c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c6:	461f      	mov	r7, r3
 80074c8:	898b      	ldrh	r3, [r1, #12]
 80074ca:	05db      	lsls	r3, r3, #23
 80074cc:	4605      	mov	r5, r0
 80074ce:	460c      	mov	r4, r1
 80074d0:	4616      	mov	r6, r2
 80074d2:	d505      	bpl.n	80074e0 <__swrite+0x1e>
 80074d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d8:	2302      	movs	r3, #2
 80074da:	2200      	movs	r2, #0
 80074dc:	f000 f8d0 	bl	8007680 <_lseek_r>
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ea:	81a3      	strh	r3, [r4, #12]
 80074ec:	4632      	mov	r2, r6
 80074ee:	463b      	mov	r3, r7
 80074f0:	4628      	mov	r0, r5
 80074f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074f6:	f000 b8f7 	b.w	80076e8 <_write_r>

080074fa <__sseek>:
 80074fa:	b510      	push	{r4, lr}
 80074fc:	460c      	mov	r4, r1
 80074fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007502:	f000 f8bd 	bl	8007680 <_lseek_r>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	bf15      	itete	ne
 800750c:	6560      	strne	r0, [r4, #84]	; 0x54
 800750e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007516:	81a3      	strheq	r3, [r4, #12]
 8007518:	bf18      	it	ne
 800751a:	81a3      	strhne	r3, [r4, #12]
 800751c:	bd10      	pop	{r4, pc}

0800751e <__sclose>:
 800751e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007522:	f000 b89d 	b.w	8007660 <_close_r>

08007526 <__swbuf_r>:
 8007526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007528:	460e      	mov	r6, r1
 800752a:	4614      	mov	r4, r2
 800752c:	4605      	mov	r5, r0
 800752e:	b118      	cbz	r0, 8007538 <__swbuf_r+0x12>
 8007530:	6a03      	ldr	r3, [r0, #32]
 8007532:	b90b      	cbnz	r3, 8007538 <__swbuf_r+0x12>
 8007534:	f7ff ff10 	bl	8007358 <__sinit>
 8007538:	69a3      	ldr	r3, [r4, #24]
 800753a:	60a3      	str	r3, [r4, #8]
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	071a      	lsls	r2, r3, #28
 8007540:	d525      	bpl.n	800758e <__swbuf_r+0x68>
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	b31b      	cbz	r3, 800758e <__swbuf_r+0x68>
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	6922      	ldr	r2, [r4, #16]
 800754a:	1a98      	subs	r0, r3, r2
 800754c:	6963      	ldr	r3, [r4, #20]
 800754e:	b2f6      	uxtb	r6, r6
 8007550:	4283      	cmp	r3, r0
 8007552:	4637      	mov	r7, r6
 8007554:	dc04      	bgt.n	8007560 <__swbuf_r+0x3a>
 8007556:	4621      	mov	r1, r4
 8007558:	4628      	mov	r0, r5
 800755a:	f000 fcab 	bl	8007eb4 <_fflush_r>
 800755e:	b9e0      	cbnz	r0, 800759a <__swbuf_r+0x74>
 8007560:	68a3      	ldr	r3, [r4, #8]
 8007562:	3b01      	subs	r3, #1
 8007564:	60a3      	str	r3, [r4, #8]
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	6022      	str	r2, [r4, #0]
 800756c:	701e      	strb	r6, [r3, #0]
 800756e:	6962      	ldr	r2, [r4, #20]
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	429a      	cmp	r2, r3
 8007574:	d004      	beq.n	8007580 <__swbuf_r+0x5a>
 8007576:	89a3      	ldrh	r3, [r4, #12]
 8007578:	07db      	lsls	r3, r3, #31
 800757a:	d506      	bpl.n	800758a <__swbuf_r+0x64>
 800757c:	2e0a      	cmp	r6, #10
 800757e:	d104      	bne.n	800758a <__swbuf_r+0x64>
 8007580:	4621      	mov	r1, r4
 8007582:	4628      	mov	r0, r5
 8007584:	f000 fc96 	bl	8007eb4 <_fflush_r>
 8007588:	b938      	cbnz	r0, 800759a <__swbuf_r+0x74>
 800758a:	4638      	mov	r0, r7
 800758c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800758e:	4621      	mov	r1, r4
 8007590:	4628      	mov	r0, r5
 8007592:	f000 f805 	bl	80075a0 <__swsetup_r>
 8007596:	2800      	cmp	r0, #0
 8007598:	d0d5      	beq.n	8007546 <__swbuf_r+0x20>
 800759a:	f04f 37ff 	mov.w	r7, #4294967295
 800759e:	e7f4      	b.n	800758a <__swbuf_r+0x64>

080075a0 <__swsetup_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4b2a      	ldr	r3, [pc, #168]	; (800764c <__swsetup_r+0xac>)
 80075a4:	4605      	mov	r5, r0
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	460c      	mov	r4, r1
 80075aa:	b118      	cbz	r0, 80075b4 <__swsetup_r+0x14>
 80075ac:	6a03      	ldr	r3, [r0, #32]
 80075ae:	b90b      	cbnz	r3, 80075b4 <__swsetup_r+0x14>
 80075b0:	f7ff fed2 	bl	8007358 <__sinit>
 80075b4:	89a3      	ldrh	r3, [r4, #12]
 80075b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075ba:	0718      	lsls	r0, r3, #28
 80075bc:	d422      	bmi.n	8007604 <__swsetup_r+0x64>
 80075be:	06d9      	lsls	r1, r3, #27
 80075c0:	d407      	bmi.n	80075d2 <__swsetup_r+0x32>
 80075c2:	2309      	movs	r3, #9
 80075c4:	602b      	str	r3, [r5, #0]
 80075c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075ca:	81a3      	strh	r3, [r4, #12]
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	e034      	b.n	800763c <__swsetup_r+0x9c>
 80075d2:	0758      	lsls	r0, r3, #29
 80075d4:	d512      	bpl.n	80075fc <__swsetup_r+0x5c>
 80075d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075d8:	b141      	cbz	r1, 80075ec <__swsetup_r+0x4c>
 80075da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075de:	4299      	cmp	r1, r3
 80075e0:	d002      	beq.n	80075e8 <__swsetup_r+0x48>
 80075e2:	4628      	mov	r0, r5
 80075e4:	f000 f8c0 	bl	8007768 <_free_r>
 80075e8:	2300      	movs	r3, #0
 80075ea:	6363      	str	r3, [r4, #52]	; 0x34
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075f2:	81a3      	strh	r3, [r4, #12]
 80075f4:	2300      	movs	r3, #0
 80075f6:	6063      	str	r3, [r4, #4]
 80075f8:	6923      	ldr	r3, [r4, #16]
 80075fa:	6023      	str	r3, [r4, #0]
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	f043 0308 	orr.w	r3, r3, #8
 8007602:	81a3      	strh	r3, [r4, #12]
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	b94b      	cbnz	r3, 800761c <__swsetup_r+0x7c>
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800760e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007612:	d003      	beq.n	800761c <__swsetup_r+0x7c>
 8007614:	4621      	mov	r1, r4
 8007616:	4628      	mov	r0, r5
 8007618:	f000 fc9a 	bl	8007f50 <__smakebuf_r>
 800761c:	89a0      	ldrh	r0, [r4, #12]
 800761e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007622:	f010 0301 	ands.w	r3, r0, #1
 8007626:	d00a      	beq.n	800763e <__swsetup_r+0x9e>
 8007628:	2300      	movs	r3, #0
 800762a:	60a3      	str	r3, [r4, #8]
 800762c:	6963      	ldr	r3, [r4, #20]
 800762e:	425b      	negs	r3, r3
 8007630:	61a3      	str	r3, [r4, #24]
 8007632:	6923      	ldr	r3, [r4, #16]
 8007634:	b943      	cbnz	r3, 8007648 <__swsetup_r+0xa8>
 8007636:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800763a:	d1c4      	bne.n	80075c6 <__swsetup_r+0x26>
 800763c:	bd38      	pop	{r3, r4, r5, pc}
 800763e:	0781      	lsls	r1, r0, #30
 8007640:	bf58      	it	pl
 8007642:	6963      	ldrpl	r3, [r4, #20]
 8007644:	60a3      	str	r3, [r4, #8]
 8007646:	e7f4      	b.n	8007632 <__swsetup_r+0x92>
 8007648:	2000      	movs	r0, #0
 800764a:	e7f7      	b.n	800763c <__swsetup_r+0x9c>
 800764c:	20000080 	.word	0x20000080

08007650 <memset>:
 8007650:	4402      	add	r2, r0
 8007652:	4603      	mov	r3, r0
 8007654:	4293      	cmp	r3, r2
 8007656:	d100      	bne.n	800765a <memset+0xa>
 8007658:	4770      	bx	lr
 800765a:	f803 1b01 	strb.w	r1, [r3], #1
 800765e:	e7f9      	b.n	8007654 <memset+0x4>

08007660 <_close_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4d06      	ldr	r5, [pc, #24]	; (800767c <_close_r+0x1c>)
 8007664:	2300      	movs	r3, #0
 8007666:	4604      	mov	r4, r0
 8007668:	4608      	mov	r0, r1
 800766a:	602b      	str	r3, [r5, #0]
 800766c:	f7fa fab1 	bl	8001bd2 <_close>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d102      	bne.n	800767a <_close_r+0x1a>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	b103      	cbz	r3, 800767a <_close_r+0x1a>
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	20000408 	.word	0x20000408

08007680 <_lseek_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4d07      	ldr	r5, [pc, #28]	; (80076a0 <_lseek_r+0x20>)
 8007684:	4604      	mov	r4, r0
 8007686:	4608      	mov	r0, r1
 8007688:	4611      	mov	r1, r2
 800768a:	2200      	movs	r2, #0
 800768c:	602a      	str	r2, [r5, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	f7fa fac6 	bl	8001c20 <_lseek>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d102      	bne.n	800769e <_lseek_r+0x1e>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	b103      	cbz	r3, 800769e <_lseek_r+0x1e>
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	20000408 	.word	0x20000408

080076a4 <_read_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4d07      	ldr	r5, [pc, #28]	; (80076c4 <_read_r+0x20>)
 80076a8:	4604      	mov	r4, r0
 80076aa:	4608      	mov	r0, r1
 80076ac:	4611      	mov	r1, r2
 80076ae:	2200      	movs	r2, #0
 80076b0:	602a      	str	r2, [r5, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	f7fa fa54 	bl	8001b60 <_read>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d102      	bne.n	80076c2 <_read_r+0x1e>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	b103      	cbz	r3, 80076c2 <_read_r+0x1e>
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	bd38      	pop	{r3, r4, r5, pc}
 80076c4:	20000408 	.word	0x20000408

080076c8 <_sbrk_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4d06      	ldr	r5, [pc, #24]	; (80076e4 <_sbrk_r+0x1c>)
 80076cc:	2300      	movs	r3, #0
 80076ce:	4604      	mov	r4, r0
 80076d0:	4608      	mov	r0, r1
 80076d2:	602b      	str	r3, [r5, #0]
 80076d4:	f7fa fab2 	bl	8001c3c <_sbrk>
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	d102      	bne.n	80076e2 <_sbrk_r+0x1a>
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	b103      	cbz	r3, 80076e2 <_sbrk_r+0x1a>
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	bd38      	pop	{r3, r4, r5, pc}
 80076e4:	20000408 	.word	0x20000408

080076e8 <_write_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4d07      	ldr	r5, [pc, #28]	; (8007708 <_write_r+0x20>)
 80076ec:	4604      	mov	r4, r0
 80076ee:	4608      	mov	r0, r1
 80076f0:	4611      	mov	r1, r2
 80076f2:	2200      	movs	r2, #0
 80076f4:	602a      	str	r2, [r5, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	f7fa fa4f 	bl	8001b9a <_write>
 80076fc:	1c43      	adds	r3, r0, #1
 80076fe:	d102      	bne.n	8007706 <_write_r+0x1e>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	b103      	cbz	r3, 8007706 <_write_r+0x1e>
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	20000408 	.word	0x20000408

0800770c <__errno>:
 800770c:	4b01      	ldr	r3, [pc, #4]	; (8007714 <__errno+0x8>)
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20000080 	.word	0x20000080

08007718 <__libc_init_array>:
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	4d0d      	ldr	r5, [pc, #52]	; (8007750 <__libc_init_array+0x38>)
 800771c:	4c0d      	ldr	r4, [pc, #52]	; (8007754 <__libc_init_array+0x3c>)
 800771e:	1b64      	subs	r4, r4, r5
 8007720:	10a4      	asrs	r4, r4, #2
 8007722:	2600      	movs	r6, #0
 8007724:	42a6      	cmp	r6, r4
 8007726:	d109      	bne.n	800773c <__libc_init_array+0x24>
 8007728:	4d0b      	ldr	r5, [pc, #44]	; (8007758 <__libc_init_array+0x40>)
 800772a:	4c0c      	ldr	r4, [pc, #48]	; (800775c <__libc_init_array+0x44>)
 800772c:	f000 fc6e 	bl	800800c <_init>
 8007730:	1b64      	subs	r4, r4, r5
 8007732:	10a4      	asrs	r4, r4, #2
 8007734:	2600      	movs	r6, #0
 8007736:	42a6      	cmp	r6, r4
 8007738:	d105      	bne.n	8007746 <__libc_init_array+0x2e>
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007740:	4798      	blx	r3
 8007742:	3601      	adds	r6, #1
 8007744:	e7ee      	b.n	8007724 <__libc_init_array+0xc>
 8007746:	f855 3b04 	ldr.w	r3, [r5], #4
 800774a:	4798      	blx	r3
 800774c:	3601      	adds	r6, #1
 800774e:	e7f2      	b.n	8007736 <__libc_init_array+0x1e>
 8007750:	08008984 	.word	0x08008984
 8007754:	08008984 	.word	0x08008984
 8007758:	08008984 	.word	0x08008984
 800775c:	08008988 	.word	0x08008988

08007760 <__retarget_lock_init_recursive>:
 8007760:	4770      	bx	lr

08007762 <__retarget_lock_acquire_recursive>:
 8007762:	4770      	bx	lr

08007764 <__retarget_lock_release_recursive>:
 8007764:	4770      	bx	lr
	...

08007768 <_free_r>:
 8007768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800776a:	2900      	cmp	r1, #0
 800776c:	d044      	beq.n	80077f8 <_free_r+0x90>
 800776e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007772:	9001      	str	r0, [sp, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	f1a1 0404 	sub.w	r4, r1, #4
 800777a:	bfb8      	it	lt
 800777c:	18e4      	addlt	r4, r4, r3
 800777e:	f7ff fd53 	bl	8007228 <__malloc_lock>
 8007782:	4a1e      	ldr	r2, [pc, #120]	; (80077fc <_free_r+0x94>)
 8007784:	9801      	ldr	r0, [sp, #4]
 8007786:	6813      	ldr	r3, [r2, #0]
 8007788:	b933      	cbnz	r3, 8007798 <_free_r+0x30>
 800778a:	6063      	str	r3, [r4, #4]
 800778c:	6014      	str	r4, [r2, #0]
 800778e:	b003      	add	sp, #12
 8007790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007794:	f7ff bd4e 	b.w	8007234 <__malloc_unlock>
 8007798:	42a3      	cmp	r3, r4
 800779a:	d908      	bls.n	80077ae <_free_r+0x46>
 800779c:	6825      	ldr	r5, [r4, #0]
 800779e:	1961      	adds	r1, r4, r5
 80077a0:	428b      	cmp	r3, r1
 80077a2:	bf01      	itttt	eq
 80077a4:	6819      	ldreq	r1, [r3, #0]
 80077a6:	685b      	ldreq	r3, [r3, #4]
 80077a8:	1949      	addeq	r1, r1, r5
 80077aa:	6021      	streq	r1, [r4, #0]
 80077ac:	e7ed      	b.n	800778a <_free_r+0x22>
 80077ae:	461a      	mov	r2, r3
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	b10b      	cbz	r3, 80077b8 <_free_r+0x50>
 80077b4:	42a3      	cmp	r3, r4
 80077b6:	d9fa      	bls.n	80077ae <_free_r+0x46>
 80077b8:	6811      	ldr	r1, [r2, #0]
 80077ba:	1855      	adds	r5, r2, r1
 80077bc:	42a5      	cmp	r5, r4
 80077be:	d10b      	bne.n	80077d8 <_free_r+0x70>
 80077c0:	6824      	ldr	r4, [r4, #0]
 80077c2:	4421      	add	r1, r4
 80077c4:	1854      	adds	r4, r2, r1
 80077c6:	42a3      	cmp	r3, r4
 80077c8:	6011      	str	r1, [r2, #0]
 80077ca:	d1e0      	bne.n	800778e <_free_r+0x26>
 80077cc:	681c      	ldr	r4, [r3, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	6053      	str	r3, [r2, #4]
 80077d2:	440c      	add	r4, r1
 80077d4:	6014      	str	r4, [r2, #0]
 80077d6:	e7da      	b.n	800778e <_free_r+0x26>
 80077d8:	d902      	bls.n	80077e0 <_free_r+0x78>
 80077da:	230c      	movs	r3, #12
 80077dc:	6003      	str	r3, [r0, #0]
 80077de:	e7d6      	b.n	800778e <_free_r+0x26>
 80077e0:	6825      	ldr	r5, [r4, #0]
 80077e2:	1961      	adds	r1, r4, r5
 80077e4:	428b      	cmp	r3, r1
 80077e6:	bf04      	itt	eq
 80077e8:	6819      	ldreq	r1, [r3, #0]
 80077ea:	685b      	ldreq	r3, [r3, #4]
 80077ec:	6063      	str	r3, [r4, #4]
 80077ee:	bf04      	itt	eq
 80077f0:	1949      	addeq	r1, r1, r5
 80077f2:	6021      	streq	r1, [r4, #0]
 80077f4:	6054      	str	r4, [r2, #4]
 80077f6:	e7ca      	b.n	800778e <_free_r+0x26>
 80077f8:	b003      	add	sp, #12
 80077fa:	bd30      	pop	{r4, r5, pc}
 80077fc:	200002c4 	.word	0x200002c4

08007800 <__sfputc_r>:
 8007800:	6893      	ldr	r3, [r2, #8]
 8007802:	3b01      	subs	r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	b410      	push	{r4}
 8007808:	6093      	str	r3, [r2, #8]
 800780a:	da08      	bge.n	800781e <__sfputc_r+0x1e>
 800780c:	6994      	ldr	r4, [r2, #24]
 800780e:	42a3      	cmp	r3, r4
 8007810:	db01      	blt.n	8007816 <__sfputc_r+0x16>
 8007812:	290a      	cmp	r1, #10
 8007814:	d103      	bne.n	800781e <__sfputc_r+0x1e>
 8007816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800781a:	f7ff be84 	b.w	8007526 <__swbuf_r>
 800781e:	6813      	ldr	r3, [r2, #0]
 8007820:	1c58      	adds	r0, r3, #1
 8007822:	6010      	str	r0, [r2, #0]
 8007824:	7019      	strb	r1, [r3, #0]
 8007826:	4608      	mov	r0, r1
 8007828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800782c:	4770      	bx	lr

0800782e <__sfputs_r>:
 800782e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007830:	4606      	mov	r6, r0
 8007832:	460f      	mov	r7, r1
 8007834:	4614      	mov	r4, r2
 8007836:	18d5      	adds	r5, r2, r3
 8007838:	42ac      	cmp	r4, r5
 800783a:	d101      	bne.n	8007840 <__sfputs_r+0x12>
 800783c:	2000      	movs	r0, #0
 800783e:	e007      	b.n	8007850 <__sfputs_r+0x22>
 8007840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007844:	463a      	mov	r2, r7
 8007846:	4630      	mov	r0, r6
 8007848:	f7ff ffda 	bl	8007800 <__sfputc_r>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d1f3      	bne.n	8007838 <__sfputs_r+0xa>
 8007850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007854 <_vfiprintf_r>:
 8007854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007858:	460d      	mov	r5, r1
 800785a:	b09d      	sub	sp, #116	; 0x74
 800785c:	4614      	mov	r4, r2
 800785e:	4698      	mov	r8, r3
 8007860:	4606      	mov	r6, r0
 8007862:	b118      	cbz	r0, 800786c <_vfiprintf_r+0x18>
 8007864:	6a03      	ldr	r3, [r0, #32]
 8007866:	b90b      	cbnz	r3, 800786c <_vfiprintf_r+0x18>
 8007868:	f7ff fd76 	bl	8007358 <__sinit>
 800786c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800786e:	07d9      	lsls	r1, r3, #31
 8007870:	d405      	bmi.n	800787e <_vfiprintf_r+0x2a>
 8007872:	89ab      	ldrh	r3, [r5, #12]
 8007874:	059a      	lsls	r2, r3, #22
 8007876:	d402      	bmi.n	800787e <_vfiprintf_r+0x2a>
 8007878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800787a:	f7ff ff72 	bl	8007762 <__retarget_lock_acquire_recursive>
 800787e:	89ab      	ldrh	r3, [r5, #12]
 8007880:	071b      	lsls	r3, r3, #28
 8007882:	d501      	bpl.n	8007888 <_vfiprintf_r+0x34>
 8007884:	692b      	ldr	r3, [r5, #16]
 8007886:	b99b      	cbnz	r3, 80078b0 <_vfiprintf_r+0x5c>
 8007888:	4629      	mov	r1, r5
 800788a:	4630      	mov	r0, r6
 800788c:	f7ff fe88 	bl	80075a0 <__swsetup_r>
 8007890:	b170      	cbz	r0, 80078b0 <_vfiprintf_r+0x5c>
 8007892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007894:	07dc      	lsls	r4, r3, #31
 8007896:	d504      	bpl.n	80078a2 <_vfiprintf_r+0x4e>
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	b01d      	add	sp, #116	; 0x74
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a2:	89ab      	ldrh	r3, [r5, #12]
 80078a4:	0598      	lsls	r0, r3, #22
 80078a6:	d4f7      	bmi.n	8007898 <_vfiprintf_r+0x44>
 80078a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078aa:	f7ff ff5b 	bl	8007764 <__retarget_lock_release_recursive>
 80078ae:	e7f3      	b.n	8007898 <_vfiprintf_r+0x44>
 80078b0:	2300      	movs	r3, #0
 80078b2:	9309      	str	r3, [sp, #36]	; 0x24
 80078b4:	2320      	movs	r3, #32
 80078b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80078be:	2330      	movs	r3, #48	; 0x30
 80078c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007a74 <_vfiprintf_r+0x220>
 80078c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078c8:	f04f 0901 	mov.w	r9, #1
 80078cc:	4623      	mov	r3, r4
 80078ce:	469a      	mov	sl, r3
 80078d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078d4:	b10a      	cbz	r2, 80078da <_vfiprintf_r+0x86>
 80078d6:	2a25      	cmp	r2, #37	; 0x25
 80078d8:	d1f9      	bne.n	80078ce <_vfiprintf_r+0x7a>
 80078da:	ebba 0b04 	subs.w	fp, sl, r4
 80078de:	d00b      	beq.n	80078f8 <_vfiprintf_r+0xa4>
 80078e0:	465b      	mov	r3, fp
 80078e2:	4622      	mov	r2, r4
 80078e4:	4629      	mov	r1, r5
 80078e6:	4630      	mov	r0, r6
 80078e8:	f7ff ffa1 	bl	800782e <__sfputs_r>
 80078ec:	3001      	adds	r0, #1
 80078ee:	f000 80a9 	beq.w	8007a44 <_vfiprintf_r+0x1f0>
 80078f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078f4:	445a      	add	r2, fp
 80078f6:	9209      	str	r2, [sp, #36]	; 0x24
 80078f8:	f89a 3000 	ldrb.w	r3, [sl]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 80a1 	beq.w	8007a44 <_vfiprintf_r+0x1f0>
 8007902:	2300      	movs	r3, #0
 8007904:	f04f 32ff 	mov.w	r2, #4294967295
 8007908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800790c:	f10a 0a01 	add.w	sl, sl, #1
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	9307      	str	r3, [sp, #28]
 8007914:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007918:	931a      	str	r3, [sp, #104]	; 0x68
 800791a:	4654      	mov	r4, sl
 800791c:	2205      	movs	r2, #5
 800791e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007922:	4854      	ldr	r0, [pc, #336]	; (8007a74 <_vfiprintf_r+0x220>)
 8007924:	f7f8 fc64 	bl	80001f0 <memchr>
 8007928:	9a04      	ldr	r2, [sp, #16]
 800792a:	b9d8      	cbnz	r0, 8007964 <_vfiprintf_r+0x110>
 800792c:	06d1      	lsls	r1, r2, #27
 800792e:	bf44      	itt	mi
 8007930:	2320      	movmi	r3, #32
 8007932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007936:	0713      	lsls	r3, r2, #28
 8007938:	bf44      	itt	mi
 800793a:	232b      	movmi	r3, #43	; 0x2b
 800793c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007940:	f89a 3000 	ldrb.w	r3, [sl]
 8007944:	2b2a      	cmp	r3, #42	; 0x2a
 8007946:	d015      	beq.n	8007974 <_vfiprintf_r+0x120>
 8007948:	9a07      	ldr	r2, [sp, #28]
 800794a:	4654      	mov	r4, sl
 800794c:	2000      	movs	r0, #0
 800794e:	f04f 0c0a 	mov.w	ip, #10
 8007952:	4621      	mov	r1, r4
 8007954:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007958:	3b30      	subs	r3, #48	; 0x30
 800795a:	2b09      	cmp	r3, #9
 800795c:	d94d      	bls.n	80079fa <_vfiprintf_r+0x1a6>
 800795e:	b1b0      	cbz	r0, 800798e <_vfiprintf_r+0x13a>
 8007960:	9207      	str	r2, [sp, #28]
 8007962:	e014      	b.n	800798e <_vfiprintf_r+0x13a>
 8007964:	eba0 0308 	sub.w	r3, r0, r8
 8007968:	fa09 f303 	lsl.w	r3, r9, r3
 800796c:	4313      	orrs	r3, r2
 800796e:	9304      	str	r3, [sp, #16]
 8007970:	46a2      	mov	sl, r4
 8007972:	e7d2      	b.n	800791a <_vfiprintf_r+0xc6>
 8007974:	9b03      	ldr	r3, [sp, #12]
 8007976:	1d19      	adds	r1, r3, #4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	9103      	str	r1, [sp, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	bfbb      	ittet	lt
 8007980:	425b      	neglt	r3, r3
 8007982:	f042 0202 	orrlt.w	r2, r2, #2
 8007986:	9307      	strge	r3, [sp, #28]
 8007988:	9307      	strlt	r3, [sp, #28]
 800798a:	bfb8      	it	lt
 800798c:	9204      	strlt	r2, [sp, #16]
 800798e:	7823      	ldrb	r3, [r4, #0]
 8007990:	2b2e      	cmp	r3, #46	; 0x2e
 8007992:	d10c      	bne.n	80079ae <_vfiprintf_r+0x15a>
 8007994:	7863      	ldrb	r3, [r4, #1]
 8007996:	2b2a      	cmp	r3, #42	; 0x2a
 8007998:	d134      	bne.n	8007a04 <_vfiprintf_r+0x1b0>
 800799a:	9b03      	ldr	r3, [sp, #12]
 800799c:	1d1a      	adds	r2, r3, #4
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	9203      	str	r2, [sp, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bfb8      	it	lt
 80079a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80079aa:	3402      	adds	r4, #2
 80079ac:	9305      	str	r3, [sp, #20]
 80079ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007a84 <_vfiprintf_r+0x230>
 80079b2:	7821      	ldrb	r1, [r4, #0]
 80079b4:	2203      	movs	r2, #3
 80079b6:	4650      	mov	r0, sl
 80079b8:	f7f8 fc1a 	bl	80001f0 <memchr>
 80079bc:	b138      	cbz	r0, 80079ce <_vfiprintf_r+0x17a>
 80079be:	9b04      	ldr	r3, [sp, #16]
 80079c0:	eba0 000a 	sub.w	r0, r0, sl
 80079c4:	2240      	movs	r2, #64	; 0x40
 80079c6:	4082      	lsls	r2, r0
 80079c8:	4313      	orrs	r3, r2
 80079ca:	3401      	adds	r4, #1
 80079cc:	9304      	str	r3, [sp, #16]
 80079ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d2:	4829      	ldr	r0, [pc, #164]	; (8007a78 <_vfiprintf_r+0x224>)
 80079d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079d8:	2206      	movs	r2, #6
 80079da:	f7f8 fc09 	bl	80001f0 <memchr>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d03f      	beq.n	8007a62 <_vfiprintf_r+0x20e>
 80079e2:	4b26      	ldr	r3, [pc, #152]	; (8007a7c <_vfiprintf_r+0x228>)
 80079e4:	bb1b      	cbnz	r3, 8007a2e <_vfiprintf_r+0x1da>
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	3307      	adds	r3, #7
 80079ea:	f023 0307 	bic.w	r3, r3, #7
 80079ee:	3308      	adds	r3, #8
 80079f0:	9303      	str	r3, [sp, #12]
 80079f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f4:	443b      	add	r3, r7
 80079f6:	9309      	str	r3, [sp, #36]	; 0x24
 80079f8:	e768      	b.n	80078cc <_vfiprintf_r+0x78>
 80079fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80079fe:	460c      	mov	r4, r1
 8007a00:	2001      	movs	r0, #1
 8007a02:	e7a6      	b.n	8007952 <_vfiprintf_r+0xfe>
 8007a04:	2300      	movs	r3, #0
 8007a06:	3401      	adds	r4, #1
 8007a08:	9305      	str	r3, [sp, #20]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	f04f 0c0a 	mov.w	ip, #10
 8007a10:	4620      	mov	r0, r4
 8007a12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a16:	3a30      	subs	r2, #48	; 0x30
 8007a18:	2a09      	cmp	r2, #9
 8007a1a:	d903      	bls.n	8007a24 <_vfiprintf_r+0x1d0>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0c6      	beq.n	80079ae <_vfiprintf_r+0x15a>
 8007a20:	9105      	str	r1, [sp, #20]
 8007a22:	e7c4      	b.n	80079ae <_vfiprintf_r+0x15a>
 8007a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a28:	4604      	mov	r4, r0
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e7f0      	b.n	8007a10 <_vfiprintf_r+0x1bc>
 8007a2e:	ab03      	add	r3, sp, #12
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	462a      	mov	r2, r5
 8007a34:	4b12      	ldr	r3, [pc, #72]	; (8007a80 <_vfiprintf_r+0x22c>)
 8007a36:	a904      	add	r1, sp, #16
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f3af 8000 	nop.w
 8007a3e:	4607      	mov	r7, r0
 8007a40:	1c78      	adds	r0, r7, #1
 8007a42:	d1d6      	bne.n	80079f2 <_vfiprintf_r+0x19e>
 8007a44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a46:	07d9      	lsls	r1, r3, #31
 8007a48:	d405      	bmi.n	8007a56 <_vfiprintf_r+0x202>
 8007a4a:	89ab      	ldrh	r3, [r5, #12]
 8007a4c:	059a      	lsls	r2, r3, #22
 8007a4e:	d402      	bmi.n	8007a56 <_vfiprintf_r+0x202>
 8007a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a52:	f7ff fe87 	bl	8007764 <__retarget_lock_release_recursive>
 8007a56:	89ab      	ldrh	r3, [r5, #12]
 8007a58:	065b      	lsls	r3, r3, #25
 8007a5a:	f53f af1d 	bmi.w	8007898 <_vfiprintf_r+0x44>
 8007a5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a60:	e71c      	b.n	800789c <_vfiprintf_r+0x48>
 8007a62:	ab03      	add	r3, sp, #12
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	462a      	mov	r2, r5
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <_vfiprintf_r+0x22c>)
 8007a6a:	a904      	add	r1, sp, #16
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f000 f879 	bl	8007b64 <_printf_i>
 8007a72:	e7e4      	b.n	8007a3e <_vfiprintf_r+0x1ea>
 8007a74:	08008948 	.word	0x08008948
 8007a78:	08008952 	.word	0x08008952
 8007a7c:	00000000 	.word	0x00000000
 8007a80:	0800782f 	.word	0x0800782f
 8007a84:	0800894e 	.word	0x0800894e

08007a88 <_printf_common>:
 8007a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a8c:	4616      	mov	r6, r2
 8007a8e:	4699      	mov	r9, r3
 8007a90:	688a      	ldr	r2, [r1, #8]
 8007a92:	690b      	ldr	r3, [r1, #16]
 8007a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	bfb8      	it	lt
 8007a9c:	4613      	movlt	r3, r2
 8007a9e:	6033      	str	r3, [r6, #0]
 8007aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	b10a      	cbz	r2, 8007aae <_printf_common+0x26>
 8007aaa:	3301      	adds	r3, #1
 8007aac:	6033      	str	r3, [r6, #0]
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	0699      	lsls	r1, r3, #26
 8007ab2:	bf42      	ittt	mi
 8007ab4:	6833      	ldrmi	r3, [r6, #0]
 8007ab6:	3302      	addmi	r3, #2
 8007ab8:	6033      	strmi	r3, [r6, #0]
 8007aba:	6825      	ldr	r5, [r4, #0]
 8007abc:	f015 0506 	ands.w	r5, r5, #6
 8007ac0:	d106      	bne.n	8007ad0 <_printf_common+0x48>
 8007ac2:	f104 0a19 	add.w	sl, r4, #25
 8007ac6:	68e3      	ldr	r3, [r4, #12]
 8007ac8:	6832      	ldr	r2, [r6, #0]
 8007aca:	1a9b      	subs	r3, r3, r2
 8007acc:	42ab      	cmp	r3, r5
 8007ace:	dc26      	bgt.n	8007b1e <_printf_common+0x96>
 8007ad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ad4:	1e13      	subs	r3, r2, #0
 8007ad6:	6822      	ldr	r2, [r4, #0]
 8007ad8:	bf18      	it	ne
 8007ada:	2301      	movne	r3, #1
 8007adc:	0692      	lsls	r2, r2, #26
 8007ade:	d42b      	bmi.n	8007b38 <_printf_common+0xb0>
 8007ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ae4:	4649      	mov	r1, r9
 8007ae6:	4638      	mov	r0, r7
 8007ae8:	47c0      	blx	r8
 8007aea:	3001      	adds	r0, #1
 8007aec:	d01e      	beq.n	8007b2c <_printf_common+0xa4>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	6922      	ldr	r2, [r4, #16]
 8007af2:	f003 0306 	and.w	r3, r3, #6
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	bf02      	ittt	eq
 8007afa:	68e5      	ldreq	r5, [r4, #12]
 8007afc:	6833      	ldreq	r3, [r6, #0]
 8007afe:	1aed      	subeq	r5, r5, r3
 8007b00:	68a3      	ldr	r3, [r4, #8]
 8007b02:	bf0c      	ite	eq
 8007b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b08:	2500      	movne	r5, #0
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	bfc4      	itt	gt
 8007b0e:	1a9b      	subgt	r3, r3, r2
 8007b10:	18ed      	addgt	r5, r5, r3
 8007b12:	2600      	movs	r6, #0
 8007b14:	341a      	adds	r4, #26
 8007b16:	42b5      	cmp	r5, r6
 8007b18:	d11a      	bne.n	8007b50 <_printf_common+0xc8>
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	e008      	b.n	8007b30 <_printf_common+0xa8>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4652      	mov	r2, sl
 8007b22:	4649      	mov	r1, r9
 8007b24:	4638      	mov	r0, r7
 8007b26:	47c0      	blx	r8
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d103      	bne.n	8007b34 <_printf_common+0xac>
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b34:	3501      	adds	r5, #1
 8007b36:	e7c6      	b.n	8007ac6 <_printf_common+0x3e>
 8007b38:	18e1      	adds	r1, r4, r3
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	2030      	movs	r0, #48	; 0x30
 8007b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b42:	4422      	add	r2, r4
 8007b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b4c:	3302      	adds	r3, #2
 8007b4e:	e7c7      	b.n	8007ae0 <_printf_common+0x58>
 8007b50:	2301      	movs	r3, #1
 8007b52:	4622      	mov	r2, r4
 8007b54:	4649      	mov	r1, r9
 8007b56:	4638      	mov	r0, r7
 8007b58:	47c0      	blx	r8
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d0e6      	beq.n	8007b2c <_printf_common+0xa4>
 8007b5e:	3601      	adds	r6, #1
 8007b60:	e7d9      	b.n	8007b16 <_printf_common+0x8e>
	...

08007b64 <_printf_i>:
 8007b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b68:	7e0f      	ldrb	r7, [r1, #24]
 8007b6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b6c:	2f78      	cmp	r7, #120	; 0x78
 8007b6e:	4691      	mov	r9, r2
 8007b70:	4680      	mov	r8, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	469a      	mov	sl, r3
 8007b76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b7a:	d807      	bhi.n	8007b8c <_printf_i+0x28>
 8007b7c:	2f62      	cmp	r7, #98	; 0x62
 8007b7e:	d80a      	bhi.n	8007b96 <_printf_i+0x32>
 8007b80:	2f00      	cmp	r7, #0
 8007b82:	f000 80d4 	beq.w	8007d2e <_printf_i+0x1ca>
 8007b86:	2f58      	cmp	r7, #88	; 0x58
 8007b88:	f000 80c0 	beq.w	8007d0c <_printf_i+0x1a8>
 8007b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b94:	e03a      	b.n	8007c0c <_printf_i+0xa8>
 8007b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b9a:	2b15      	cmp	r3, #21
 8007b9c:	d8f6      	bhi.n	8007b8c <_printf_i+0x28>
 8007b9e:	a101      	add	r1, pc, #4	; (adr r1, 8007ba4 <_printf_i+0x40>)
 8007ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ba4:	08007bfd 	.word	0x08007bfd
 8007ba8:	08007c11 	.word	0x08007c11
 8007bac:	08007b8d 	.word	0x08007b8d
 8007bb0:	08007b8d 	.word	0x08007b8d
 8007bb4:	08007b8d 	.word	0x08007b8d
 8007bb8:	08007b8d 	.word	0x08007b8d
 8007bbc:	08007c11 	.word	0x08007c11
 8007bc0:	08007b8d 	.word	0x08007b8d
 8007bc4:	08007b8d 	.word	0x08007b8d
 8007bc8:	08007b8d 	.word	0x08007b8d
 8007bcc:	08007b8d 	.word	0x08007b8d
 8007bd0:	08007d15 	.word	0x08007d15
 8007bd4:	08007c3d 	.word	0x08007c3d
 8007bd8:	08007ccf 	.word	0x08007ccf
 8007bdc:	08007b8d 	.word	0x08007b8d
 8007be0:	08007b8d 	.word	0x08007b8d
 8007be4:	08007d37 	.word	0x08007d37
 8007be8:	08007b8d 	.word	0x08007b8d
 8007bec:	08007c3d 	.word	0x08007c3d
 8007bf0:	08007b8d 	.word	0x08007b8d
 8007bf4:	08007b8d 	.word	0x08007b8d
 8007bf8:	08007cd7 	.word	0x08007cd7
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	1d1a      	adds	r2, r3, #4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	602a      	str	r2, [r5, #0]
 8007c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e09f      	b.n	8007d50 <_printf_i+0x1ec>
 8007c10:	6820      	ldr	r0, [r4, #0]
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	0607      	lsls	r7, r0, #24
 8007c16:	f103 0104 	add.w	r1, r3, #4
 8007c1a:	6029      	str	r1, [r5, #0]
 8007c1c:	d501      	bpl.n	8007c22 <_printf_i+0xbe>
 8007c1e:	681e      	ldr	r6, [r3, #0]
 8007c20:	e003      	b.n	8007c2a <_printf_i+0xc6>
 8007c22:	0646      	lsls	r6, r0, #25
 8007c24:	d5fb      	bpl.n	8007c1e <_printf_i+0xba>
 8007c26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	da03      	bge.n	8007c36 <_printf_i+0xd2>
 8007c2e:	232d      	movs	r3, #45	; 0x2d
 8007c30:	4276      	negs	r6, r6
 8007c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c36:	485a      	ldr	r0, [pc, #360]	; (8007da0 <_printf_i+0x23c>)
 8007c38:	230a      	movs	r3, #10
 8007c3a:	e012      	b.n	8007c62 <_printf_i+0xfe>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	6820      	ldr	r0, [r4, #0]
 8007c40:	1d19      	adds	r1, r3, #4
 8007c42:	6029      	str	r1, [r5, #0]
 8007c44:	0605      	lsls	r5, r0, #24
 8007c46:	d501      	bpl.n	8007c4c <_printf_i+0xe8>
 8007c48:	681e      	ldr	r6, [r3, #0]
 8007c4a:	e002      	b.n	8007c52 <_printf_i+0xee>
 8007c4c:	0641      	lsls	r1, r0, #25
 8007c4e:	d5fb      	bpl.n	8007c48 <_printf_i+0xe4>
 8007c50:	881e      	ldrh	r6, [r3, #0]
 8007c52:	4853      	ldr	r0, [pc, #332]	; (8007da0 <_printf_i+0x23c>)
 8007c54:	2f6f      	cmp	r7, #111	; 0x6f
 8007c56:	bf0c      	ite	eq
 8007c58:	2308      	moveq	r3, #8
 8007c5a:	230a      	movne	r3, #10
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c62:	6865      	ldr	r5, [r4, #4]
 8007c64:	60a5      	str	r5, [r4, #8]
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	bfa2      	ittt	ge
 8007c6a:	6821      	ldrge	r1, [r4, #0]
 8007c6c:	f021 0104 	bicge.w	r1, r1, #4
 8007c70:	6021      	strge	r1, [r4, #0]
 8007c72:	b90e      	cbnz	r6, 8007c78 <_printf_i+0x114>
 8007c74:	2d00      	cmp	r5, #0
 8007c76:	d04b      	beq.n	8007d10 <_printf_i+0x1ac>
 8007c78:	4615      	mov	r5, r2
 8007c7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c7e:	fb03 6711 	mls	r7, r3, r1, r6
 8007c82:	5dc7      	ldrb	r7, [r0, r7]
 8007c84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c88:	4637      	mov	r7, r6
 8007c8a:	42bb      	cmp	r3, r7
 8007c8c:	460e      	mov	r6, r1
 8007c8e:	d9f4      	bls.n	8007c7a <_printf_i+0x116>
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d10b      	bne.n	8007cac <_printf_i+0x148>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	07de      	lsls	r6, r3, #31
 8007c98:	d508      	bpl.n	8007cac <_printf_i+0x148>
 8007c9a:	6923      	ldr	r3, [r4, #16]
 8007c9c:	6861      	ldr	r1, [r4, #4]
 8007c9e:	4299      	cmp	r1, r3
 8007ca0:	bfde      	ittt	le
 8007ca2:	2330      	movle	r3, #48	; 0x30
 8007ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cac:	1b52      	subs	r2, r2, r5
 8007cae:	6122      	str	r2, [r4, #16]
 8007cb0:	f8cd a000 	str.w	sl, [sp]
 8007cb4:	464b      	mov	r3, r9
 8007cb6:	aa03      	add	r2, sp, #12
 8007cb8:	4621      	mov	r1, r4
 8007cba:	4640      	mov	r0, r8
 8007cbc:	f7ff fee4 	bl	8007a88 <_printf_common>
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d14a      	bne.n	8007d5a <_printf_i+0x1f6>
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	b004      	add	sp, #16
 8007cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	f043 0320 	orr.w	r3, r3, #32
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	4833      	ldr	r0, [pc, #204]	; (8007da4 <_printf_i+0x240>)
 8007cd8:	2778      	movs	r7, #120	; 0x78
 8007cda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	6829      	ldr	r1, [r5, #0]
 8007ce2:	061f      	lsls	r7, r3, #24
 8007ce4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ce8:	d402      	bmi.n	8007cf0 <_printf_i+0x18c>
 8007cea:	065f      	lsls	r7, r3, #25
 8007cec:	bf48      	it	mi
 8007cee:	b2b6      	uxthmi	r6, r6
 8007cf0:	07df      	lsls	r7, r3, #31
 8007cf2:	bf48      	it	mi
 8007cf4:	f043 0320 	orrmi.w	r3, r3, #32
 8007cf8:	6029      	str	r1, [r5, #0]
 8007cfa:	bf48      	it	mi
 8007cfc:	6023      	strmi	r3, [r4, #0]
 8007cfe:	b91e      	cbnz	r6, 8007d08 <_printf_i+0x1a4>
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	f023 0320 	bic.w	r3, r3, #32
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	2310      	movs	r3, #16
 8007d0a:	e7a7      	b.n	8007c5c <_printf_i+0xf8>
 8007d0c:	4824      	ldr	r0, [pc, #144]	; (8007da0 <_printf_i+0x23c>)
 8007d0e:	e7e4      	b.n	8007cda <_printf_i+0x176>
 8007d10:	4615      	mov	r5, r2
 8007d12:	e7bd      	b.n	8007c90 <_printf_i+0x12c>
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	6826      	ldr	r6, [r4, #0]
 8007d18:	6961      	ldr	r1, [r4, #20]
 8007d1a:	1d18      	adds	r0, r3, #4
 8007d1c:	6028      	str	r0, [r5, #0]
 8007d1e:	0635      	lsls	r5, r6, #24
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	d501      	bpl.n	8007d28 <_printf_i+0x1c4>
 8007d24:	6019      	str	r1, [r3, #0]
 8007d26:	e002      	b.n	8007d2e <_printf_i+0x1ca>
 8007d28:	0670      	lsls	r0, r6, #25
 8007d2a:	d5fb      	bpl.n	8007d24 <_printf_i+0x1c0>
 8007d2c:	8019      	strh	r1, [r3, #0]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	6123      	str	r3, [r4, #16]
 8007d32:	4615      	mov	r5, r2
 8007d34:	e7bc      	b.n	8007cb0 <_printf_i+0x14c>
 8007d36:	682b      	ldr	r3, [r5, #0]
 8007d38:	1d1a      	adds	r2, r3, #4
 8007d3a:	602a      	str	r2, [r5, #0]
 8007d3c:	681d      	ldr	r5, [r3, #0]
 8007d3e:	6862      	ldr	r2, [r4, #4]
 8007d40:	2100      	movs	r1, #0
 8007d42:	4628      	mov	r0, r5
 8007d44:	f7f8 fa54 	bl	80001f0 <memchr>
 8007d48:	b108      	cbz	r0, 8007d4e <_printf_i+0x1ea>
 8007d4a:	1b40      	subs	r0, r0, r5
 8007d4c:	6060      	str	r0, [r4, #4]
 8007d4e:	6863      	ldr	r3, [r4, #4]
 8007d50:	6123      	str	r3, [r4, #16]
 8007d52:	2300      	movs	r3, #0
 8007d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d58:	e7aa      	b.n	8007cb0 <_printf_i+0x14c>
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4649      	mov	r1, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	47d0      	blx	sl
 8007d64:	3001      	adds	r0, #1
 8007d66:	d0ad      	beq.n	8007cc4 <_printf_i+0x160>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	079b      	lsls	r3, r3, #30
 8007d6c:	d413      	bmi.n	8007d96 <_printf_i+0x232>
 8007d6e:	68e0      	ldr	r0, [r4, #12]
 8007d70:	9b03      	ldr	r3, [sp, #12]
 8007d72:	4298      	cmp	r0, r3
 8007d74:	bfb8      	it	lt
 8007d76:	4618      	movlt	r0, r3
 8007d78:	e7a6      	b.n	8007cc8 <_printf_i+0x164>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	4649      	mov	r1, r9
 8007d80:	4640      	mov	r0, r8
 8007d82:	47d0      	blx	sl
 8007d84:	3001      	adds	r0, #1
 8007d86:	d09d      	beq.n	8007cc4 <_printf_i+0x160>
 8007d88:	3501      	adds	r5, #1
 8007d8a:	68e3      	ldr	r3, [r4, #12]
 8007d8c:	9903      	ldr	r1, [sp, #12]
 8007d8e:	1a5b      	subs	r3, r3, r1
 8007d90:	42ab      	cmp	r3, r5
 8007d92:	dcf2      	bgt.n	8007d7a <_printf_i+0x216>
 8007d94:	e7eb      	b.n	8007d6e <_printf_i+0x20a>
 8007d96:	2500      	movs	r5, #0
 8007d98:	f104 0619 	add.w	r6, r4, #25
 8007d9c:	e7f5      	b.n	8007d8a <_printf_i+0x226>
 8007d9e:	bf00      	nop
 8007da0:	08008959 	.word	0x08008959
 8007da4:	0800896a 	.word	0x0800896a

08007da8 <__sflush_r>:
 8007da8:	898a      	ldrh	r2, [r1, #12]
 8007daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dae:	4605      	mov	r5, r0
 8007db0:	0710      	lsls	r0, r2, #28
 8007db2:	460c      	mov	r4, r1
 8007db4:	d458      	bmi.n	8007e68 <__sflush_r+0xc0>
 8007db6:	684b      	ldr	r3, [r1, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	dc05      	bgt.n	8007dc8 <__sflush_r+0x20>
 8007dbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	dc02      	bgt.n	8007dc8 <__sflush_r+0x20>
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dca:	2e00      	cmp	r6, #0
 8007dcc:	d0f9      	beq.n	8007dc2 <__sflush_r+0x1a>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dd4:	682f      	ldr	r7, [r5, #0]
 8007dd6:	6a21      	ldr	r1, [r4, #32]
 8007dd8:	602b      	str	r3, [r5, #0]
 8007dda:	d032      	beq.n	8007e42 <__sflush_r+0x9a>
 8007ddc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	075a      	lsls	r2, r3, #29
 8007de2:	d505      	bpl.n	8007df0 <__sflush_r+0x48>
 8007de4:	6863      	ldr	r3, [r4, #4]
 8007de6:	1ac0      	subs	r0, r0, r3
 8007de8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dea:	b10b      	cbz	r3, 8007df0 <__sflush_r+0x48>
 8007dec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dee:	1ac0      	subs	r0, r0, r3
 8007df0:	2300      	movs	r3, #0
 8007df2:	4602      	mov	r2, r0
 8007df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007df6:	6a21      	ldr	r1, [r4, #32]
 8007df8:	4628      	mov	r0, r5
 8007dfa:	47b0      	blx	r6
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	d106      	bne.n	8007e10 <__sflush_r+0x68>
 8007e02:	6829      	ldr	r1, [r5, #0]
 8007e04:	291d      	cmp	r1, #29
 8007e06:	d82b      	bhi.n	8007e60 <__sflush_r+0xb8>
 8007e08:	4a29      	ldr	r2, [pc, #164]	; (8007eb0 <__sflush_r+0x108>)
 8007e0a:	410a      	asrs	r2, r1
 8007e0c:	07d6      	lsls	r6, r2, #31
 8007e0e:	d427      	bmi.n	8007e60 <__sflush_r+0xb8>
 8007e10:	2200      	movs	r2, #0
 8007e12:	6062      	str	r2, [r4, #4]
 8007e14:	04d9      	lsls	r1, r3, #19
 8007e16:	6922      	ldr	r2, [r4, #16]
 8007e18:	6022      	str	r2, [r4, #0]
 8007e1a:	d504      	bpl.n	8007e26 <__sflush_r+0x7e>
 8007e1c:	1c42      	adds	r2, r0, #1
 8007e1e:	d101      	bne.n	8007e24 <__sflush_r+0x7c>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b903      	cbnz	r3, 8007e26 <__sflush_r+0x7e>
 8007e24:	6560      	str	r0, [r4, #84]	; 0x54
 8007e26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e28:	602f      	str	r7, [r5, #0]
 8007e2a:	2900      	cmp	r1, #0
 8007e2c:	d0c9      	beq.n	8007dc2 <__sflush_r+0x1a>
 8007e2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e32:	4299      	cmp	r1, r3
 8007e34:	d002      	beq.n	8007e3c <__sflush_r+0x94>
 8007e36:	4628      	mov	r0, r5
 8007e38:	f7ff fc96 	bl	8007768 <_free_r>
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	6360      	str	r0, [r4, #52]	; 0x34
 8007e40:	e7c0      	b.n	8007dc4 <__sflush_r+0x1c>
 8007e42:	2301      	movs	r3, #1
 8007e44:	4628      	mov	r0, r5
 8007e46:	47b0      	blx	r6
 8007e48:	1c41      	adds	r1, r0, #1
 8007e4a:	d1c8      	bne.n	8007dde <__sflush_r+0x36>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0c5      	beq.n	8007dde <__sflush_r+0x36>
 8007e52:	2b1d      	cmp	r3, #29
 8007e54:	d001      	beq.n	8007e5a <__sflush_r+0xb2>
 8007e56:	2b16      	cmp	r3, #22
 8007e58:	d101      	bne.n	8007e5e <__sflush_r+0xb6>
 8007e5a:	602f      	str	r7, [r5, #0]
 8007e5c:	e7b1      	b.n	8007dc2 <__sflush_r+0x1a>
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e64:	81a3      	strh	r3, [r4, #12]
 8007e66:	e7ad      	b.n	8007dc4 <__sflush_r+0x1c>
 8007e68:	690f      	ldr	r7, [r1, #16]
 8007e6a:	2f00      	cmp	r7, #0
 8007e6c:	d0a9      	beq.n	8007dc2 <__sflush_r+0x1a>
 8007e6e:	0793      	lsls	r3, r2, #30
 8007e70:	680e      	ldr	r6, [r1, #0]
 8007e72:	bf08      	it	eq
 8007e74:	694b      	ldreq	r3, [r1, #20]
 8007e76:	600f      	str	r7, [r1, #0]
 8007e78:	bf18      	it	ne
 8007e7a:	2300      	movne	r3, #0
 8007e7c:	eba6 0807 	sub.w	r8, r6, r7
 8007e80:	608b      	str	r3, [r1, #8]
 8007e82:	f1b8 0f00 	cmp.w	r8, #0
 8007e86:	dd9c      	ble.n	8007dc2 <__sflush_r+0x1a>
 8007e88:	6a21      	ldr	r1, [r4, #32]
 8007e8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e8c:	4643      	mov	r3, r8
 8007e8e:	463a      	mov	r2, r7
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b0      	blx	r6
 8007e94:	2800      	cmp	r0, #0
 8007e96:	dc06      	bgt.n	8007ea6 <__sflush_r+0xfe>
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e9e:	81a3      	strh	r3, [r4, #12]
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	e78e      	b.n	8007dc4 <__sflush_r+0x1c>
 8007ea6:	4407      	add	r7, r0
 8007ea8:	eba8 0800 	sub.w	r8, r8, r0
 8007eac:	e7e9      	b.n	8007e82 <__sflush_r+0xda>
 8007eae:	bf00      	nop
 8007eb0:	dfbffffe 	.word	0xdfbffffe

08007eb4 <_fflush_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	690b      	ldr	r3, [r1, #16]
 8007eb8:	4605      	mov	r5, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	b913      	cbnz	r3, 8007ec4 <_fflush_r+0x10>
 8007ebe:	2500      	movs	r5, #0
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	b118      	cbz	r0, 8007ece <_fflush_r+0x1a>
 8007ec6:	6a03      	ldr	r3, [r0, #32]
 8007ec8:	b90b      	cbnz	r3, 8007ece <_fflush_r+0x1a>
 8007eca:	f7ff fa45 	bl	8007358 <__sinit>
 8007ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f3      	beq.n	8007ebe <_fflush_r+0xa>
 8007ed6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ed8:	07d0      	lsls	r0, r2, #31
 8007eda:	d404      	bmi.n	8007ee6 <_fflush_r+0x32>
 8007edc:	0599      	lsls	r1, r3, #22
 8007ede:	d402      	bmi.n	8007ee6 <_fflush_r+0x32>
 8007ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ee2:	f7ff fc3e 	bl	8007762 <__retarget_lock_acquire_recursive>
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	4621      	mov	r1, r4
 8007eea:	f7ff ff5d 	bl	8007da8 <__sflush_r>
 8007eee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ef0:	07da      	lsls	r2, r3, #31
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	d4e4      	bmi.n	8007ec0 <_fflush_r+0xc>
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	059b      	lsls	r3, r3, #22
 8007efa:	d4e1      	bmi.n	8007ec0 <_fflush_r+0xc>
 8007efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007efe:	f7ff fc31 	bl	8007764 <__retarget_lock_release_recursive>
 8007f02:	e7dd      	b.n	8007ec0 <_fflush_r+0xc>

08007f04 <__swhatbuf_r>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	460c      	mov	r4, r1
 8007f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	b096      	sub	sp, #88	; 0x58
 8007f10:	4615      	mov	r5, r2
 8007f12:	461e      	mov	r6, r3
 8007f14:	da0d      	bge.n	8007f32 <__swhatbuf_r+0x2e>
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f1c:	f04f 0100 	mov.w	r1, #0
 8007f20:	bf0c      	ite	eq
 8007f22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007f26:	2340      	movne	r3, #64	; 0x40
 8007f28:	2000      	movs	r0, #0
 8007f2a:	6031      	str	r1, [r6, #0]
 8007f2c:	602b      	str	r3, [r5, #0]
 8007f2e:	b016      	add	sp, #88	; 0x58
 8007f30:	bd70      	pop	{r4, r5, r6, pc}
 8007f32:	466a      	mov	r2, sp
 8007f34:	f000 f848 	bl	8007fc8 <_fstat_r>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	dbec      	blt.n	8007f16 <__swhatbuf_r+0x12>
 8007f3c:	9901      	ldr	r1, [sp, #4]
 8007f3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007f42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007f46:	4259      	negs	r1, r3
 8007f48:	4159      	adcs	r1, r3
 8007f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f4e:	e7eb      	b.n	8007f28 <__swhatbuf_r+0x24>

08007f50 <__smakebuf_r>:
 8007f50:	898b      	ldrh	r3, [r1, #12]
 8007f52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f54:	079d      	lsls	r5, r3, #30
 8007f56:	4606      	mov	r6, r0
 8007f58:	460c      	mov	r4, r1
 8007f5a:	d507      	bpl.n	8007f6c <__smakebuf_r+0x1c>
 8007f5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	6123      	str	r3, [r4, #16]
 8007f64:	2301      	movs	r3, #1
 8007f66:	6163      	str	r3, [r4, #20]
 8007f68:	b002      	add	sp, #8
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}
 8007f6c:	ab01      	add	r3, sp, #4
 8007f6e:	466a      	mov	r2, sp
 8007f70:	f7ff ffc8 	bl	8007f04 <__swhatbuf_r>
 8007f74:	9900      	ldr	r1, [sp, #0]
 8007f76:	4605      	mov	r5, r0
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7ff f8d5 	bl	8007128 <_malloc_r>
 8007f7e:	b948      	cbnz	r0, 8007f94 <__smakebuf_r+0x44>
 8007f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f84:	059a      	lsls	r2, r3, #22
 8007f86:	d4ef      	bmi.n	8007f68 <__smakebuf_r+0x18>
 8007f88:	f023 0303 	bic.w	r3, r3, #3
 8007f8c:	f043 0302 	orr.w	r3, r3, #2
 8007f90:	81a3      	strh	r3, [r4, #12]
 8007f92:	e7e3      	b.n	8007f5c <__smakebuf_r+0xc>
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	6020      	str	r0, [r4, #0]
 8007f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	9b00      	ldr	r3, [sp, #0]
 8007fa0:	6163      	str	r3, [r4, #20]
 8007fa2:	9b01      	ldr	r3, [sp, #4]
 8007fa4:	6120      	str	r0, [r4, #16]
 8007fa6:	b15b      	cbz	r3, 8007fc0 <__smakebuf_r+0x70>
 8007fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fac:	4630      	mov	r0, r6
 8007fae:	f000 f81d 	bl	8007fec <_isatty_r>
 8007fb2:	b128      	cbz	r0, 8007fc0 <__smakebuf_r+0x70>
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	f023 0303 	bic.w	r3, r3, #3
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	81a3      	strh	r3, [r4, #12]
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	431d      	orrs	r5, r3
 8007fc4:	81a5      	strh	r5, [r4, #12]
 8007fc6:	e7cf      	b.n	8007f68 <__smakebuf_r+0x18>

08007fc8 <_fstat_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d07      	ldr	r5, [pc, #28]	; (8007fe8 <_fstat_r+0x20>)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	602b      	str	r3, [r5, #0]
 8007fd6:	f7f9 fe08 	bl	8001bea <_fstat>
 8007fda:	1c43      	adds	r3, r0, #1
 8007fdc:	d102      	bne.n	8007fe4 <_fstat_r+0x1c>
 8007fde:	682b      	ldr	r3, [r5, #0]
 8007fe0:	b103      	cbz	r3, 8007fe4 <_fstat_r+0x1c>
 8007fe2:	6023      	str	r3, [r4, #0]
 8007fe4:	bd38      	pop	{r3, r4, r5, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000408 	.word	0x20000408

08007fec <_isatty_r>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	4d06      	ldr	r5, [pc, #24]	; (8008008 <_isatty_r+0x1c>)
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	4608      	mov	r0, r1
 8007ff6:	602b      	str	r3, [r5, #0]
 8007ff8:	f7f9 fe07 	bl	8001c0a <_isatty>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_isatty_r+0x1a>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_isatty_r+0x1a>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	20000408 	.word	0x20000408

0800800c <_init>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	bf00      	nop
 8008010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008012:	bc08      	pop	{r3}
 8008014:	469e      	mov	lr, r3
 8008016:	4770      	bx	lr

08008018 <_fini>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	bf00      	nop
 800801c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801e:	bc08      	pop	{r3}
 8008020:	469e      	mov	lr, r3
 8008022:	4770      	bx	lr
