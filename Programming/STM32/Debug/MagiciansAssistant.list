
MagiciansAssistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001040  0800cf54  0800cf54  0001cf54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df94  0800df94  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800df94  0800df94  0001df94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df9c  0800df9c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df9c  0800df9c  0001df9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dfa0  0800dfa0  0001dfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800dfa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  2000009c  0800e040  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000998  0800e040  00020998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dda2  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000404b  00000000  00000000  0003deb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a88  00000000  00000000  00041f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014a3  00000000  00000000  00043988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ba80  00000000  00000000  00044e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000236cb  00000000  00000000  000708ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcd13  00000000  00000000  00093f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078b8  00000000  00000000  00190c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00198544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf3c 	.word	0x0800cf3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800cf3c 	.word	0x0800cf3c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b970 	b.w	8000e24 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	460d      	mov	r5, r1
 8000b64:	4604      	mov	r4, r0
 8000b66:	460f      	mov	r7, r1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d14a      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4694      	mov	ip, r2
 8000b70:	d965      	bls.n	8000c3e <__udivmoddi4+0xe2>
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	b143      	cbz	r3, 8000b8a <__udivmoddi4+0x2e>
 8000b78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b7c:	f1c3 0220 	rsb	r2, r3, #32
 8000b80:	409f      	lsls	r7, r3
 8000b82:	fa20 f202 	lsr.w	r2, r0, r2
 8000b86:	4317      	orrs	r7, r2
 8000b88:	409c      	lsls	r4, r3
 8000b8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b8e:	fa1f f58c 	uxth.w	r5, ip
 8000b92:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b96:	0c22      	lsrs	r2, r4, #16
 8000b98:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba0:	fb01 f005 	mul.w	r0, r1, r5
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x62>
 8000ba8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bb0:	f080 811c 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	f240 8119 	bls.w	8000dec <__udivmoddi4+0x290>
 8000bba:	3902      	subs	r1, #2
 8000bbc:	4462      	add	r2, ip
 8000bbe:	1a12      	subs	r2, r2, r0
 8000bc0:	b2a4      	uxth	r4, r4
 8000bc2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bc6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bce:	fb00 f505 	mul.w	r5, r0, r5
 8000bd2:	42a5      	cmp	r5, r4
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x90>
 8000bd6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bda:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bde:	f080 8107 	bcs.w	8000df0 <__udivmoddi4+0x294>
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	f240 8104 	bls.w	8000df0 <__udivmoddi4+0x294>
 8000be8:	4464      	add	r4, ip
 8000bea:	3802      	subs	r0, #2
 8000bec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bf0:	1b64      	subs	r4, r4, r5
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	b11e      	cbz	r6, 8000bfe <__udivmoddi4+0xa2>
 8000bf6:	40dc      	lsrs	r4, r3
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0xbc>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80ed 	beq.w	8000de6 <__udivmoddi4+0x28a>
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c12:	4608      	mov	r0, r1
 8000c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c18:	fab3 f183 	clz	r1, r3
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d149      	bne.n	8000cb4 <__udivmoddi4+0x158>
 8000c20:	42ab      	cmp	r3, r5
 8000c22:	d302      	bcc.n	8000c2a <__udivmoddi4+0xce>
 8000c24:	4282      	cmp	r2, r0
 8000c26:	f200 80f8 	bhi.w	8000e1a <__udivmoddi4+0x2be>
 8000c2a:	1a84      	subs	r4, r0, r2
 8000c2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c30:	2001      	movs	r0, #1
 8000c32:	4617      	mov	r7, r2
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d0e2      	beq.n	8000bfe <__udivmoddi4+0xa2>
 8000c38:	e9c6 4700 	strd	r4, r7, [r6]
 8000c3c:	e7df      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000c3e:	b902      	cbnz	r2, 8000c42 <__udivmoddi4+0xe6>
 8000c40:	deff      	udf	#255	; 0xff
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8090 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4c:	1a8a      	subs	r2, r1, r2
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f fe8c 	uxth.w	lr, ip
 8000c56:	2101      	movs	r1, #1
 8000c58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c60:	0c22      	lsrs	r2, r4, #16
 8000c62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c66:	fb0e f005 	mul.w	r0, lr, r5
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4290      	cmp	r0, r2
 8000c7a:	f200 80cb 	bhi.w	8000e14 <__udivmoddi4+0x2b8>
 8000c7e:	4645      	mov	r5, r8
 8000c80:	1a12      	subs	r2, r2, r0
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c88:	fb07 2210 	mls	r2, r7, r0, r2
 8000c8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c90:	fb0e fe00 	mul.w	lr, lr, r0
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x14e>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x14c>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	f200 80bb 	bhi.w	8000e1e <__udivmoddi4+0x2c2>
 8000ca8:	4610      	mov	r0, r2
 8000caa:	eba4 040e 	sub.w	r4, r4, lr
 8000cae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cb2:	e79f      	b.n	8000bf4 <__udivmoddi4+0x98>
 8000cb4:	f1c1 0720 	rsb	r7, r1, #32
 8000cb8:	408b      	lsls	r3, r1
 8000cba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cca:	40fd      	lsrs	r5, r7
 8000ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd0:	4323      	orrs	r3, r4
 8000cd2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	fb09 5518 	mls	r5, r9, r8, r5
 8000cde:	0c1c      	lsrs	r4, r3, #16
 8000ce0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ce4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ce8:	42a5      	cmp	r5, r4
 8000cea:	fa02 f201 	lsl.w	r2, r2, r1
 8000cee:	fa00 f001 	lsl.w	r0, r0, r1
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cfc:	f080 8088 	bcs.w	8000e10 <__udivmoddi4+0x2b4>
 8000d00:	42a5      	cmp	r5, r4
 8000d02:	f240 8085 	bls.w	8000e10 <__udivmoddi4+0x2b4>
 8000d06:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0a:	4464      	add	r4, ip
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	b29d      	uxth	r5, r3
 8000d10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d14:	fb09 4413 	mls	r4, r9, r3, r4
 8000d18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d2c:	d26c      	bcs.n	8000e08 <__udivmoddi4+0x2ac>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	d96a      	bls.n	8000e08 <__udivmoddi4+0x2ac>
 8000d32:	3b02      	subs	r3, #2
 8000d34:	4464      	add	r4, ip
 8000d36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	42ac      	cmp	r4, r5
 8000d44:	46c8      	mov	r8, r9
 8000d46:	46ae      	mov	lr, r5
 8000d48:	d356      	bcc.n	8000df8 <__udivmoddi4+0x29c>
 8000d4a:	d053      	beq.n	8000df4 <__udivmoddi4+0x298>
 8000d4c:	b156      	cbz	r6, 8000d64 <__udivmoddi4+0x208>
 8000d4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d52:	eb64 040e 	sbc.w	r4, r4, lr
 8000d56:	fa04 f707 	lsl.w	r7, r4, r7
 8000d5a:	40ca      	lsrs	r2, r1
 8000d5c:	40cc      	lsrs	r4, r1
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	e9c6 7400 	strd	r7, r4, [r6]
 8000d64:	4618      	mov	r0, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6c:	f1c3 0120 	rsb	r1, r3, #32
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	fa20 f201 	lsr.w	r2, r0, r1
 8000d78:	fa25 f101 	lsr.w	r1, r5, r1
 8000d7c:	409d      	lsls	r5, r3
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d90:	0c11      	lsrs	r1, r2, #16
 8000d92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d96:	fb00 f50e 	mul.w	r5, r0, lr
 8000d9a:	428d      	cmp	r5, r1
 8000d9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x258>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000daa:	d22f      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dac:	428d      	cmp	r5, r1
 8000dae:	d92d      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	1b49      	subs	r1, r1, r5
 8000db6:	b292      	uxth	r2, r2
 8000db8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000dc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000dc8:	4291      	cmp	r1, r2
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x282>
 8000dcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd4:	d216      	bcs.n	8000e04 <__udivmoddi4+0x2a8>
 8000dd6:	4291      	cmp	r1, r2
 8000dd8:	d914      	bls.n	8000e04 <__udivmoddi4+0x2a8>
 8000dda:	3d02      	subs	r5, #2
 8000ddc:	4462      	add	r2, ip
 8000dde:	1a52      	subs	r2, r2, r1
 8000de0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000de4:	e738      	b.n	8000c58 <__udivmoddi4+0xfc>
 8000de6:	4631      	mov	r1, r6
 8000de8:	4630      	mov	r0, r6
 8000dea:	e708      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000dec:	4639      	mov	r1, r7
 8000dee:	e6e6      	b.n	8000bbe <__udivmoddi4+0x62>
 8000df0:	4610      	mov	r0, r2
 8000df2:	e6fb      	b.n	8000bec <__udivmoddi4+0x90>
 8000df4:	4548      	cmp	r0, r9
 8000df6:	d2a9      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e00:	3b01      	subs	r3, #1
 8000e02:	e7a3      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e04:	4645      	mov	r5, r8
 8000e06:	e7ea      	b.n	8000dde <__udivmoddi4+0x282>
 8000e08:	462b      	mov	r3, r5
 8000e0a:	e794      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	e7d1      	b.n	8000db4 <__udivmoddi4+0x258>
 8000e10:	46d0      	mov	r8, sl
 8000e12:	e77b      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e14:	3d02      	subs	r5, #2
 8000e16:	4462      	add	r2, ip
 8000e18:	e732      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e70a      	b.n	8000c34 <__udivmoddi4+0xd8>
 8000e1e:	4464      	add	r4, ip
 8000e20:	3802      	subs	r0, #2
 8000e22:	e742      	b.n	8000caa <__udivmoddi4+0x14e>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <initArducam>:
 * The chip select signal should always be LOW during the SPI read or write bus cycle
 * I2C interfaces directly with the OV2640 sensor (the camera itself)
 * SPI interfaces with the Chip as a whole, to indirectly control the camera
 */
//void initArducam(ArducamController* pCtrl, I2C_HandleTypeDef* pHI2C, SPI_HandleTypeDef* pHSPI, GPIO_TypeDef* pCSPort, uint16_t csPinNo, GPIO_TypeDef* pFlashPort, uint16_t flashPinNo){
HAL_StatusTypeDef initArducam(ArducamController* pCtrl){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	printf("Initializing ArduCam\n");
 8000e30:	4837      	ldr	r0, [pc, #220]	; (8000f10 <initArducam+0xe8>)
 8000e32:	f00b fa09 	bl	800c248 <puts>

	resetCPLD(pCtrl);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 fb5a 	bl	80014f0 <resetCPLD>
	if((pCtrl->status = HAL_I2C_IsDeviceReady(pCtrl->pI2CHandle, I2C_ADDR_WRITE, 1, HAL_MAX_DELAY)) != HAL_OK ||
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6858      	ldr	r0, [r3, #4]
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
 8000e44:	2201      	movs	r2, #1
 8000e46:	2160      	movs	r1, #96	; 0x60
 8000e48:	f003 f93c 	bl	80040c4 <HAL_I2C_IsDeviceReady>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10e      	bne.n	8000e7a <initArducam+0x52>
			(pCtrl->status = HAL_I2C_IsDeviceReady(pCtrl->pI2CHandle, I2C_ADDR_READ, 1, HAL_MAX_DELAY != HAL_OK))){
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6858      	ldr	r0, [r3, #4]
 8000e60:	2301      	movs	r3, #1
 8000e62:	2201      	movs	r2, #1
 8000e64:	2161      	movs	r1, #97	; 0x61
 8000e66:	f003 f92d 	bl	80040c4 <HAL_I2C_IsDeviceReady>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	781b      	ldrb	r3, [r3, #0]
	if((pCtrl->status = HAL_I2C_IsDeviceReady(pCtrl->pI2CHandle, I2C_ADDR_WRITE, 1, HAL_MAX_DELAY)) != HAL_OK ||
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <initArducam+0x5a>
		printf("Arducam I2C Error.\n");
 8000e7a:	4826      	ldr	r0, [pc, #152]	; (8000f14 <initArducam+0xec>)
 8000e7c:	f00b f9e4 	bl	800c248 <puts>
 8000e80:	e034      	b.n	8000eec <initArducam+0xc4>
	} else if(!isSPIWorking(pCtrl)){
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f9e2 	bl	800124c <isSPIWorking>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d103      	bne.n	8000e96 <initArducam+0x6e>
		printf("Arducam SPI Error.\n");
 8000e8e:	4822      	ldr	r0, [pc, #136]	; (8000f18 <initArducam+0xf0>)
 8000e90:	f00b f9da 	bl	800c248 <puts>
 8000e94:	e02a      	b.n	8000eec <initArducam+0xc4>
	} else {
		printf("Arducam I2C Check Passed | SPI Check Passed\n");
 8000e96:	4821      	ldr	r0, [pc, #132]	; (8000f1c <initArducam+0xf4>)
 8000e98:	f00b f9d6 	bl	800c248 <puts>

		pCtrl->pictureBufferSize = 0;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f8a3 2572 	strh.w	r2, [r3, #1394]	; 0x572
		pCtrl->base64Size = 0;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f8a3 2570 	strh.w	r2, [r3, #1392]	; 0x570
		memset(pCtrl->pictureBuffer, 0, MAX_PIC_BUF_SIZE);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	331a      	adds	r3, #26
 8000eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f00b faa2 	bl	800c408 <memset>
		memset(pCtrl->base64Buffer, 0, MAX_BASE64_BUF_SIZE);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eca:	331a      	adds	r3, #26
 8000ecc:	f241 5256 	movw	r2, #5462	; 0x1556
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f00b fa98 	bl	800c408 <memset>

		setDefaultSettings(pCtrl);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 f96f 	bl	80011bc <setDefaultSettings>
		HAL_Delay(1000);
 8000ede:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee2:	f002 fc43 	bl	800376c <HAL_Delay>
		shutter(pCtrl);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 fb8f 	bl	800160a <shutter>
	}

	if(pCtrl->status != HAL_OK){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <initArducam+0xd4>
		printf("FAILED Arducam Init\n");
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <initArducam+0xf8>)
 8000ef6:	f00b f9a7 	bl	800c248 <puts>
 8000efa:	e002      	b.n	8000f02 <initArducam+0xda>
	} else {
		printf("SUCCESS Arducam Init\n");
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <initArducam+0xfc>)
 8000efe:	f00b f9a3 	bl	800c248 <puts>
	}

	return pCtrl->status;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	781b      	ldrb	r3, [r3, #0]

	//printStatus(pCtrl);
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	0800cf54 	.word	0x0800cf54
 8000f14:	0800cf6c 	.word	0x0800cf6c
 8000f18:	0800cf80 	.word	0x0800cf80
 8000f1c:	0800cf94 	.word	0x0800cf94
 8000f20:	0800cfc0 	.word	0x0800cfc0
 8000f24:	0800cfd4 	.word	0x0800cfd4

08000f28 <disconnectArducam>:

//Deconstructor
HAL_StatusTypeDef disconnectArducam(ArducamController* pCtrl){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	printf("Disconnecting Arducam Controller...\n");
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <disconnectArducam+0x1c>)
 8000f32:	f00b f989 	bl	800c248 <puts>
	return pCtrl->status;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	781b      	ldrb	r3, [r3, #0]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	0800cfec 	.word	0x0800cfec

08000f48 <singleCapture>:

//Fills pictureBuffer with the Picture Data
HAL_StatusTypeDef singleCapture(ArducamController* pCtrl){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
		printf("Starting Capture\n");
 8000f50:	4820      	ldr	r0, [pc, #128]	; (8000fd4 <singleCapture+0x8c>)
 8000f52:	f00b f979 	bl	800c248 <puts>

		flashOn(pCtrl);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fb69 	bl	800162e <flashOn>

		resetFIFOPointers(pCtrl);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 fafb 	bl	8001558 <resetFIFOPointers>
		clearFIFOFlag(pCtrl);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 fae8 	bl	8001538 <clearFIFOFlag>
		setNCaptureFrames(pCtrl, 1);
 8000f68:	2101      	movs	r1, #1
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fb14 	bl	8001598 <setNCaptureFrames>
		setCaptureFlag(pCtrl);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 fb01 	bl	8001578 <setCaptureFlag>

		while(!isFIFOReady(pCtrl)){
 8000f76:	e003      	b.n	8000f80 <singleCapture+0x38>
			HAL_Delay(CAPTURE_DELAY);//    Wait 'til Finished Flag is set
 8000f78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7c:	f002 fbf6 	bl	800376c <HAL_Delay>
		while(!isFIFOReady(pCtrl)){
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fa9f 	bl	80014c4 <isFIFOReady>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f5      	beq.n	8000f78 <singleCapture+0x30>
		}
		printf("FIFO Write Finished!\n");
 8000f8c:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <singleCapture+0x90>)
 8000f8e:	f00b f95b 	bl	800c248 <puts>
		flashOff(pCtrl);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 fb5b 	bl	800164e <flashOff>

		if(burstReadFIFO(pCtrl) == 0){
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f823 	bl	8000fe4 <burstReadFIFO>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <singleCapture+0x62>
			pCtrl->status = HAL_ERROR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
		}

		if(pCtrl->status != HAL_OK){
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <singleCapture+0x78>
			printf("FAILED Single Snap\n");
 8000fb2:	480a      	ldr	r0, [pc, #40]	; (8000fdc <singleCapture+0x94>)
 8000fb4:	f00b f948 	bl	800c248 <puts>
			registerDump(pCtrl);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 fb59 	bl	8001670 <registerDump>
 8000fbe:	e002      	b.n	8000fc6 <singleCapture+0x7e>
		} else {
			printf("SUCCESS Single Snap\n");
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <singleCapture+0x98>)
 8000fc2:	f00b f941 	bl	800c248 <puts>
		}

		return pCtrl->status;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	0800d010 	.word	0x0800d010
 8000fd8:	0800d024 	.word	0x0800d024
 8000fdc:	0800d03c 	.word	0x0800d03c
 8000fe0:	0800d050 	.word	0x0800d050

08000fe4 <burstReadFIFO>:

//Returns the amount of data (in bytes) read from FIFO
uint16_t burstReadFIFO(ArducamController *pCtrl){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]

	uint32_t fifoLength = getFIFOLength(pCtrl);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f889 	bl	8001104 <getFIFOLength>
 8000ff2:	6138      	str	r0, [r7, #16]
	uint32_t transmissionSize = fifoLength;
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	617b      	str	r3, [r7, #20]
	if(fifoLength > 4096){
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ffe:	d906      	bls.n	800100e <burstReadFIFO+0x2a>
		printf("Had to Truncate FIFO Transfer\n");
 8001000:	483b      	ldr	r0, [pc, #236]	; (80010f0 <burstReadFIFO+0x10c>)
 8001002:	f00b f921 	bl	800c248 <puts>
		transmissionSize = 4096;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e00d      	b.n	800102a <burstReadFIFO+0x46>
	} else if(fifoLength == 0){
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10a      	bne.n	800102a <burstReadFIFO+0x46>
		printf("FAILED burst read FIFO, FIFO has no data\n");
 8001014:	4837      	ldr	r0, [pc, #220]	; (80010f4 <burstReadFIFO+0x110>)
 8001016:	f00b f917 	bl	800c248 <puts>
		pCtrl->pictureBufferSize = 0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001020:	2200      	movs	r2, #0
 8001022:	f8a3 2572 	strh.w	r2, [r3, #1394]	; 0x572
		return 0;
 8001026:	2300      	movs	r3, #0
 8001028:	e05e      	b.n	80010e8 <burstReadFIFO+0x104>
	}

	clearPicBuf(pCtrl);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f8a0 	bl	8001170 <clearPicBuf>
	pCtrl->pictureBufferSize = transmissionSize; //TODO: Need to figure out how much data to buffer
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	b29a      	uxth	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800103a:	f8a3 2572 	strh.w	r2, [r3, #1394]	; 0x572

	printf("Reading %u bytes from Arducam\n", pCtrl->pictureBufferSize);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001044:	f8b3 3572 	ldrh.w	r3, [r3, #1394]	; 0x572
 8001048:	4619      	mov	r1, r3
 800104a:	482b      	ldr	r0, [pc, #172]	; (80010f8 <burstReadFIFO+0x114>)
 800104c:	f00b f896 	bl	800c17c <iprintf>
	cam_enable(pCtrl);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 faba 	bl	80015ca <cam_enable>

	uint8_t cmd = FIFO_BURST_READ;
 8001056:	233c      	movs	r3, #60	; 0x3c
 8001058:	73fb      	strb	r3, [r7, #15]
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &cmd, pCtrl->pictureBuffer, 1, HAL_MAX_DELAY);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6898      	ldr	r0, [r3, #8]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f103 021a 	add.w	r2, r3, #26
 8001064:	f107 010f 	add.w	r1, r7, #15
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	f005 fb80 	bl	8006774 <HAL_SPI_TransmitReceive>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	701a      	strb	r2, [r3, #0]
	if(pCtrl->status != HAL_OK){
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <burstReadFIFO+0xb0>
		printf("FAILED sending FIFO_BURST_READ byte\n");
 8001084:	481d      	ldr	r0, [pc, #116]	; (80010fc <burstReadFIFO+0x118>)
 8001086:	f00b f8df 	bl	800c248 <puts>
		printStatus(pCtrl);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f001 f99a 	bl	80023c4 <printStatus>
		return 0;
 8001090:	2300      	movs	r3, #0
 8001092:	e029      	b.n	80010e8 <burstReadFIFO+0x104>
	} else {
		pCtrl -> status = HAL_SPI_Receive(pCtrl->pSPIHandle, pCtrl->pictureBuffer, pCtrl->pictureBufferSize, HAL_MAX_DELAY); //Read bytes into pictureBuffer
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6898      	ldr	r0, [r3, #8]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f103 011a 	add.w	r1, r3, #26
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80010a4:	f8b3 2572 	ldrh.w	r2, [r3, #1394]	; 0x572
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	f005 fa2b 	bl	8006506 <HAL_SPI_Receive>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	701a      	strb	r2, [r3, #0]
		if(pCtrl->status != HAL_OK){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d007      	beq.n	80010d0 <burstReadFIFO+0xec>
			printf("FAILED receiving picture data from SPI bus\n");
 80010c0:	480f      	ldr	r0, [pc, #60]	; (8001100 <burstReadFIFO+0x11c>)
 80010c2:	f00b f8c1 	bl	800c248 <puts>
			printStatus(pCtrl);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f001 f97c 	bl	80023c4 <printStatus>
			return 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e00b      	b.n	80010e8 <burstReadFIFO+0x104>
		}
	}
	HAL_Delay(1000);
 80010d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d4:	f002 fb4a 	bl	800376c <HAL_Delay>

	cam_disable(pCtrl);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 fa86 	bl	80015ea <cam_disable>
	return pCtrl->pictureBufferSize;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80010e4:	f8b3 3572 	ldrh.w	r3, [r3, #1394]	; 0x572
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	0800d064 	.word	0x0800d064
 80010f4:	0800d084 	.word	0x0800d084
 80010f8:	0800d0b0 	.word	0x0800d0b0
 80010fc:	0800d0d0 	.word	0x0800d0d0
 8001100:	0800d0f4 	.word	0x0800d0f4

08001104 <getFIFOLength>:

//How we find the number of bytes the FIFO is holding (for burst reading)
uint32_t getFIFOLength(ArducamController *pCtrl){
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	uint32_t reg0 = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
	uint32_t reg1 = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
	uint32_t reg2 = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
	uint32_t fifoLength = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]

	reg0 = (uint32_t) spiRegRead(pCtrl, FIFO_BYTE0);
 800111c:	2142      	movs	r1, #66	; 0x42
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f970 	bl	8001404 <spiRegRead>
 8001124:	4603      	mov	r3, r0
 8001126:	617b      	str	r3, [r7, #20]
	reg1 = (uint32_t) spiRegRead(pCtrl, FIFO_BYTE1);
 8001128:	2143      	movs	r1, #67	; 0x43
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f96a 	bl	8001404 <spiRegRead>
 8001130:	4603      	mov	r3, r0
 8001132:	613b      	str	r3, [r7, #16]
	reg2 = (uint32_t) (spiRegRead(pCtrl, FIFO_BYTE2) & 0x7F);
 8001134:	2144      	movs	r1, #68	; 0x44
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 f964 	bl	8001404 <spiRegRead>
 800113c:	4603      	mov	r3, r0
 800113e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001142:	60fb      	str	r3, [r7, #12]

	//fifoLength = ((longReg2 << 16) | (longReg1 << 8) | longReg0) & 0x007FFFFF;
	fifoLength = ((reg2 << 16) | (reg1 << 8) | reg0) & 0x007FFFFF;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	041a      	lsls	r2, r3, #16
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	431a      	orrs	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	4313      	orrs	r3, r2
 8001152:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001156:	60bb      	str	r3, [r7, #8]
	printf("FIFO Length : %lu bytes\n", fifoLength);
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <getFIFOLength+0x68>)
 800115c:	f00b f80e 	bl	800c17c <iprintf>
	return fifoLength;
 8001160:	68bb      	ldr	r3, [r7, #8]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	0800d120 	.word	0x0800d120

08001170 <clearPicBuf>:

//Clears the picture buffer and base 64 buffer
//Sets all bytes to 0xFF
void clearPicBuf(ArducamController* pCtrl){
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	memset(pCtrl->pictureBuffer, 0, MAX_PIC_BUF_SIZE);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	331a      	adds	r3, #26
 800117c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f00b f940 	bl	800c408 <memset>
	memset(pCtrl->base64Buffer, 0, MAX_BASE64_BUF_SIZE);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800118e:	331a      	adds	r3, #26
 8001190:	f241 5256 	movw	r2, #5462	; 0x1556
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f00b f936 	bl	800c408 <memset>
	pCtrl->pictureBufferSize = 0;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80011a2:	2200      	movs	r2, #0
 80011a4:	f8a3 2572 	strh.w	r2, [r3, #1394]	; 0x572
	pCtrl->base64Size = 0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80011ae:	2200      	movs	r2, #0
 80011b0:	f8a3 2570 	strh.w	r2, [r3, #1392]	; 0x570
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <setDefaultSettings>:

void setDefaultSettings(ArducamController* pCtrl){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	printf("Configuring Default Settings\n");
 80011c4:	481c      	ldr	r0, [pc, #112]	; (8001238 <setDefaultSettings+0x7c>)
 80011c6:	f00b f83f 	bl	800c248 <puts>
	uint8_t data = 0x01;
 80011ca:	2301      	movs	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0xFF, data);
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	461a      	mov	r2, r3
 80011d2:	21ff      	movs	r1, #255	; 0xff
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f869 	bl	80012ac <i2cRegWrite>
	data = 0x80;
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0x12, data);
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	461a      	mov	r2, r3
 80011e2:	2112      	movs	r1, #18
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f861 	bl	80012ac <i2cRegWrite>
	HAL_Delay(100);
 80011ea:	2064      	movs	r0, #100	; 0x64
 80011ec:	f002 fabe 	bl	800376c <HAL_Delay>

	i2cWriteMultiple(pCtrl, OV2640_JPEG_INIT);
 80011f0:	4912      	ldr	r1, [pc, #72]	; (800123c <setDefaultSettings+0x80>)
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f88e 	bl	8001314 <i2cWriteMultiple>
	i2cWriteMultiple(pCtrl, OV2640_YUV422);
 80011f8:	4911      	ldr	r1, [pc, #68]	; (8001240 <setDefaultSettings+0x84>)
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f88a 	bl	8001314 <i2cWriteMultiple>
	i2cWriteMultiple(pCtrl, OV2640_JPEG);
 8001200:	4910      	ldr	r1, [pc, #64]	; (8001244 <setDefaultSettings+0x88>)
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f886 	bl	8001314 <i2cWriteMultiple>
	data = 0x01;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0xFF, data);
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	461a      	mov	r2, r3
 8001210:	21ff      	movs	r1, #255	; 0xff
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f84a 	bl	80012ac <i2cRegWrite>
	data = 0x00;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0x15, data);
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	461a      	mov	r2, r3
 8001220:	2115      	movs	r1, #21
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f842 	bl	80012ac <i2cRegWrite>
	i2cWriteMultiple(pCtrl, OV2640_320x240_JPEG);
 8001228:	4907      	ldr	r1, [pc, #28]	; (8001248 <setDefaultSettings+0x8c>)
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f872 	bl	8001314 <i2cWriteMultiple>

	// Sets VSync Polarity Low
	/*data = 0x02;
	spiRegWrite(pCtrl, (uint8_t)0x03, data);*/

}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	0800d13c 	.word	0x0800d13c
 800123c:	0800dc08 	.word	0x0800dc08
 8001240:	0800dd88 	.word	0x0800dd88
 8001244:	0800dd9c 	.word	0x0800dd9c
 8001248:	0800ddb0 	.word	0x0800ddb0

0800124c <isSPIWorking>:


int isSPIWorking(ArducamController *pCtrl){
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	uint8_t origVal = 0x00;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
	uint8_t testVal = 0xAB;
 8001258:	23ab      	movs	r3, #171	; 0xab
 800125a:	73bb      	strb	r3, [r7, #14]
	uint8_t newVal = 0x00;
 800125c:	2300      	movs	r3, #0
 800125e:	737b      	strb	r3, [r7, #13]

	origVal = spiRegRead(pCtrl, TEST_REGISTER);
 8001260:	2100      	movs	r1, #0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f8ce 	bl	8001404 <spiRegRead>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
	testVal = origVal + 1;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	3301      	adds	r3, #1
 8001270:	73bb      	strb	r3, [r7, #14]
	if(spiRegWrite(pCtrl, TEST_REGISTER, testVal) != HAL_OK){
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	461a      	mov	r2, r3
 8001276:	2100      	movs	r1, #0
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f86b 	bl	8001354 <spiRegWrite>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <isSPIWorking+0x3c>
		return 0;
 8001284:	2300      	movs	r3, #0
 8001286:	e00c      	b.n	80012a2 <isSPIWorking+0x56>
	}
	newVal = spiRegRead(pCtrl, TEST_REGISTER);
 8001288:	2100      	movs	r1, #0
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f8ba 	bl	8001404 <spiRegRead>
 8001290:	4603      	mov	r3, r0
 8001292:	737b      	strb	r3, [r7, #13]

	return (newVal == testVal);
 8001294:	7b7a      	ldrb	r2, [r7, #13]
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	429a      	cmp	r2, r3
 800129a:	bf0c      	ite	eq
 800129c:	2301      	moveq	r3, #1
 800129e:	2300      	movne	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <i2cRegWrite>:

/*To Write over i2c:
* Request I2C_ADDR_WRITE -> Send Cam Register Address (left shift device addr's by 1) -> Send Data bytes
*/
void i2cRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t data){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
 80012b8:	4613      	mov	r3, r2
 80012ba:	70bb      	strb	r3, [r7, #2]
	printf("(I2C) Writing 0x%04X to Reg 0x%02X\n", data, reg);
 80012bc:	78bb      	ldrb	r3, [r7, #2]
 80012be:	78fa      	ldrb	r2, [r7, #3]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4812      	ldr	r0, [pc, #72]	; (800130c <i2cRegWrite+0x60>)
 80012c4:	f00a ff5a 	bl	800c17c <iprintf>

	uint8_t transmission[2] = {reg, data};
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	733b      	strb	r3, [r7, #12]
 80012cc:	78bb      	ldrb	r3, [r7, #2]
 80012ce:	737b      	strb	r3, [r7, #13]

	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, transmission, 2, CAM_TIMEOUT);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6858      	ldr	r0, [r3, #4]
 80012d4:	f107 020c 	add.w	r2, r7, #12
 80012d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2302      	movs	r3, #2
 80012e0:	2160      	movs	r1, #96	; 0x60
 80012e2:	f002 fdd7 	bl	8003e94 <HAL_I2C_Master_Transmit>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	701a      	strb	r2, [r3, #0]
	if(pCtrl->status != HAL_OK){
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <i2cRegWrite+0x56>
		printf("FAILED Writing I2C Reg\n");
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <i2cRegWrite+0x64>)
 80012f8:	f00a ffa6 	bl	800c248 <puts>
		printStatus(pCtrl);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f001 f861 	bl	80023c4 <printStatus>
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, pData, (uint16_t) size, CAM_TIMEOUT);
	if(pCtrl->status != HAL_OK){
		printf("FAILED Writing I2C Data\n");
		printStatus(pCtrl);
	}*/
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	0800d15c 	.word	0x0800d15c
 8001310:	0800d180 	.word	0x0800d180

08001314 <i2cWriteMultiple>:
	printf("(I2C) Read 0x%02X from 0x%02X\n", data, reg);
	return data;

}

void i2cWriteMultiple(ArducamController* pCtrl, const struct SensorReg *regList){
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	struct SensorReg *current = (struct SensorReg *) regList;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	60fb      	str	r3, [r7, #12]

	while(current->addr != 0xFF || current->val != 0xFF){
 8001322:	e00a      	b.n	800133a <i2cWriteMultiple+0x26>
		i2cRegWrite(pCtrl, current->addr, current->val);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	7819      	ldrb	r1, [r3, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	785b      	ldrb	r3, [r3, #1]
 800132c:	461a      	mov	r2, r3
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffbc 	bl	80012ac <i2cRegWrite>
		current++;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3302      	adds	r3, #2
 8001338:	60fb      	str	r3, [r7, #12]
	while(current->addr != 0xFF || current->val != 0xFF){
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2bff      	cmp	r3, #255	; 0xff
 8001340:	d1f0      	bne.n	8001324 <i2cWriteMultiple+0x10>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	785b      	ldrb	r3, [r3, #1]
 8001346:	2bff      	cmp	r3, #255	; 0xff
 8001348:	d1ec      	bne.n	8001324 <i2cWriteMultiple+0x10>
	}

}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <spiRegWrite>:

HAL_StatusTypeDef spiRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t data){
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
 8001360:	4613      	mov	r3, r2
 8001362:	70bb      	strb	r3, [r7, #2]
	cam_enable(pCtrl); // CS Pin Set LOW
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f930 	bl	80015ca <cam_enable>
	HAL_Delay(CS_DELAY);
 800136a:	2000      	movs	r0, #0
 800136c:	f002 f9fe 	bl	800376c <HAL_Delay>
	uint8_t maskedAddr = reg | SPI_WRITE_MASK; // a 1 followed by Reg addr, to write to reg
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001376:	b2db      	uxtb	r3, r3
 8001378:	73fb      	strb	r3, [r7, #15]

	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, &maskedAddr, 1, CAM_TIMEOUT);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6898      	ldr	r0, [r3, #8]
 800137e:	f107 010f 	add.w	r1, r7, #15
 8001382:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001386:	2201      	movs	r2, #1
 8001388:	f004 ff48 	bl	800621c <HAL_SPI_Transmit>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	701a      	strb	r2, [r3, #0]
	printf("(SPI) Writing 0x%02X to 0x%02X | cmd = 0x%02X\n", data, reg, maskedAddr);
 8001394:	78bb      	ldrb	r3, [r7, #2]
 8001396:	4619      	mov	r1, r3
 8001398:	78fa      	ldrb	r2, [r7, #3]
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	4816      	ldr	r0, [pc, #88]	; (80013f8 <spiRegWrite+0xa4>)
 800139e:	f00a feed 	bl	800c17c <iprintf>
	if(pCtrl->status != HAL_OK){
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <spiRegWrite+0x62>
		printf("FAILED Sending SPI_READ_MASK\n");
 80013aa:	4814      	ldr	r0, [pc, #80]	; (80013fc <spiRegWrite+0xa8>)
 80013ac:	f00a ff4c 	bl	800c248 <puts>
		printStatus(pCtrl);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f001 f807 	bl	80023c4 <printStatus>
	}
	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, &data, 1, CAM_TIMEOUT);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6898      	ldr	r0, [r3, #8]
 80013ba:	1cb9      	adds	r1, r7, #2
 80013bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013c0:	2201      	movs	r2, #1
 80013c2:	f004 ff2b 	bl	800621c <HAL_SPI_Transmit>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	701a      	strb	r2, [r3, #0]
	if(pCtrl->status != HAL_OK){
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d007      	beq.n	80013e6 <spiRegWrite+0x92>
		printf("FAILED Writing SPI Reg 0x%02X\n", reg);
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	4619      	mov	r1, r3
 80013da:	4809      	ldr	r0, [pc, #36]	; (8001400 <spiRegWrite+0xac>)
 80013dc:	f00a fece 	bl	800c17c <iprintf>
		printStatus(pCtrl);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 ffef 	bl	80023c4 <printStatus>
	}
	cam_disable(pCtrl);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f8ff 	bl	80015ea <cam_disable>
	return pCtrl->status;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	781b      	ldrb	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	0800d1d0 	.word	0x0800d1d0
 80013fc:	0800d200 	.word	0x0800d200
 8001400:	0800d220 	.word	0x0800d220

08001404 <spiRegRead>:

uint8_t spiRegRead(ArducamController* pCtrl, uint8_t reg){
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af02      	add	r7, sp, #8
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
	cam_enable(pCtrl);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f8da 	bl	80015ca <cam_enable>
	HAL_Delay(CS_DELAY);
 8001416:	2000      	movs	r0, #0
 8001418:	f002 f9a8 	bl	800376c <HAL_Delay>
	uint8_t maskedAddr = reg & SPI_READ_MASK; // a 0 followed by register to read
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001422:	b2db      	uxtb	r3, r3
 8001424:	73fb      	strb	r3, [r7, #15]
	uint8_t dummyByte = 0x00;
 8001426:	2300      	movs	r3, #0
 8001428:	73bb      	strb	r3, [r7, #14]
	uint8_t dataByte = 0x00;
 800142a:	2300      	movs	r3, #0
 800142c:	737b      	strb	r3, [r7, #13]

	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &maskedAddr, &dataByte, 1, CAM_TIMEOUT);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6898      	ldr	r0, [r3, #8]
 8001432:	f107 020d 	add.w	r2, r7, #13
 8001436:	f107 010f 	add.w	r1, r7, #15
 800143a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	f005 f997 	bl	8006774 <HAL_SPI_TransmitReceive>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	701a      	strb	r2, [r3, #0]
	if(pCtrl->status != HAL_OK){
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <spiRegRead+0x5e>
		printf("FAILED Sending SPI_READ_MASK\n");
 8001456:	4818      	ldr	r0, [pc, #96]	; (80014b8 <spiRegRead+0xb4>)
 8001458:	f00a fef6 	bl	800c248 <puts>
		printStatus(pCtrl);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 ffb1 	bl	80023c4 <printStatus>
	}
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &dummyByte, &dataByte, 1, CAM_TIMEOUT);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6898      	ldr	r0, [r3, #8]
 8001466:	f107 020d 	add.w	r2, r7, #13
 800146a:	f107 010e 	add.w	r1, r7, #14
 800146e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	f005 f97d 	bl	8006774 <HAL_SPI_TransmitReceive>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	701a      	strb	r2, [r3, #0]
	if(pCtrl->status != HAL_OK){
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <spiRegRead+0x96>
		printf("FAILED Reading SPI Reg 0x%02X\n", reg);
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	4619      	mov	r1, r3
 800148e:	480b      	ldr	r0, [pc, #44]	; (80014bc <spiRegRead+0xb8>)
 8001490:	f00a fe74 	bl	800c17c <iprintf>
		printStatus(pCtrl);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 ff95 	bl	80023c4 <printStatus>
	}
	cam_disable(pCtrl);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f8a5 	bl	80015ea <cam_disable>
	printf("(SPI) Read 0x%02X from 0x%02X\n", dataByte, reg);
 80014a0:	7b7b      	ldrb	r3, [r7, #13]
 80014a2:	4619      	mov	r1, r3
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <spiRegRead+0xbc>)
 80014aa:	f00a fe67 	bl	800c17c <iprintf>
	return dataByte;
 80014ae:	7b7b      	ldrb	r3, [r7, #13]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	0800d200 	.word	0x0800d200
 80014bc:	0800d240 	.word	0x0800d240
 80014c0:	0800d260 	.word	0x0800d260

080014c4 <isFIFOReady>:

//Returns FIFO 'finished' flag. 0 -> FIFO is busy, 1 -> capture is finished
int isFIFOReady(ArducamController* pCtrl){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	uint8_t registerData = spiRegRead(pCtrl, FIFO_STATUS_REG);
 80014cc:	2141      	movs	r1, #65	; 0x41
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ff98 	bl	8001404 <spiRegRead>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]

	int isFinished = checkBit(registerData, 3);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2103      	movs	r1, #3
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 ff31 	bl	8002344 <checkBit>
 80014e2:	60b8      	str	r0, [r7, #8]
	//printf("FIFO Ready Flag : %d\n", isFinished);
	return isFinished;
 80014e4:	68bb      	ldr	r3, [r7, #8]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <resetCPLD>:

//Resets the CPLD
void resetCPLD(ArducamController* pCtrl){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	printf("Resetting Arducam CPLD\n\r");
 80014f8:	480e      	ldr	r0, [pc, #56]	; (8001534 <resetCPLD+0x44>)
 80014fa:	f00a fe3f 	bl	800c17c <iprintf>
	uint8_t cmd = 0x80;
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, 0x07, cmd);
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	461a      	mov	r2, r3
 8001506:	2107      	movs	r1, #7
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff23 	bl	8001354 <spiRegWrite>
	HAL_Delay(100);
 800150e:	2064      	movs	r0, #100	; 0x64
 8001510:	f002 f92c 	bl	800376c <HAL_Delay>
	cmd = 0x00;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, 0x07, cmd);
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	461a      	mov	r2, r3
 800151c:	2107      	movs	r1, #7
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff18 	bl	8001354 <spiRegWrite>
	HAL_Delay(100);
 8001524:	2064      	movs	r0, #100	; 0x64
 8001526:	f002 f921 	bl	800376c <HAL_Delay>
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	0800d280 	.word	0x0800d280

08001538 <clearFIFOFlag>:

void clearFIFOFlag(ArducamController* pCtrl){
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_FLAG_CLR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, cmd);
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	461a      	mov	r2, r3
 8001548:	2104      	movs	r1, #4
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff02 	bl	8001354 <spiRegWrite>
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <resetFIFOPointers>:

void resetFIFOPointers(ArducamController* pCtrl){
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_PTR_CLR;
 8001560:	2330      	movs	r3, #48	; 0x30
 8001562:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, cmd);
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	461a      	mov	r2, r3
 8001568:	2104      	movs	r1, #4
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fef2 	bl	8001354 <spiRegWrite>
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <setCaptureFlag>:

void setCaptureFlag(ArducamController* pCtrl){
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	uint8_t cmd = SET_CAPTURE_FLAG;
 8001580:	2302      	movs	r3, #2
 8001582:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, cmd);
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	461a      	mov	r2, r3
 8001588:	2104      	movs	r1, #4
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fee2 	bl	8001354 <spiRegWrite>
}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <setNCaptureFrames>:

void setNCaptureFrames(ArducamController* pCtrl, int n){
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
	uint8_t cmd = 0x01;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
	if((0 < n) && (n <= 7)){ cmd = (uint8_t) n; }
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	dd04      	ble.n	80015b6 <setNCaptureFrames+0x1e>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2b07      	cmp	r3, #7
 80015b0:	dc01      	bgt.n	80015b6 <setNCaptureFrames+0x1e>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	73fb      	strb	r3, [r7, #15]

	spiRegWrite(pCtrl, CAPTURE_CONTROL_REG, cmd);
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	461a      	mov	r2, r3
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fec9 	bl	8001354 <spiRegWrite>
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <cam_enable>:

void cam_enable(ArducamController* pCtrl){
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pCSPort, pCtrl->csPinNo, GPIO_PIN_RESET);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68d8      	ldr	r0, [r3, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	8a1b      	ldrh	r3, [r3, #16]
 80015da:	2200      	movs	r2, #0
 80015dc:	4619      	mov	r1, r3
 80015de:	f002 fba5 	bl	8003d2c <HAL_GPIO_WritePin>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <cam_disable>:

void cam_disable(ArducamController* pCtrl){
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pCSPort, pCtrl->csPinNo, GPIO_PIN_SET);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68d8      	ldr	r0, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	8a1b      	ldrh	r3, [r3, #16]
 80015fa:	2201      	movs	r2, #1
 80015fc:	4619      	mov	r1, r3
 80015fe:	f002 fb95 	bl	8003d2c <HAL_GPIO_WritePin>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <shutter>:

void shutter(ArducamController* pCtrl){
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	flashOn(pCtrl);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f80b 	bl	800162e <flashOn>
	HAL_Delay(SHUTTER_DELAY);
 8001618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800161c:	f002 f8a6 	bl	800376c <HAL_Delay>
	flashOff(pCtrl);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f814 	bl	800164e <flashOff>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <flashOn>:

void flashOn(ArducamController* pCtrl){
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pFlashPort, pCtrl->flashPinNo, GPIO_PIN_SET);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6958      	ldr	r0, [r3, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	8b1b      	ldrh	r3, [r3, #24]
 800163e:	2201      	movs	r2, #1
 8001640:	4619      	mov	r1, r3
 8001642:	f002 fb73 	bl	8003d2c <HAL_GPIO_WritePin>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <flashOff>:

void flashOff(ArducamController* pCtrl){
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pFlashPort, pCtrl->flashPinNo, GPIO_PIN_RESET);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6958      	ldr	r0, [r3, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	8b1b      	ldrh	r3, [r3, #24]
 800165e:	2200      	movs	r2, #0
 8001660:	4619      	mov	r1, r3
 8001662:	f002 fb63 	bl	8003d2c <HAL_GPIO_WritePin>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <registerDump>:

//Prints all of the relevant registers in the Arducam
void registerDump(ArducamController* pCtrl){
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	uint8_t data;
	printf("Register Table:\n");
 8001678:	4830      	ldr	r0, [pc, #192]	; (800173c <registerDump+0xcc>)
 800167a:	f00a fde5 	bl	800c248 <puts>
	i2cRegRead(pCtrl, FIFO_BYTE1, &data, 1);
	printf("FIFO Byte 1: 0x%02X\n", data);
	i2cRegRead(pCtrl, FIFO_BYTE2, &data, 1);
	printf("FIFO Byte 2: 0x%02X\n", data);*/

	printf("(SPI Read)\n");
 800167e:	4830      	ldr	r0, [pc, #192]	; (8001740 <registerDump+0xd0>)
 8001680:	f00a fde2 	bl	800c248 <puts>
	data = spiRegRead(pCtrl, TEST_REGISTER);
 8001684:	2100      	movs	r1, #0
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff febc 	bl	8001404 <spiRegRead>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
	printf("Test Register: 0x%02X\n", data);
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	4619      	mov	r1, r3
 8001694:	482b      	ldr	r0, [pc, #172]	; (8001744 <registerDump+0xd4>)
 8001696:	f00a fd71 	bl	800c17c <iprintf>
	data = spiRegRead(pCtrl, CAPTURE_CONTROL_REG);
 800169a:	2101      	movs	r1, #1
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff feb1 	bl	8001404 <spiRegRead>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]
	printf("Capture Control Register: 0x%02X\n", data);
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4827      	ldr	r0, [pc, #156]	; (8001748 <registerDump+0xd8>)
 80016ac:	f00a fd66 	bl	800c17c <iprintf>
	data = spiRegRead(pCtrl, FIFO_CONTROL_REG);
 80016b0:	2104      	movs	r1, #4
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fea6 	bl	8001404 <spiRegRead>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
	printf("FIFO Control Register: 0x%02X\n", data);
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	4619      	mov	r1, r3
 80016c0:	4822      	ldr	r0, [pc, #136]	; (800174c <registerDump+0xdc>)
 80016c2:	f00a fd5b 	bl	800c17c <iprintf>
	data = spiRegRead(pCtrl, CHIP_VERSION_REG);
 80016c6:	2140      	movs	r1, #64	; 0x40
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fe9b 	bl	8001404 <spiRegRead>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
	printf("Chip Version: 0x%02X\n", data);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4619      	mov	r1, r3
 80016d6:	481e      	ldr	r0, [pc, #120]	; (8001750 <registerDump+0xe0>)
 80016d8:	f00a fd50 	bl	800c17c <iprintf>
	data = spiRegRead(pCtrl, FIFO_STATUS_REG);
 80016dc:	2141      	movs	r1, #65	; 0x41
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fe90 	bl	8001404 <spiRegRead>
 80016e4:	4603      	mov	r3, r0
 80016e6:	73fb      	strb	r3, [r7, #15]
	printf("FIFO Status Register: 0x%02X\n", data);
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	4619      	mov	r1, r3
 80016ec:	4819      	ldr	r0, [pc, #100]	; (8001754 <registerDump+0xe4>)
 80016ee:	f00a fd45 	bl	800c17c <iprintf>
	data = spiRegRead(pCtrl, FIFO_BYTE0);
 80016f2:	2142      	movs	r1, #66	; 0x42
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fe85 	bl	8001404 <spiRegRead>
 80016fa:	4603      	mov	r3, r0
 80016fc:	73fb      	strb	r3, [r7, #15]
	printf("FIFO Byte 0: 0x%02X\n", data);
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	4619      	mov	r1, r3
 8001702:	4815      	ldr	r0, [pc, #84]	; (8001758 <registerDump+0xe8>)
 8001704:	f00a fd3a 	bl	800c17c <iprintf>
	data = spiRegRead(pCtrl, FIFO_BYTE1);
 8001708:	2143      	movs	r1, #67	; 0x43
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fe7a 	bl	8001404 <spiRegRead>
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]
	printf("FIFO Byte 1: 0x%02X\n", data);
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	4619      	mov	r1, r3
 8001718:	4810      	ldr	r0, [pc, #64]	; (800175c <registerDump+0xec>)
 800171a:	f00a fd2f 	bl	800c17c <iprintf>
	data = spiRegRead(pCtrl, FIFO_BYTE2);
 800171e:	2144      	movs	r1, #68	; 0x44
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fe6f 	bl	8001404 <spiRegRead>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
	printf("FIFO Byte 2: 0x%02X\n", data);
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	4619      	mov	r1, r3
 800172e:	480c      	ldr	r0, [pc, #48]	; (8001760 <registerDump+0xf0>)
 8001730:	f00a fd24 	bl	800c17c <iprintf>

}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	0800d29c 	.word	0x0800d29c
 8001740:	0800d2ac 	.word	0x0800d2ac
 8001744:	0800d2b8 	.word	0x0800d2b8
 8001748:	0800d2d0 	.word	0x0800d2d0
 800174c:	0800d2f4 	.word	0x0800d2f4
 8001750:	0800d314 	.word	0x0800d314
 8001754:	0800d32c 	.word	0x0800d32c
 8001758:	0800d34c 	.word	0x0800d34c
 800175c:	0800d364 	.word	0x0800d364
 8001760:	0800d37c 	.word	0x0800d37c

08001764 <picToBase64>:

const char BASE64LOOKUPTABLE[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

//Fills the base64 buffer
void picToBase64(ArducamController* pCtrl){
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  printf("Converting data to Base64...\n");
 800176c:	489d      	ldr	r0, [pc, #628]	; (80019e4 <picToBase64+0x280>)
 800176e:	f00a fd6b 	bl	800c248 <puts>

  uint8_t *inputBytes = pCtrl->pictureBuffer;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	331a      	adds	r3, #26
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t nBytes = pCtrl->pictureBufferSize;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800177e:	f8b3 3572 	ldrh.w	r3, [r3, #1394]	; 0x572
 8001782:	84fb      	strh	r3, [r7, #38]	; 0x26
  char *output = pCtrl->base64Buffer;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178a:	331a      	adds	r3, #26
 800178c:	623b      	str	r3, [r7, #32]
  uint32_t byte0, byte1, byte2;
  uint8_t base64Digit0, base64Digit1, base64Digit2, base64Digit3;
  uint8_t tableIdx0, tableIdx1, tableIdx2, tableIdx3;
  uint32_t threeByteCombo;

  uint16_t inputIdx = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t outputIdx = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	85bb      	strh	r3, [r7, #44]	; 0x2c
  while(inputIdx < nBytes-2){
 8001796:	e059      	b.n	800184c <picToBase64+0xe8>
    byte0 = inputBytes[inputIdx];
 8001798:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800179a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800179c:	4413      	add	r3, r2
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	61fb      	str	r3, [r7, #28]
    byte1 = inputBytes[inputIdx+1];
 80017a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017a4:	3301      	adds	r3, #1
 80017a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017a8:	4413      	add	r3, r2
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	61bb      	str	r3, [r7, #24]
    byte2 = inputBytes[inputIdx+2];
 80017ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017b0:	3302      	adds	r3, #2
 80017b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017b4:	4413      	add	r3, r2
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	617b      	str	r3, [r7, #20]
    threeByteCombo = ((byte0 << 16) | (byte1 << 8) | byte2); // 24 bits
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	041a      	lsls	r2, r3, #16
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	4313      	orrs	r3, r2
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]

    // Turn every 6 bits into a Base64 digit
    tableIdx0 = (threeByteCombo >> 18);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	0c9b      	lsrs	r3, r3, #18
 80017ce:	73fb      	strb	r3, [r7, #15]
    tableIdx1 = (threeByteCombo >> 12) & 0x3F;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	0b1b      	lsrs	r3, r3, #12
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017da:	73bb      	strb	r3, [r7, #14]
    tableIdx2 = (threeByteCombo >> 6) & 0x3F;
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	099b      	lsrs	r3, r3, #6
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017e6:	737b      	strb	r3, [r7, #13]
    tableIdx3 = threeByteCombo & 0x3F;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f0:	733b      	strb	r3, [r7, #12]

    base64Digit0 = BASE64LOOKUPTABLE[tableIdx0];
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	4a7c      	ldr	r2, [pc, #496]	; (80019e8 <picToBase64+0x284>)
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
 80017f8:	72fb      	strb	r3, [r7, #11]
    base64Digit1 = BASE64LOOKUPTABLE[tableIdx1];
 80017fa:	7bbb      	ldrb	r3, [r7, #14]
 80017fc:	4a7a      	ldr	r2, [pc, #488]	; (80019e8 <picToBase64+0x284>)
 80017fe:	5cd3      	ldrb	r3, [r2, r3]
 8001800:	72bb      	strb	r3, [r7, #10]
    base64Digit2 = BASE64LOOKUPTABLE[tableIdx2];
 8001802:	7b7b      	ldrb	r3, [r7, #13]
 8001804:	4a78      	ldr	r2, [pc, #480]	; (80019e8 <picToBase64+0x284>)
 8001806:	5cd3      	ldrb	r3, [r2, r3]
 8001808:	727b      	strb	r3, [r7, #9]
    base64Digit3 = BASE64LOOKUPTABLE[tableIdx3];
 800180a:	7b3b      	ldrb	r3, [r7, #12]
 800180c:	4a76      	ldr	r2, [pc, #472]	; (80019e8 <picToBase64+0x284>)
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	723b      	strb	r3, [r7, #8]

    output[outputIdx] = (char) base64Digit0;
 8001812:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001814:	6a3a      	ldr	r2, [r7, #32]
 8001816:	4413      	add	r3, r2
 8001818:	7afa      	ldrb	r2, [r7, #11]
 800181a:	701a      	strb	r2, [r3, #0]
    output[outputIdx + 1] = (char) base64Digit1;
 800181c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800181e:	3301      	adds	r3, #1
 8001820:	6a3a      	ldr	r2, [r7, #32]
 8001822:	4413      	add	r3, r2
 8001824:	7aba      	ldrb	r2, [r7, #10]
 8001826:	701a      	strb	r2, [r3, #0]
    output[outputIdx + 2] = (char) base64Digit2;
 8001828:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800182a:	3302      	adds	r3, #2
 800182c:	6a3a      	ldr	r2, [r7, #32]
 800182e:	4413      	add	r3, r2
 8001830:	7a7a      	ldrb	r2, [r7, #9]
 8001832:	701a      	strb	r2, [r3, #0]
    output[outputIdx + 3] = (char) base64Digit3;
 8001834:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001836:	3303      	adds	r3, #3
 8001838:	6a3a      	ldr	r2, [r7, #32]
 800183a:	4413      	add	r3, r2
 800183c:	7a3a      	ldrb	r2, [r7, #8]
 800183e:	701a      	strb	r2, [r3, #0]

    inputIdx += 3;
 8001840:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001842:	3303      	adds	r3, #3
 8001844:	85fb      	strh	r3, [r7, #46]	; 0x2e
    outputIdx += 4;
 8001846:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001848:	3304      	adds	r3, #4
 800184a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  while(inputIdx < nBytes-2){
 800184c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800184e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001850:	3b02      	subs	r3, #2
 8001852:	429a      	cmp	r2, r3
 8001854:	dba0      	blt.n	8001798 <picToBase64+0x34>
  }

  // Padding if necessary
  if((nBytes-1)%3 == 2){
 8001856:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001858:	1e59      	subs	r1, r3, #1
 800185a:	4b64      	ldr	r3, [pc, #400]	; (80019ec <picToBase64+0x288>)
 800185c:	fb83 3201 	smull	r3, r2, r3, r1
 8001860:	17cb      	asrs	r3, r1, #31
 8001862:	1ad2      	subs	r2, r2, r3
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	1aca      	subs	r2, r1, r3
 800186c:	2a02      	cmp	r2, #2
 800186e:	d152      	bne.n	8001916 <picToBase64+0x1b2>

    byte0 = inputBytes[nBytes-2];
 8001870:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001872:	3b02      	subs	r3, #2
 8001874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	61fb      	str	r3, [r7, #28]
    byte1 = inputBytes[nBytes-1];
 800187c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800187e:	3b01      	subs	r3, #1
 8001880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	61bb      	str	r3, [r7, #24]
    byte2 = 0; //Will need to pad here
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
    threeByteCombo = ((byte0 << 16) | (byte1 << 8) | byte2); // 24 bits
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	041a      	lsls	r2, r3, #16
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	4313      	orrs	r3, r2
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

    // Turn every 6 bits into a Base64 digit
    tableIdx0 = (threeByteCombo >> 18);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	0c9b      	lsrs	r3, r3, #18
 80018a0:	73fb      	strb	r3, [r7, #15]
    tableIdx1 = (threeByteCombo >> 12) & 0x3F;
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	0b1b      	lsrs	r3, r3, #12
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018ac:	73bb      	strb	r3, [r7, #14]
    tableIdx2 = (threeByteCombo >> 6) & 0x3F;
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	099b      	lsrs	r3, r3, #6
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b8:	737b      	strb	r3, [r7, #13]
    tableIdx3 = threeByteCombo & 0x3F;
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018c2:	733b      	strb	r3, [r7, #12]

    base64Digit0 = BASE64LOOKUPTABLE[tableIdx0];
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	4a48      	ldr	r2, [pc, #288]	; (80019e8 <picToBase64+0x284>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	72fb      	strb	r3, [r7, #11]
    base64Digit1 = BASE64LOOKUPTABLE[tableIdx1];
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <picToBase64+0x284>)
 80018d0:	5cd3      	ldrb	r3, [r2, r3]
 80018d2:	72bb      	strb	r3, [r7, #10]
    base64Digit2 = BASE64LOOKUPTABLE[tableIdx2];
 80018d4:	7b7b      	ldrb	r3, [r7, #13]
 80018d6:	4a44      	ldr	r2, [pc, #272]	; (80019e8 <picToBase64+0x284>)
 80018d8:	5cd3      	ldrb	r3, [r2, r3]
 80018da:	727b      	strb	r3, [r7, #9]
    base64Digit3 = '=';
 80018dc:	233d      	movs	r3, #61	; 0x3d
 80018de:	723b      	strb	r3, [r7, #8]

    output[outputIdx] = (char) base64Digit0;
 80018e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018e2:	6a3a      	ldr	r2, [r7, #32]
 80018e4:	4413      	add	r3, r2
 80018e6:	7afa      	ldrb	r2, [r7, #11]
 80018e8:	701a      	strb	r2, [r3, #0]
	output[outputIdx + 1] = (char) base64Digit1;
 80018ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018ec:	3301      	adds	r3, #1
 80018ee:	6a3a      	ldr	r2, [r7, #32]
 80018f0:	4413      	add	r3, r2
 80018f2:	7aba      	ldrb	r2, [r7, #10]
 80018f4:	701a      	strb	r2, [r3, #0]
	output[outputIdx + 2] = (char) base64Digit2;
 80018f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018f8:	3302      	adds	r3, #2
 80018fa:	6a3a      	ldr	r2, [r7, #32]
 80018fc:	4413      	add	r3, r2
 80018fe:	7a7a      	ldrb	r2, [r7, #9]
 8001900:	701a      	strb	r2, [r3, #0]
	output[outputIdx + 3] = (char) base64Digit3;
 8001902:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001904:	3303      	adds	r3, #3
 8001906:	6a3a      	ldr	r2, [r7, #32]
 8001908:	4413      	add	r3, r2
 800190a:	7a3a      	ldrb	r2, [r7, #8]
 800190c:	701a      	strb	r2, [r3, #0]
	outputIdx += 4;
 800190e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001910:	3304      	adds	r3, #4
 8001912:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001914:	e058      	b.n	80019c8 <picToBase64+0x264>
  } else if ((nBytes-1)%3 == 1){
 8001916:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001918:	1e59      	subs	r1, r3, #1
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <picToBase64+0x288>)
 800191c:	fb83 3201 	smull	r3, r2, r3, r1
 8001920:	17cb      	asrs	r3, r1, #31
 8001922:	1ad2      	subs	r2, r2, r3
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	1aca      	subs	r2, r1, r3
 800192c:	2a01      	cmp	r2, #1
 800192e:	d14b      	bne.n	80019c8 <picToBase64+0x264>
    byte0 = inputBytes[nBytes-1];
 8001930:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001932:	3b01      	subs	r3, #1
 8001934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	61fb      	str	r3, [r7, #28]
    byte1 = 0; //Will need to pad here
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
    byte2 = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
    threeByteCombo = ((byte0 << 16) | (byte1 << 8) | byte2); // 24 bits
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	041a      	lsls	r2, r3, #16
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	4313      	orrs	r3, r2
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]

    // Turn every 6 bits into a Base64 digit
    tableIdx0 = (threeByteCombo >> 18);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	0c9b      	lsrs	r3, r3, #18
 8001958:	73fb      	strb	r3, [r7, #15]
    tableIdx1 = (threeByteCombo >> 12) & 0x3F;
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	0b1b      	lsrs	r3, r3, #12
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001964:	73bb      	strb	r3, [r7, #14]
    tableIdx2 = (threeByteCombo >> 6) & 0x3F;
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001970:	737b      	strb	r3, [r7, #13]
    tableIdx3 = threeByteCombo & 0x3F;
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800197a:	733b      	strb	r3, [r7, #12]

    base64Digit0 = BASE64LOOKUPTABLE[tableIdx0];
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	4a1a      	ldr	r2, [pc, #104]	; (80019e8 <picToBase64+0x284>)
 8001980:	5cd3      	ldrb	r3, [r2, r3]
 8001982:	72fb      	strb	r3, [r7, #11]
    base64Digit1 = BASE64LOOKUPTABLE[tableIdx1];
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <picToBase64+0x284>)
 8001988:	5cd3      	ldrb	r3, [r2, r3]
 800198a:	72bb      	strb	r3, [r7, #10]
    base64Digit2 = '=';
 800198c:	233d      	movs	r3, #61	; 0x3d
 800198e:	727b      	strb	r3, [r7, #9]
    base64Digit3 = '=';
 8001990:	233d      	movs	r3, #61	; 0x3d
 8001992:	723b      	strb	r3, [r7, #8]

    output[outputIdx] = (char) base64Digit0;
 8001994:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001996:	6a3a      	ldr	r2, [r7, #32]
 8001998:	4413      	add	r3, r2
 800199a:	7afa      	ldrb	r2, [r7, #11]
 800199c:	701a      	strb	r2, [r3, #0]
	output[outputIdx + 1] = (char) base64Digit1;
 800199e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019a0:	3301      	adds	r3, #1
 80019a2:	6a3a      	ldr	r2, [r7, #32]
 80019a4:	4413      	add	r3, r2
 80019a6:	7aba      	ldrb	r2, [r7, #10]
 80019a8:	701a      	strb	r2, [r3, #0]
	output[outputIdx + 2] = (char) base64Digit2;
 80019aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019ac:	3302      	adds	r3, #2
 80019ae:	6a3a      	ldr	r2, [r7, #32]
 80019b0:	4413      	add	r3, r2
 80019b2:	7a7a      	ldrb	r2, [r7, #9]
 80019b4:	701a      	strb	r2, [r3, #0]
	output[outputIdx + 3] = (char) base64Digit3;
 80019b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019b8:	3303      	adds	r3, #3
 80019ba:	6a3a      	ldr	r2, [r7, #32]
 80019bc:	4413      	add	r3, r2
 80019be:	7a3a      	ldrb	r2, [r7, #8]
 80019c0:	701a      	strb	r2, [r3, #0]
	outputIdx += 4;
 80019c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019c4:	3304      	adds	r3, #4
 80019c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }

  pCtrl->base64Size = outputIdx;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019ce:	461a      	mov	r2, r3
 80019d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019d2:	f8a2 3570 	strh.w	r3, [r2, #1392]	; 0x570
  printSuccess("Picture Data Converted to Base64");
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <picToBase64+0x28c>)
 80019d8:	f000 fd0a 	bl	80023f0 <printSuccess>
  //printf("Base 64 Data = %s\n", pCtrl->base64Buffer);
}
 80019dc:	bf00      	nop
 80019de:	3730      	adds	r7, #48	; 0x30
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	0800d394 	.word	0x0800d394
 80019e8:	0800de00 	.word	0x0800de00
 80019ec:	55555556 	.word	0x55555556
 80019f0:	0800d3b4 	.word	0x0800d3b4

080019f4 <initSD>:

FATFS fatFS; 	//Fatfs handle
FIL file; 		//File handle
FRESULT fres; //Result after operations

HAL_StatusTypeDef initSD(SDController* pCtrl){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	printf("Initializing SD Controller...\n");
 80019fc:	480f      	ldr	r0, [pc, #60]	; (8001a3c <initSD+0x48>)
 80019fe:	f00a fc23 	bl	800c248 <puts>

	// Mount the File System
	if(mountFS(pCtrl) != HAL_OK){
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f840 	bl	8001a88 <mountFS>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00a      	beq.n	8001a24 <initSD+0x30>
		printf("FAILED SD Init\n | Status : %s\n", stat2Str(pCtrl->status));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fca8 	bl	8002368 <stat2Str>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4808      	ldr	r0, [pc, #32]	; (8001a40 <initSD+0x4c>)
 8001a1e:	f00a fbad 	bl	800c17c <iprintf>
 8001a22:	e004      	b.n	8001a2e <initSD+0x3a>
	} else {
		printf("SUCCESS SD Initialized\n");
 8001a24:	4807      	ldr	r0, [pc, #28]	; (8001a44 <initSD+0x50>)
 8001a26:	f00a fc0f 	bl	800c248 <puts>
		getSDStats();
 8001a2a:	f000 f887 	bl	8001b3c <getSDStats>
	}

	return pCtrl->status;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	781b      	ldrb	r3, [r3, #0]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	0800d3d8 	.word	0x0800d3d8
 8001a40:	0800d3f8 	.word	0x0800d3f8
 8001a44:	0800d418 	.word	0x0800d418

08001a48 <disconnectSD>:

HAL_StatusTypeDef disconnectSD(SDController* pCtrl){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	printf("Disconnecting SD Card...\n");
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <disconnectSD+0x34>)
 8001a52:	f00a fbf9 	bl	800c248 <puts>
	if(dismountFS(pCtrl) != HAL_OK){	//Took out closeFile() from here since it should be closed if(closeFile(pCtrl) && ...)
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f844 	bl	8001ae4 <dismountFS>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <disconnectSD+0x22>
		printf("FAILED Disconnecting SD\n");
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <disconnectSD+0x38>)
 8001a64:	f00a fbf0 	bl	800c248 <puts>
 8001a68:	e002      	b.n	8001a70 <disconnectSD+0x28>
	} else {
		printf("SUCCESS SD Disconnected\n");
 8001a6a:	4806      	ldr	r0, [pc, #24]	; (8001a84 <disconnectSD+0x3c>)
 8001a6c:	f00a fbec 	bl	800c248 <puts>
	}

	return pCtrl->status;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	781b      	ldrb	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	0800d430 	.word	0x0800d430
 8001a80:	0800d44c 	.word	0x0800d44c
 8001a84:	0800d464 	.word	0x0800d464

08001a88 <mountFS>:

HAL_StatusTypeDef mountFS(SDController *pCtrl){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	fres = f_mount(&fatFS, "", 1);
 8001a90:	2201      	movs	r2, #1
 8001a92:	490f      	ldr	r1, [pc, #60]	; (8001ad0 <mountFS+0x48>)
 8001a94:	480f      	ldr	r0, [pc, #60]	; (8001ad4 <mountFS+0x4c>)
 8001a96:	f009 fd7d 	bl	800b594 <f_mount>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <mountFS+0x50>)
 8001aa0:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK){
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <mountFS+0x50>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d009      	beq.n	8001abe <mountFS+0x36>
		printf("FAILED mounting FS | FRESULT : %i\n", fres);
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <mountFS+0x50>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480a      	ldr	r0, [pc, #40]	; (8001adc <mountFS+0x54>)
 8001ab2:	f00a fb63 	bl	800c17c <iprintf>
		pCtrl->status = HAL_ERROR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	e002      	b.n	8001ac4 <mountFS+0x3c>
	} else {
		printf("SUCCESS File System mounted\n");
 8001abe:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <mountFS+0x58>)
 8001ac0:	f00a fbc2 	bl	800c248 <puts>
	}
	return pCtrl->status;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	0800d47c 	.word	0x0800d47c
 8001ad4:	200000b8 	.word	0x200000b8
 8001ad8:	20000518 	.word	0x20000518
 8001adc:	0800d480 	.word	0x0800d480
 8001ae0:	0800d4a4 	.word	0x0800d4a4

08001ae4 <dismountFS>:

HAL_StatusTypeDef dismountFS(SDController* pCtrl){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	fres = f_mount(NULL, "", 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	490f      	ldr	r1, [pc, #60]	; (8001b2c <dismountFS+0x48>)
 8001af0:	2000      	movs	r0, #0
 8001af2:	f009 fd4f 	bl	800b594 <f_mount>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <dismountFS+0x4c>)
 8001afc:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK){
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <dismountFS+0x4c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <dismountFS+0x36>
		printf("FAILED dismounting FS | FRESULT : %i\n", fres);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <dismountFS+0x4c>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4809      	ldr	r0, [pc, #36]	; (8001b34 <dismountFS+0x50>)
 8001b0e:	f00a fb35 	bl	800c17c <iprintf>
		pCtrl->status = HAL_ERROR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	e002      	b.n	8001b20 <dismountFS+0x3c>
	} else {
		printf("SUCCESS File System mounted\n");
 8001b1a:	4807      	ldr	r0, [pc, #28]	; (8001b38 <dismountFS+0x54>)
 8001b1c:	f00a fb94 	bl	800c248 <puts>
	}
	return pCtrl->status;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	781b      	ldrb	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	0800d47c 	.word	0x0800d47c
 8001b30:	20000518 	.word	0x20000518
 8001b34:	0800d4c0 	.word	0x0800d4c0
 8001b38:	0800d4a4 	.word	0x0800d4a4

08001b3c <getSDStats>:

//Prints SD FS Stats
void getSDStats(){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
	DWORD freeClusters, freeSectors, totalSectors;
	FATFS* pFreeFS;

	fres = f_getfree("", &freeClusters, &pFreeFS);
 8001b42:	463a      	mov	r2, r7
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	4619      	mov	r1, r3
 8001b48:	4815      	ldr	r0, [pc, #84]	; (8001ba0 <getSDStats+0x64>)
 8001b4a:	f00a f944 	bl	800bdd6 <f_getfree>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <getSDStats+0x68>)
 8001b54:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK){
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <getSDStats+0x68>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d006      	beq.n	8001b6c <getSDStats+0x30>
		printf("FAILED to get SD stats | FRESULT : %i\n", fres);
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <getSDStats+0x68>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4810      	ldr	r0, [pc, #64]	; (8001ba8 <getSDStats+0x6c>)
 8001b66:	f00a fb09 	bl	800c17c <iprintf>
 8001b6a:	e016      	b.n	8001b9a <getSDStats+0x5e>
		return;
	}

	totalSectors = (pFreeFS->n_fatent - 2) * pFreeFS->csize;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	3b02      	subs	r3, #2
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	8952      	ldrh	r2, [r2, #10]
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	60fb      	str	r3, [r7, #12]
	freeSectors = freeClusters * pFreeFS->csize;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	895b      	ldrh	r3, [r3, #10]
 8001b80:	461a      	mov	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	fb02 f303 	mul.w	r3, r2, r3
 8001b88:	60bb      	str	r3, [r7, #8]

	printf("SD Stats:\n%10lu KB Total Capacity\n%10lu KB Free Space.\r\n", totalSectors / 2, freeSectors / 2);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	0859      	lsrs	r1, r3, #1
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	085b      	lsrs	r3, r3, #1
 8001b92:	461a      	mov	r2, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <getSDStats+0x70>)
 8001b96:	f00a faf1 	bl	800c17c <iprintf>
}
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	0800d47c 	.word	0x0800d47c
 8001ba4:	20000518 	.word	0x20000518
 8001ba8:	0800d4e8 	.word	0x0800d4e8
 8001bac:	0800d510 	.word	0x0800d510

08001bb0 <openFile>:

HAL_StatusTypeDef openFile(SDController* pCtrl, char* filename, BYTE perms){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	71fb      	strb	r3, [r7, #7]
	fres = f_open(&file, (const TCHAR*) filename, perms); // See if this mask works or if i have to split this over reads/writes
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	68b9      	ldr	r1, [r7, #8]
 8001bc4:	480f      	ldr	r0, [pc, #60]	; (8001c04 <openFile+0x54>)
 8001bc6:	f009 fd2b 	bl	800b620 <f_open>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <openFile+0x58>)
 8001bd0:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <openFile+0x58>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00a      	beq.n	8001bf0 <openFile+0x40>
		printf("FAILED to open '%s' | FRESULT : %i\n", filename, fres);
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <openFile+0x58>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	480a      	ldr	r0, [pc, #40]	; (8001c0c <openFile+0x5c>)
 8001be4:	f00a faca 	bl	800c17c <iprintf>
		pCtrl -> status = HAL_ERROR;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	e003      	b.n	8001bf8 <openFile+0x48>
	} else {
		printf("SUCCESS opening '%s'\n", filename);
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	4807      	ldr	r0, [pc, #28]	; (8001c10 <openFile+0x60>)
 8001bf4:	f00a fac2 	bl	800c17c <iprintf>
	}

	return pCtrl->status;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200002e8 	.word	0x200002e8
 8001c08:	20000518 	.word	0x20000518
 8001c0c:	0800d54c 	.word	0x0800d54c
 8001c10:	0800d570 	.word	0x0800d570

08001c14 <writeFile>:

	closeFile(pCtrl);
	return pCtrl->status;
}

HAL_StatusTypeDef writeFile(SDController *pCtrl, char *filename, void *dataToWrite, UINT length){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
	UINT bytesWrote;

	openFile(pCtrl, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001c22:	221a      	movs	r2, #26
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f7ff ffc2 	bl	8001bb0 <openFile>
	fres = f_write(&file, (const void*) dataToWrite, length, &bytesWrote);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4811      	ldr	r0, [pc, #68]	; (8001c7c <writeFile+0x68>)
 8001c36:	f009 feb1 	bl	800b99c <f_write>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <writeFile+0x6c>)
 8001c40:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) {
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <writeFile+0x6c>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d008      	beq.n	8001c5c <writeFile+0x48>
		printf("FAILED writing %d bytes to '%s' | \n", length, filename);
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	6839      	ldr	r1, [r7, #0]
 8001c4e:	480d      	ldr	r0, [pc, #52]	; (8001c84 <writeFile+0x70>)
 8001c50:	f00a fa94 	bl	800c17c <iprintf>
		pCtrl->status = HAL_ERROR;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e005      	b.n	8001c68 <writeFile+0x54>
	} else {
		printf("SUCCESS writing %d bytes to '%s'\n", bytesWrote, filename);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	4619      	mov	r1, r3
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <writeFile+0x74>)
 8001c64:	f00a fa8a 	bl	800c17c <iprintf>
	}

	closeFile(pCtrl);
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f80f 	bl	8001c8c <closeFile>
	return pCtrl->status;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	781b      	ldrb	r3, [r3, #0]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200002e8 	.word	0x200002e8
 8001c80:	20000518 	.word	0x20000518
 8001c84:	0800d5dc 	.word	0x0800d5dc
 8001c88:	0800d600 	.word	0x0800d600

08001c8c <closeFile>:

HAL_StatusTypeDef closeFile(SDController* pCtrl){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	fres = f_close(&file);
 8001c94:	480e      	ldr	r0, [pc, #56]	; (8001cd0 <closeFile+0x44>)
 8001c96:	f00a f874 	bl	800bd82 <f_close>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <closeFile+0x48>)
 8001ca0:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK){
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <closeFile+0x48>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <closeFile+0x32>
		printf("FAILED to close file | FRESULT : %i\n", fres);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <closeFile+0x48>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <closeFile+0x4c>)
 8001cb2:	f00a fa63 	bl	800c17c <iprintf>
		pCtrl->status = HAL_ERROR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e002      	b.n	8001cc4 <closeFile+0x38>
	} else {
		printf("SUCCESS closing file\n");
 8001cbe:	4807      	ldr	r0, [pc, #28]	; (8001cdc <closeFile+0x50>)
 8001cc0:	f00a fac2 	bl	800c248 <puts>
	}

	return pCtrl->status;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200002e8 	.word	0x200002e8
 8001cd4:	20000518 	.word	0x20000518
 8001cd8:	0800d624 	.word	0x0800d624
 8001cdc:	0800d64c 	.word	0x0800d64c

08001ce0 <initServoController>:
#include <math.h>

// TODO: Make another Level shifter for Right_Servo
// TODO : Add a safety switch for the Servo Power Supply (or a 9v)

HAL_StatusTypeDef initServoController(ServoController *pCtrl){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	printf("Initializing Servo Controller\n");
 8001ce8:	480a      	ldr	r0, [pc, #40]	; (8001d14 <initServoController+0x34>)
 8001cea:	f00a faad 	bl	800c248 <puts>

	// Allocate ServoList
	memset(pCtrl->servoList, 0, sizeof(Servo) * MAX_NUM_SERVOS);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3308      	adds	r3, #8
 8001cf2:	223c      	movs	r2, #60	; 0x3c
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f00a fb86 	bl	800c408 <memset>
	pCtrl->numServos = 0;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44
	pCtrl->status = HAL_OK;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]

	return pCtrl->status;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	0800d664 	.word	0x0800d664

08001d18 <addServo>:

void addServo(ServoController *pCtrl, Servo servo){
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	4638      	mov	r0, r7
 8001d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(pCtrl->numServos >= MAX_NUM_SERVOS){
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	dd05      	ble.n	8001d3a <addServo+0x22>
		printf("FAILED Add Servo (%s)\n", servo.name);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4820      	ldr	r0, [pc, #128]	; (8001db4 <addServo+0x9c>)
 8001d34:	f00a fa22 	bl	800c17c <iprintf>
		return;
 8001d38:	e038      	b.n	8001dac <addServo+0x94>
	}

	pCtrl->servoList[pCtrl->numServos] = servo;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d3e:	68f9      	ldr	r1, [r7, #12]
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	461c      	mov	r4, r3
 8001d4e:	463b      	mov	r3, r7
 8001d50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	pCtrl->status = HAL_TIM_PWM_Start(servo.pTIMHandle, servo.channel);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f005 f99e 	bl	80070a0 <HAL_TIM_PWM_Start>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	701a      	strb	r2, [r3, #0]
	setServoPosition(servo, SERVO_POS_CENTER);
 8001d6c:	235a      	movs	r3, #90	; 0x5a
 8001d6e:	463a      	mov	r2, r7
 8001d70:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d72:	f000 f825 	bl	8001dc0 <setServoPosition>
	if(pCtrl->status != HAL_OK){
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00c      	beq.n	8001d98 <addServo+0x80>
		printf("FAILED to Add  Servo (%s) | Status : %s\n", servo.name, stat2Str(pCtrl->status));
 8001d7e:	683c      	ldr	r4, [r7, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 faef 	bl	8002368 <stat2Str>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4621      	mov	r1, r4
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <addServo+0xa0>)
 8001d92:	f00a f9f3 	bl	800c17c <iprintf>
 8001d96:	e009      	b.n	8001dac <addServo+0x94>
	} else {
		pCtrl->numServos += 1;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
		printf("SUCCESS Added Servo (%s)\n", servo.name);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <addServo+0xa4>)
 8001da8:	f00a f9e8 	bl	800c17c <iprintf>
	}

}
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	0800d684 	.word	0x0800d684
 8001db8:	0800d69c 	.word	0x0800d69c
 8001dbc:	0800d6c8 	.word	0x0800d6c8

08001dc0 <setServoPosition>:

//https://www.youtube.com/watch?v=AjN58ceQaF4
//http://www.ee.ic.ac.uk/pcheung/teaching/DE1_EE/stores/sg90_datasheet.pdf
//Position in degrees

void setServoPosition(Servo servo, int position){
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b08b      	sub	sp, #44	; 0x2c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	1d3c      	adds	r4, r7, #4
 8001dc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001dcc:	603b      	str	r3, [r7, #0]
	printf("Setting Servo (%s) to %d\n", servo.name, position);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	482e      	ldr	r0, [pc, #184]	; (8001e90 <setServoPosition+0xd0>)
 8001dd6:	f00a f9d1 	bl	800c17c <iprintf>
	uint32_t CCR1Val;
	int degrees;

	if(position <= 0){
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	dc02      	bgt.n	8001de6 <setServoPosition+0x26>
		degrees = SERVO_POS_LEFT;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
 8001de4:	e007      	b.n	8001df6 <setServoPosition+0x36>
	} else if(position >= 180){
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2bb3      	cmp	r3, #179	; 0xb3
 8001dea:	dd02      	ble.n	8001df2 <setServoPosition+0x32>
		degrees = SERVO_POS_RIGHT;
 8001dec:	23b4      	movs	r3, #180	; 0xb4
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	e001      	b.n	8001df6 <setServoPosition+0x36>
	} else {
		degrees = position;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float secPerDeg = .001 / 180;
 8001df6:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <setServoPosition+0xd4>)
 8001df8:	623b      	str	r3, [r7, #32]
	float pulseTime = .001 + (degrees*secPerDeg);
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e04:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0c:	ee17 0a90 	vmov	r0, s15
 8001e10:	f7fe fbaa 	bl	8000568 <__aeabi_f2d>
 8001e14:	a31a      	add	r3, pc, #104	; (adr r3, 8001e80 <setServoPosition+0xc0>)
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	f7fe fa47 	bl	80002ac <__adddf3>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7fe fe31 	bl	8000a8c <__aeabi_d2f>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	61fb      	str	r3, [r7, #28]
	float dutyCycle = (pulseTime / .02);
 8001e2e:	69f8      	ldr	r0, [r7, #28]
 8001e30:	f7fe fb9a 	bl	8000568 <__aeabi_f2d>
 8001e34:	a314      	add	r3, pc, #80	; (adr r3, 8001e88 <setServoPosition+0xc8>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fd17 	bl	800086c <__aeabi_ddiv>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fe21 	bl	8000a8c <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	61bb      	str	r3, [r7, #24]

	CCR1Val = (uint32_t) (dutyCycle * 1000);
 8001e4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e52:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001e98 <setServoPosition+0xd8>
 8001e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e5e:	ee17 3a90 	vmov	r3, s15
 8001e62:	617b      	str	r3, [r7, #20]

	//printf("CCR Val = %lu\n", CCR1Val);
	servo.pTIMHandle->Instance->CCR1 = CCR1Val;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(SERVO_DELAY);
 8001e6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e70:	f001 fc7c 	bl	800376c <HAL_Delay>

}
 8001e74:	bf00      	nop
 8001e76:	372c      	adds	r7, #44	; 0x2c
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	f3af 8000 	nop.w
 8001e80:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e84:	3f50624d 	.word	0x3f50624d
 8001e88:	47ae147b 	.word	0x47ae147b
 8001e8c:	3f947ae1 	.word	0x3f947ae1
 8001e90:	0800d6e4 	.word	0x0800d6e4
 8001e94:	36ba69dc 	.word	0x36ba69dc
 8001e98:	447a0000 	.word	0x447a0000

08001e9c <resetAllServos>:

HAL_StatusTypeDef resetAllServos(ServoController *pCtrl){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	printf("Resetting Servos...\n");
 8001ea4:	4813      	ldr	r0, [pc, #76]	; (8001ef4 <resetAllServos+0x58>)
 8001ea6:	f00a f9cf 	bl	800c248 <puts>

	Servo servo;
	for(int i = 0; i < pCtrl->numServos; i++){
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	e016      	b.n	8001ede <resetAllServos+0x42>
		servo = pCtrl->servoList[i];
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	f103 0208 	add.w	r2, r3, #8
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ec8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		setServoPosition(servo, SERVO_POS_CENTER);
 8001ecc:	235a      	movs	r3, #90	; 0x5a
 8001ece:	f107 0208 	add.w	r2, r7, #8
 8001ed2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ed4:	f7ff ff74 	bl	8001dc0 <setServoPosition>
	for(int i = 0; i < pCtrl->numServos; i++){
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbe3      	blt.n	8001eb0 <resetAllServos+0x14>
	}

	return pCtrl->status;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	781b      	ldrb	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	0800d700 	.word	0x0800d700

08001ef8 <shuffle>:
}

// Generates a random integer and flicks a card from the left and right piles one by one based on the bits of the number generated
// Bit = 0 -> Left Pile | Bit = 1 -> Right Pile
#define MAX_CARDS 160
HAL_StatusTypeDef shuffle(ServoController *pCtrl, int numCards){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]

	if(numCards > MAX_CARDS){
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2ba0      	cmp	r3, #160	; 0xa0
 8001f06:	dd06      	ble.n	8001f16 <shuffle+0x1e>
		printf("FAILED Deck Shuffle. Too many cards.\n");
 8001f08:	483a      	ldr	r0, [pc, #232]	; (8001ff4 <shuffle+0xfc>)
 8001f0a:	f00a f99d 	bl	800c248 <puts>
		pCtrl->status = HAL_ERROR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	e068      	b.n	8001fe8 <shuffle+0xf0>
	} else if(pCtrl->numServos < 2){
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	dc06      	bgt.n	8001f2c <shuffle+0x34>
		printf("FAILED Card Shuffle. Not enough servos connected.\n");
 8001f1e:	4836      	ldr	r0, [pc, #216]	; (8001ff8 <shuffle+0x100>)
 8001f20:	f00a f992 	bl	800c248 <puts>
		pCtrl->status = HAL_ERROR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e05d      	b.n	8001fe8 <shuffle+0xf0>
	} else {

		HAL_RNG_StateTypeDef state = HAL_RNG_GetState(pCtrl->pRNGHandle);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 f8c3 	bl	80060bc <HAL_RNG_GetState>
 8001f36:	4603      	mov	r3, r0
 8001f38:	76fb      	strb	r3, [r7, #27]
		if(state != HAL_RNG_STATE_READY){
 8001f3a:	7efb      	ldrb	r3, [r7, #27]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d008      	beq.n	8001f52 <shuffle+0x5a>
			printf("| RNG Error : %x\n", state);
 8001f40:	7efb      	ldrb	r3, [r7, #27]
 8001f42:	4619      	mov	r1, r3
 8001f44:	482d      	ldr	r0, [pc, #180]	; (8001ffc <shuffle+0x104>)
 8001f46:	f00a f919 	bl	800c17c <iprintf>
			pCtrl->status = HAL_ERROR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e04a      	b.n	8001fe8 <shuffle+0xf0>
		} else {
			int nRandoms = ceil(numCards/32); //Number of random numbers we'll need.
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	da00      	bge.n	8001f5a <shuffle+0x62>
 8001f58:	331f      	adds	r3, #31
 8001f5a:	115b      	asrs	r3, r3, #5
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe faf1 	bl	8000544 <__aeabi_i2d>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f7fe fd67 	bl	8000a3c <__aeabi_d2iz>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	617b      	str	r3, [r7, #20]
			uint32_t rand = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
			int cardsLeft = numCards;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24

			//Generate as many random numbers as necessary (1 bit per card)
			for(int i = 0; i < nRandoms; i++){
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
 8001f7e:	e02f      	b.n	8001fe0 <shuffle+0xe8>
				pCtrl->status = HAL_RNG_GenerateRandomNumber(pCtrl->pRNGHandle, &rand);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f107 020c 	add.w	r2, r7, #12
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 ffc1 	bl	8005f12 <HAL_RNG_GenerateRandomNumber>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	701a      	strb	r2, [r3, #0]
				if(pCtrl->status != HAL_OK){
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <shuffle+0xb6>
					printf("FAILED Generating Random Number\n");
 8001fa0:	4817      	ldr	r0, [pc, #92]	; (8002000 <shuffle+0x108>)
 8001fa2:	f00a f951 	bl	800c248 <puts>
					printStatus(pCtrl);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fa0c 	bl	80023c4 <printStatus>
					break;
 8001fac:	e01c      	b.n	8001fe8 <shuffle+0xf0>
				} else {
					//Process 32 cards at a time
					for(int cardIdx = 0; cardIdx < 32; cardIdx++){
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e00f      	b.n	8001fd4 <shuffle+0xdc>
						int pile = checkBit(rand, cardIdx);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	69f9      	ldr	r1, [r7, #28]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f9c3 	bl	8002344 <checkBit>
 8001fbe:	6138      	str	r0, [r7, #16]
						drawCard(pCtrl, pile);
 8001fc0:	6939      	ldr	r1, [r7, #16]
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f81e 	bl	8002004 <drawCard>
						cardsLeft--;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
					for(int cardIdx = 0; cardIdx < 32; cardIdx++){
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b1f      	cmp	r3, #31
 8001fd8:	ddec      	ble.n	8001fb4 <shuffle+0xbc>
			for(int i = 0; i < nRandoms; i++){
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	623b      	str	r3, [r7, #32]
 8001fe0:	6a3a      	ldr	r2, [r7, #32]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbcb      	blt.n	8001f80 <shuffle+0x88>
				}
			}
		}
	}

	return pCtrl->status;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	781b      	ldrb	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3728      	adds	r7, #40	; 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	0800d714 	.word	0x0800d714
 8001ff8:	0800d73c 	.word	0x0800d73c
 8001ffc:	0800d770 	.word	0x0800d770
 8002000:	0800d784 	.word	0x0800d784

08002004 <drawCard>:

// Pile = 0 -> Draw from Left Pile
// Pile = 1 -> Draw form Right Pile
void drawCard(ServoController *pCtrl, int pile){
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
	int servoNo = pile;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	617b      	str	r3, [r7, #20]
	if(pCtrl->numServos <= servoNo){
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	db04      	blt.n	8002026 <drawCard+0x22>
		printf("FAILED Card Draw. Servo #%d not attached.\n", pile);
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	4821      	ldr	r0, [pc, #132]	; (80020a4 <drawCard+0xa0>)
 8002020:	f00a f8ac 	bl	800c17c <iprintf>
 8002024:	e03b      	b.n	800209e <drawCard+0x9a>
		return;
	}

	// Makes servo kick outwards then inwards
	Servo servo = pCtrl->servoList[servoNo];
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	f103 0208 	add.w	r2, r3, #8
 8002038:	f107 0308 	add.w	r3, r7, #8
 800203c:	ca07      	ldmia	r2, {r0, r1, r2}
 800203e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(servoNo % 2 == 0){	// Left Servo
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d114      	bne.n	8002076 <drawCard+0x72>
		setServoPosition(servo, SERVO_POS_LEFT);
 800204c:	2300      	movs	r3, #0
 800204e:	f107 0208 	add.w	r2, r7, #8
 8002052:	ca07      	ldmia	r2, {r0, r1, r2}
 8002054:	f7ff feb4 	bl	8001dc0 <setServoPosition>
		HAL_Delay(SERVO_DELAY);
 8002058:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800205c:	f001 fb86 	bl	800376c <HAL_Delay>
		setServoPosition(servo, SERVO_POS_RIGHT);
 8002060:	23b4      	movs	r3, #180	; 0xb4
 8002062:	f107 0208 	add.w	r2, r7, #8
 8002066:	ca07      	ldmia	r2, {r0, r1, r2}
 8002068:	f7ff feaa 	bl	8001dc0 <setServoPosition>
		HAL_Delay(SERVO_DELAY);
 800206c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002070:	f001 fb7c 	bl	800376c <HAL_Delay>
 8002074:	e013      	b.n	800209e <drawCard+0x9a>
	} else {	// Right Servo
		setServoPosition(servo, SERVO_POS_RIGHT);
 8002076:	23b4      	movs	r3, #180	; 0xb4
 8002078:	f107 0208 	add.w	r2, r7, #8
 800207c:	ca07      	ldmia	r2, {r0, r1, r2}
 800207e:	f7ff fe9f 	bl	8001dc0 <setServoPosition>
		HAL_Delay(SERVO_DELAY);
 8002082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002086:	f001 fb71 	bl	800376c <HAL_Delay>
		setServoPosition(servo, SERVO_POS_LEFT);
 800208a:	2300      	movs	r3, #0
 800208c:	f107 0208 	add.w	r2, r7, #8
 8002090:	ca07      	ldmia	r2, {r0, r1, r2}
 8002092:	f7ff fe95 	bl	8001dc0 <setServoPosition>
		HAL_Delay(SERVO_DELAY);
 8002096:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800209a:	f001 fb67 	bl	800376c <HAL_Delay>
	}

}
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	0800d7a4 	.word	0x0800d7a4

080020a8 <disconnectServos>:

HAL_StatusTypeDef disconnectServos(ServoController* pCtrl){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	printf("Disconnecting Servo Controller...\n");
 80020b0:	481b      	ldr	r0, [pc, #108]	; (8002120 <disconnectServos+0x78>)
 80020b2:	f00a f8c9 	bl	800c248 <puts>

	resetAllServos(pCtrl);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff fef0 	bl	8001e9c <resetAllServos>
	Servo servo;
	for(int i = 0; i < pCtrl->numServos; i++){
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	e023      	b.n	800210a <disconnectServos+0x62>
		servo = pCtrl->servoList[i];
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	f103 0208 	add.w	r2, r3, #8
 80020d4:	f107 0308 	add.w	r3, r7, #8
 80020d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80020da:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		pCtrl->status = HAL_TIM_PWM_Stop(servo.pTIMHandle, servo.channel);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f005 f8e1 	bl	80072ac <HAL_TIM_PWM_Stop>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	701a      	strb	r2, [r3, #0]
		if(pCtrl->status != HAL_OK){
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d004      	beq.n	8002104 <disconnectServos+0x5c>
			printf("FAILED to Stop Servo (%s)\n", servo.name);
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4619      	mov	r1, r3
 80020fe:	4809      	ldr	r0, [pc, #36]	; (8002124 <disconnectServos+0x7c>)
 8002100:	f00a f83c 	bl	800c17c <iprintf>
	for(int i = 0; i < pCtrl->numServos; i++){
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3301      	adds	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	429a      	cmp	r2, r3
 8002112:	dbd6      	blt.n	80020c2 <disconnectServos+0x1a>
		}
	}

	return pCtrl->status;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	781b      	ldrb	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	0800d7d0 	.word	0x0800d7d0
 8002124:	0800d7f4 	.word	0x0800d7f4

08002128 <initESP>:
const char* STATUS_ARCHIDEKT = "Sending Deck to Archidekt\n";
const char* STATUS_SD_READ = "ESP Requesting SD Data\n";
const char* STATUS_SHUTDOWN = "Shutting Down\n";
const char* STATUS_UNKNOWN = "Unknown Action";

HAL_StatusTypeDef initESP(WiFiController* pCtrl){
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	printf("Initialzing WiFi Controller...\n");
 8002130:	4805      	ldr	r0, [pc, #20]	; (8002148 <initESP+0x20>)
 8002132:	f00a f889 	bl	800c248 <puts>
	signalBusy(pCtrl);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f82e 	bl	8002198 <signalBusy>
	return pCtrl->status;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	781b      	ldrb	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	0800d8b4 	.word	0x0800d8b4

0800214c <disconnectESP>:

HAL_StatusTypeDef disconnectESP(WiFiController* pCtrl){
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	printf("Disconnecting WiFi Controller...\n");
 8002154:	4807      	ldr	r0, [pc, #28]	; (8002174 <disconnectESP+0x28>)
 8002156:	f00a f877 	bl	800c248 <puts>
	signalBusy(pCtrl);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f81c 	bl	8002198 <signalBusy>
	clearCMDBuffer(pCtrl);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f877 	bl	8002254 <clearCMDBuffer>
	return pCtrl->status;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	781b      	ldrb	r3, [r3, #0]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	0800d8d4 	.word	0x0800d8d4

08002178 <signalReady>:

void signalReady(WiFiController* pCtrl){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->readyFlagPin, GPIO_PIN_SET);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6898      	ldr	r0, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	899b      	ldrh	r3, [r3, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	4619      	mov	r1, r3
 800218c:	f001 fdce 	bl	8003d2c <HAL_GPIO_WritePin>
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <signalBusy>:

void signalBusy(WiFiController* pCtrl){
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->readyFlagPin, GPIO_PIN_RESET);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6898      	ldr	r0, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	899b      	ldrh	r3, [r3, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	4619      	mov	r1, r3
 80021ac:	f001 fdbe 	bl	8003d2c <HAL_GPIO_WritePin>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <getNextCMD>:

HAL_StatusTypeDef getNextCMD(WiFiController* pCtrl, char *pCMDBuffer){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef cmdStatus = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
	printf("Waiting for next CMD...\n\r");
 80021c6:	481e      	ldr	r0, [pc, #120]	; (8002240 <getNextCMD+0x88>)
 80021c8:	f009 ffd8 	bl	800c17c <iprintf>
	signalReady(pCtrl);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ffd3 	bl	8002178 <signalReady>
	HAL_Delay(ESP_READY_DELAY); // Wait for ESP to send the data
 80021d2:	2064      	movs	r0, #100	; 0x64
 80021d4:	f001 faca 	bl	800376c <HAL_Delay>
	cmdStatus = HAL_UART_Receive(pCtrl->pUARTHandle, (uint8_t*) pCMDBuffer, 8, ESP_CMD_TIMEOUT); // Waits 60s for a CMD, then yields control
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6858      	ldr	r0, [r3, #4]
 80021dc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80021e0:	2208      	movs	r2, #8
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	f006 f9b8 	bl	8008558 <HAL_UART_Receive>
 80021e8:	4603      	mov	r3, r0
 80021ea:	73fb      	strb	r3, [r7, #15]
	switch(cmdStatus){
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d81e      	bhi.n	8002230 <getNextCMD+0x78>
 80021f2:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <getNextCMD+0x40>)
 80021f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f8:	08002209 	.word	0x08002209
 80021fc:	0800221b 	.word	0x0800221b
 8002200:	08002213 	.word	0x08002213
 8002204:	08002229 	.word	0x08002229
		case HAL_OK:
			printf("CMD: %s\n", pCMDBuffer);
 8002208:	6839      	ldr	r1, [r7, #0]
 800220a:	480e      	ldr	r0, [pc, #56]	; (8002244 <getNextCMD+0x8c>)
 800220c:	f009 ffb6 	bl	800c17c <iprintf>
			break;
 8002210:	e00e      	b.n	8002230 <getNextCMD+0x78>
		case HAL_BUSY:
			printf("CMD Buffer (RX) Busy\n");
 8002212:	480d      	ldr	r0, [pc, #52]	; (8002248 <getNextCMD+0x90>)
 8002214:	f00a f818 	bl	800c248 <puts>
			break;
 8002218:	e00a      	b.n	8002230 <getNextCMD+0x78>
		case HAL_ERROR:
			printf("Error reading CMD from ESP\n");
 800221a:	480c      	ldr	r0, [pc, #48]	; (800224c <getNextCMD+0x94>)
 800221c:	f00a f814 	bl	800c248 <puts>
			pCtrl->status = HAL_ERROR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
			break;
 8002226:	e003      	b.n	8002230 <getNextCMD+0x78>
		case HAL_TIMEOUT:
			printf("Timed out waiting for CMD\n");
 8002228:	4809      	ldr	r0, [pc, #36]	; (8002250 <getNextCMD+0x98>)
 800222a:	f00a f80d 	bl	800c248 <puts>
			break;
 800222e:	bf00      	nop
	}

	signalBusy(pCtrl);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ffb1 	bl	8002198 <signalBusy>
	return cmdStatus;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	0800d8f8 	.word	0x0800d8f8
 8002244:	0800d914 	.word	0x0800d914
 8002248:	0800d920 	.word	0x0800d920
 800224c:	0800d938 	.word	0x0800d938
 8002250:	0800d954 	.word	0x0800d954

08002254 <clearCMDBuffer>:

// Cleans out the ESP_RX buffer
// Note: Using this in the loop removes the ability to make a "Command Queue", so the buffer can only ever have one CMD at a time
void clearCMDBuffer(WiFiController* pCtrl){
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	uint8_t byteRead = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]
	while(status == HAL_OK){
 8002264:	e009      	b.n	800227a <clearCMDBuffer+0x26>
		status = HAL_UART_Receive(pCtrl->pUARTHandle, &byteRead, 1, 0); //Should become HAL_TIMEOUT when there is no data left
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6858      	ldr	r0, [r3, #4]
 800226a:	f107 010e 	add.w	r1, r7, #14
 800226e:	2300      	movs	r3, #0
 8002270:	2201      	movs	r2, #1
 8002272:	f006 f971 	bl	8008558 <HAL_UART_Receive>
 8002276:	4603      	mov	r3, r0
 8002278:	73fb      	strb	r3, [r7, #15]
	while(status == HAL_OK){
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f2      	beq.n	8002266 <clearCMDBuffer+0x12>
	}
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <sendData>:

HAL_StatusTypeDef sendData(WiFiController* pCtrl, void* pDataBuffer, uint16_t size){
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	4613      	mov	r3, r2
 8002298:	80fb      	strh	r3, [r7, #6]
	printf("Sending %u bytes to ESP\n", size);
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	4619      	mov	r1, r3
 800229e:	480f      	ldr	r0, [pc, #60]	; (80022dc <sendData+0x50>)
 80022a0:	f009 ff6c 	bl	800c17c <iprintf>
	pCtrl->status = HAL_UART_Transmit(pCtrl->pUARTHandle, (const uint8_t*) pDataBuffer, size, HAL_MAX_DELAY);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6858      	ldr	r0, [r3, #4]
 80022a8:	88fa      	ldrh	r2, [r7, #6]
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	f006 f8c8 	bl	8008444 <HAL_UART_Transmit>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	701a      	strb	r2, [r3, #0]
	if(pCtrl->status != HAL_OK){
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <sendData+0x44>
		printf("FAILED Sending data to ESP\n");
 80022c4:	4806      	ldr	r0, [pc, #24]	; (80022e0 <sendData+0x54>)
 80022c6:	f009 ffbf 	bl	800c248 <puts>
		printStatus(pCtrl);
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f87a 	bl	80023c4 <printStatus>
	}
	return pCtrl -> status;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	781b      	ldrb	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	0800d970 	.word	0x0800d970
 80022e0:	0800d98c 	.word	0x0800d98c

080022e4 <initHelpers>:
#include "string.h"
UART_HandleTypeDef *pHUART;



void initHelpers(UART_HandleTypeDef* pUHandle){
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	pHUART = pUHandle;
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <initHelpers+0x1c>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6013      	str	r3, [r2, #0]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	2000051c 	.word	0x2000051c

08002304 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(pHUART, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <__io_putchar+0x38>)
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	1d39      	adds	r1, r7, #4
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	2201      	movs	r2, #1
 8002318:	f006 f894 	bl	8008444 <HAL_UART_Transmit>
	if(ch == '\n'){
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b0a      	cmp	r3, #10
 8002320:	d107      	bne.n	8002332 <__io_putchar+0x2e>
		HAL_UART_Transmit(pHUART, (uint8_t *)"\r", 1, HAL_MAX_DELAY);
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <__io_putchar+0x38>)
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
 800232a:	2201      	movs	r2, #1
 800232c:	4904      	ldr	r1, [pc, #16]	; (8002340 <__io_putchar+0x3c>)
 800232e:	f006 f889 	bl	8008444 <HAL_UART_Transmit>
	}
	return ch;
 8002332:	687b      	ldr	r3, [r7, #4]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	2000051c 	.word	0x2000051c
 8002340:	0800d9a8 	.word	0x0800d9a8

08002344 <checkBit>:

//Returns the value of the bit at index in num
//Ex: checkBit(0x05, 2) == 1
int checkBit(uint32_t num, int index){
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
	return (int) ((num >> index) & 0x01);
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	fa22 f303 	lsr.w	r3, r2, r3
 8002356:	f003 0301 	and.w	r3, r3, #1
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <stat2Str>:
			printf("Device found at Addr 0x%02X", i);
		}
	}
}

char* stat2Str(HAL_StatusTypeDef status){
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
	switch(status){
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d813      	bhi.n	80023a0 <stat2Str+0x38>
 8002378:	a201      	add	r2, pc, #4	; (adr r2, 8002380 <stat2Str+0x18>)
 800237a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237e:	bf00      	nop
 8002380:	08002391 	.word	0x08002391
 8002384:	08002395 	.word	0x08002395
 8002388:	08002399 	.word	0x08002399
 800238c:	0800239d 	.word	0x0800239d
		case HAL_OK:
			return "HAL_OK\0";
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <stat2Str+0x48>)
 8002392:	e006      	b.n	80023a2 <stat2Str+0x3a>
		case HAL_ERROR:
			return "HAL_ERROR\0";
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <stat2Str+0x4c>)
 8002396:	e004      	b.n	80023a2 <stat2Str+0x3a>
		case HAL_BUSY:
			return "HAL_BUSY\0";
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <stat2Str+0x50>)
 800239a:	e002      	b.n	80023a2 <stat2Str+0x3a>
		case HAL_TIMEOUT:
			return "HAL_TIMEOUT\0";
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <stat2Str+0x54>)
 800239e:	e000      	b.n	80023a2 <stat2Str+0x3a>
		default:
			return "UNKNOWN STATUS\0";
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <stat2Str+0x58>)
	}
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	0800d9c8 	.word	0x0800d9c8
 80023b4:	0800d9d0 	.word	0x0800d9d0
 80023b8:	0800d9dc 	.word	0x0800d9dc
 80023bc:	0800d9e8 	.word	0x0800d9e8
 80023c0:	0800d9f8 	.word	0x0800d9f8

080023c4 <printStatus>:
// Trying to introduce a little polymorphism-ease
typedef struct GenericController{
	HAL_StatusTypeDef status;
} GenericController;

void printStatus(void* pCtrl){
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = ((GenericController*) pCtrl)->status;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	73fb      	strb	r3, [r7, #15]
	printf("\t|^ Status : %s\n", stat2Str(status));
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ffc7 	bl	8002368 <stat2Str>
 80023da:	4603      	mov	r3, r0
 80023dc:	4619      	mov	r1, r3
 80023de:	4803      	ldr	r0, [pc, #12]	; (80023ec <printStatus+0x28>)
 80023e0:	f009 fecc 	bl	800c17c <iprintf>
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	0800da08 	.word	0x0800da08

080023f0 <printSuccess>:

void printSuccess(const char* msg){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	char line[] = "SUCCESS ";
 80023f8:	4a12      	ldr	r2, [pc, #72]	; (8002444 <printSuccess+0x54>)
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002400:	c303      	stmia	r3!, {r0, r1}
 8002402:	701a      	strb	r2, [r3, #0]
	strcat(line, msg);
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4618      	mov	r0, r3
 800240c:	f00a f804 	bl	800c418 <strcat>
	strcat(line, "\n");
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	4618      	mov	r0, r3
 8002416:	f7fd fee5 	bl	80001e4 <strlen>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	f107 030c 	add.w	r3, r7, #12
 8002422:	4413      	add	r3, r2
 8002424:	4908      	ldr	r1, [pc, #32]	; (8002448 <printSuccess+0x58>)
 8002426:	461a      	mov	r2, r3
 8002428:	460b      	mov	r3, r1
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	8013      	strh	r3, [r2, #0]
	printf("%s", line);
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	4619      	mov	r1, r3
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <printSuccess+0x5c>)
 8002436:	f009 fea1 	bl	800c17c <iprintf>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	0800da24 	.word	0x0800da24
 8002448:	0800da1c 	.word	0x0800da1c
 800244c:	0800da20 	.word	0x0800da20

08002450 <fullStatusReport>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void fullStatusReport(ArducamController* pArducam, WiFiController* pESP, ServoController* pServoController, SDController* pSDController){
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
	if(!pArducam){ printf("Null Arducam Pointer!\n");} else {printf("Arducam Status : %s\n", stat2Str(pArducam->status));}
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d103      	bne.n	800246c <fullStatusReport+0x1c>
 8002464:	4822      	ldr	r0, [pc, #136]	; (80024f0 <fullStatusReport+0xa0>)
 8002466:	f009 feef 	bl	800c248 <puts>
 800246a:	e009      	b.n	8002480 <fullStatusReport+0x30>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff79 	bl	8002368 <stat2Str>
 8002476:	4603      	mov	r3, r0
 8002478:	4619      	mov	r1, r3
 800247a:	481e      	ldr	r0, [pc, #120]	; (80024f4 <fullStatusReport+0xa4>)
 800247c:	f009 fe7e 	bl	800c17c <iprintf>
	if(!pESP){ printf("Null WiFiController Pointer!\n"); } else {printf("ESP Status : %s\n", stat2Str(pESP->status));}
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <fullStatusReport+0x3e>
 8002486:	481c      	ldr	r0, [pc, #112]	; (80024f8 <fullStatusReport+0xa8>)
 8002488:	f009 fede 	bl	800c248 <puts>
 800248c:	e009      	b.n	80024a2 <fullStatusReport+0x52>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff68 	bl	8002368 <stat2Str>
 8002498:	4603      	mov	r3, r0
 800249a:	4619      	mov	r1, r3
 800249c:	4817      	ldr	r0, [pc, #92]	; (80024fc <fullStatusReport+0xac>)
 800249e:	f009 fe6d 	bl	800c17c <iprintf>
	if(!pServoController){ printf("Null ServoController Pointer!\n"); } else {printf("Servo Status : %s\n", stat2Str(pServoController->status));}
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d103      	bne.n	80024b0 <fullStatusReport+0x60>
 80024a8:	4815      	ldr	r0, [pc, #84]	; (8002500 <fullStatusReport+0xb0>)
 80024aa:	f009 fecd 	bl	800c248 <puts>
 80024ae:	e009      	b.n	80024c4 <fullStatusReport+0x74>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff57 	bl	8002368 <stat2Str>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4619      	mov	r1, r3
 80024be:	4811      	ldr	r0, [pc, #68]	; (8002504 <fullStatusReport+0xb4>)
 80024c0:	f009 fe5c 	bl	800c17c <iprintf>
	if(!pSDController){ printf("Null SDController Pointer!\n"); } else {printf("SD Status : %s\n", stat2Str(pSDController->status));}
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d103      	bne.n	80024d2 <fullStatusReport+0x82>
 80024ca:	480f      	ldr	r0, [pc, #60]	; (8002508 <fullStatusReport+0xb8>)
 80024cc:	f009 febc 	bl	800c248 <puts>
}
 80024d0:	e009      	b.n	80024e6 <fullStatusReport+0x96>
	if(!pSDController){ printf("Null SDController Pointer!\n"); } else {printf("SD Status : %s\n", stat2Str(pSDController->status));}
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff46 	bl	8002368 <stat2Str>
 80024dc:	4603      	mov	r3, r0
 80024de:	4619      	mov	r1, r3
 80024e0:	480a      	ldr	r0, [pc, #40]	; (800250c <fullStatusReport+0xbc>)
 80024e2:	f009 fe4b 	bl	800c17c <iprintf>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	0800da38 	.word	0x0800da38
 80024f4:	0800da50 	.word	0x0800da50
 80024f8:	0800da68 	.word	0x0800da68
 80024fc:	0800da88 	.word	0x0800da88
 8002500:	0800da9c 	.word	0x0800da9c
 8002504:	0800dabc 	.word	0x0800dabc
 8002508:	0800dad0 	.word	0x0800dad0
 800250c:	0800daec 	.word	0x0800daec

08002510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	f5ad 5d18 	sub.w	sp, sp, #9728	; 0x2600
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800251a:	f001 f8ab 	bl	8003674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800251e:	f000 fa2d 	bl	800297c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002522:	f000 fc71 	bl	8002e08 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002526:	f000 fa7b 	bl	8002a20 <MX_I2C1_Init>
  MX_SPI1_Init();
 800252a:	f000 fb0d 	bl	8002b48 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800252e:	f000 fc3b 	bl	8002da8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002532:	f000 fc09 	bl	8002d48 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8002536:	f006 fda7 	bl	8009088 <MX_FATFS_Init>
  MX_SPI2_Init();
 800253a:	f000 fb43 	bl	8002bc4 <MX_SPI2_Init>
  MX_I2C2_Init();
 800253e:	f000 faaf 	bl	8002aa0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002542:	f000 fb7d 	bl	8002c40 <MX_TIM2_Init>
  MX_RNG_Init();
 8002546:	f000 faeb 	bl	8002b20 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  //Initialize Helper Functions
  initHelpers(&huart2);
 800254a:	48c5      	ldr	r0, [pc, #788]	; (8002860 <main+0x350>)
 800254c:	f7ff feca 	bl	80022e4 <initHelpers>

  //Initialize the peripheral controllers and their components
  Servo leftServo = {.name = "LEFT_SERVO\0", .pTIMHandle = &htim2, .channel = TIM_CHANNEL_1};
 8002550:	4ac4      	ldr	r2, [pc, #784]	; (8002864 <main+0x354>)
 8002552:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 8002556:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800255a:	ca07      	ldmia	r2, {r0, r1, r2}
 800255c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  Servo rightServo = {.name = "RIGHT_SERVO\0", .pTIMHandle = &htim2, .channel = TIM_CHANNEL_2};
 8002560:	4ac1      	ldr	r2, [pc, #772]	; (8002868 <main+0x358>)
 8002562:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 8002566:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800256a:	ca07      	ldmia	r2, {r0, r1, r2}
 800256c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  ServoController servoController = {.pRNGHandle = &hrng};
 8002570:	f507 5316 	add.w	r3, r7, #9600	; 0x2580
 8002574:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002578:	2248      	movs	r2, #72	; 0x48
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f009 ff43 	bl	800c408 <memset>
 8002582:	4bba      	ldr	r3, [pc, #744]	; (800286c <main+0x35c>)
 8002584:	f507 5216 	add.w	r2, r7, #9600	; 0x2580
 8002588:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800258c:	6013      	str	r3, [r2, #0]
  initServoController(&servoController);
 800258e:	f507 5316 	add.w	r3, r7, #9600	; 0x2580
 8002592:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fba2 	bl	8001ce0 <initServoController>
  addServo(&servoController, leftServo);
 800259c:	f507 5016 	add.w	r0, r7, #9600	; 0x2580
 80025a0:	f100 0024 	add.w	r0, r0, #36	; 0x24
 80025a4:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 80025a8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80025ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ae:	f7ff fbb3 	bl	8001d18 <addServo>
  addServo(&servoController, rightServo);
 80025b2:	f507 5016 	add.w	r0, r7, #9600	; 0x2580
 80025b6:	f100 0024 	add.w	r0, r0, #36	; 0x24
 80025ba:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 80025be:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80025c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c4:	f7ff fba8 	bl	8001d18 <addServo>

  ArducamController arducam = {.status = HAL_OK, .pI2CHandle = &hi2c1, .pSPIHandle = &hspi1, .pCSPort = CAM_CS_GPIO_Port, .csPinNo = CAM_CS_Pin, .pFlashPort = CAM_FLASH_GPIO_Port, .flashPinNo = CAM_FLASH_Pin};
 80025c8:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 80025cc:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 80025d0:	4618      	mov	r0, r3
 80025d2:	f242 5374 	movw	r3, #9588	; 0x2574
 80025d6:	461a      	mov	r2, r3
 80025d8:	2100      	movs	r1, #0
 80025da:	f009 ff15 	bl	800c408 <memset>
 80025de:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 80025e2:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 80025e6:	4aa2      	ldr	r2, [pc, #648]	; (8002870 <main+0x360>)
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 80025ee:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 80025f2:	4aa0      	ldr	r2, [pc, #640]	; (8002874 <main+0x364>)
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 80025fa:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 80025fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002602:	60da      	str	r2, [r3, #12]
 8002604:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8002608:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800260c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002610:	821a      	strh	r2, [r3, #16]
 8002612:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8002616:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800261a:	4a97      	ldr	r2, [pc, #604]	; (8002878 <main+0x368>)
 800261c:	615a      	str	r2, [r3, #20]
 800261e:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8002622:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8002626:	2240      	movs	r2, #64	; 0x40
 8002628:	831a      	strh	r2, [r3, #24]
  initArducam(&arducam);
 800262a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800262e:	3b18      	subs	r3, #24
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fbf9 	bl	8000e28 <initArducam>

  WiFiController esp = {.status = HAL_OK, .pUARTHandle = &huart1, .pGPIOPort = READY_FLAG_GPIO_Port, .readyFlagPin = READY_FLAG_Pin};
 8002636:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 800263a:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800263e:	4a8f      	ldr	r2, [pc, #572]	; (800287c <main+0x36c>)
 8002640:	461c      	mov	r4, r3
 8002642:	4613      	mov	r3, r2
 8002644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char pCMDBuffer[] = "CMDBUFFR";
 800264a:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 800264e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8002652:	4a8b      	ldr	r2, [pc, #556]	; (8002880 <main+0x370>)
 8002654:	ca07      	ldmia	r2, {r0, r1, r2}
 8002656:	c303      	stmia	r3!, {r0, r1}
 8002658:	701a      	strb	r2, [r3, #0]
  initESP(&esp);
 800265a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800265e:	3b28      	subs	r3, #40	; 0x28
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fd61 	bl	8002128 <initESP>

  SDController sd = {.status = HAL_OK, .pSPIHandle = &hspi2, .pCSPort = SD_CS_GPIO_Port, .csPin = SD_CS_Pin};
 8002666:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 800266a:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 800266e:	4a85      	ldr	r2, [pc, #532]	; (8002884 <main+0x374>)
 8002670:	461c      	mov	r4, r3
 8002672:	4613      	mov	r3, r2
 8002674:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002676:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char* filename = "image.jpg";
 800267a:	4b83      	ldr	r3, [pc, #524]	; (8002888 <main+0x378>)
 800267c:	f507 5218 	add.w	r2, r7, #9728	; 0x2600
 8002680:	f102 0204 	add.w	r2, r2, #4
 8002684:	6013      	str	r3, [r2, #0]
  initSD(&sd);
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	3b04      	subs	r3, #4
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff f9b1 	bl	80019f4 <initSD>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  clearCMDBuffer(&esp); //Clear out any old commands that may have come in while Assistant wasn't looking
 8002692:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002696:	3b28      	subs	r3, #40	; 0x28
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fddb 	bl	8002254 <clearCMDBuffer>
  while (esp.status == HAL_OK) // Might add the other Controllers here if needed
 800269e:	e128      	b.n	80028f2 <main+0x3e2>
  {// Continuously look for commands on ESP_RX, as long as ESP is working

	if(getNextCMD(&esp, pCMDBuffer) == HAL_OK){
 80026a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80026a4:	3a34      	subs	r2, #52	; 0x34
 80026a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026aa:	3b28      	subs	r3, #40	; 0x28
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fd82 	bl	80021b8 <getNextCMD>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 810f 	bne.w	80028da <main+0x3ca>
		signalBusy(&esp);
 80026bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026c0:	3b28      	subs	r3, #40	; 0x28
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fd68 	bl	8002198 <signalBusy>
		if(strcmp(pCMDBuffer, LIGHTS_ON) == 0){ //Turn the Flash On
 80026c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026cc:	3b34      	subs	r3, #52	; 0x34
 80026ce:	496f      	ldr	r1, [pc, #444]	; (800288c <main+0x37c>)
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd fd7d 	bl	80001d0 <strcmp>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <main+0x1e4>
			printf(STATUS_LIGHTS_ON);
 80026dc:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <main+0x380>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f009 fd4b 	bl	800c17c <iprintf>
			flashOn(&arducam);
 80026e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026ea:	3b18      	subs	r3, #24
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe ff9e 	bl	800162e <flashOn>
 80026f2:	e0f2      	b.n	80028da <main+0x3ca>
		} else if (strcmp(pCMDBuffer, LIGHTS_OFF) == 0){ //Turn the Flash Off
 80026f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026f8:	3b34      	subs	r3, #52	; 0x34
 80026fa:	4966      	ldr	r1, [pc, #408]	; (8002894 <main+0x384>)
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd fd67 	bl	80001d0 <strcmp>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10b      	bne.n	8002720 <main+0x210>
			printf(STATUS_LIGHTS_OFF);
 8002708:	4b63      	ldr	r3, [pc, #396]	; (8002898 <main+0x388>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f009 fd35 	bl	800c17c <iprintf>
			flashOff(&arducam);
 8002712:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002716:	3b18      	subs	r3, #24
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe ff98 	bl	800164e <flashOff>
 800271e:	e0dc      	b.n	80028da <main+0x3ca>
		} else if (strcmp(pCMDBuffer, SHUFFLE) == 0){ //Begin Shuffle Sequence
 8002720:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002724:	3b34      	subs	r3, #52	; 0x34
 8002726:	495d      	ldr	r1, [pc, #372]	; (800289c <main+0x38c>)
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fd51 	bl	80001d0 <strcmp>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d114      	bne.n	800275e <main+0x24e>
			printf(STATUS_SHUFFLE);
 8002734:	4b5a      	ldr	r3, [pc, #360]	; (80028a0 <main+0x390>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f009 fd1f 	bl	800c17c <iprintf>
			if(shuffle(&servoController, DECK_SIZE) == HAL_OK){
 800273e:	f507 5316 	add.w	r3, r7, #9600	; 0x2580
 8002742:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002746:	2164      	movs	r1, #100	; 0x64
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fbd5 	bl	8001ef8 <shuffle>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	f040 80c2 	bne.w	80028da <main+0x3ca>
				printf("SUCCESS Shuffled Deck.\n");
 8002756:	4853      	ldr	r0, [pc, #332]	; (80028a4 <main+0x394>)
 8002758:	f009 fd76 	bl	800c248 <puts>
 800275c:	e0bd      	b.n	80028da <main+0x3ca>
			}
		} else if (strcmp(pCMDBuffer, SNAP) == 0){ //Take a Single Picture and Sends it to the ESP
 800275e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002762:	3b34      	subs	r3, #52	; 0x34
 8002764:	4950      	ldr	r1, [pc, #320]	; (80028a8 <main+0x398>)
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fd32 	bl	80001d0 <strcmp>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d14c      	bne.n	800280c <main+0x2fc>
			printf(STATUS_SNAP);
 8002772:	4b4e      	ldr	r3, [pc, #312]	; (80028ac <main+0x39c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f009 fd00 	bl	800c17c <iprintf>
			if(singleCapture(&arducam) == HAL_OK){
 800277c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002780:	3b18      	subs	r3, #24
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fbe0 	bl	8000f48 <singleCapture>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 80a5 	bne.w	80028da <main+0x3ca>
				if(writeFile(&sd, filename, arducam.pictureBuffer, arducam.pictureBufferSize) == HAL_OK){ //Saves JPG data to SD
 8002790:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8002794:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8002798:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800279c:	f8b3 3572 	ldrh.w	r3, [r3, #1394]	; 0x572
 80027a0:	4619      	mov	r1, r3
 80027a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027a6:	3b18      	subs	r3, #24
 80027a8:	f103 021a 	add.w	r2, r3, #26
 80027ac:	f107 0008 	add.w	r0, r7, #8
 80027b0:	3804      	subs	r0, #4
 80027b2:	460b      	mov	r3, r1
 80027b4:	f507 5118 	add.w	r1, r7, #9728	; 0x2600
 80027b8:	f101 0104 	add.w	r1, r1, #4
 80027bc:	6809      	ldr	r1, [r1, #0]
 80027be:	f7ff fa29 	bl	8001c14 <writeFile>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 8088 	bne.w	80028da <main+0x3ca>
					picToBase64(&arducam);
 80027ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027ce:	3b18      	subs	r3, #24
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe ffc7 	bl	8001764 <picToBase64>
					if(sendData(&esp, arducam.base64Buffer, arducam.base64Size) == HAL_OK){
 80027d6:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 80027da:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 80027de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80027e2:	f8b3 2570 	ldrh.w	r2, [r3, #1392]	; 0x570
 80027e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027ea:	3b18      	subs	r3, #24
 80027ec:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 80027f0:	311a      	adds	r1, #26
 80027f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027f6:	3b28      	subs	r3, #40	; 0x28
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fd47 	bl	800228c <sendData>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d16a      	bne.n	80028da <main+0x3ca>
						printSuccess("Sent Base64 Photo to ESP");
 8002804:	482a      	ldr	r0, [pc, #168]	; (80028b0 <main+0x3a0>)
 8002806:	f7ff fdf3 	bl	80023f0 <printSuccess>
 800280a:	e066      	b.n	80028da <main+0x3ca>
					}
				}
			}
		} else if (strcmp(pCMDBuffer, ARCHIDEKT) == 0){
 800280c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002810:	3b34      	subs	r3, #52	; 0x34
 8002812:	4928      	ldr	r1, [pc, #160]	; (80028b4 <main+0x3a4>)
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd fcdb 	bl	80001d0 <strcmp>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <main+0x31c>
			// Send the Deck to Archidekt
			// Idea : Capture 100 photos, send each to ESP to go to curl for Image to Text API, then Receive Text, (display it?), send out to Archidekt
			// Might be best to split into a "SCAN" cmd that scans a single card and prints the card name (at least for testing) and an "Archidekt" CMD
			printf(STATUS_ARCHIDEKT);
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <main+0x3a8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f009 fca9 	bl	800c17c <iprintf>
 800282a:	e056      	b.n	80028da <main+0x3ca>
		} else if (strcmp(pCMDBuffer, SD_READ) == 0){ // Sends 1KB of the active SD file to ESP repeatedly
 800282c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002830:	3b34      	subs	r3, #52	; 0x34
 8002832:	4922      	ldr	r1, [pc, #136]	; (80028bc <main+0x3ac>)
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fccb 	bl	80001d0 <strcmp>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d04c      	beq.n	80028da <main+0x3ca>
				readFile(&sd, filename, fileData, transmissionSize);
				sendData(&esp32, fileData, transmissionSize);
				signalReady(&esp32);

			}*/
		} else if (strcmp(pCMDBuffer, SHUTDOWN) == 0){
 8002840:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002844:	3b34      	subs	r3, #52	; 0x34
 8002846:	491e      	ldr	r1, [pc, #120]	; (80028c0 <main+0x3b0>)
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fcc1 	bl	80001d0 <strcmp>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d139      	bne.n	80028c8 <main+0x3b8>
			//Stop waiting for commands and exit the loop
			printf(STATUS_SHUTDOWN);
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <main+0x3b4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f009 fc8f 	bl	800c17c <iprintf>
			break;
 800285e:	e050      	b.n	8002902 <main+0x3f2>
 8002860:	20000774 	.word	0x20000774
 8002864:	0800db70 	.word	0x0800db70
 8002868:	0800db8c 	.word	0x0800db8c
 800286c:	200005c8 	.word	0x200005c8
 8002870:	20000520 	.word	0x20000520
 8002874:	200005d8 	.word	0x200005d8
 8002878:	48000800 	.word	0x48000800
 800287c:	0800db98 	.word	0x0800db98
 8002880:	0800dba8 	.word	0x0800dba8
 8002884:	0800dbb4 	.word	0x0800dbb4
 8002888:	0800dafc 	.word	0x0800dafc
 800288c:	0800de44 	.word	0x0800de44
 8002890:	20000000 	.word	0x20000000
 8002894:	0800de50 	.word	0x0800de50
 8002898:	20000004 	.word	0x20000004
 800289c:	0800de5c 	.word	0x0800de5c
 80028a0:	20000008 	.word	0x20000008
 80028a4:	0800db08 	.word	0x0800db08
 80028a8:	0800de68 	.word	0x0800de68
 80028ac:	2000000c 	.word	0x2000000c
 80028b0:	0800db20 	.word	0x0800db20
 80028b4:	0800de74 	.word	0x0800de74
 80028b8:	20000010 	.word	0x20000010
 80028bc:	0800de80 	.word	0x0800de80
 80028c0:	0800de8c 	.word	0x0800de8c
 80028c4:	20000014 	.word	0x20000014
		} else { //Some strange command
			printf("%s: '%s'\n", STATUS_UNKNOWN, pCMDBuffer);
 80028c8:	4b28      	ldr	r3, [pc, #160]	; (800296c <main+0x45c>)
 80028ca:	6819      	ldr	r1, [r3, #0]
 80028cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028d0:	3b34      	subs	r3, #52	; 0x34
 80028d2:	461a      	mov	r2, r3
 80028d4:	4826      	ldr	r0, [pc, #152]	; (8002970 <main+0x460>)
 80028d6:	f009 fc51 	bl	800c17c <iprintf>
		}
	}

	clearCMDBuffer(&esp); // Flush again just to be sure the buffer is clear for the next command
 80028da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028de:	3b28      	subs	r3, #40	; 0x28
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fcb7 	bl	8002254 <clearCMDBuffer>
	signalReady(&esp);
 80028e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028ea:	3b28      	subs	r3, #40	; 0x28
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fc43 	bl	8002178 <signalReady>
  while (esp.status == HAL_OK) // Might add the other Controllers here if needed
 80028f2:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 80028f6:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f43f aecf 	beq.w	80026a0 <main+0x190>
  }

  	printf("Exited Loop.\n");
 8002902:	481c      	ldr	r0, [pc, #112]	; (8002974 <main+0x464>)
 8002904:	f009 fca0 	bl	800c248 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	fullStatusReport(&arducam, &esp, &servoController, &sd); // Prints the statuses of every peripheral
 8002908:	f107 0308 	add.w	r3, r7, #8
 800290c:	3b04      	subs	r3, #4
 800290e:	f507 5216 	add.w	r2, r7, #9600	; 0x2580
 8002912:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002916:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800291a:	3928      	subs	r1, #40	; 0x28
 800291c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002920:	3818      	subs	r0, #24
 8002922:	f7ff fd95 	bl	8002450 <fullStatusReport>

  	// Clean up step
  	disconnectSD(&sd);
 8002926:	f107 0308 	add.w	r3, r7, #8
 800292a:	3b04      	subs	r3, #4
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff f88b 	bl	8001a48 <disconnectSD>
  	disconnectArducam(&arducam);
 8002932:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002936:	3b18      	subs	r3, #24
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe faf5 	bl	8000f28 <disconnectArducam>
  	disconnectServos(&servoController);
 800293e:	f507 5316 	add.w	r3, r7, #9600	; 0x2580
 8002942:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fbae 	bl	80020a8 <disconnectServos>
  	disconnectESP(&esp);
 800294c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002950:	3b28      	subs	r3, #40	; 0x28
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fbfa 	bl	800214c <disconnectESP>

	printf("Goodbye!\n");
 8002958:	4807      	ldr	r0, [pc, #28]	; (8002978 <main+0x468>)
 800295a:	f009 fc75 	bl	800c248 <puts>
 800295e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8002960:	4618      	mov	r0, r3
 8002962:	f507 5718 	add.w	r7, r7, #9728	; 0x2600
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bd90      	pop	{r4, r7, pc}
 800296c:	20000018 	.word	0x20000018
 8002970:	0800db3c 	.word	0x0800db3c
 8002974:	0800db48 	.word	0x0800db48
 8002978:	0800db58 	.word	0x0800db58

0800297c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b096      	sub	sp, #88	; 0x58
 8002980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	2244      	movs	r2, #68	; 0x44
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f009 fd3c 	bl	800c408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002990:	463b      	mov	r3, r7
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	60da      	str	r2, [r3, #12]
 800299c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800299e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029a2:	f001 ff4d 	bl	8004840 <HAL_PWREx_ControlVoltageScaling>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80029ac:	f000 fabc 	bl	8002f28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029b0:	2302      	movs	r3, #2
 80029b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029ba:	2310      	movs	r3, #16
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029be:	2302      	movs	r3, #2
 80029c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029c2:	2302      	movs	r3, #2
 80029c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80029c6:	2301      	movs	r3, #1
 80029c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80029ca:	2308      	movs	r3, #8
 80029cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80029ce:	2307      	movs	r3, #7
 80029d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029d2:	2302      	movs	r3, #2
 80029d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029d6:	2302      	movs	r3, #2
 80029d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 ff84 	bl	80048ec <HAL_RCC_OscConfig>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80029ea:	f000 fa9d 	bl	8002f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ee:	230f      	movs	r3, #15
 80029f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f2:	2303      	movs	r3, #3
 80029f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80029fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a02:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002a04:	463b      	mov	r3, r7
 8002a06:	2103      	movs	r1, #3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 fb4b 	bl	80050a4 <HAL_RCC_ClockConfig>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002a14:	f000 fa88 	bl	8002f28 <Error_Handler>
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3758      	adds	r7, #88	; 0x58
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <MX_I2C1_Init+0x74>)
 8002a26:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <MX_I2C1_Init+0x78>)
 8002a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <MX_I2C1_Init+0x74>)
 8002a2c:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <MX_I2C1_Init+0x7c>)
 8002a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <MX_I2C1_Init+0x74>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a36:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <MX_I2C1_Init+0x74>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a3c:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <MX_I2C1_Init+0x74>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <MX_I2C1_Init+0x74>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <MX_I2C1_Init+0x74>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <MX_I2C1_Init+0x74>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <MX_I2C1_Init+0x74>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a5a:	480e      	ldr	r0, [pc, #56]	; (8002a94 <MX_I2C1_Init+0x74>)
 8002a5c:	f001 f97e 	bl	8003d5c <HAL_I2C_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a66:	f000 fa5f 	bl	8002f28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4809      	ldr	r0, [pc, #36]	; (8002a94 <MX_I2C1_Init+0x74>)
 8002a6e:	f001 fe41 	bl	80046f4 <HAL_I2CEx_ConfigAnalogFilter>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a78:	f000 fa56 	bl	8002f28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <MX_I2C1_Init+0x74>)
 8002a80:	f001 fe83 	bl	800478a <HAL_I2CEx_ConfigDigitalFilter>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a8a:	f000 fa4d 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000520 	.word	0x20000520
 8002a98:	40005400 	.word	0x40005400
 8002a9c:	10707dbc 	.word	0x10707dbc

08002aa0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <MX_I2C2_Init+0x74>)
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <MX_I2C2_Init+0x78>)
 8002aa8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <MX_I2C2_Init+0x74>)
 8002aac:	4a1b      	ldr	r2, [pc, #108]	; (8002b1c <MX_I2C2_Init+0x7c>)
 8002aae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <MX_I2C2_Init+0x74>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <MX_I2C2_Init+0x74>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <MX_I2C2_Init+0x74>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <MX_I2C2_Init+0x74>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <MX_I2C2_Init+0x74>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <MX_I2C2_Init+0x74>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <MX_I2C2_Init+0x74>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002ada:	480e      	ldr	r0, [pc, #56]	; (8002b14 <MX_I2C2_Init+0x74>)
 8002adc:	f001 f93e 	bl	8003d5c <HAL_I2C_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002ae6:	f000 fa1f 	bl	8002f28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002aea:	2100      	movs	r1, #0
 8002aec:	4809      	ldr	r0, [pc, #36]	; (8002b14 <MX_I2C2_Init+0x74>)
 8002aee:	f001 fe01 	bl	80046f4 <HAL_I2CEx_ConfigAnalogFilter>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002af8:	f000 fa16 	bl	8002f28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002afc:	2100      	movs	r1, #0
 8002afe:	4805      	ldr	r0, [pc, #20]	; (8002b14 <MX_I2C2_Init+0x74>)
 8002b00:	f001 fe43 	bl	800478a <HAL_I2CEx_ConfigDigitalFilter>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002b0a:	f000 fa0d 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000574 	.word	0x20000574
 8002b18:	40005800 	.word	0x40005800
 8002b1c:	10707dbc 	.word	0x10707dbc

08002b20 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <MX_RNG_Init+0x20>)
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <MX_RNG_Init+0x24>)
 8002b28:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002b2a:	4805      	ldr	r0, [pc, #20]	; (8002b40 <MX_RNG_Init+0x20>)
 8002b2c:	f003 f99a 	bl	8005e64 <HAL_RNG_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002b36:	f000 f9f7 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200005c8 	.word	0x200005c8
 8002b44:	50060800 	.word	0x50060800

08002b48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b4e:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <MX_SPI1_Init+0x78>)
 8002b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b5a:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b60:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b96:	2207      	movs	r2, #7
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ba6:	4805      	ldr	r0, [pc, #20]	; (8002bbc <MX_SPI1_Init+0x74>)
 8002ba8:	f003 fa95 	bl	80060d6 <HAL_SPI_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bb2:	f000 f9b9 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	200005d8 	.word	0x200005d8
 8002bc0:	40013000 	.word	0x40013000

08002bc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002bca:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <MX_SPI2_Init+0x78>)
 8002bcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002bce:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002bd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bd6:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bdc:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002bde:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002be2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002c12:	2207      	movs	r2, #7
 8002c14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c16:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002c1e:	2208      	movs	r2, #8
 8002c20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c22:	4805      	ldr	r0, [pc, #20]	; (8002c38 <MX_SPI2_Init+0x74>)
 8002c24:	f003 fa57 	bl	80060d6 <HAL_SPI_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c2e:	f000 f97b 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000063c 	.word	0x2000063c
 8002c3c:	40003800 	.word	0x40003800

08002c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08e      	sub	sp, #56	; 0x38
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c54:	f107 031c 	add.w	r3, r7, #28
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c60:	463b      	mov	r3, r7
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	611a      	str	r2, [r3, #16]
 8002c6e:	615a      	str	r2, [r3, #20]
 8002c70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1279;
 8002c7a:	4b32      	ldr	r3, [pc, #200]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002c7c:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8002c80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002c88:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002c8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c90:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002c98:	2280      	movs	r2, #128	; 0x80
 8002c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c9c:	4829      	ldr	r0, [pc, #164]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002c9e:	f004 f947 	bl	8006f30 <HAL_TIM_Base_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002ca8:	f000 f93e 	bl	8002f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4822      	ldr	r0, [pc, #136]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002cba:	f004 fda3 	bl	8007804 <HAL_TIM_ConfigClockSource>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002cc4:	f000 f930 	bl	8002f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002cc8:	481e      	ldr	r0, [pc, #120]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002cca:	f004 f988 	bl	8006fde <HAL_TIM_PWM_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002cd4:	f000 f928 	bl	8002f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ce0:	f107 031c 	add.w	r3, r7, #28
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4817      	ldr	r0, [pc, #92]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002ce8:	f005 fab8 	bl	800825c <HAL_TIMEx_MasterConfigSynchronization>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002cf2:	f000 f919 	bl	8002f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cf6:	2360      	movs	r3, #96	; 0x60
 8002cf8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8002cfa:	234b      	movs	r3, #75	; 0x4b
 8002cfc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d06:	463b      	mov	r3, r7
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	480d      	ldr	r0, [pc, #52]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002d0e:	f004 fc65 	bl	80075dc <HAL_TIM_PWM_ConfigChannel>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002d18:	f000 f906 	bl	8002f28 <Error_Handler>
  }
  sConfigOC.Pulse = 5;
 8002d1c:	2305      	movs	r3, #5
 8002d1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d20:	463b      	mov	r3, r7
 8002d22:	2204      	movs	r2, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4807      	ldr	r0, [pc, #28]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002d28:	f004 fc58 	bl	80075dc <HAL_TIM_PWM_ConfigChannel>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8002d32:	f000 f8f9 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d36:	4803      	ldr	r0, [pc, #12]	; (8002d44 <MX_TIM2_Init+0x104>)
 8002d38:	f000 faa8 	bl	800328c <HAL_TIM_MspPostInit>

}
 8002d3c:	bf00      	nop
 8002d3e:	3738      	adds	r7, #56	; 0x38
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	200006a0 	.word	0x200006a0

08002d48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d4c:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <MX_USART1_UART_Init+0x58>)
 8002d4e:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <MX_USART1_UART_Init+0x5c>)
 8002d50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d52:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <MX_USART1_UART_Init+0x58>)
 8002d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <MX_USART1_UART_Init+0x58>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <MX_USART1_UART_Init+0x58>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d66:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <MX_USART1_UART_Init+0x58>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <MX_USART1_UART_Init+0x58>)
 8002d6e:	220c      	movs	r2, #12
 8002d70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <MX_USART1_UART_Init+0x58>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <MX_USART1_UART_Init+0x58>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <MX_USART1_UART_Init+0x58>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <MX_USART1_UART_Init+0x58>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d8a:	4805      	ldr	r0, [pc, #20]	; (8002da0 <MX_USART1_UART_Init+0x58>)
 8002d8c:	f005 fb0c 	bl	80083a8 <HAL_UART_Init>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d96:	f000 f8c7 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200006ec 	.word	0x200006ec
 8002da4:	40013800 	.word	0x40013800

08002da8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <MX_USART2_UART_Init+0x58>)
 8002dae:	4a15      	ldr	r2, [pc, #84]	; (8002e04 <MX_USART2_UART_Init+0x5c>)
 8002db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <MX_USART2_UART_Init+0x58>)
 8002db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <MX_USART2_UART_Init+0x58>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <MX_USART2_UART_Init+0x58>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <MX_USART2_UART_Init+0x58>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <MX_USART2_UART_Init+0x58>)
 8002dce:	220c      	movs	r2, #12
 8002dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <MX_USART2_UART_Init+0x58>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd8:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <MX_USART2_UART_Init+0x58>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dde:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <MX_USART2_UART_Init+0x58>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <MX_USART2_UART_Init+0x58>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dea:	4805      	ldr	r0, [pc, #20]	; (8002e00 <MX_USART2_UART_Init+0x58>)
 8002dec:	f005 fadc 	bl	80083a8 <HAL_UART_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002df6:	f000 f897 	bl	8002f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000774 	.word	0x20000774
 8002e04:	40004400 	.word	0x40004400

08002e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	; 0x28
 8002e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0e:	f107 0314 	add.w	r3, r7, #20
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1e:	4b3f      	ldr	r3, [pc, #252]	; (8002f1c <MX_GPIO_Init+0x114>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	4a3e      	ldr	r2, [pc, #248]	; (8002f1c <MX_GPIO_Init+0x114>)
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <MX_GPIO_Init+0x114>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e36:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <MX_GPIO_Init+0x114>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	4a38      	ldr	r2, [pc, #224]	; (8002f1c <MX_GPIO_Init+0x114>)
 8002e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e42:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <MX_GPIO_Init+0x114>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4e:	4b33      	ldr	r3, [pc, #204]	; (8002f1c <MX_GPIO_Init+0x114>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e52:	4a32      	ldr	r2, [pc, #200]	; (8002f1c <MX_GPIO_Init+0x114>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e5a:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <MX_GPIO_Init+0x114>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e66:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <MX_GPIO_Init+0x114>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <MX_GPIO_Init+0x114>)
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e72:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <MX_GPIO_Init+0x114>)
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002e7e:	2201      	movs	r2, #1
 8002e80:	2102      	movs	r1, #2
 8002e82:	4827      	ldr	r0, [pc, #156]	; (8002f20 <MX_GPIO_Init+0x118>)
 8002e84:	f000 ff52 	bl	8003d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAM_FLASH_Pin|READY_FLAG_Pin, GPIO_PIN_RESET);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	21c0      	movs	r1, #192	; 0xc0
 8002e8c:	4825      	ldr	r0, [pc, #148]	; (8002f24 <MX_GPIO_Init+0x11c>)
 8002e8e:	f000 ff4d 	bl	8003d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_CS_GPIO_Port, CAM_CS_Pin, GPIO_PIN_SET);
 8002e92:	2201      	movs	r2, #1
 8002e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e9c:	f000 ff46 	bl	8003d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ea6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	481b      	ldr	r0, [pc, #108]	; (8002f24 <MX_GPIO_Init+0x11c>)
 8002eb8:	f000 fd8e 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4813      	ldr	r0, [pc, #76]	; (8002f20 <MX_GPIO_Init+0x118>)
 8002ed4:	f000 fd80 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_FLASH_Pin READY_FLAG_Pin */
  GPIO_InitStruct.Pin = CAM_FLASH_Pin|READY_FLAG_Pin;
 8002ed8:	23c0      	movs	r3, #192	; 0xc0
 8002eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002edc:	2301      	movs	r3, #1
 8002ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	4619      	mov	r1, r3
 8002eee:	480d      	ldr	r0, [pc, #52]	; (8002f24 <MX_GPIO_Init+0x11c>)
 8002ef0:	f000 fd72 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_CS_Pin */
  GPIO_InitStruct.Pin = CAM_CS_Pin;
 8002ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_CS_GPIO_Port, &GPIO_InitStruct);
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f10:	f000 fd62 	bl	80039d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f14:	bf00      	nop
 8002f16:	3728      	adds	r7, #40	; 0x28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	48000400 	.word	0x48000400
 8002f24:	48000800 	.word	0x48000800

08002f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f2c:	b672      	cpsid	i
}
 8002f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <Error_Handler+0x8>
	...

08002f34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <HAL_MspInit+0x44>)
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <HAL_MspInit+0x44>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6613      	str	r3, [r2, #96]	; 0x60
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <HAL_MspInit+0x44>)
 8002f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_MspInit+0x44>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <HAL_MspInit+0x44>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_MspInit+0x44>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000

08002f7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b0ae      	sub	sp, #184	; 0xb8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	2288      	movs	r2, #136	; 0x88
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f009 fa33 	bl	800c408 <memset>
  if(hi2c->Instance==I2C1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a42      	ldr	r2, [pc, #264]	; (80030b0 <HAL_I2C_MspInit+0x134>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d13c      	bne.n	8003026 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002fac:	2340      	movs	r3, #64	; 0x40
 8002fae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f002 fa97 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002fc4:	f7ff ffb0 	bl	8002f28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc8:	4b3a      	ldr	r3, [pc, #232]	; (80030b4 <HAL_I2C_MspInit+0x138>)
 8002fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fcc:	4a39      	ldr	r2, [pc, #228]	; (80030b4 <HAL_I2C_MspInit+0x138>)
 8002fce:	f043 0302 	orr.w	r3, r3, #2
 8002fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fd4:	4b37      	ldr	r3, [pc, #220]	; (80030b4 <HAL_I2C_MspInit+0x138>)
 8002fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fe0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fe8:	2312      	movs	r3, #18
 8002fea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003000:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003004:	4619      	mov	r1, r3
 8003006:	482c      	ldr	r0, [pc, #176]	; (80030b8 <HAL_I2C_MspInit+0x13c>)
 8003008:	f000 fce6 	bl	80039d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800300c:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <HAL_I2C_MspInit+0x138>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	4a28      	ldr	r2, [pc, #160]	; (80030b4 <HAL_I2C_MspInit+0x138>)
 8003012:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003016:	6593      	str	r3, [r2, #88]	; 0x58
 8003018:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <HAL_I2C_MspInit+0x138>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003024:	e040      	b.n	80030a8 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a24      	ldr	r2, [pc, #144]	; (80030bc <HAL_I2C_MspInit+0x140>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d13b      	bne.n	80030a8 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003034:	2300      	movs	r3, #0
 8003036:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003038:	f107 031c 	add.w	r3, r7, #28
 800303c:	4618      	mov	r0, r3
 800303e:	f002 fa55 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8003048:	f7ff ff6e 	bl	8002f28 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304c:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_I2C_MspInit+0x138>)
 800304e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003050:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <HAL_I2C_MspInit+0x138>)
 8003052:	f043 0302 	orr.w	r3, r3, #2
 8003056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003058:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <HAL_I2C_MspInit+0x138>)
 800305a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003064:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800306c:	2312      	movs	r3, #18
 800306e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003078:	2303      	movs	r3, #3
 800307a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800307e:	2304      	movs	r3, #4
 8003080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003084:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003088:	4619      	mov	r1, r3
 800308a:	480b      	ldr	r0, [pc, #44]	; (80030b8 <HAL_I2C_MspInit+0x13c>)
 800308c:	f000 fca4 	bl	80039d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_I2C_MspInit+0x138>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003094:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <HAL_I2C_MspInit+0x138>)
 8003096:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800309a:	6593      	str	r3, [r2, #88]	; 0x58
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_I2C_MspInit+0x138>)
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
}
 80030a8:	bf00      	nop
 80030aa:	37b8      	adds	r7, #184	; 0xb8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40005400 	.word	0x40005400
 80030b4:	40021000 	.word	0x40021000
 80030b8:	48000400 	.word	0x48000400
 80030bc:	40005800 	.word	0x40005800

080030c0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0a6      	sub	sp, #152	; 0x98
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	2288      	movs	r2, #136	; 0x88
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f009 f999 	bl	800c408 <memset>
  if(hrng->Instance==RNG)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <HAL_RNG_MspInit+0x90>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d133      	bne.n	8003148 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80030e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80030e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80030ee:	2302      	movs	r3, #2
 80030f0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80030f6:	2308      	movs	r3, #8
 80030f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80030fa:	2307      	movs	r3, #7
 80030fc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80030fe:	2304      	movs	r3, #4
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003102:	2302      	movs	r3, #2
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003106:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800310c:	f107 0310 	add.w	r3, r7, #16
 8003110:	4618      	mov	r0, r3
 8003112:	f002 f9eb 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 800311c:	f7ff ff04 	bl	8002f28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_RNG_MspInit+0x94>)
 8003122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003124:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_RNG_MspInit+0x94>)
 8003126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_RNG_MspInit+0x94>)
 800312e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8003138:	2200      	movs	r2, #0
 800313a:	2100      	movs	r1, #0
 800313c:	2050      	movs	r0, #80	; 0x50
 800313e:	f000 fc14 	bl	800396a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8003142:	2050      	movs	r0, #80	; 0x50
 8003144:	f000 fc2d 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003148:	bf00      	nop
 800314a:	3798      	adds	r7, #152	; 0x98
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	50060800 	.word	0x50060800
 8003154:	40021000 	.word	0x40021000

08003158 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08c      	sub	sp, #48	; 0x30
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 031c 	add.w	r3, r7, #28
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2f      	ldr	r2, [pc, #188]	; (8003234 <HAL_SPI_MspInit+0xdc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d129      	bne.n	80031ce <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800317a:	4b2f      	ldr	r3, [pc, #188]	; (8003238 <HAL_SPI_MspInit+0xe0>)
 800317c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317e:	4a2e      	ldr	r2, [pc, #184]	; (8003238 <HAL_SPI_MspInit+0xe0>)
 8003180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003184:	6613      	str	r3, [r2, #96]	; 0x60
 8003186:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <HAL_SPI_MspInit+0xe0>)
 8003188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003192:	4b29      	ldr	r3, [pc, #164]	; (8003238 <HAL_SPI_MspInit+0xe0>)
 8003194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003196:	4a28      	ldr	r2, [pc, #160]	; (8003238 <HAL_SPI_MspInit+0xe0>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_SPI_MspInit+0xe0>)
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031aa:	23e0      	movs	r3, #224	; 0xe0
 80031ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	2302      	movs	r3, #2
 80031b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b6:	2303      	movs	r3, #3
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031ba:	2305      	movs	r3, #5
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	f107 031c 	add.w	r3, r7, #28
 80031c2:	4619      	mov	r1, r3
 80031c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c8:	f000 fc06 	bl	80039d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80031cc:	e02d      	b.n	800322a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1a      	ldr	r2, [pc, #104]	; (800323c <HAL_SPI_MspInit+0xe4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d128      	bne.n	800322a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031d8:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_SPI_MspInit+0xe0>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	4a16      	ldr	r2, [pc, #88]	; (8003238 <HAL_SPI_MspInit+0xe0>)
 80031de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e2:	6593      	str	r3, [r2, #88]	; 0x58
 80031e4:	4b14      	ldr	r3, [pc, #80]	; (8003238 <HAL_SPI_MspInit+0xe0>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_SPI_MspInit+0xe0>)
 80031f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f4:	4a10      	ldr	r2, [pc, #64]	; (8003238 <HAL_SPI_MspInit+0xe0>)
 80031f6:	f043 0302 	orr.w	r3, r3, #2
 80031fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_SPI_MspInit+0xe0>)
 80031fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003208:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800320c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003216:	2303      	movs	r3, #3
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800321a:	2305      	movs	r3, #5
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321e:	f107 031c 	add.w	r3, r7, #28
 8003222:	4619      	mov	r1, r3
 8003224:	4806      	ldr	r0, [pc, #24]	; (8003240 <HAL_SPI_MspInit+0xe8>)
 8003226:	f000 fbd7 	bl	80039d8 <HAL_GPIO_Init>
}
 800322a:	bf00      	nop
 800322c:	3730      	adds	r7, #48	; 0x30
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40013000 	.word	0x40013000
 8003238:	40021000 	.word	0x40021000
 800323c:	40003800 	.word	0x40003800
 8003240:	48000400 	.word	0x48000400

08003244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003254:	d113      	bne.n	800327e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <HAL_TIM_Base_MspInit+0x44>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	4a0b      	ldr	r2, [pc, #44]	; (8003288 <HAL_TIM_Base_MspInit+0x44>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6593      	str	r3, [r2, #88]	; 0x58
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_TIM_Base_MspInit+0x44>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2100      	movs	r1, #0
 8003272:	201c      	movs	r0, #28
 8003274:	f000 fb79 	bl	800396a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003278:	201c      	movs	r0, #28
 800327a:	f000 fb92 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000

0800328c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 030c 	add.w	r3, r7, #12
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ac:	d11c      	bne.n	80032e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <HAL_TIM_MspPostInit+0x64>)
 80032b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b2:	4a0f      	ldr	r2, [pc, #60]	; (80032f0 <HAL_TIM_MspPostInit+0x64>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <HAL_TIM_MspPostInit+0x64>)
 80032bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_SERVO_PWM_Pin|RIGHT_SERVO_PWM_Pin;
 80032c6:	2303      	movs	r3, #3
 80032c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ca:	2302      	movs	r3, #2
 80032cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032d6:	2301      	movs	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032da:	f107 030c 	add.w	r3, r7, #12
 80032de:	4619      	mov	r1, r3
 80032e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032e4:	f000 fb78 	bl	80039d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80032e8:	bf00      	nop
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000

080032f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b0ae      	sub	sp, #184	; 0xb8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800330c:	f107 031c 	add.w	r3, r7, #28
 8003310:	2288      	movs	r2, #136	; 0x88
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f009 f877 	bl	800c408 <memset>
  if(huart->Instance==USART1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a43      	ldr	r2, [pc, #268]	; (800342c <HAL_UART_MspInit+0x138>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d13d      	bne.n	80033a0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003324:	2301      	movs	r3, #1
 8003326:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003328:	2300      	movs	r3, #0
 800332a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800332c:	f107 031c 	add.w	r3, r7, #28
 8003330:	4618      	mov	r0, r3
 8003332:	f002 f8db 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800333c:	f7ff fdf4 	bl	8002f28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003340:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_UART_MspInit+0x13c>)
 8003342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003344:	4a3a      	ldr	r2, [pc, #232]	; (8003430 <HAL_UART_MspInit+0x13c>)
 8003346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800334a:	6613      	str	r3, [r2, #96]	; 0x60
 800334c:	4b38      	ldr	r3, [pc, #224]	; (8003430 <HAL_UART_MspInit+0x13c>)
 800334e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	4b35      	ldr	r3, [pc, #212]	; (8003430 <HAL_UART_MspInit+0x13c>)
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335c:	4a34      	ldr	r2, [pc, #208]	; (8003430 <HAL_UART_MspInit+0x13c>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003364:	4b32      	ldr	r3, [pc, #200]	; (8003430 <HAL_UART_MspInit+0x13c>)
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003370:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800338a:	2307      	movs	r3, #7
 800338c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003390:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003394:	4619      	mov	r1, r3
 8003396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800339a:	f000 fb1d 	bl	80039d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800339e:	e040      	b.n	8003422 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a23      	ldr	r2, [pc, #140]	; (8003434 <HAL_UART_MspInit+0x140>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d13b      	bne.n	8003422 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033aa:	2302      	movs	r3, #2
 80033ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033ae:	2300      	movs	r3, #0
 80033b0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033b2:	f107 031c 	add.w	r3, r7, #28
 80033b6:	4618      	mov	r0, r3
 80033b8:	f002 f898 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80033c2:	f7ff fdb1 	bl	8002f28 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033c6:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <HAL_UART_MspInit+0x13c>)
 80033c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ca:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_UART_MspInit+0x13c>)
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d0:	6593      	str	r3, [r2, #88]	; 0x58
 80033d2:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_UART_MspInit+0x13c>)
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033de:	4b14      	ldr	r3, [pc, #80]	; (8003430 <HAL_UART_MspInit+0x13c>)
 80033e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e2:	4a13      	ldr	r2, [pc, #76]	; (8003430 <HAL_UART_MspInit+0x13c>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_UART_MspInit+0x13c>)
 80033ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033f6:	230c      	movs	r3, #12
 80033f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003408:	2303      	movs	r3, #3
 800340a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800340e:	2307      	movs	r3, #7
 8003410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003414:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003418:	4619      	mov	r1, r3
 800341a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800341e:	f000 fadb 	bl	80039d8 <HAL_GPIO_Init>
}
 8003422:	bf00      	nop
 8003424:	37b8      	adds	r7, #184	; 0xb8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40013800 	.word	0x40013800
 8003430:	40021000 	.word	0x40021000
 8003434:	40004400 	.word	0x40004400

08003438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800343c:	e7fe      	b.n	800343c <NMI_Handler+0x4>

0800343e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003442:	e7fe      	b.n	8003442 <HardFault_Handler+0x4>

08003444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003448:	e7fe      	b.n	8003448 <MemManage_Handler+0x4>

0800344a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800344e:	e7fe      	b.n	800344e <BusFault_Handler+0x4>

08003450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003454:	e7fe      	b.n	8003454 <UsageFault_Handler+0x4>

08003456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003472:	b480      	push	{r7}
 8003474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003484:	f000 f952 	bl	800372c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003488:	bf00      	nop
 800348a:	bd80      	pop	{r7, pc}

0800348c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003490:	4802      	ldr	r0, [pc, #8]	; (800349c <TIM2_IRQHandler+0x10>)
 8003492:	f003 ffa1 	bl	80073d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	200006a0 	.word	0x200006a0

080034a0 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80034a4:	4802      	ldr	r0, [pc, #8]	; (80034b0 <RNG_IRQHandler+0x10>)
 80034a6:	f002 fd8a 	bl	8005fbe <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	200005c8 	.word	0x200005c8

080034b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	e00a      	b.n	80034dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034c6:	f3af 8000 	nop.w
 80034ca:	4601      	mov	r1, r0
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	60ba      	str	r2, [r7, #8]
 80034d2:	b2ca      	uxtb	r2, r1
 80034d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3301      	adds	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	dbf0      	blt.n	80034c6 <_read+0x12>
  }

  return len;
 80034e4:	687b      	ldr	r3, [r7, #4]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	e009      	b.n	8003514 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	60ba      	str	r2, [r7, #8]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fefb 	bl	8002304 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3301      	adds	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	dbf1      	blt.n	8003500 <_write+0x12>
  }
  return len;
 800351c:	687b      	ldr	r3, [r7, #4]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <_close>:

int _close(int file)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800354e:	605a      	str	r2, [r3, #4]
  return 0;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <_isatty>:

int _isatty(int file)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003566:	2301      	movs	r3, #1
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003598:	4a14      	ldr	r2, [pc, #80]	; (80035ec <_sbrk+0x5c>)
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <_sbrk+0x60>)
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <_sbrk+0x64>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <_sbrk+0x64>)
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <_sbrk+0x68>)
 80035b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <_sbrk+0x64>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d207      	bcs.n	80035d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c0:	f008 ff80 	bl	800c4c4 <__errno>
 80035c4:	4603      	mov	r3, r0
 80035c6:	220c      	movs	r2, #12
 80035c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	e009      	b.n	80035e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <_sbrk+0x64>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035d6:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <_sbrk+0x64>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	4a05      	ldr	r2, [pc, #20]	; (80035f4 <_sbrk+0x64>)
 80035e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035e2:	68fb      	ldr	r3, [r7, #12]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20018000 	.word	0x20018000
 80035f0:	00000400 	.word	0x00000400
 80035f4:	200007fc 	.word	0x200007fc
 80035f8:	20000998 	.word	0x20000998

080035fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <SystemInit+0x20>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	4a05      	ldr	r2, [pc, #20]	; (800361c <SystemInit+0x20>)
 8003608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800360c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 8003620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003658 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003624:	f7ff ffea 	bl	80035fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003628:	480c      	ldr	r0, [pc, #48]	; (800365c <LoopForever+0x6>)
  ldr r1, =_edata
 800362a:	490d      	ldr	r1, [pc, #52]	; (8003660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800362c:	4a0d      	ldr	r2, [pc, #52]	; (8003664 <LoopForever+0xe>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003630:	e002      	b.n	8003638 <LoopCopyDataInit>

08003632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003636:	3304      	adds	r3, #4

08003638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800363c:	d3f9      	bcc.n	8003632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003640:	4c0a      	ldr	r4, [pc, #40]	; (800366c <LoopForever+0x16>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003644:	e001      	b.n	800364a <LoopFillZerobss>

08003646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003648:	3204      	adds	r2, #4

0800364a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800364c:	d3fb      	bcc.n	8003646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800364e:	f008 ff3f 	bl	800c4d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003652:	f7fe ff5d 	bl	8002510 <main>

08003656 <LoopForever>:

LoopForever:
    b LoopForever
 8003656:	e7fe      	b.n	8003656 <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 8003658:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800365c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003660:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003664:	0800dfa4 	.word	0x0800dfa4
  ldr r2, =_sbss
 8003668:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800366c:	20000998 	.word	0x20000998

08003670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003670:	e7fe      	b.n	8003670 <ADC1_2_IRQHandler>
	...

08003674 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <HAL_Init+0x3c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a0b      	ldr	r2, [pc, #44]	; (80036b0 <HAL_Init+0x3c>)
 8003684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003688:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800368a:	2003      	movs	r0, #3
 800368c:	f000 f962 	bl	8003954 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003690:	2000      	movs	r0, #0
 8003692:	f000 f80f 	bl	80036b4 <HAL_InitTick>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	71fb      	strb	r3, [r7, #7]
 80036a0:	e001      	b.n	80036a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036a2:	f7ff fc47 	bl	8002f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036a6:	79fb      	ldrb	r3, [r7, #7]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40022000 	.word	0x40022000

080036b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80036c0:	4b17      	ldr	r3, [pc, #92]	; (8003720 <HAL_InitTick+0x6c>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d023      	beq.n	8003710 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80036c8:	4b16      	ldr	r3, [pc, #88]	; (8003724 <HAL_InitTick+0x70>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_InitTick+0x6c>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4619      	mov	r1, r3
 80036d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f96d 	bl	80039be <HAL_SYSTICK_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10f      	bne.n	800370a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b0f      	cmp	r3, #15
 80036ee:	d809      	bhi.n	8003704 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036f0:	2200      	movs	r2, #0
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	f000 f937 	bl	800396a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036fc:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <HAL_InitTick+0x74>)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e007      	b.n	8003714 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
 8003708:	e004      	b.n	8003714 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
 800370e:	e001      	b.n	8003714 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000024 	.word	0x20000024
 8003724:	2000001c 	.word	0x2000001c
 8003728:	20000020 	.word	0x20000020

0800372c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <HAL_IncTick+0x20>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_IncTick+0x24>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4413      	add	r3, r2
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <HAL_IncTick+0x24>)
 800373e:	6013      	str	r3, [r2, #0]
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000024 	.word	0x20000024
 8003750:	20000800 	.word	0x20000800

08003754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return uwTick;
 8003758:	4b03      	ldr	r3, [pc, #12]	; (8003768 <HAL_GetTick+0x14>)
 800375a:	681b      	ldr	r3, [r3, #0]
}
 800375c:	4618      	mov	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000800 	.word	0x20000800

0800376c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003774:	f7ff ffee 	bl	8003754 <HAL_GetTick>
 8003778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d005      	beq.n	8003792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_Delay+0x44>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003792:	bf00      	nop
 8003794:	f7ff ffde 	bl	8003754 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d8f7      	bhi.n	8003794 <HAL_Delay+0x28>
  {
  }
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000024 	.word	0x20000024

080037b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <__NVIC_SetPriorityGrouping+0x44>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d0:	4013      	ands	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037e6:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <__NVIC_SetPriorityGrouping+0x44>)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	60d3      	str	r3, [r2, #12]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <__NVIC_GetPriorityGrouping+0x18>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	f003 0307 	and.w	r3, r3, #7
}
 800380a:	4618      	mov	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	2b00      	cmp	r3, #0
 8003828:	db0b      	blt.n	8003842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	f003 021f 	and.w	r2, r3, #31
 8003830:	4907      	ldr	r1, [pc, #28]	; (8003850 <__NVIC_EnableIRQ+0x38>)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	2001      	movs	r0, #1
 800383a:	fa00 f202 	lsl.w	r2, r0, r2
 800383e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	e000e100 	.word	0xe000e100

08003854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	6039      	str	r1, [r7, #0]
 800385e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	2b00      	cmp	r3, #0
 8003866:	db0a      	blt.n	800387e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	b2da      	uxtb	r2, r3
 800386c:	490c      	ldr	r1, [pc, #48]	; (80038a0 <__NVIC_SetPriority+0x4c>)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	0112      	lsls	r2, r2, #4
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	440b      	add	r3, r1
 8003878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800387c:	e00a      	b.n	8003894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	b2da      	uxtb	r2, r3
 8003882:	4908      	ldr	r1, [pc, #32]	; (80038a4 <__NVIC_SetPriority+0x50>)
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	3b04      	subs	r3, #4
 800388c:	0112      	lsls	r2, r2, #4
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	440b      	add	r3, r1
 8003892:	761a      	strb	r2, [r3, #24]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000e100 	.word	0xe000e100
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	; 0x24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f1c3 0307 	rsb	r3, r3, #7
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	bf28      	it	cs
 80038c6:	2304      	movcs	r3, #4
 80038c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3304      	adds	r3, #4
 80038ce:	2b06      	cmp	r3, #6
 80038d0:	d902      	bls.n	80038d8 <NVIC_EncodePriority+0x30>
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	3b03      	subs	r3, #3
 80038d6:	e000      	b.n	80038da <NVIC_EncodePriority+0x32>
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038dc:	f04f 32ff 	mov.w	r2, #4294967295
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43da      	mvns	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	401a      	ands	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f0:	f04f 31ff 	mov.w	r1, #4294967295
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	fa01 f303 	lsl.w	r3, r1, r3
 80038fa:	43d9      	mvns	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003900:	4313      	orrs	r3, r2
         );
}
 8003902:	4618      	mov	r0, r3
 8003904:	3724      	adds	r7, #36	; 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003920:	d301      	bcc.n	8003926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003922:	2301      	movs	r3, #1
 8003924:	e00f      	b.n	8003946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003926:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <SysTick_Config+0x40>)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800392e:	210f      	movs	r1, #15
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	f7ff ff8e 	bl	8003854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <SysTick_Config+0x40>)
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <SysTick_Config+0x40>)
 8003940:	2207      	movs	r2, #7
 8003942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	e000e010 	.word	0xe000e010

08003954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff29 	bl	80037b4 <__NVIC_SetPriorityGrouping>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b086      	sub	sp, #24
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800397c:	f7ff ff3e 	bl	80037fc <__NVIC_GetPriorityGrouping>
 8003980:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f7ff ff8e 	bl	80038a8 <NVIC_EncodePriority>
 800398c:	4602      	mov	r2, r0
 800398e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ff5d 	bl	8003854 <__NVIC_SetPriority>
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	4603      	mov	r3, r0
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff31 	bl	8003818 <__NVIC_EnableIRQ>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff ffa2 	bl	8003910 <SysTick_Config>
 80039cc:	4603      	mov	r3, r0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039e6:	e17f      	b.n	8003ce8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	2101      	movs	r1, #1
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	fa01 f303 	lsl.w	r3, r1, r3
 80039f4:	4013      	ands	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 8171 	beq.w	8003ce2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d005      	beq.n	8003a18 <HAL_GPIO_Init+0x40>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d130      	bne.n	8003a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	2203      	movs	r2, #3
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a4e:	2201      	movs	r2, #1
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 0201 	and.w	r2, r3, #1
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d118      	bne.n	8003ab8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	f003 0201 	and.w	r2, r3, #1
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d017      	beq.n	8003af4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2203      	movs	r2, #3
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d123      	bne.n	8003b48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	08da      	lsrs	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3208      	adds	r2, #8
 8003b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	220f      	movs	r2, #15
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	08da      	lsrs	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3208      	adds	r2, #8
 8003b42:	6939      	ldr	r1, [r7, #16]
 8003b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	2203      	movs	r2, #3
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0203 	and.w	r2, r3, #3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80ac 	beq.w	8003ce2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8a:	4b5f      	ldr	r3, [pc, #380]	; (8003d08 <HAL_GPIO_Init+0x330>)
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8e:	4a5e      	ldr	r2, [pc, #376]	; (8003d08 <HAL_GPIO_Init+0x330>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	6613      	str	r3, [r2, #96]	; 0x60
 8003b96:	4b5c      	ldr	r3, [pc, #368]	; (8003d08 <HAL_GPIO_Init+0x330>)
 8003b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ba2:	4a5a      	ldr	r2, [pc, #360]	; (8003d0c <HAL_GPIO_Init+0x334>)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	3302      	adds	r3, #2
 8003baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	220f      	movs	r2, #15
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bcc:	d025      	beq.n	8003c1a <HAL_GPIO_Init+0x242>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a4f      	ldr	r2, [pc, #316]	; (8003d10 <HAL_GPIO_Init+0x338>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01f      	beq.n	8003c16 <HAL_GPIO_Init+0x23e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a4e      	ldr	r2, [pc, #312]	; (8003d14 <HAL_GPIO_Init+0x33c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d019      	beq.n	8003c12 <HAL_GPIO_Init+0x23a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a4d      	ldr	r2, [pc, #308]	; (8003d18 <HAL_GPIO_Init+0x340>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_GPIO_Init+0x236>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a4c      	ldr	r2, [pc, #304]	; (8003d1c <HAL_GPIO_Init+0x344>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00d      	beq.n	8003c0a <HAL_GPIO_Init+0x232>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4b      	ldr	r2, [pc, #300]	; (8003d20 <HAL_GPIO_Init+0x348>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <HAL_GPIO_Init+0x22e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4a      	ldr	r2, [pc, #296]	; (8003d24 <HAL_GPIO_Init+0x34c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_GPIO_Init+0x22a>
 8003bfe:	2306      	movs	r3, #6
 8003c00:	e00c      	b.n	8003c1c <HAL_GPIO_Init+0x244>
 8003c02:	2307      	movs	r3, #7
 8003c04:	e00a      	b.n	8003c1c <HAL_GPIO_Init+0x244>
 8003c06:	2305      	movs	r3, #5
 8003c08:	e008      	b.n	8003c1c <HAL_GPIO_Init+0x244>
 8003c0a:	2304      	movs	r3, #4
 8003c0c:	e006      	b.n	8003c1c <HAL_GPIO_Init+0x244>
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e004      	b.n	8003c1c <HAL_GPIO_Init+0x244>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e002      	b.n	8003c1c <HAL_GPIO_Init+0x244>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_GPIO_Init+0x244>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	f002 0203 	and.w	r2, r2, #3
 8003c22:	0092      	lsls	r2, r2, #2
 8003c24:	4093      	lsls	r3, r2
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c2c:	4937      	ldr	r1, [pc, #220]	; (8003d0c <HAL_GPIO_Init+0x334>)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	089b      	lsrs	r3, r3, #2
 8003c32:	3302      	adds	r3, #2
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <HAL_GPIO_Init+0x350>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c5e:	4a32      	ldr	r2, [pc, #200]	; (8003d28 <HAL_GPIO_Init+0x350>)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c64:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <HAL_GPIO_Init+0x350>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4013      	ands	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c88:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <HAL_GPIO_Init+0x350>)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c8e:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <HAL_GPIO_Init+0x350>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	43db      	mvns	r3, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cb2:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <HAL_GPIO_Init+0x350>)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <HAL_GPIO_Init+0x350>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cdc:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <HAL_GPIO_Init+0x350>)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f47f ae78 	bne.w	80039e8 <HAL_GPIO_Init+0x10>
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	48000400 	.word	0x48000400
 8003d14:	48000800 	.word	0x48000800
 8003d18:	48000c00 	.word	0x48000c00
 8003d1c:	48001000 	.word	0x48001000
 8003d20:	48001400 	.word	0x48001400
 8003d24:	48001800 	.word	0x48001800
 8003d28:	40010400 	.word	0x40010400

08003d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d3c:	787b      	ldrb	r3, [r7, #1]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d42:	887a      	ldrh	r2, [r7, #2]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d48:	e002      	b.n	8003d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d4a:	887a      	ldrh	r2, [r7, #2]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e08d      	b.n	8003e8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d106      	bne.n	8003d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff f8fa 	bl	8002f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2224      	movs	r2, #36	; 0x24
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d107      	bne.n	8003dd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	e006      	b.n	8003de4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003de2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d108      	bne.n	8003dfe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	e007      	b.n	8003e0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69d9      	ldr	r1, [r3, #28]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	817b      	strh	r3, [r7, #10]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	f040 80fd 	bne.w	80040b0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_I2C_Master_Transmit+0x30>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0f6      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x21e>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ecc:	f7ff fc42 	bl	8003754 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	2319      	movs	r3, #25
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fa1d 	bl	800431e <I2C_WaitOnFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e0e1      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2221      	movs	r2, #33	; 0x21
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2210      	movs	r2, #16
 8003efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	893a      	ldrh	r2, [r7, #8]
 8003f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2bff      	cmp	r3, #255	; 0xff
 8003f1e:	d906      	bls.n	8003f2e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	22ff      	movs	r2, #255	; 0xff
 8003f24:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003f26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e007      	b.n	8003f3e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f3c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d024      	beq.n	8003f90 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	781a      	ldrb	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	8979      	ldrh	r1, [r7, #10]
 8003f82:	4b4e      	ldr	r3, [pc, #312]	; (80040bc <HAL_I2C_Master_Transmit+0x228>)
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fb81 	bl	8004690 <I2C_TransferConfig>
 8003f8e:	e066      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	8979      	ldrh	r1, [r7, #10]
 8003f98:	4b48      	ldr	r3, [pc, #288]	; (80040bc <HAL_I2C_Master_Transmit+0x228>)
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fb76 	bl	8004690 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003fa4:	e05b      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	6a39      	ldr	r1, [r7, #32]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fa06 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e07b      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	781a      	ldrb	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d034      	beq.n	800405e <HAL_I2C_Master_Transmit+0x1ca>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d130      	bne.n	800405e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	2200      	movs	r2, #0
 8004004:	2180      	movs	r1, #128	; 0x80
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f989 	bl	800431e <I2C_WaitOnFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e04d      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	2bff      	cmp	r3, #255	; 0xff
 800401e:	d90e      	bls.n	800403e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	22ff      	movs	r2, #255	; 0xff
 8004024:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	b2da      	uxtb	r2, r3
 800402c:	8979      	ldrh	r1, [r7, #10]
 800402e:	2300      	movs	r3, #0
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fb2a 	bl	8004690 <I2C_TransferConfig>
 800403c:	e00f      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404c:	b2da      	uxtb	r2, r3
 800404e:	8979      	ldrh	r1, [r7, #10]
 8004050:	2300      	movs	r3, #0
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fb19 	bl	8004690 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d19e      	bne.n	8003fa6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	6a39      	ldr	r1, [r7, #32]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f9ec 	bl	800444a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e01a      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2220      	movs	r2, #32
 8004082:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <HAL_I2C_Master_Transmit+0x22c>)
 8004090:	400b      	ands	r3, r1
 8004092:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
  }
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	80002000 	.word	0x80002000
 80040c0:	fe00e800 	.word	0xfe00e800

080040c4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08a      	sub	sp, #40	; 0x28
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	460b      	mov	r3, r1
 80040d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	f040 80f3 	bne.w	80042cc <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f4:	d101      	bne.n	80040fa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
 80040f8:	e0e9      	b.n	80042ce <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_I2C_IsDeviceReady+0x44>
 8004104:	2302      	movs	r3, #2
 8004106:	e0e2      	b.n	80042ce <HAL_I2C_IsDeviceReady+0x20a>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2224      	movs	r2, #36	; 0x24
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d107      	bne.n	8004136 <HAL_I2C_IsDeviceReady+0x72>
 8004126:	897b      	ldrh	r3, [r7, #10]
 8004128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800412c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004130:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004134:	e006      	b.n	8004144 <HAL_I2C_IsDeviceReady+0x80>
 8004136:	897b      	ldrh	r3, [r7, #10]
 8004138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800413c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004140:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800414a:	f7ff fb03 	bl	8003754 <HAL_GetTick>
 800414e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b20      	cmp	r3, #32
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b10      	cmp	r3, #16
 8004172:	bf0c      	ite	eq
 8004174:	2301      	moveq	r3, #1
 8004176:	2300      	movne	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800417c:	e034      	b.n	80041e8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d01a      	beq.n	80041bc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004186:	f7ff fae5 	bl	8003754 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <HAL_I2C_IsDeviceReady+0xd8>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10f      	bne.n	80041bc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	f043 0220 	orr.w	r2, r3, #32
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e088      	b.n	80042ce <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	bf0c      	ite	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2300      	movne	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b10      	cmp	r3, #16
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80041e8:	7ffb      	ldrb	r3, [r7, #31]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <HAL_I2C_IsDeviceReady+0x130>
 80041ee:	7fbb      	ldrb	r3, [r7, #30]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0c4      	beq.n	800417e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f003 0310 	and.w	r3, r3, #16
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d01a      	beq.n	8004238 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2200      	movs	r2, #0
 800420a:	2120      	movs	r1, #32
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f886 	bl	800431e <I2C_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e058      	b.n	80042ce <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2220      	movs	r2, #32
 8004222:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	e04a      	b.n	80042ce <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2200      	movs	r2, #0
 8004240:	2120      	movs	r1, #32
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f86b 	bl	800431e <I2C_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e03d      	b.n	80042ce <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2210      	movs	r2, #16
 8004258:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2220      	movs	r2, #32
 8004260:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	429a      	cmp	r2, r3
 8004268:	d118      	bne.n	800429c <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004278:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2200      	movs	r2, #0
 8004282:	2120      	movs	r1, #32
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f84a 	bl	800431e <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e01c      	b.n	80042ce <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2220      	movs	r2, #32
 800429a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	3301      	adds	r3, #1
 80042a0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	f63f af39 	bhi.w	800411e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b8:	f043 0220 	orr.w	r2, r3, #32
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
  }
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d103      	bne.n	80042f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2200      	movs	r2, #0
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d007      	beq.n	8004312 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699a      	ldr	r2, [r3, #24]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	619a      	str	r2, [r3, #24]
  }
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	4613      	mov	r3, r2
 800432c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800432e:	e031      	b.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004336:	d02d      	beq.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004338:	f7ff fa0c 	bl	8003754 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d122      	bne.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	bf0c      	ite	eq
 800435e:	2301      	moveq	r3, #1
 8004360:	2300      	movne	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	429a      	cmp	r2, r3
 800436a:	d113      	bne.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e00f      	b.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d0be      	beq.n	8004330 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043c8:	e033      	b.n	8004432 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f87e 	bl	80044d0 <I2C_IsErrorOccurred>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e031      	b.n	8004442 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d025      	beq.n	8004432 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e6:	f7ff f9b5 	bl	8003754 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d302      	bcc.n	80043fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d11a      	bne.n	8004432 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	d013      	beq.n	8004432 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f043 0220 	orr.w	r2, r3, #32
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e007      	b.n	8004442 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d1c4      	bne.n	80043ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004456:	e02f      	b.n	80044b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f837 	bl	80044d0 <I2C_IsErrorOccurred>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e02d      	b.n	80044c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446c:	f7ff f972 	bl	8003754 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	429a      	cmp	r2, r3
 800447a:	d302      	bcc.n	8004482 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d11a      	bne.n	80044b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b20      	cmp	r3, #32
 800448e:	d013      	beq.n	80044b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e007      	b.n	80044c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d1c8      	bne.n	8004458 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	; 0x28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d068      	beq.n	80045ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2210      	movs	r2, #16
 8004502:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004504:	e049      	b.n	800459a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d045      	beq.n	800459a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7ff f921 	bl	8003754 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <I2C_IsErrorOccurred+0x54>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d13a      	bne.n	800459a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800452e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004536:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004546:	d121      	bne.n	800458c <I2C_IsErrorOccurred+0xbc>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800454e:	d01d      	beq.n	800458c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	2b20      	cmp	r3, #32
 8004554:	d01a      	beq.n	800458c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004564:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004566:	f7ff f8f5 	bl	8003754 <HAL_GetTick>
 800456a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800456c:	e00e      	b.n	800458c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800456e:	f7ff f8f1 	bl	8003754 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b19      	cmp	r3, #25
 800457a:	d907      	bls.n	800458c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f043 0320 	orr.w	r3, r3, #32
 8004582:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800458a:	e006      	b.n	800459a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b20      	cmp	r3, #32
 8004598:	d1e9      	bne.n	800456e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d003      	beq.n	80045b0 <I2C_IsErrorOccurred+0xe0>
 80045a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0aa      	beq.n	8004506 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d103      	bne.n	80045c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2220      	movs	r2, #32
 80045be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f043 0304 	orr.w	r3, r3, #4
 80045c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00b      	beq.n	80045f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	f043 0308 	orr.w	r3, r3, #8
 8004608:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	f043 0302 	orr.w	r3, r3, #2
 800462a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800463c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01c      	beq.n	800467e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff fe46 	bl	80042d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b0d      	ldr	r3, [pc, #52]	; (800468c <I2C_IsErrorOccurred+0x1bc>)
 8004656:	400b      	ands	r3, r1
 8004658:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	431a      	orrs	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800467e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004682:	4618      	mov	r0, r3
 8004684:	3728      	adds	r7, #40	; 0x28
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	fe00e800 	.word	0xfe00e800

08004690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	817b      	strh	r3, [r7, #10]
 800469e:	4613      	mov	r3, r2
 80046a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046a2:	897b      	ldrh	r3, [r7, #10]
 80046a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046a8:	7a7b      	ldrb	r3, [r7, #9]
 80046aa:	041b      	lsls	r3, r3, #16
 80046ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	0d5b      	lsrs	r3, r3, #21
 80046ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <I2C_TransferConfig+0x60>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	43db      	mvns	r3, r3
 80046d4:	ea02 0103 	and.w	r1, r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	03ff63ff 	.word	0x03ff63ff

080046f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b20      	cmp	r3, #32
 8004708:	d138      	bne.n	800477c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004714:	2302      	movs	r3, #2
 8004716:	e032      	b.n	800477e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2224      	movs	r2, #36	; 0x24
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6819      	ldr	r1, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	e000      	b.n	800477e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800477c:	2302      	movs	r3, #2
  }
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800478a:	b480      	push	{r7}
 800478c:	b085      	sub	sp, #20
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b20      	cmp	r3, #32
 800479e:	d139      	bne.n	8004814 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e033      	b.n	8004816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2224      	movs	r2, #36	; 0x24
 80047ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0201 	bic.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004814:	2302      	movs	r3, #2
  }
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <HAL_PWREx_GetVoltageRange+0x18>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40007000 	.word	0x40007000

08004840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800484e:	d130      	bne.n	80048b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004850:	4b23      	ldr	r3, [pc, #140]	; (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485c:	d038      	beq.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800485e:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004866:	4a1e      	ldr	r2, [pc, #120]	; (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800486c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800486e:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2232      	movs	r2, #50	; 0x32
 8004874:	fb02 f303 	mul.w	r3, r2, r3
 8004878:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	0c9b      	lsrs	r3, r3, #18
 8004880:	3301      	adds	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004884:	e002      	b.n	800488c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b01      	subs	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800488c:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004898:	d102      	bne.n	80048a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f2      	bne.n	8004886 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ac:	d110      	bne.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e00f      	b.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048be:	d007      	beq.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048c8:	4a05      	ldr	r2, [pc, #20]	; (80048e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40007000 	.word	0x40007000
 80048e4:	2000001c 	.word	0x2000001c
 80048e8:	431bde83 	.word	0x431bde83

080048ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e3ca      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fe:	4b97      	ldr	r3, [pc, #604]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004908:	4b94      	ldr	r3, [pc, #592]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80e4 	beq.w	8004ae8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <HAL_RCC_OscConfig+0x4a>
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b0c      	cmp	r3, #12
 800492a:	f040 808b 	bne.w	8004a44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b01      	cmp	r3, #1
 8004932:	f040 8087 	bne.w	8004a44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004936:	4b89      	ldr	r3, [pc, #548]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_RCC_OscConfig+0x62>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e3a2      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1a      	ldr	r2, [r3, #32]
 8004952:	4b82      	ldr	r3, [pc, #520]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d004      	beq.n	8004968 <HAL_RCC_OscConfig+0x7c>
 800495e:	4b7f      	ldr	r3, [pc, #508]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004966:	e005      	b.n	8004974 <HAL_RCC_OscConfig+0x88>
 8004968:	4b7c      	ldr	r3, [pc, #496]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 800496a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004974:	4293      	cmp	r3, r2
 8004976:	d223      	bcs.n	80049c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fd55 	bl	800542c <RCC_SetFlashLatencyFromMSIRange>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e383      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800498c:	4b73      	ldr	r3, [pc, #460]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a72      	ldr	r2, [pc, #456]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004992:	f043 0308 	orr.w	r3, r3, #8
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b70      	ldr	r3, [pc, #448]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	496d      	ldr	r1, [pc, #436]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049aa:	4b6c      	ldr	r3, [pc, #432]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	4968      	ldr	r1, [pc, #416]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	604b      	str	r3, [r1, #4]
 80049be:	e025      	b.n	8004a0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049c0:	4b66      	ldr	r3, [pc, #408]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a65      	ldr	r2, [pc, #404]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049c6:	f043 0308 	orr.w	r3, r3, #8
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4b63      	ldr	r3, [pc, #396]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	4960      	ldr	r1, [pc, #384]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049de:	4b5f      	ldr	r3, [pc, #380]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	495b      	ldr	r1, [pc, #364]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fd15 	bl	800542c <RCC_SetFlashLatencyFromMSIRange>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e343      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a0c:	f000 fc4a 	bl	80052a4 <HAL_RCC_GetSysClockFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b52      	ldr	r3, [pc, #328]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	4950      	ldr	r1, [pc, #320]	; (8004b60 <HAL_RCC_OscConfig+0x274>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
 8004a28:	4a4e      	ldr	r2, [pc, #312]	; (8004b64 <HAL_RCC_OscConfig+0x278>)
 8004a2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a2c:	4b4e      	ldr	r3, [pc, #312]	; (8004b68 <HAL_RCC_OscConfig+0x27c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fe fe3f 	bl	80036b4 <HAL_InitTick>
 8004a36:	4603      	mov	r3, r0
 8004a38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d052      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	e327      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d032      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a4c:	4b43      	ldr	r3, [pc, #268]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a42      	ldr	r2, [pc, #264]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a58:	f7fe fe7c 	bl	8003754 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a60:	f7fe fe78 	bl	8003754 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e310      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a72:	4b3a      	ldr	r3, [pc, #232]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a7e:	4b37      	ldr	r3, [pc, #220]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a36      	ldr	r2, [pc, #216]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a84:	f043 0308 	orr.w	r3, r3, #8
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b34      	ldr	r3, [pc, #208]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	4931      	ldr	r1, [pc, #196]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a9c:	4b2f      	ldr	r3, [pc, #188]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	492c      	ldr	r1, [pc, #176]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	604b      	str	r3, [r1, #4]
 8004ab0:	e01a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a29      	ldr	r2, [pc, #164]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004abe:	f7fe fe49 	bl	8003754 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ac6:	f7fe fe45 	bl	8003754 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e2dd      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ad8:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f0      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x1da>
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ae6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d074      	beq.n	8004bde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d005      	beq.n	8004b06 <HAL_RCC_OscConfig+0x21a>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	d10e      	bne.n	8004b1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d10b      	bne.n	8004b1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b06:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d064      	beq.n	8004bdc <HAL_RCC_OscConfig+0x2f0>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d160      	bne.n	8004bdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e2ba      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b26:	d106      	bne.n	8004b36 <HAL_RCC_OscConfig+0x24a>
 8004b28:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a0b      	ldr	r2, [pc, #44]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	e026      	b.n	8004b84 <HAL_RCC_OscConfig+0x298>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b3e:	d115      	bne.n	8004b6c <HAL_RCC_OscConfig+0x280>
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a05      	ldr	r2, [pc, #20]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	4b03      	ldr	r3, [pc, #12]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a02      	ldr	r2, [pc, #8]	; (8004b5c <HAL_RCC_OscConfig+0x270>)
 8004b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	e014      	b.n	8004b84 <HAL_RCC_OscConfig+0x298>
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	0800de98 	.word	0x0800de98
 8004b64:	2000001c 	.word	0x2000001c
 8004b68:	20000020 	.word	0x20000020
 8004b6c:	4ba0      	ldr	r3, [pc, #640]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a9f      	ldr	r2, [pc, #636]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	4b9d      	ldr	r3, [pc, #628]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a9c      	ldr	r2, [pc, #624]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d013      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fe fde2 	bl	8003754 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b94:	f7fe fdde 	bl	8003754 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	; 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e276      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba6:	4b92      	ldr	r3, [pc, #584]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x2a8>
 8004bb2:	e014      	b.n	8004bde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fe fdce 	bl	8003754 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bbc:	f7fe fdca 	bl	8003754 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	; 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e262      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bce:	4b88      	ldr	r3, [pc, #544]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x2d0>
 8004bda:	e000      	b.n	8004bde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d060      	beq.n	8004cac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_OscConfig+0x310>
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b0c      	cmp	r3, #12
 8004bf4:	d119      	bne.n	8004c2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d116      	bne.n	8004c2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bfc:	4b7c      	ldr	r3, [pc, #496]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_OscConfig+0x328>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e23f      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c14:	4b76      	ldr	r3, [pc, #472]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	061b      	lsls	r3, r3, #24
 8004c22:	4973      	ldr	r1, [pc, #460]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c28:	e040      	b.n	8004cac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d023      	beq.n	8004c7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c32:	4b6f      	ldr	r3, [pc, #444]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a6e      	ldr	r2, [pc, #440]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fe fd89 	bl	8003754 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c46:	f7fe fd85 	bl	8003754 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e21d      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c58:	4b65      	ldr	r3, [pc, #404]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c64:	4b62      	ldr	r3, [pc, #392]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	495f      	ldr	r1, [pc, #380]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	604b      	str	r3, [r1, #4]
 8004c78:	e018      	b.n	8004cac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7a:	4b5d      	ldr	r3, [pc, #372]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a5c      	ldr	r2, [pc, #368]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c86:	f7fe fd65 	bl	8003754 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8e:	f7fe fd61 	bl	8003754 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e1f9      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca0:	4b53      	ldr	r3, [pc, #332]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f0      	bne.n	8004c8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d03c      	beq.n	8004d32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01c      	beq.n	8004cfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc0:	4b4b      	ldr	r3, [pc, #300]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc6:	4a4a      	ldr	r2, [pc, #296]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd0:	f7fe fd40 	bl	8003754 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd8:	f7fe fd3c 	bl	8003754 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e1d4      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cea:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ef      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x3ec>
 8004cf8:	e01b      	b.n	8004d32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cfa:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d00:	4a3b      	ldr	r2, [pc, #236]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0a:	f7fe fd23 	bl	8003754 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d12:	f7fe fd1f 	bl	8003754 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e1b7      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d24:	4b32      	ldr	r3, [pc, #200]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ef      	bne.n	8004d12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80a6 	beq.w	8004e8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d40:	2300      	movs	r3, #0
 8004d42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d44:	4b2a      	ldr	r3, [pc, #168]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d54:	4a26      	ldr	r2, [pc, #152]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d5c:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d6c:	4b21      	ldr	r3, [pc, #132]	; (8004df4 <HAL_RCC_OscConfig+0x508>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d118      	bne.n	8004daa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d78:	4b1e      	ldr	r3, [pc, #120]	; (8004df4 <HAL_RCC_OscConfig+0x508>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <HAL_RCC_OscConfig+0x508>)
 8004d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d84:	f7fe fce6 	bl	8003754 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8c:	f7fe fce2 	bl	8003754 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e17a      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <HAL_RCC_OscConfig+0x508>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d108      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x4d8>
 8004db2:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db8:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dc2:	e029      	b.n	8004e18 <HAL_RCC_OscConfig+0x52c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b05      	cmp	r3, #5
 8004dca:	d115      	bne.n	8004df8 <HAL_RCC_OscConfig+0x50c>
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd2:	4a07      	ldr	r2, [pc, #28]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004dd4:	f043 0304 	orr.w	r3, r3, #4
 8004dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ddc:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de2:	4a03      	ldr	r2, [pc, #12]	; (8004df0 <HAL_RCC_OscConfig+0x504>)
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dec:	e014      	b.n	8004e18 <HAL_RCC_OscConfig+0x52c>
 8004dee:	bf00      	nop
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40007000 	.word	0x40007000
 8004df8:	4b9c      	ldr	r3, [pc, #624]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfe:	4a9b      	ldr	r2, [pc, #620]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e08:	4b98      	ldr	r3, [pc, #608]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0e:	4a97      	ldr	r2, [pc, #604]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004e10:	f023 0304 	bic.w	r3, r3, #4
 8004e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d016      	beq.n	8004e4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fe fc98 	bl	8003754 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e26:	e00a      	b.n	8004e3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e28:	f7fe fc94 	bl	8003754 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e12a      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e3e:	4b8b      	ldr	r3, [pc, #556]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0ed      	beq.n	8004e28 <HAL_RCC_OscConfig+0x53c>
 8004e4c:	e015      	b.n	8004e7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fe fc81 	bl	8003754 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e54:	e00a      	b.n	8004e6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e56:	f7fe fc7d 	bl	8003754 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e113      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e6c:	4b7f      	ldr	r3, [pc, #508]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1ed      	bne.n	8004e56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e7a:	7ffb      	ldrb	r3, [r7, #31]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e80:	4b7a      	ldr	r3, [pc, #488]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e84:	4a79      	ldr	r2, [pc, #484]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80fe 	beq.w	8005092 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	f040 80d0 	bne.w	8005040 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ea0:	4b72      	ldr	r3, [pc, #456]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f003 0203 	and.w	r2, r3, #3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d130      	bne.n	8004f16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d127      	bne.n	8004f16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d11f      	bne.n	8004f16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ee0:	2a07      	cmp	r2, #7
 8004ee2:	bf14      	ite	ne
 8004ee4:	2201      	movne	r2, #1
 8004ee6:	2200      	moveq	r2, #0
 8004ee8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d113      	bne.n	8004f16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	3b01      	subs	r3, #1
 8004efc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d109      	bne.n	8004f16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d06e      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b0c      	cmp	r3, #12
 8004f1a:	d069      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f1c:	4b53      	ldr	r3, [pc, #332]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f28:	4b50      	ldr	r3, [pc, #320]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0ad      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f38:	4b4c      	ldr	r3, [pc, #304]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a4b      	ldr	r2, [pc, #300]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f44:	f7fe fc06 	bl	8003754 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fe fc02 	bl	8003754 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e09a      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f5e:	4b43      	ldr	r3, [pc, #268]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f6a:	4b40      	ldr	r3, [pc, #256]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	4b40      	ldr	r3, [pc, #256]	; (8005070 <HAL_RCC_OscConfig+0x784>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f7a:	3a01      	subs	r2, #1
 8004f7c:	0112      	lsls	r2, r2, #4
 8004f7e:	4311      	orrs	r1, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f84:	0212      	lsls	r2, r2, #8
 8004f86:	4311      	orrs	r1, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f8c:	0852      	lsrs	r2, r2, #1
 8004f8e:	3a01      	subs	r2, #1
 8004f90:	0552      	lsls	r2, r2, #21
 8004f92:	4311      	orrs	r1, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f98:	0852      	lsrs	r2, r2, #1
 8004f9a:	3a01      	subs	r2, #1
 8004f9c:	0652      	lsls	r2, r2, #25
 8004f9e:	4311      	orrs	r1, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fa4:	0912      	lsrs	r2, r2, #4
 8004fa6:	0452      	lsls	r2, r2, #17
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	4930      	ldr	r1, [pc, #192]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fb0:	4b2e      	ldr	r3, [pc, #184]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2d      	ldr	r2, [pc, #180]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fbc:	4b2b      	ldr	r3, [pc, #172]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a2a      	ldr	r2, [pc, #168]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fc8:	f7fe fbc4 	bl	8003754 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fe fbc0 	bl	8003754 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e058      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fe2:	4b22      	ldr	r3, [pc, #136]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fee:	e050      	b.n	8005092 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e04f      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d148      	bne.n	8005092 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005000:	4b1a      	ldr	r3, [pc, #104]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a19      	ldr	r2, [pc, #100]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8005006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800500c:	4b17      	ldr	r3, [pc, #92]	; (800506c <HAL_RCC_OscConfig+0x780>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4a16      	ldr	r2, [pc, #88]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8005012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005016:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005018:	f7fe fb9c 	bl	8003754 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005020:	f7fe fb98 	bl	8003754 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e030      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005032:	4b0e      	ldr	r3, [pc, #56]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x734>
 800503e:	e028      	b.n	8005092 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b0c      	cmp	r3, #12
 8005044:	d023      	beq.n	800508e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_OscConfig+0x780>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a08      	ldr	r2, [pc, #32]	; (800506c <HAL_RCC_OscConfig+0x780>)
 800504c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005052:	f7fe fb7f 	bl	8003754 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005058:	e00c      	b.n	8005074 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505a:	f7fe fb7b 	bl	8003754 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d905      	bls.n	8005074 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e013      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
 800506c:	40021000 	.word	0x40021000
 8005070:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005074:	4b09      	ldr	r3, [pc, #36]	; (800509c <HAL_RCC_OscConfig+0x7b0>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1ec      	bne.n	800505a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <HAL_RCC_OscConfig+0x7b0>)
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	4905      	ldr	r1, [pc, #20]	; (800509c <HAL_RCC_OscConfig+0x7b0>)
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <HAL_RCC_OscConfig+0x7b4>)
 8005088:	4013      	ands	r3, r2
 800508a:	60cb      	str	r3, [r1, #12]
 800508c:	e001      	b.n	8005092 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3720      	adds	r7, #32
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40021000 	.word	0x40021000
 80050a0:	feeefffc 	.word	0xfeeefffc

080050a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0e7      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b8:	4b75      	ldr	r3, [pc, #468]	; (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d910      	bls.n	80050e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c6:	4b72      	ldr	r3, [pc, #456]	; (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 0207 	bic.w	r2, r3, #7
 80050ce:	4970      	ldr	r1, [pc, #448]	; (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b6e      	ldr	r3, [pc, #440]	; (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0cf      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d010      	beq.n	8005116 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	4b66      	ldr	r3, [pc, #408]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005100:	429a      	cmp	r2, r3
 8005102:	d908      	bls.n	8005116 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005104:	4b63      	ldr	r3, [pc, #396]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4960      	ldr	r1, [pc, #384]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005112:	4313      	orrs	r3, r2
 8005114:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d04c      	beq.n	80051bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b03      	cmp	r3, #3
 8005128:	d107      	bne.n	800513a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800512a:	4b5a      	ldr	r3, [pc, #360]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d121      	bne.n	800517a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e0a6      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d107      	bne.n	8005152 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005142:	4b54      	ldr	r3, [pc, #336]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d115      	bne.n	800517a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e09a      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d107      	bne.n	800516a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800515a:	4b4e      	ldr	r3, [pc, #312]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e08e      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800516a:	4b4a      	ldr	r3, [pc, #296]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e086      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800517a:	4b46      	ldr	r3, [pc, #280]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f023 0203 	bic.w	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4943      	ldr	r1, [pc, #268]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005188:	4313      	orrs	r3, r2
 800518a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518c:	f7fe fae2 	bl	8003754 <HAL_GetTick>
 8005190:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	e00a      	b.n	80051aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005194:	f7fe fade 	bl	8003754 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e06e      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051aa:	4b3a      	ldr	r3, [pc, #232]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 020c 	and.w	r2, r3, #12
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d1eb      	bne.n	8005194 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d010      	beq.n	80051ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	4b31      	ldr	r3, [pc, #196]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d208      	bcs.n	80051ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d8:	4b2e      	ldr	r3, [pc, #184]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	492b      	ldr	r1, [pc, #172]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051ea:	4b29      	ldr	r3, [pc, #164]	; (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d210      	bcs.n	800521a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f8:	4b25      	ldr	r3, [pc, #148]	; (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f023 0207 	bic.w	r2, r3, #7
 8005200:	4923      	ldr	r1, [pc, #140]	; (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	4313      	orrs	r3, r2
 8005206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005208:	4b21      	ldr	r3, [pc, #132]	; (8005290 <HAL_RCC_ClockConfig+0x1ec>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d001      	beq.n	800521a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e036      	b.n	8005288 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005226:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4918      	ldr	r1, [pc, #96]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005234:	4313      	orrs	r3, r2
 8005236:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d009      	beq.n	8005258 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005244:	4b13      	ldr	r3, [pc, #76]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4910      	ldr	r1, [pc, #64]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005254:	4313      	orrs	r3, r2
 8005256:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005258:	f000 f824 	bl	80052a4 <HAL_RCC_GetSysClockFreq>
 800525c:	4602      	mov	r2, r0
 800525e:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <HAL_RCC_ClockConfig+0x1f0>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	091b      	lsrs	r3, r3, #4
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	490b      	ldr	r1, [pc, #44]	; (8005298 <HAL_RCC_ClockConfig+0x1f4>)
 800526a:	5ccb      	ldrb	r3, [r1, r3]
 800526c:	f003 031f 	and.w	r3, r3, #31
 8005270:	fa22 f303 	lsr.w	r3, r2, r3
 8005274:	4a09      	ldr	r2, [pc, #36]	; (800529c <HAL_RCC_ClockConfig+0x1f8>)
 8005276:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <HAL_RCC_ClockConfig+0x1fc>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f7fe fa19 	bl	80036b4 <HAL_InitTick>
 8005282:	4603      	mov	r3, r0
 8005284:	72fb      	strb	r3, [r7, #11]

  return status;
 8005286:	7afb      	ldrb	r3, [r7, #11]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40022000 	.word	0x40022000
 8005294:	40021000 	.word	0x40021000
 8005298:	0800de98 	.word	0x0800de98
 800529c:	2000001c 	.word	0x2000001c
 80052a0:	20000020 	.word	0x20000020

080052a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b089      	sub	sp, #36	; 0x24
 80052a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052b2:	4b3e      	ldr	r3, [pc, #248]	; (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052bc:	4b3b      	ldr	r3, [pc, #236]	; (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_GetSysClockFreq+0x34>
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	2b0c      	cmp	r3, #12
 80052d0:	d121      	bne.n	8005316 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d11e      	bne.n	8005316 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052d8:	4b34      	ldr	r3, [pc, #208]	; (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d107      	bne.n	80052f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052e4:	4b31      	ldr	r3, [pc, #196]	; (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 80052e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	e005      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052f4:	4b2d      	ldr	r3, [pc, #180]	; (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	091b      	lsrs	r3, r3, #4
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005300:	4a2b      	ldr	r2, [pc, #172]	; (80053b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005308:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10d      	bne.n	800532c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005314:	e00a      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b04      	cmp	r3, #4
 800531a:	d102      	bne.n	8005322 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800531c:	4b25      	ldr	r3, [pc, #148]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	e004      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d101      	bne.n	800532c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005328:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800532a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b0c      	cmp	r3, #12
 8005330:	d134      	bne.n	800539c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005332:	4b1e      	ldr	r3, [pc, #120]	; (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d003      	beq.n	800534a <HAL_RCC_GetSysClockFreq+0xa6>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d003      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0xac>
 8005348:	e005      	b.n	8005356 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800534a:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800534c:	617b      	str	r3, [r7, #20]
      break;
 800534e:	e005      	b.n	800535c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005352:	617b      	str	r3, [r7, #20]
      break;
 8005354:	e002      	b.n	800535c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	617b      	str	r3, [r7, #20]
      break;
 800535a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800535c:	4b13      	ldr	r3, [pc, #76]	; (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	3301      	adds	r3, #1
 8005368:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	0a1b      	lsrs	r3, r3, #8
 8005370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	fb03 f202 	mul.w	r2, r3, r2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	0e5b      	lsrs	r3, r3, #25
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	3301      	adds	r3, #1
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800539c:	69bb      	ldr	r3, [r7, #24]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3724      	adds	r7, #36	; 0x24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000
 80053b0:	0800deb0 	.word	0x0800deb0
 80053b4:	00f42400 	.word	0x00f42400
 80053b8:	007a1200 	.word	0x007a1200

080053bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c0:	4b03      	ldr	r3, [pc, #12]	; (80053d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053c2:	681b      	ldr	r3, [r3, #0]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	2000001c 	.word	0x2000001c

080053d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053d8:	f7ff fff0 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	0a1b      	lsrs	r3, r3, #8
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	4904      	ldr	r1, [pc, #16]	; (80053fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40021000 	.word	0x40021000
 80053fc:	0800dea8 	.word	0x0800dea8

08005400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005404:	f7ff ffda 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 8005408:	4602      	mov	r2, r0
 800540a:	4b06      	ldr	r3, [pc, #24]	; (8005424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	0adb      	lsrs	r3, r3, #11
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	4904      	ldr	r1, [pc, #16]	; (8005428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005420:	4618      	mov	r0, r3
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40021000 	.word	0x40021000
 8005428:	0800dea8 	.word	0x0800dea8

0800542c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005434:	2300      	movs	r3, #0
 8005436:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005438:	4b2a      	ldr	r3, [pc, #168]	; (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005444:	f7ff f9ee 	bl	8004824 <HAL_PWREx_GetVoltageRange>
 8005448:	6178      	str	r0, [r7, #20]
 800544a:	e014      	b.n	8005476 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800544c:	4b25      	ldr	r3, [pc, #148]	; (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800544e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005450:	4a24      	ldr	r2, [pc, #144]	; (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005456:	6593      	str	r3, [r2, #88]	; 0x58
 8005458:	4b22      	ldr	r3, [pc, #136]	; (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800545a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005464:	f7ff f9de 	bl	8004824 <HAL_PWREx_GetVoltageRange>
 8005468:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800546a:	4b1e      	ldr	r3, [pc, #120]	; (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800546c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546e:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005474:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800547c:	d10b      	bne.n	8005496 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d919      	bls.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2ba0      	cmp	r3, #160	; 0xa0
 8005488:	d902      	bls.n	8005490 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800548a:	2302      	movs	r3, #2
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	e013      	b.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005490:	2301      	movs	r3, #1
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	e010      	b.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b80      	cmp	r3, #128	; 0x80
 800549a:	d902      	bls.n	80054a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800549c:	2303      	movs	r3, #3
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	e00a      	b.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b80      	cmp	r3, #128	; 0x80
 80054a6:	d102      	bne.n	80054ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054a8:	2302      	movs	r3, #2
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	e004      	b.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b70      	cmp	r3, #112	; 0x70
 80054b2:	d101      	bne.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054b4:	2301      	movs	r3, #1
 80054b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054b8:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f023 0207 	bic.w	r2, r3, #7
 80054c0:	4909      	ldr	r1, [pc, #36]	; (80054e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054c8:	4b07      	ldr	r3, [pc, #28]	; (80054e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d001      	beq.n	80054da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40021000 	.word	0x40021000
 80054e8:	40022000 	.word	0x40022000

080054ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054f4:	2300      	movs	r3, #0
 80054f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054f8:	2300      	movs	r3, #0
 80054fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005504:	2b00      	cmp	r3, #0
 8005506:	d041      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800550c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005510:	d02a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005512:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005516:	d824      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800551c:	d008      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800551e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005522:	d81e      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800552c:	d010      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800552e:	e018      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005530:	4b86      	ldr	r3, [pc, #536]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a85      	ldr	r2, [pc, #532]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800553c:	e015      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	2100      	movs	r1, #0
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fabb 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800554e:	e00c      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3320      	adds	r3, #32
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fba6 	bl	8005ca8 <RCCEx_PLLSAI2_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005560:	e003      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	74fb      	strb	r3, [r7, #19]
      break;
 8005566:	e000      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556a:	7cfb      	ldrb	r3, [r7, #19]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005570:	4b76      	ldr	r3, [pc, #472]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800557e:	4973      	ldr	r1, [pc, #460]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005586:	e001      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d041      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800559c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055a0:	d02a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80055a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055a6:	d824      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80055a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ac:	d008      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055b2:	d81e      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80055b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055bc:	d010      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055be:	e018      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055c0:	4b62      	ldr	r3, [pc, #392]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a61      	ldr	r2, [pc, #388]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055cc:	e015      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3304      	adds	r3, #4
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fa73 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055de:	e00c      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3320      	adds	r3, #32
 80055e4:	2100      	movs	r1, #0
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fb5e 	bl	8005ca8 <RCCEx_PLLSAI2_Config>
 80055ec:	4603      	mov	r3, r0
 80055ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055f0:	e003      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	74fb      	strb	r3, [r7, #19]
      break;
 80055f6:	e000      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80055f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055fa:	7cfb      	ldrb	r3, [r7, #19]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10b      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005600:	4b52      	ldr	r3, [pc, #328]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005606:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800560e:	494f      	ldr	r1, [pc, #316]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005616:	e001      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005618:	7cfb      	ldrb	r3, [r7, #19]
 800561a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80a0 	beq.w	800576a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562a:	2300      	movs	r3, #0
 800562c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800562e:	4b47      	ldr	r3, [pc, #284]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800563e:	2300      	movs	r3, #0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00d      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005644:	4b41      	ldr	r3, [pc, #260]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005648:	4a40      	ldr	r2, [pc, #256]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800564a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564e:	6593      	str	r3, [r2, #88]	; 0x58
 8005650:	4b3e      	ldr	r3, [pc, #248]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800565c:	2301      	movs	r3, #1
 800565e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005660:	4b3b      	ldr	r3, [pc, #236]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a3a      	ldr	r2, [pc, #232]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800566c:	f7fe f872 	bl	8003754 <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005672:	e009      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005674:	f7fe f86e 	bl	8003754 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d902      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	74fb      	strb	r3, [r7, #19]
        break;
 8005686:	e005      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005688:	4b31      	ldr	r3, [pc, #196]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0ef      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005694:	7cfb      	ldrb	r3, [r7, #19]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d15c      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800569a:	4b2c      	ldr	r3, [pc, #176]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01f      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d019      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056b8:	4b24      	ldr	r3, [pc, #144]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056c4:	4b21      	ldr	r3, [pc, #132]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ca:	4a20      	ldr	r2, [pc, #128]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056da:	4a1c      	ldr	r2, [pc, #112]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056e4:	4a19      	ldr	r2, [pc, #100]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d016      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f6:	f7fe f82d 	bl	8003754 <HAL_GetTick>
 80056fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056fc:	e00b      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fe:	f7fe f829 	bl	8003754 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f241 3288 	movw	r2, #5000	; 0x1388
 800570c:	4293      	cmp	r3, r2
 800570e:	d902      	bls.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	74fb      	strb	r3, [r7, #19]
            break;
 8005714:	e006      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005716:	4b0d      	ldr	r3, [pc, #52]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0ec      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005724:	7cfb      	ldrb	r3, [r7, #19]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10c      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800572a:	4b08      	ldr	r3, [pc, #32]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800573a:	4904      	ldr	r1, [pc, #16]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800573c:	4313      	orrs	r3, r2
 800573e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005742:	e009      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005744:	7cfb      	ldrb	r3, [r7, #19]
 8005746:	74bb      	strb	r3, [r7, #18]
 8005748:	e006      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800574a:	bf00      	nop
 800574c:	40021000 	.word	0x40021000
 8005750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005754:	7cfb      	ldrb	r3, [r7, #19]
 8005756:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005758:	7c7b      	ldrb	r3, [r7, #17]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d105      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800575e:	4b9e      	ldr	r3, [pc, #632]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005762:	4a9d      	ldr	r2, [pc, #628]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005768:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005776:	4b98      	ldr	r3, [pc, #608]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577c:	f023 0203 	bic.w	r2, r3, #3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	4994      	ldr	r1, [pc, #592]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005798:	4b8f      	ldr	r3, [pc, #572]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579e:	f023 020c 	bic.w	r2, r3, #12
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	498c      	ldr	r1, [pc, #560]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057ba:	4b87      	ldr	r3, [pc, #540]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	4983      	ldr	r1, [pc, #524]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057dc:	4b7e      	ldr	r3, [pc, #504]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ea:	497b      	ldr	r1, [pc, #492]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057fe:	4b76      	ldr	r3, [pc, #472]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580c:	4972      	ldr	r1, [pc, #456]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005820:	4b6d      	ldr	r3, [pc, #436]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005826:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582e:	496a      	ldr	r1, [pc, #424]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005842:	4b65      	ldr	r3, [pc, #404]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005848:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005850:	4961      	ldr	r1, [pc, #388]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005864:	4b5c      	ldr	r3, [pc, #368]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005872:	4959      	ldr	r1, [pc, #356]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005886:	4b54      	ldr	r3, [pc, #336]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005894:	4950      	ldr	r1, [pc, #320]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058a8:	4b4b      	ldr	r3, [pc, #300]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	4948      	ldr	r1, [pc, #288]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058ca:	4b43      	ldr	r3, [pc, #268]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	493f      	ldr	r1, [pc, #252]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d028      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ec:	4b3a      	ldr	r3, [pc, #232]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058fa:	4937      	ldr	r1, [pc, #220]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800590a:	d106      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800590c:	4b32      	ldr	r3, [pc, #200]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4a31      	ldr	r2, [pc, #196]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005916:	60d3      	str	r3, [r2, #12]
 8005918:	e011      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800591e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005922:	d10c      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	2101      	movs	r1, #1
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f8c8 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800593a:	7cfb      	ldrb	r3, [r7, #19]
 800593c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d028      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800594a:	4b23      	ldr	r3, [pc, #140]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	491f      	ldr	r1, [pc, #124]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005968:	d106      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800596a:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005974:	60d3      	str	r3, [r2, #12]
 8005976:	e011      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005980:	d10c      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3304      	adds	r3, #4
 8005986:	2101      	movs	r1, #1
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f899 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005992:	7cfb      	ldrb	r3, [r7, #19]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005998:	7cfb      	ldrb	r3, [r7, #19]
 800599a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d02b      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b6:	4908      	ldr	r1, [pc, #32]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c6:	d109      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c8:	4b03      	ldr	r3, [pc, #12]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4a02      	ldr	r2, [pc, #8]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059d2:	60d3      	str	r3, [r2, #12]
 80059d4:	e014      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80059d6:	bf00      	nop
 80059d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3304      	adds	r3, #4
 80059ea:	2101      	movs	r1, #1
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 f867 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059f6:	7cfb      	ldrb	r3, [r7, #19]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80059fc:	7cfb      	ldrb	r3, [r7, #19]
 80059fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02f      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a0c:	4b2b      	ldr	r3, [pc, #172]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a1a:	4928      	ldr	r1, [pc, #160]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a2a:	d10d      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	2102      	movs	r1, #2
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f844 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a3c:	7cfb      	ldrb	r3, [r7, #19]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d014      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005a42:	7cfb      	ldrb	r3, [r7, #19]
 8005a44:	74bb      	strb	r3, [r7, #18]
 8005a46:	e011      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a50:	d10c      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3320      	adds	r3, #32
 8005a56:	2102      	movs	r1, #2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 f925 	bl	8005ca8 <RCCEx_PLLSAI2_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a62:	7cfb      	ldrb	r3, [r7, #19]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005a68:	7cfb      	ldrb	r3, [r7, #19]
 8005a6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a78:	4b10      	ldr	r3, [pc, #64]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a86:	490d      	ldr	r1, [pc, #52]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a9a:	4b08      	ldr	r3, [pc, #32]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aaa:	4904      	ldr	r1, [pc, #16]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ab2:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40021000 	.word	0x40021000

08005ac0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ace:	4b75      	ldr	r3, [pc, #468]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d018      	beq.n	8005b0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ada:	4b72      	ldr	r3, [pc, #456]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 0203 	and.w	r2, r3, #3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d10d      	bne.n	8005b06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
       ||
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005af2:	4b6c      	ldr	r3, [pc, #432]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	091b      	lsrs	r3, r3, #4
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
       ||
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d047      	beq.n	8005b96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	73fb      	strb	r3, [r7, #15]
 8005b0a:	e044      	b.n	8005b96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d018      	beq.n	8005b46 <RCCEx_PLLSAI1_Config+0x86>
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d825      	bhi.n	8005b64 <RCCEx_PLLSAI1_Config+0xa4>
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d002      	beq.n	8005b22 <RCCEx_PLLSAI1_Config+0x62>
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d009      	beq.n	8005b34 <RCCEx_PLLSAI1_Config+0x74>
 8005b20:	e020      	b.n	8005b64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b22:	4b60      	ldr	r3, [pc, #384]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d11d      	bne.n	8005b6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b32:	e01a      	b.n	8005b6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b34:	4b5b      	ldr	r3, [pc, #364]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d116      	bne.n	8005b6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b44:	e013      	b.n	8005b6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b46:	4b57      	ldr	r3, [pc, #348]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10f      	bne.n	8005b72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b52:	4b54      	ldr	r3, [pc, #336]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d109      	bne.n	8005b72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b62:	e006      	b.n	8005b72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	73fb      	strb	r3, [r7, #15]
      break;
 8005b68:	e004      	b.n	8005b74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b6a:	bf00      	nop
 8005b6c:	e002      	b.n	8005b74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b72:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10d      	bne.n	8005b96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b7a:	4b4a      	ldr	r3, [pc, #296]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6819      	ldr	r1, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	4944      	ldr	r1, [pc, #272]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d17d      	bne.n	8005c98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b9c:	4b41      	ldr	r3, [pc, #260]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a40      	ldr	r2, [pc, #256]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba8:	f7fd fdd4 	bl	8003754 <HAL_GetTick>
 8005bac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bae:	e009      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bb0:	f7fd fdd0 	bl	8003754 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d902      	bls.n	8005bc4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	73fb      	strb	r3, [r7, #15]
        break;
 8005bc2:	e005      	b.n	8005bd0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bc4:	4b37      	ldr	r3, [pc, #220]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1ef      	bne.n	8005bb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d160      	bne.n	8005c98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d111      	bne.n	8005c00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bdc:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6892      	ldr	r2, [r2, #8]
 8005bec:	0211      	lsls	r1, r2, #8
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68d2      	ldr	r2, [r2, #12]
 8005bf2:	0912      	lsrs	r2, r2, #4
 8005bf4:	0452      	lsls	r2, r2, #17
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	492a      	ldr	r1, [pc, #168]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	610b      	str	r3, [r1, #16]
 8005bfe:	e027      	b.n	8005c50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d112      	bne.n	8005c2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c06:	4b27      	ldr	r3, [pc, #156]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6892      	ldr	r2, [r2, #8]
 8005c16:	0211      	lsls	r1, r2, #8
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6912      	ldr	r2, [r2, #16]
 8005c1c:	0852      	lsrs	r2, r2, #1
 8005c1e:	3a01      	subs	r2, #1
 8005c20:	0552      	lsls	r2, r2, #21
 8005c22:	430a      	orrs	r2, r1
 8005c24:	491f      	ldr	r1, [pc, #124]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	610b      	str	r3, [r1, #16]
 8005c2a:	e011      	b.n	8005c50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6892      	ldr	r2, [r2, #8]
 8005c3c:	0211      	lsls	r1, r2, #8
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6952      	ldr	r2, [r2, #20]
 8005c42:	0852      	lsrs	r2, r2, #1
 8005c44:	3a01      	subs	r2, #1
 8005c46:	0652      	lsls	r2, r2, #25
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	4916      	ldr	r1, [pc, #88]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c50:	4b14      	ldr	r3, [pc, #80]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a13      	ldr	r2, [pc, #76]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5c:	f7fd fd7a 	bl	8003754 <HAL_GetTick>
 8005c60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c62:	e009      	b.n	8005c78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c64:	f7fd fd76 	bl	8003754 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d902      	bls.n	8005c78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	73fb      	strb	r3, [r7, #15]
          break;
 8005c76:	e005      	b.n	8005c84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c78:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0ef      	beq.n	8005c64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c8a:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	4904      	ldr	r1, [pc, #16]	; (8005ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40021000 	.word	0x40021000

08005ca8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cb6:	4b6a      	ldr	r3, [pc, #424]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d018      	beq.n	8005cf4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005cc2:	4b67      	ldr	r3, [pc, #412]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f003 0203 	and.w	r2, r3, #3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d10d      	bne.n	8005cee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
       ||
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d009      	beq.n	8005cee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005cda:	4b61      	ldr	r3, [pc, #388]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	091b      	lsrs	r3, r3, #4
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
       ||
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d047      	beq.n	8005d7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
 8005cf2:	e044      	b.n	8005d7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d018      	beq.n	8005d2e <RCCEx_PLLSAI2_Config+0x86>
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d825      	bhi.n	8005d4c <RCCEx_PLLSAI2_Config+0xa4>
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d002      	beq.n	8005d0a <RCCEx_PLLSAI2_Config+0x62>
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d009      	beq.n	8005d1c <RCCEx_PLLSAI2_Config+0x74>
 8005d08:	e020      	b.n	8005d4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d0a:	4b55      	ldr	r3, [pc, #340]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d11d      	bne.n	8005d52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d1a:	e01a      	b.n	8005d52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d1c:	4b50      	ldr	r3, [pc, #320]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d116      	bne.n	8005d56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d2c:	e013      	b.n	8005d56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d2e:	4b4c      	ldr	r3, [pc, #304]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10f      	bne.n	8005d5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d3a:	4b49      	ldr	r3, [pc, #292]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d4a:	e006      	b.n	8005d5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d50:	e004      	b.n	8005d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d52:	bf00      	nop
 8005d54:	e002      	b.n	8005d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d56:	bf00      	nop
 8005d58:	e000      	b.n	8005d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10d      	bne.n	8005d7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d62:	4b3f      	ldr	r3, [pc, #252]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6819      	ldr	r1, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	430b      	orrs	r3, r1
 8005d78:	4939      	ldr	r1, [pc, #228]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d167      	bne.n	8005e54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d84:	4b36      	ldr	r3, [pc, #216]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a35      	ldr	r2, [pc, #212]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d90:	f7fd fce0 	bl	8003754 <HAL_GetTick>
 8005d94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d96:	e009      	b.n	8005dac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d98:	f7fd fcdc 	bl	8003754 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d902      	bls.n	8005dac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	73fb      	strb	r3, [r7, #15]
        break;
 8005daa:	e005      	b.n	8005db8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dac:	4b2c      	ldr	r3, [pc, #176]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1ef      	bne.n	8005d98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d14a      	bne.n	8005e54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d111      	bne.n	8005de8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005dc4:	4b26      	ldr	r3, [pc, #152]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6892      	ldr	r2, [r2, #8]
 8005dd4:	0211      	lsls	r1, r2, #8
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	68d2      	ldr	r2, [r2, #12]
 8005dda:	0912      	lsrs	r2, r2, #4
 8005ddc:	0452      	lsls	r2, r2, #17
 8005dde:	430a      	orrs	r2, r1
 8005de0:	491f      	ldr	r1, [pc, #124]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	614b      	str	r3, [r1, #20]
 8005de6:	e011      	b.n	8005e0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005de8:	4b1d      	ldr	r3, [pc, #116]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005df0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6892      	ldr	r2, [r2, #8]
 8005df8:	0211      	lsls	r1, r2, #8
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6912      	ldr	r2, [r2, #16]
 8005dfe:	0852      	lsrs	r2, r2, #1
 8005e00:	3a01      	subs	r2, #1
 8005e02:	0652      	lsls	r2, r2, #25
 8005e04:	430a      	orrs	r2, r1
 8005e06:	4916      	ldr	r1, [pc, #88]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e0c:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e18:	f7fd fc9c 	bl	8003754 <HAL_GetTick>
 8005e1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e1e:	e009      	b.n	8005e34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e20:	f7fd fc98 	bl	8003754 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d902      	bls.n	8005e34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	73fb      	strb	r3, [r7, #15]
          break;
 8005e32:	e005      	b.n	8005e40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e34:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0ef      	beq.n	8005e20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e46:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	4904      	ldr	r1, [pc, #16]	; (8005e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40021000 	.word	0x40021000

08005e64 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e049      	b.n	8005f0a <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	795b      	ldrb	r3, [r3, #5]
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d105      	bne.n	8005e8c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fd f91a 	bl	80030c0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0204 	orr.w	r2, r2, #4
 8005ea0:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d104      	bne.n	8005eba <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2204      	movs	r2, #4
 8005eb4:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e027      	b.n	8005f0a <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005eba:	f7fd fc4b 	bl	8003754 <HAL_GetTick>
 8005ebe:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005ec0:	e015      	b.n	8005eee <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005ec2:	f7fd fc47 	bl	8003754 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d90e      	bls.n	8005eee <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d107      	bne.n	8005eee <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e00d      	b.n	8005f0a <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d0e2      	beq.n	8005ec2 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	791b      	ldrb	r3, [r3, #4]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_RNG_GenerateRandomNumber+0x1a>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e044      	b.n	8005fb6 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	795b      	ldrb	r3, [r3, #5]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d133      	bne.n	8005fa4 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f42:	f7fd fc07 	bl	8003754 <HAL_GetTick>
 8005f46:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f48:	e018      	b.n	8005f7c <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005f4a:	f7fd fc03 	bl	8003754 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d911      	bls.n	8005f7c <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d00a      	beq.n	8005f7c <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e01c      	b.n	8005fb6 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d1df      	bne.n	8005f4a <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	715a      	strb	r2, [r3, #5]
 8005fa2:	e004      	b.n	8005fae <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	711a      	strb	r2, [r3, #4]

  return status;
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2210      	movs	r2, #16
 8005fe0:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	e01f      	b.n	8006028 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01a      	beq.n	8006028 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d108      	bne.n	800600e <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800600a:	605a      	str	r2, [r3, #4]
 800600c:	e00c      	b.n	8006028 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2208      	movs	r2, #8
 8006012:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8006014:	2301      	movs	r3, #1
 8006016:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0208 	bic.w	r2, r2, #8
 8006026:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d10b      	bne.n	8006046 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2204      	movs	r2, #4
 8006032:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f837 	bl	80060a8 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8006042:	605a      	str	r2, [r3, #4]

    return;
 8006044:	e022      	b.n	800608c <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01d      	beq.n	800608c <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0208 	bic.w	r2, r2, #8
 800605e:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	795b      	ldrb	r3, [r3, #5]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b04      	cmp	r3, #4
 8006072:	d00b      	beq.n	800608c <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f803 	bl	8006092 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_RNG_GetState>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL state
  */
HAL_RNG_StateTypeDef HAL_RNG_GetState(const RNG_HandleTypeDef *hrng)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  return hrng->State;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	795b      	ldrb	r3, [r3, #5]
 80060c8:	b2db      	uxtb	r3, r3
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e095      	b.n	8006214 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d108      	bne.n	8006102 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060f8:	d009      	beq.n	800610e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	61da      	str	r2, [r3, #28]
 8006100:	e005      	b.n	800610e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7fd f815 	bl	8003158 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2202      	movs	r2, #2
 8006132:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006144:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800614e:	d902      	bls.n	8006156 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	e002      	b.n	800615c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800615a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006164:	d007      	beq.n	8006176 <HAL_SPI_Init+0xa0>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800616e:	d002      	beq.n	8006176 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	ea42 0103 	orr.w	r1, r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	0c1b      	lsrs	r3, r3, #16
 80061d2:	f003 0204 	and.w	r2, r3, #4
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061f2:	ea42 0103 	orr.w	r1, r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_SPI_Transmit+0x22>
 800623a:	2302      	movs	r3, #2
 800623c:	e15f      	b.n	80064fe <HAL_SPI_Transmit+0x2e2>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006246:	f7fd fa85 	bl	8003754 <HAL_GetTick>
 800624a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800624c:	88fb      	ldrh	r3, [r7, #6]
 800624e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	d002      	beq.n	8006262 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800625c:	2302      	movs	r3, #2
 800625e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006260:	e148      	b.n	80064f4 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <HAL_SPI_Transmit+0x52>
 8006268:	88fb      	ldrh	r3, [r7, #6]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006272:	e13f      	b.n	80064f4 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2203      	movs	r2, #3
 8006278:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	88fa      	ldrh	r2, [r7, #6]
 800628c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	88fa      	ldrh	r2, [r7, #6]
 8006292:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062be:	d10f      	bne.n	80062e0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d007      	beq.n	80062fe <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006306:	d94f      	bls.n	80063a8 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <HAL_SPI_Transmit+0xfa>
 8006310:	8afb      	ldrh	r3, [r7, #22]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d142      	bne.n	800639c <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	881a      	ldrh	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	1c9a      	adds	r2, r3, #2
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800633a:	e02f      	b.n	800639c <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b02      	cmp	r3, #2
 8006348:	d112      	bne.n	8006370 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	881a      	ldrh	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	1c9a      	adds	r2, r3, #2
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b01      	subs	r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800636e:	e015      	b.n	800639c <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006370:	f7fd f9f0 	bl	8003754 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d803      	bhi.n	8006388 <HAL_SPI_Transmit+0x16c>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006386:	d102      	bne.n	800638e <HAL_SPI_Transmit+0x172>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800639a:	e0ab      	b.n	80064f4 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1ca      	bne.n	800633c <HAL_SPI_Transmit+0x120>
 80063a6:	e080      	b.n	80064aa <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <HAL_SPI_Transmit+0x19a>
 80063b0:	8afb      	ldrh	r3, [r7, #22]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d174      	bne.n	80064a0 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d912      	bls.n	80063e6 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	881a      	ldrh	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	1c9a      	adds	r2, r3, #2
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b02      	subs	r3, #2
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063e4:	e05c      	b.n	80064a0 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	7812      	ldrb	r2, [r2, #0]
 80063f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800640c:	e048      	b.n	80064a0 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b02      	cmp	r3, #2
 800641a:	d12b      	bne.n	8006474 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	d912      	bls.n	800644c <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	881a      	ldrh	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b02      	subs	r3, #2
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	87da      	strh	r2, [r3, #62]	; 0x3e
 800644a:	e029      	b.n	80064a0 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	330c      	adds	r3, #12
 8006456:	7812      	ldrb	r2, [r2, #0]
 8006458:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006472:	e015      	b.n	80064a0 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006474:	f7fd f96e 	bl	8003754 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d803      	bhi.n	800648c <HAL_SPI_Transmit+0x270>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648a:	d102      	bne.n	8006492 <HAL_SPI_Transmit+0x276>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800649e:	e029      	b.n	80064f4 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1b1      	bne.n	800640e <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 fcf8 	bl	8006ea4 <SPI_EndRxTxTransaction>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2220      	movs	r2, #32
 80064be:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064c8:	2300      	movs	r3, #0
 80064ca:	613b      	str	r3, [r7, #16]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	613b      	str	r3, [r7, #16]
 80064dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	77fb      	strb	r3, [r7, #31]
 80064ea:	e003      	b.n	80064f4 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3720      	adds	r7, #32
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b088      	sub	sp, #32
 800650a:	af02      	add	r7, sp, #8
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	603b      	str	r3, [r7, #0]
 8006512:	4613      	mov	r3, r2
 8006514:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b01      	cmp	r3, #1
 8006524:	d002      	beq.n	800652c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006526:	2302      	movs	r3, #2
 8006528:	75fb      	strb	r3, [r7, #23]
    goto error;
 800652a:	e11a      	b.n	8006762 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006534:	d112      	bne.n	800655c <HAL_SPI_Receive+0x56>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10e      	bne.n	800655c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2204      	movs	r2, #4
 8006542:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006546:	88fa      	ldrh	r2, [r7, #6]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	4613      	mov	r3, r2
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f90e 	bl	8006774 <HAL_SPI_TransmitReceive>
 8006558:	4603      	mov	r3, r0
 800655a:	e107      	b.n	800676c <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <HAL_SPI_Receive+0x64>
 8006566:	2302      	movs	r3, #2
 8006568:	e100      	b.n	800676c <HAL_SPI_Receive+0x266>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006572:	f7fd f8ef 	bl	8003754 <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <HAL_SPI_Receive+0x7e>
 800657e:	88fb      	ldrh	r3, [r7, #6]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006588:	e0eb      	b.n	8006762 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2204      	movs	r2, #4
 800658e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	88fa      	ldrh	r2, [r7, #6]
 80065a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	88fa      	ldrh	r2, [r7, #6]
 80065aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065d4:	d908      	bls.n	80065e8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065e4:	605a      	str	r2, [r3, #4]
 80065e6:	e007      	b.n	80065f8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065f6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006600:	d10f      	bne.n	8006622 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006610:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006620:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	d007      	beq.n	8006640 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800663e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006648:	d86f      	bhi.n	800672a <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800664a:	e034      	b.n	80066b6 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b01      	cmp	r3, #1
 8006658:	d117      	bne.n	800668a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f103 020c 	add.w	r2, r3, #12
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	7812      	ldrb	r2, [r2, #0]
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006688:	e015      	b.n	80066b6 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800668a:	f7fd f863 	bl	8003754 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d803      	bhi.n	80066a2 <HAL_SPI_Receive+0x19c>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d102      	bne.n	80066a8 <HAL_SPI_Receive+0x1a2>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80066b4:	e055      	b.n	8006762 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1c4      	bne.n	800664c <HAL_SPI_Receive+0x146>
 80066c2:	e038      	b.n	8006736 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d115      	bne.n	80066fe <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	b292      	uxth	r2, r2
 80066de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	1c9a      	adds	r2, r3, #2
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80066fc:	e015      	b.n	800672a <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066fe:	f7fd f829 	bl	8003754 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d803      	bhi.n	8006716 <HAL_SPI_Receive+0x210>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006714:	d102      	bne.n	800671c <HAL_SPI_Receive+0x216>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d106      	bne.n	800672a <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006728:	e01b      	b.n	8006762 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1c6      	bne.n	80066c4 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 fb5a 	bl	8006df4 <SPI_EndRxTransaction>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2220      	movs	r2, #32
 800674a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	75fb      	strb	r3, [r7, #23]
 8006758:	e003      	b.n	8006762 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08a      	sub	sp, #40	; 0x28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006782:	2301      	movs	r3, #1
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_SPI_TransmitReceive+0x26>
 8006796:	2302      	movs	r3, #2
 8006798:	e20a      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x43c>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a2:	f7fc ffd7 	bl	8003754 <HAL_GetTick>
 80067a6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067ae:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80067b6:	887b      	ldrh	r3, [r7, #2]
 80067b8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80067ba:	887b      	ldrh	r3, [r7, #2]
 80067bc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067be:	7efb      	ldrb	r3, [r7, #27]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d00e      	beq.n	80067e2 <HAL_SPI_TransmitReceive+0x6e>
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ca:	d106      	bne.n	80067da <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <HAL_SPI_TransmitReceive+0x66>
 80067d4:	7efb      	ldrb	r3, [r7, #27]
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d003      	beq.n	80067e2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80067da:	2302      	movs	r3, #2
 80067dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80067e0:	e1e0      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_SPI_TransmitReceive+0x80>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <HAL_SPI_TransmitReceive+0x80>
 80067ee:	887b      	ldrh	r3, [r7, #2]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d103      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80067fa:	e1d3      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b04      	cmp	r3, #4
 8006806:	d003      	beq.n	8006810 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2205      	movs	r2, #5
 800680c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	887a      	ldrh	r2, [r7, #2]
 8006820:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	887a      	ldrh	r2, [r7, #2]
 8006828:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	887a      	ldrh	r2, [r7, #2]
 8006836:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	887a      	ldrh	r2, [r7, #2]
 800683c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006852:	d802      	bhi.n	800685a <HAL_SPI_TransmitReceive+0xe6>
 8006854:	8a3b      	ldrh	r3, [r7, #16]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d908      	bls.n	800686c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006868:	605a      	str	r2, [r3, #4]
 800686a:	e007      	b.n	800687c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800687a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d007      	beq.n	800689a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006898:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068a2:	f240 8081 	bls.w	80069a8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <HAL_SPI_TransmitReceive+0x140>
 80068ae:	8a7b      	ldrh	r3, [r7, #18]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d16d      	bne.n	8006990 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	881a      	ldrh	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	1c9a      	adds	r2, r3, #2
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068d8:	e05a      	b.n	8006990 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d11b      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x1ac>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d016      	beq.n	8006920 <HAL_SPI_TransmitReceive+0x1ac>
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d113      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	881a      	ldrh	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	1c9a      	adds	r2, r3, #2
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b01      	cmp	r3, #1
 800692c:	d11c      	bne.n	8006968 <HAL_SPI_TransmitReceive+0x1f4>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d016      	beq.n	8006968 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006944:	b292      	uxth	r2, r2
 8006946:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	1c9a      	adds	r2, r3, #2
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006964:	2301      	movs	r3, #1
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006968:	f7fc fef4 	bl	8003754 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006974:	429a      	cmp	r2, r3
 8006976:	d80b      	bhi.n	8006990 <HAL_SPI_TransmitReceive+0x21c>
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697e:	d007      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800698e:	e109      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d19f      	bne.n	80068da <HAL_SPI_TransmitReceive+0x166>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d199      	bne.n	80068da <HAL_SPI_TransmitReceive+0x166>
 80069a6:	e0e3      	b.n	8006b70 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <HAL_SPI_TransmitReceive+0x244>
 80069b0:	8a7b      	ldrh	r3, [r7, #18]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	f040 80cf 	bne.w	8006b56 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d912      	bls.n	80069e8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	881a      	ldrh	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	1c9a      	adds	r2, r3, #2
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b02      	subs	r3, #2
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069e6:	e0b6      	b.n	8006b56 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	7812      	ldrb	r2, [r2, #0]
 80069f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a0e:	e0a2      	b.n	8006b56 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d134      	bne.n	8006a88 <HAL_SPI_TransmitReceive+0x314>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d02f      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x314>
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d12c      	bne.n	8006a88 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d912      	bls.n	8006a5e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	881a      	ldrh	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	1c9a      	adds	r2, r3, #2
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b02      	subs	r3, #2
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a5c:	e012      	b.n	8006a84 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	7812      	ldrb	r2, [r2, #0]
 8006a6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d148      	bne.n	8006b28 <HAL_SPI_TransmitReceive+0x3b4>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d042      	beq.n	8006b28 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d923      	bls.n	8006af6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	b292      	uxth	r2, r2
 8006aba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	1c9a      	adds	r2, r3, #2
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b02      	subs	r3, #2
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d81f      	bhi.n	8006b24 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006af2:	605a      	str	r2, [r3, #4]
 8006af4:	e016      	b.n	8006b24 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f103 020c 	add.w	r2, r3, #12
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	7812      	ldrb	r2, [r2, #0]
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b24:	2301      	movs	r3, #1
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b28:	f7fc fe14 	bl	8003754 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d803      	bhi.n	8006b40 <HAL_SPI_TransmitReceive+0x3cc>
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3e:	d102      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x3d2>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d107      	bne.n	8006b56 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006b54:	e026      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f47f af57 	bne.w	8006a10 <HAL_SPI_TransmitReceive+0x29c>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f47f af50 	bne.w	8006a10 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b70:	69fa      	ldr	r2, [r7, #28]
 8006b72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f995 	bl	8006ea4 <SPI_EndRxTxTransaction>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9a:	e003      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3728      	adds	r7, #40	; 0x28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bc8:	f7fc fdc4 	bl	8003754 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	1a9b      	subs	r3, r3, r2
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bd8:	f7fc fdbc 	bl	8003754 <HAL_GetTick>
 8006bdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bde:	4b39      	ldr	r3, [pc, #228]	; (8006cc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	015b      	lsls	r3, r3, #5
 8006be4:	0d1b      	lsrs	r3, r3, #20
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	fb02 f303 	mul.w	r3, r2, r3
 8006bec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bee:	e054      	b.n	8006c9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf6:	d050      	beq.n	8006c9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bf8:	f7fc fdac 	bl	8003754 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d902      	bls.n	8006c0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d13d      	bne.n	8006c8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c26:	d111      	bne.n	8006c4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c30:	d004      	beq.n	8006c3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c3a:	d107      	bne.n	8006c4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c54:	d10f      	bne.n	8006c76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e017      	b.n	8006cba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	bf0c      	ite	eq
 8006caa:	2301      	moveq	r3, #1
 8006cac:	2300      	movne	r3, #0
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d19b      	bne.n	8006bf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	2000001c 	.word	0x2000001c

08006cc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08a      	sub	sp, #40	; 0x28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006cda:	f7fc fd3b 	bl	8003754 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	1a9b      	subs	r3, r3, r2
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006cea:	f7fc fd33 	bl	8003754 <HAL_GetTick>
 8006cee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006cf8:	4b3d      	ldr	r3, [pc, #244]	; (8006df0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	00da      	lsls	r2, r3, #3
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	0d1b      	lsrs	r3, r3, #20
 8006d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d0a:	fb02 f303 	mul.w	r3, r2, r3
 8006d0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d10:	e060      	b.n	8006dd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d18:	d107      	bne.n	8006d2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d30:	d050      	beq.n	8006dd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d32:	f7fc fd0f 	bl	8003754 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d902      	bls.n	8006d48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d13d      	bne.n	8006dc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d60:	d111      	bne.n	8006d86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6a:	d004      	beq.n	8006d76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d74:	d107      	bne.n	8006d86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d8e:	d10f      	bne.n	8006db0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e010      	b.n	8006de6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d196      	bne.n	8006d12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3728      	adds	r7, #40	; 0x28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	2000001c 	.word	0x2000001c

08006df4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af02      	add	r7, sp, #8
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e08:	d111      	bne.n	8006e2e <SPI_EndRxTransaction+0x3a>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e12:	d004      	beq.n	8006e1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e1c:	d107      	bne.n	8006e2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2200      	movs	r2, #0
 8006e36:	2180      	movs	r1, #128	; 0x80
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f7ff febd 	bl	8006bb8 <SPI_WaitFlagStateUntilTimeout>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d007      	beq.n	8006e54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e48:	f043 0220 	orr.w	r2, r3, #32
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e023      	b.n	8006e9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e5c:	d11d      	bne.n	8006e9a <SPI_EndRxTransaction+0xa6>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e66:	d004      	beq.n	8006e72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e70:	d113      	bne.n	8006e9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7ff ff22 	bl	8006cc8 <SPI_WaitFifoStateUntilTimeout>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d007      	beq.n	8006e9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e8e:	f043 0220 	orr.w	r2, r3, #32
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e000      	b.n	8006e9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f7ff ff03 	bl	8006cc8 <SPI_WaitFifoStateUntilTimeout>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ecc:	f043 0220 	orr.w	r2, r3, #32
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e027      	b.n	8006f28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2180      	movs	r1, #128	; 0x80
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f7ff fe68 	bl	8006bb8 <SPI_WaitFlagStateUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef2:	f043 0220 	orr.w	r2, r3, #32
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e014      	b.n	8006f28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f7ff fedc 	bl	8006cc8 <SPI_WaitFifoStateUntilTimeout>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d007      	beq.n	8006f26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f1a:	f043 0220 	orr.w	r2, r3, #32
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e000      	b.n	8006f28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e049      	b.n	8006fd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d106      	bne.n	8006f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fc f974 	bl	8003244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f000 fd44 	bl	80079fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e049      	b.n	8007084 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d106      	bne.n	800700a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f841 	bl	800708c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2202      	movs	r2, #2
 800700e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3304      	adds	r3, #4
 800701a:	4619      	mov	r1, r3
 800701c:	4610      	mov	r0, r2
 800701e:	f000 fced 	bl	80079fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d109      	bne.n	80070c4 <HAL_TIM_PWM_Start+0x24>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	bf14      	ite	ne
 80070bc:	2301      	movne	r3, #1
 80070be:	2300      	moveq	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	e03c      	b.n	800713e <HAL_TIM_PWM_Start+0x9e>
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d109      	bne.n	80070de <HAL_TIM_PWM_Start+0x3e>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	bf14      	ite	ne
 80070d6:	2301      	movne	r3, #1
 80070d8:	2300      	moveq	r3, #0
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	e02f      	b.n	800713e <HAL_TIM_PWM_Start+0x9e>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d109      	bne.n	80070f8 <HAL_TIM_PWM_Start+0x58>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	bf14      	ite	ne
 80070f0:	2301      	movne	r3, #1
 80070f2:	2300      	moveq	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	e022      	b.n	800713e <HAL_TIM_PWM_Start+0x9e>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b0c      	cmp	r3, #12
 80070fc:	d109      	bne.n	8007112 <HAL_TIM_PWM_Start+0x72>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b01      	cmp	r3, #1
 8007108:	bf14      	ite	ne
 800710a:	2301      	movne	r3, #1
 800710c:	2300      	moveq	r3, #0
 800710e:	b2db      	uxtb	r3, r3
 8007110:	e015      	b.n	800713e <HAL_TIM_PWM_Start+0x9e>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b10      	cmp	r3, #16
 8007116:	d109      	bne.n	800712c <HAL_TIM_PWM_Start+0x8c>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b01      	cmp	r3, #1
 8007122:	bf14      	ite	ne
 8007124:	2301      	movne	r3, #1
 8007126:	2300      	moveq	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	e008      	b.n	800713e <HAL_TIM_PWM_Start+0x9e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	bf14      	ite	ne
 8007138:	2301      	movne	r3, #1
 800713a:	2300      	moveq	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e09c      	b.n	8007280 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d104      	bne.n	8007156 <HAL_TIM_PWM_Start+0xb6>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007154:	e023      	b.n	800719e <HAL_TIM_PWM_Start+0xfe>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b04      	cmp	r3, #4
 800715a:	d104      	bne.n	8007166 <HAL_TIM_PWM_Start+0xc6>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007164:	e01b      	b.n	800719e <HAL_TIM_PWM_Start+0xfe>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d104      	bne.n	8007176 <HAL_TIM_PWM_Start+0xd6>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007174:	e013      	b.n	800719e <HAL_TIM_PWM_Start+0xfe>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b0c      	cmp	r3, #12
 800717a:	d104      	bne.n	8007186 <HAL_TIM_PWM_Start+0xe6>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007184:	e00b      	b.n	800719e <HAL_TIM_PWM_Start+0xfe>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b10      	cmp	r3, #16
 800718a:	d104      	bne.n	8007196 <HAL_TIM_PWM_Start+0xf6>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007194:	e003      	b.n	800719e <HAL_TIM_PWM_Start+0xfe>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2202      	movs	r2, #2
 800719a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2201      	movs	r2, #1
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f001 f832 	bl	8008210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a35      	ldr	r2, [pc, #212]	; (8007288 <HAL_TIM_PWM_Start+0x1e8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d013      	beq.n	80071de <HAL_TIM_PWM_Start+0x13e>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a34      	ldr	r2, [pc, #208]	; (800728c <HAL_TIM_PWM_Start+0x1ec>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00e      	beq.n	80071de <HAL_TIM_PWM_Start+0x13e>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a32      	ldr	r2, [pc, #200]	; (8007290 <HAL_TIM_PWM_Start+0x1f0>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d009      	beq.n	80071de <HAL_TIM_PWM_Start+0x13e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a31      	ldr	r2, [pc, #196]	; (8007294 <HAL_TIM_PWM_Start+0x1f4>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d004      	beq.n	80071de <HAL_TIM_PWM_Start+0x13e>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a2f      	ldr	r2, [pc, #188]	; (8007298 <HAL_TIM_PWM_Start+0x1f8>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d101      	bne.n	80071e2 <HAL_TIM_PWM_Start+0x142>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <HAL_TIM_PWM_Start+0x144>
 80071e2:	2300      	movs	r3, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d007      	beq.n	80071f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a22      	ldr	r2, [pc, #136]	; (8007288 <HAL_TIM_PWM_Start+0x1e8>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d01d      	beq.n	800723e <HAL_TIM_PWM_Start+0x19e>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800720a:	d018      	beq.n	800723e <HAL_TIM_PWM_Start+0x19e>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a22      	ldr	r2, [pc, #136]	; (800729c <HAL_TIM_PWM_Start+0x1fc>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d013      	beq.n	800723e <HAL_TIM_PWM_Start+0x19e>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a21      	ldr	r2, [pc, #132]	; (80072a0 <HAL_TIM_PWM_Start+0x200>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00e      	beq.n	800723e <HAL_TIM_PWM_Start+0x19e>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a1f      	ldr	r2, [pc, #124]	; (80072a4 <HAL_TIM_PWM_Start+0x204>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d009      	beq.n	800723e <HAL_TIM_PWM_Start+0x19e>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a17      	ldr	r2, [pc, #92]	; (800728c <HAL_TIM_PWM_Start+0x1ec>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d004      	beq.n	800723e <HAL_TIM_PWM_Start+0x19e>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a15      	ldr	r2, [pc, #84]	; (8007290 <HAL_TIM_PWM_Start+0x1f0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d115      	bne.n	800726a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	4b18      	ldr	r3, [pc, #96]	; (80072a8 <HAL_TIM_PWM_Start+0x208>)
 8007246:	4013      	ands	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b06      	cmp	r3, #6
 800724e:	d015      	beq.n	800727c <HAL_TIM_PWM_Start+0x1dc>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007256:	d011      	beq.n	800727c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007268:	e008      	b.n	800727c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0201 	orr.w	r2, r2, #1
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	e000      	b.n	800727e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	40012c00 	.word	0x40012c00
 800728c:	40013400 	.word	0x40013400
 8007290:	40014000 	.word	0x40014000
 8007294:	40014400 	.word	0x40014400
 8007298:	40014800 	.word	0x40014800
 800729c:	40000400 	.word	0x40000400
 80072a0:	40000800 	.word	0x40000800
 80072a4:	40000c00 	.word	0x40000c00
 80072a8:	00010007 	.word	0x00010007

080072ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 ffa6 	bl	8008210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a3e      	ldr	r2, [pc, #248]	; (80073c4 <HAL_TIM_PWM_Stop+0x118>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d013      	beq.n	80072f6 <HAL_TIM_PWM_Stop+0x4a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a3d      	ldr	r2, [pc, #244]	; (80073c8 <HAL_TIM_PWM_Stop+0x11c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d00e      	beq.n	80072f6 <HAL_TIM_PWM_Stop+0x4a>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a3b      	ldr	r2, [pc, #236]	; (80073cc <HAL_TIM_PWM_Stop+0x120>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d009      	beq.n	80072f6 <HAL_TIM_PWM_Stop+0x4a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a3a      	ldr	r2, [pc, #232]	; (80073d0 <HAL_TIM_PWM_Stop+0x124>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d004      	beq.n	80072f6 <HAL_TIM_PWM_Stop+0x4a>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a38      	ldr	r2, [pc, #224]	; (80073d4 <HAL_TIM_PWM_Stop+0x128>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d101      	bne.n	80072fa <HAL_TIM_PWM_Stop+0x4e>
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <HAL_TIM_PWM_Stop+0x50>
 80072fa:	2300      	movs	r3, #0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d017      	beq.n	8007330 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6a1a      	ldr	r2, [r3, #32]
 8007306:	f241 1311 	movw	r3, #4369	; 0x1111
 800730a:	4013      	ands	r3, r2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10f      	bne.n	8007330 <HAL_TIM_PWM_Stop+0x84>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6a1a      	ldr	r2, [r3, #32]
 8007316:	f240 4344 	movw	r3, #1092	; 0x444
 800731a:	4013      	ands	r3, r2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d107      	bne.n	8007330 <HAL_TIM_PWM_Stop+0x84>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800732e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6a1a      	ldr	r2, [r3, #32]
 8007336:	f241 1311 	movw	r3, #4369	; 0x1111
 800733a:	4013      	ands	r3, r2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10f      	bne.n	8007360 <HAL_TIM_PWM_Stop+0xb4>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6a1a      	ldr	r2, [r3, #32]
 8007346:	f240 4344 	movw	r3, #1092	; 0x444
 800734a:	4013      	ands	r3, r2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d107      	bne.n	8007360 <HAL_TIM_PWM_Stop+0xb4>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0201 	bic.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d104      	bne.n	8007370 <HAL_TIM_PWM_Stop+0xc4>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800736e:	e023      	b.n	80073b8 <HAL_TIM_PWM_Stop+0x10c>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2b04      	cmp	r3, #4
 8007374:	d104      	bne.n	8007380 <HAL_TIM_PWM_Stop+0xd4>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800737e:	e01b      	b.n	80073b8 <HAL_TIM_PWM_Stop+0x10c>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2b08      	cmp	r3, #8
 8007384:	d104      	bne.n	8007390 <HAL_TIM_PWM_Stop+0xe4>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800738e:	e013      	b.n	80073b8 <HAL_TIM_PWM_Stop+0x10c>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2b0c      	cmp	r3, #12
 8007394:	d104      	bne.n	80073a0 <HAL_TIM_PWM_Stop+0xf4>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800739e:	e00b      	b.n	80073b8 <HAL_TIM_PWM_Stop+0x10c>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b10      	cmp	r3, #16
 80073a4:	d104      	bne.n	80073b0 <HAL_TIM_PWM_Stop+0x104>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073ae:	e003      	b.n	80073b8 <HAL_TIM_PWM_Stop+0x10c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40013400 	.word	0x40013400
 80073cc:	40014000 	.word	0x40014000
 80073d0:	40014400 	.word	0x40014400
 80073d4:	40014800 	.word	0x40014800

080073d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d020      	beq.n	800743c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01b      	beq.n	800743c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f06f 0202 	mvn.w	r2, #2
 800740c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 facb 	bl	80079be <HAL_TIM_IC_CaptureCallback>
 8007428:	e005      	b.n	8007436 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fabd 	bl	80079aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 face 	bl	80079d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b00      	cmp	r3, #0
 8007444:	d020      	beq.n	8007488 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d01b      	beq.n	8007488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0204 	mvn.w	r2, #4
 8007458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2202      	movs	r2, #2
 800745e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 faa5 	bl	80079be <HAL_TIM_IC_CaptureCallback>
 8007474:	e005      	b.n	8007482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa97 	bl	80079aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 faa8 	bl	80079d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b00      	cmp	r3, #0
 8007490:	d020      	beq.n	80074d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f003 0308 	and.w	r3, r3, #8
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01b      	beq.n	80074d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f06f 0208 	mvn.w	r2, #8
 80074a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2204      	movs	r2, #4
 80074aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa7f 	bl	80079be <HAL_TIM_IC_CaptureCallback>
 80074c0:	e005      	b.n	80074ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa71 	bl	80079aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fa82 	bl	80079d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d020      	beq.n	8007520 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f003 0310 	and.w	r3, r3, #16
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d01b      	beq.n	8007520 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f06f 0210 	mvn.w	r2, #16
 80074f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2208      	movs	r2, #8
 80074f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fa59 	bl	80079be <HAL_TIM_IC_CaptureCallback>
 800750c:	e005      	b.n	800751a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fa4b 	bl	80079aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fa5c 	bl	80079d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00c      	beq.n	8007544 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f06f 0201 	mvn.w	r2, #1
 800753c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fa29 	bl	8007996 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00c      	beq.n	8007568 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 ff0c 	bl	8008380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00c      	beq.n	800758c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 ff04 	bl	8008394 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00c      	beq.n	80075b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa1b 	bl	80079e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00c      	beq.n	80075d4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d007      	beq.n	80075d4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f06f 0220 	mvn.w	r2, #32
 80075cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fecc 	bl	800836c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075d4:	bf00      	nop
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d101      	bne.n	80075fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075f6:	2302      	movs	r3, #2
 80075f8:	e0ff      	b.n	80077fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b14      	cmp	r3, #20
 8007606:	f200 80f0 	bhi.w	80077ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800760a:	a201      	add	r2, pc, #4	; (adr r2, 8007610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007665 	.word	0x08007665
 8007614:	080077eb 	.word	0x080077eb
 8007618:	080077eb 	.word	0x080077eb
 800761c:	080077eb 	.word	0x080077eb
 8007620:	080076a5 	.word	0x080076a5
 8007624:	080077eb 	.word	0x080077eb
 8007628:	080077eb 	.word	0x080077eb
 800762c:	080077eb 	.word	0x080077eb
 8007630:	080076e7 	.word	0x080076e7
 8007634:	080077eb 	.word	0x080077eb
 8007638:	080077eb 	.word	0x080077eb
 800763c:	080077eb 	.word	0x080077eb
 8007640:	08007727 	.word	0x08007727
 8007644:	080077eb 	.word	0x080077eb
 8007648:	080077eb 	.word	0x080077eb
 800764c:	080077eb 	.word	0x080077eb
 8007650:	08007769 	.word	0x08007769
 8007654:	080077eb 	.word	0x080077eb
 8007658:	080077eb 	.word	0x080077eb
 800765c:	080077eb 	.word	0x080077eb
 8007660:	080077a9 	.word	0x080077a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68b9      	ldr	r1, [r7, #8]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 fa60 	bl	8007b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	699a      	ldr	r2, [r3, #24]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0208 	orr.w	r2, r2, #8
 800767e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699a      	ldr	r2, [r3, #24]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0204 	bic.w	r2, r2, #4
 800768e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6999      	ldr	r1, [r3, #24]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	691a      	ldr	r2, [r3, #16]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	619a      	str	r2, [r3, #24]
      break;
 80076a2:	e0a5      	b.n	80077f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fad0 	bl	8007c50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699a      	ldr	r2, [r3, #24]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699a      	ldr	r2, [r3, #24]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6999      	ldr	r1, [r3, #24]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	021a      	lsls	r2, r3, #8
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	619a      	str	r2, [r3, #24]
      break;
 80076e4:	e084      	b.n	80077f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68b9      	ldr	r1, [r7, #8]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fb39 	bl	8007d64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69da      	ldr	r2, [r3, #28]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f042 0208 	orr.w	r2, r2, #8
 8007700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69da      	ldr	r2, [r3, #28]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0204 	bic.w	r2, r2, #4
 8007710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69d9      	ldr	r1, [r3, #28]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	691a      	ldr	r2, [r3, #16]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	61da      	str	r2, [r3, #28]
      break;
 8007724:	e064      	b.n	80077f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fba1 	bl	8007e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69da      	ldr	r2, [r3, #28]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69d9      	ldr	r1, [r3, #28]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	021a      	lsls	r2, r3, #8
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	61da      	str	r2, [r3, #28]
      break;
 8007766:	e043      	b.n	80077f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68b9      	ldr	r1, [r7, #8]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fbea 	bl	8007f48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0208 	orr.w	r2, r2, #8
 8007782:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0204 	bic.w	r2, r2, #4
 8007792:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	691a      	ldr	r2, [r3, #16]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077a6:	e023      	b.n	80077f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fc2e 	bl	8008010 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	021a      	lsls	r2, r3, #8
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077e8:	e002      	b.n	80077f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]
      break;
 80077ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop

08007804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007818:	2b01      	cmp	r3, #1
 800781a:	d101      	bne.n	8007820 <HAL_TIM_ConfigClockSource+0x1c>
 800781c:	2302      	movs	r3, #2
 800781e:	e0b6      	b.n	800798e <HAL_TIM_ConfigClockSource+0x18a>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800783e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800784a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800785c:	d03e      	beq.n	80078dc <HAL_TIM_ConfigClockSource+0xd8>
 800785e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007862:	f200 8087 	bhi.w	8007974 <HAL_TIM_ConfigClockSource+0x170>
 8007866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800786a:	f000 8086 	beq.w	800797a <HAL_TIM_ConfigClockSource+0x176>
 800786e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007872:	d87f      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x170>
 8007874:	2b70      	cmp	r3, #112	; 0x70
 8007876:	d01a      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0xaa>
 8007878:	2b70      	cmp	r3, #112	; 0x70
 800787a:	d87b      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x170>
 800787c:	2b60      	cmp	r3, #96	; 0x60
 800787e:	d050      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x11e>
 8007880:	2b60      	cmp	r3, #96	; 0x60
 8007882:	d877      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x170>
 8007884:	2b50      	cmp	r3, #80	; 0x50
 8007886:	d03c      	beq.n	8007902 <HAL_TIM_ConfigClockSource+0xfe>
 8007888:	2b50      	cmp	r3, #80	; 0x50
 800788a:	d873      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x170>
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	d058      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x13e>
 8007890:	2b40      	cmp	r3, #64	; 0x40
 8007892:	d86f      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x170>
 8007894:	2b30      	cmp	r3, #48	; 0x30
 8007896:	d064      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x15e>
 8007898:	2b30      	cmp	r3, #48	; 0x30
 800789a:	d86b      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x170>
 800789c:	2b20      	cmp	r3, #32
 800789e:	d060      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x15e>
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d867      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x170>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d05c      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x15e>
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d05a      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x15e>
 80078ac:	e062      	b.n	8007974 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078be:	f000 fc87 	bl	80081d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	609a      	str	r2, [r3, #8]
      break;
 80078da:	e04f      	b.n	800797c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078ec:	f000 fc70 	bl	80081d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078fe:	609a      	str	r2, [r3, #8]
      break;
 8007900:	e03c      	b.n	800797c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800790e:	461a      	mov	r2, r3
 8007910:	f000 fbe4 	bl	80080dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2150      	movs	r1, #80	; 0x50
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fc3d 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007920:	e02c      	b.n	800797c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800792e:	461a      	mov	r2, r3
 8007930:	f000 fc03 	bl	800813a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2160      	movs	r1, #96	; 0x60
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fc2d 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007940:	e01c      	b.n	800797c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800794e:	461a      	mov	r2, r3
 8007950:	f000 fbc4 	bl	80080dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2140      	movs	r1, #64	; 0x40
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fc1d 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007960:	e00c      	b.n	800797c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f000 fc14 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007972:	e003      	b.n	800797c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	73fb      	strb	r3, [r7, #15]
      break;
 8007978:	e000      	b.n	800797c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800797a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a40      	ldr	r2, [pc, #256]	; (8007b10 <TIM_Base_SetConfig+0x114>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d013      	beq.n	8007a3c <TIM_Base_SetConfig+0x40>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a1a:	d00f      	beq.n	8007a3c <TIM_Base_SetConfig+0x40>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a3d      	ldr	r2, [pc, #244]	; (8007b14 <TIM_Base_SetConfig+0x118>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00b      	beq.n	8007a3c <TIM_Base_SetConfig+0x40>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a3c      	ldr	r2, [pc, #240]	; (8007b18 <TIM_Base_SetConfig+0x11c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d007      	beq.n	8007a3c <TIM_Base_SetConfig+0x40>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a3b      	ldr	r2, [pc, #236]	; (8007b1c <TIM_Base_SetConfig+0x120>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d003      	beq.n	8007a3c <TIM_Base_SetConfig+0x40>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a3a      	ldr	r2, [pc, #232]	; (8007b20 <TIM_Base_SetConfig+0x124>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d108      	bne.n	8007a4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a2f      	ldr	r2, [pc, #188]	; (8007b10 <TIM_Base_SetConfig+0x114>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d01f      	beq.n	8007a96 <TIM_Base_SetConfig+0x9a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a5c:	d01b      	beq.n	8007a96 <TIM_Base_SetConfig+0x9a>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a2c      	ldr	r2, [pc, #176]	; (8007b14 <TIM_Base_SetConfig+0x118>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d017      	beq.n	8007a96 <TIM_Base_SetConfig+0x9a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a2b      	ldr	r2, [pc, #172]	; (8007b18 <TIM_Base_SetConfig+0x11c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d013      	beq.n	8007a96 <TIM_Base_SetConfig+0x9a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a2a      	ldr	r2, [pc, #168]	; (8007b1c <TIM_Base_SetConfig+0x120>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d00f      	beq.n	8007a96 <TIM_Base_SetConfig+0x9a>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a29      	ldr	r2, [pc, #164]	; (8007b20 <TIM_Base_SetConfig+0x124>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00b      	beq.n	8007a96 <TIM_Base_SetConfig+0x9a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a28      	ldr	r2, [pc, #160]	; (8007b24 <TIM_Base_SetConfig+0x128>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d007      	beq.n	8007a96 <TIM_Base_SetConfig+0x9a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a27      	ldr	r2, [pc, #156]	; (8007b28 <TIM_Base_SetConfig+0x12c>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d003      	beq.n	8007a96 <TIM_Base_SetConfig+0x9a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a26      	ldr	r2, [pc, #152]	; (8007b2c <TIM_Base_SetConfig+0x130>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d108      	bne.n	8007aa8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a10      	ldr	r2, [pc, #64]	; (8007b10 <TIM_Base_SetConfig+0x114>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00f      	beq.n	8007af4 <TIM_Base_SetConfig+0xf8>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a12      	ldr	r2, [pc, #72]	; (8007b20 <TIM_Base_SetConfig+0x124>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d00b      	beq.n	8007af4 <TIM_Base_SetConfig+0xf8>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a11      	ldr	r2, [pc, #68]	; (8007b24 <TIM_Base_SetConfig+0x128>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d007      	beq.n	8007af4 <TIM_Base_SetConfig+0xf8>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a10      	ldr	r2, [pc, #64]	; (8007b28 <TIM_Base_SetConfig+0x12c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d003      	beq.n	8007af4 <TIM_Base_SetConfig+0xf8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a0f      	ldr	r2, [pc, #60]	; (8007b2c <TIM_Base_SetConfig+0x130>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d103      	bne.n	8007afc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	691a      	ldr	r2, [r3, #16]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	615a      	str	r2, [r3, #20]
}
 8007b02:	bf00      	nop
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	40012c00 	.word	0x40012c00
 8007b14:	40000400 	.word	0x40000400
 8007b18:	40000800 	.word	0x40000800
 8007b1c:	40000c00 	.word	0x40000c00
 8007b20:	40013400 	.word	0x40013400
 8007b24:	40014000 	.word	0x40014000
 8007b28:	40014400 	.word	0x40014400
 8007b2c:	40014800 	.word	0x40014800

08007b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	f023 0201 	bic.w	r2, r3, #1
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0303 	bic.w	r3, r3, #3
 8007b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f023 0302 	bic.w	r3, r3, #2
 8007b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a2c      	ldr	r2, [pc, #176]	; (8007c3c <TIM_OC1_SetConfig+0x10c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00f      	beq.n	8007bb0 <TIM_OC1_SetConfig+0x80>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a2b      	ldr	r2, [pc, #172]	; (8007c40 <TIM_OC1_SetConfig+0x110>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00b      	beq.n	8007bb0 <TIM_OC1_SetConfig+0x80>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a2a      	ldr	r2, [pc, #168]	; (8007c44 <TIM_OC1_SetConfig+0x114>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d007      	beq.n	8007bb0 <TIM_OC1_SetConfig+0x80>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a29      	ldr	r2, [pc, #164]	; (8007c48 <TIM_OC1_SetConfig+0x118>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d003      	beq.n	8007bb0 <TIM_OC1_SetConfig+0x80>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a28      	ldr	r2, [pc, #160]	; (8007c4c <TIM_OC1_SetConfig+0x11c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d10c      	bne.n	8007bca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f023 0308 	bic.w	r3, r3, #8
 8007bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f023 0304 	bic.w	r3, r3, #4
 8007bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a1b      	ldr	r2, [pc, #108]	; (8007c3c <TIM_OC1_SetConfig+0x10c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00f      	beq.n	8007bf2 <TIM_OC1_SetConfig+0xc2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a1a      	ldr	r2, [pc, #104]	; (8007c40 <TIM_OC1_SetConfig+0x110>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00b      	beq.n	8007bf2 <TIM_OC1_SetConfig+0xc2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a19      	ldr	r2, [pc, #100]	; (8007c44 <TIM_OC1_SetConfig+0x114>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d007      	beq.n	8007bf2 <TIM_OC1_SetConfig+0xc2>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <TIM_OC1_SetConfig+0x118>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d003      	beq.n	8007bf2 <TIM_OC1_SetConfig+0xc2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a17      	ldr	r2, [pc, #92]	; (8007c4c <TIM_OC1_SetConfig+0x11c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d111      	bne.n	8007c16 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	621a      	str	r2, [r3, #32]
}
 8007c30:	bf00      	nop
 8007c32:	371c      	adds	r7, #28
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	40012c00 	.word	0x40012c00
 8007c40:	40013400 	.word	0x40013400
 8007c44:	40014000 	.word	0x40014000
 8007c48:	40014400 	.word	0x40014400
 8007c4c:	40014800 	.word	0x40014800

08007c50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	f023 0210 	bic.w	r2, r3, #16
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	021b      	lsls	r3, r3, #8
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f023 0320 	bic.w	r3, r3, #32
 8007c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a28      	ldr	r2, [pc, #160]	; (8007d50 <TIM_OC2_SetConfig+0x100>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_OC2_SetConfig+0x6c>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a27      	ldr	r2, [pc, #156]	; (8007d54 <TIM_OC2_SetConfig+0x104>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d10d      	bne.n	8007cd8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a1d      	ldr	r2, [pc, #116]	; (8007d50 <TIM_OC2_SetConfig+0x100>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00f      	beq.n	8007d00 <TIM_OC2_SetConfig+0xb0>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a1c      	ldr	r2, [pc, #112]	; (8007d54 <TIM_OC2_SetConfig+0x104>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d00b      	beq.n	8007d00 <TIM_OC2_SetConfig+0xb0>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a1b      	ldr	r2, [pc, #108]	; (8007d58 <TIM_OC2_SetConfig+0x108>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d007      	beq.n	8007d00 <TIM_OC2_SetConfig+0xb0>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a1a      	ldr	r2, [pc, #104]	; (8007d5c <TIM_OC2_SetConfig+0x10c>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d003      	beq.n	8007d00 <TIM_OC2_SetConfig+0xb0>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a19      	ldr	r2, [pc, #100]	; (8007d60 <TIM_OC2_SetConfig+0x110>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d113      	bne.n	8007d28 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	621a      	str	r2, [r3, #32]
}
 8007d42:	bf00      	nop
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	40012c00 	.word	0x40012c00
 8007d54:	40013400 	.word	0x40013400
 8007d58:	40014000 	.word	0x40014000
 8007d5c:	40014400 	.word	0x40014400
 8007d60:	40014800 	.word	0x40014800

08007d64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0303 	bic.w	r3, r3, #3
 8007d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a27      	ldr	r2, [pc, #156]	; (8007e60 <TIM_OC3_SetConfig+0xfc>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d003      	beq.n	8007dce <TIM_OC3_SetConfig+0x6a>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a26      	ldr	r2, [pc, #152]	; (8007e64 <TIM_OC3_SetConfig+0x100>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d10d      	bne.n	8007dea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a1c      	ldr	r2, [pc, #112]	; (8007e60 <TIM_OC3_SetConfig+0xfc>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d00f      	beq.n	8007e12 <TIM_OC3_SetConfig+0xae>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a1b      	ldr	r2, [pc, #108]	; (8007e64 <TIM_OC3_SetConfig+0x100>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d00b      	beq.n	8007e12 <TIM_OC3_SetConfig+0xae>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <TIM_OC3_SetConfig+0x104>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d007      	beq.n	8007e12 <TIM_OC3_SetConfig+0xae>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a19      	ldr	r2, [pc, #100]	; (8007e6c <TIM_OC3_SetConfig+0x108>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d003      	beq.n	8007e12 <TIM_OC3_SetConfig+0xae>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a18      	ldr	r2, [pc, #96]	; (8007e70 <TIM_OC3_SetConfig+0x10c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d113      	bne.n	8007e3a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	011b      	lsls	r3, r3, #4
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	621a      	str	r2, [r3, #32]
}
 8007e54:	bf00      	nop
 8007e56:	371c      	adds	r7, #28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	40012c00 	.word	0x40012c00
 8007e64:	40013400 	.word	0x40013400
 8007e68:	40014000 	.word	0x40014000
 8007e6c:	40014400 	.word	0x40014400
 8007e70:	40014800 	.word	0x40014800

08007e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	021b      	lsls	r3, r3, #8
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	031b      	lsls	r3, r3, #12
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a18      	ldr	r2, [pc, #96]	; (8007f34 <TIM_OC4_SetConfig+0xc0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00f      	beq.n	8007ef8 <TIM_OC4_SetConfig+0x84>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a17      	ldr	r2, [pc, #92]	; (8007f38 <TIM_OC4_SetConfig+0xc4>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d00b      	beq.n	8007ef8 <TIM_OC4_SetConfig+0x84>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a16      	ldr	r2, [pc, #88]	; (8007f3c <TIM_OC4_SetConfig+0xc8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d007      	beq.n	8007ef8 <TIM_OC4_SetConfig+0x84>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a15      	ldr	r2, [pc, #84]	; (8007f40 <TIM_OC4_SetConfig+0xcc>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d003      	beq.n	8007ef8 <TIM_OC4_SetConfig+0x84>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a14      	ldr	r2, [pc, #80]	; (8007f44 <TIM_OC4_SetConfig+0xd0>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d109      	bne.n	8007f0c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007efe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	019b      	lsls	r3, r3, #6
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	621a      	str	r2, [r3, #32]
}
 8007f26:	bf00      	nop
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	40012c00 	.word	0x40012c00
 8007f38:	40013400 	.word	0x40013400
 8007f3c:	40014000 	.word	0x40014000
 8007f40:	40014400 	.word	0x40014400
 8007f44:	40014800 	.word	0x40014800

08007f48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	041b      	lsls	r3, r3, #16
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a17      	ldr	r2, [pc, #92]	; (8007ffc <TIM_OC5_SetConfig+0xb4>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d00f      	beq.n	8007fc2 <TIM_OC5_SetConfig+0x7a>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a16      	ldr	r2, [pc, #88]	; (8008000 <TIM_OC5_SetConfig+0xb8>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00b      	beq.n	8007fc2 <TIM_OC5_SetConfig+0x7a>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a15      	ldr	r2, [pc, #84]	; (8008004 <TIM_OC5_SetConfig+0xbc>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d007      	beq.n	8007fc2 <TIM_OC5_SetConfig+0x7a>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a14      	ldr	r2, [pc, #80]	; (8008008 <TIM_OC5_SetConfig+0xc0>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d003      	beq.n	8007fc2 <TIM_OC5_SetConfig+0x7a>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a13      	ldr	r2, [pc, #76]	; (800800c <TIM_OC5_SetConfig+0xc4>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d109      	bne.n	8007fd6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	021b      	lsls	r3, r3, #8
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	621a      	str	r2, [r3, #32]
}
 8007ff0:	bf00      	nop
 8007ff2:	371c      	adds	r7, #28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	40012c00 	.word	0x40012c00
 8008000:	40013400 	.word	0x40013400
 8008004:	40014000 	.word	0x40014000
 8008008:	40014400 	.word	0x40014400
 800800c:	40014800 	.word	0x40014800

08008010 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800803e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	021b      	lsls	r3, r3, #8
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4313      	orrs	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	051b      	lsls	r3, r3, #20
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	4313      	orrs	r3, r2
 8008062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a18      	ldr	r2, [pc, #96]	; (80080c8 <TIM_OC6_SetConfig+0xb8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00f      	beq.n	800808c <TIM_OC6_SetConfig+0x7c>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a17      	ldr	r2, [pc, #92]	; (80080cc <TIM_OC6_SetConfig+0xbc>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00b      	beq.n	800808c <TIM_OC6_SetConfig+0x7c>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a16      	ldr	r2, [pc, #88]	; (80080d0 <TIM_OC6_SetConfig+0xc0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d007      	beq.n	800808c <TIM_OC6_SetConfig+0x7c>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a15      	ldr	r2, [pc, #84]	; (80080d4 <TIM_OC6_SetConfig+0xc4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d003      	beq.n	800808c <TIM_OC6_SetConfig+0x7c>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a14      	ldr	r2, [pc, #80]	; (80080d8 <TIM_OC6_SetConfig+0xc8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d109      	bne.n	80080a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008092:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	029b      	lsls	r3, r3, #10
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	4313      	orrs	r3, r2
 800809e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	621a      	str	r2, [r3, #32]
}
 80080ba:	bf00      	nop
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40012c00 	.word	0x40012c00
 80080cc:	40013400 	.word	0x40013400
 80080d0:	40014000 	.word	0x40014000
 80080d4:	40014400 	.word	0x40014400
 80080d8:	40014800 	.word	0x40014800

080080dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0201 	bic.w	r2, r3, #1
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	4313      	orrs	r3, r2
 8008110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f023 030a 	bic.w	r3, r3, #10
 8008118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4313      	orrs	r3, r2
 8008120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	621a      	str	r2, [r3, #32]
}
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800813a:	b480      	push	{r7}
 800813c:	b087      	sub	sp, #28
 800813e:	af00      	add	r7, sp, #0
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	f023 0210 	bic.w	r2, r3, #16
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	031b      	lsls	r3, r3, #12
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008176:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	4313      	orrs	r3, r2
 8008180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	621a      	str	r2, [r3, #32]
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	f043 0307 	orr.w	r3, r3, #7
 80081bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	609a      	str	r2, [r3, #8]
}
 80081c4:	bf00      	nop
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	021a      	lsls	r2, r3, #8
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	431a      	orrs	r2, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	609a      	str	r2, [r3, #8]
}
 8008204:	bf00      	nop
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008210:	b480      	push	{r7}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 031f 	and.w	r3, r3, #31
 8008222:	2201      	movs	r2, #1
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a1a      	ldr	r2, [r3, #32]
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	43db      	mvns	r3, r3
 8008232:	401a      	ands	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a1a      	ldr	r2, [r3, #32]
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f003 031f 	and.w	r3, r3, #31
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	fa01 f303 	lsl.w	r3, r1, r3
 8008248:	431a      	orrs	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	621a      	str	r2, [r3, #32]
}
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
	...

0800825c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800826c:	2b01      	cmp	r3, #1
 800826e:	d101      	bne.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008270:	2302      	movs	r3, #2
 8008272:	e068      	b.n	8008346 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a2e      	ldr	r2, [pc, #184]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d004      	beq.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a2d      	ldr	r2, [pc, #180]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d108      	bne.n	80082ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a1e      	ldr	r2, [pc, #120]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d01d      	beq.n	800831a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e6:	d018      	beq.n	800831a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a1b      	ldr	r2, [pc, #108]	; (800835c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d013      	beq.n	800831a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a1a      	ldr	r2, [pc, #104]	; (8008360 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00e      	beq.n	800831a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a18      	ldr	r2, [pc, #96]	; (8008364 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d009      	beq.n	800831a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a13      	ldr	r2, [pc, #76]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d004      	beq.n	800831a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a14      	ldr	r2, [pc, #80]	; (8008368 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d10c      	bne.n	8008334 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	4313      	orrs	r3, r2
 800832a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	40012c00 	.word	0x40012c00
 8008358:	40013400 	.word	0x40013400
 800835c:	40000400 	.word	0x40000400
 8008360:	40000800 	.word	0x40000800
 8008364:	40000c00 	.word	0x40000c00
 8008368:	40014000 	.word	0x40014000

0800836c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e040      	b.n	800843c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d106      	bne.n	80083d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7fa ff92 	bl	80032f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2224      	movs	r2, #36	; 0x24
 80083d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0201 	bic.w	r2, r2, #1
 80083e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fc34 	bl	8008c5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f979 	bl	80086ec <UART_SetConfig>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e01b      	b.n	800843c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689a      	ldr	r2, [r3, #8]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0201 	orr.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fcb3 	bl	8008da0 <UART_CheckIdleState>
 800843a:	4603      	mov	r3, r0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08a      	sub	sp, #40	; 0x28
 8008448:	af02      	add	r7, sp, #8
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	4613      	mov	r3, r2
 8008452:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008458:	2b20      	cmp	r3, #32
 800845a:	d178      	bne.n	800854e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <HAL_UART_Transmit+0x24>
 8008462:	88fb      	ldrh	r3, [r7, #6]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e071      	b.n	8008550 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2221      	movs	r2, #33	; 0x21
 8008478:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800847a:	f7fb f96b 	bl	8003754 <HAL_GetTick>
 800847e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	88fa      	ldrh	r2, [r7, #6]
 8008484:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	88fa      	ldrh	r2, [r7, #6]
 800848c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008498:	d108      	bne.n	80084ac <HAL_UART_Transmit+0x68>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d104      	bne.n	80084ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	61bb      	str	r3, [r7, #24]
 80084aa:	e003      	b.n	80084b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084b4:	e030      	b.n	8008518 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2200      	movs	r2, #0
 80084be:	2180      	movs	r1, #128	; 0x80
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 fd15 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d004      	beq.n	80084d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2220      	movs	r2, #32
 80084d0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e03c      	b.n	8008550 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	881a      	ldrh	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084e8:	b292      	uxth	r2, r2
 80084ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	3302      	adds	r3, #2
 80084f0:	61bb      	str	r3, [r7, #24]
 80084f2:	e008      	b.n	8008506 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	b292      	uxth	r2, r2
 80084fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	3301      	adds	r3, #1
 8008504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800850c:	b29b      	uxth	r3, r3
 800850e:	3b01      	subs	r3, #1
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1c8      	bne.n	80084b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2200      	movs	r2, #0
 800852c:	2140      	movs	r1, #64	; 0x40
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 fcde 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2220      	movs	r2, #32
 800853e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e005      	b.n	8008550 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2220      	movs	r2, #32
 8008548:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	e000      	b.n	8008550 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800854e:	2302      	movs	r3, #2
  }
}
 8008550:	4618      	mov	r0, r3
 8008552:	3720      	adds	r7, #32
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08a      	sub	sp, #40	; 0x28
 800855c:	af02      	add	r7, sp, #8
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	4613      	mov	r3, r2
 8008566:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800856e:	2b20      	cmp	r3, #32
 8008570:	f040 80b6 	bne.w	80086e0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <HAL_UART_Receive+0x28>
 800857a:	88fb      	ldrh	r3, [r7, #6]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e0ae      	b.n	80086e2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2222      	movs	r2, #34	; 0x22
 8008590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800859a:	f7fb f8db 	bl	8003754 <HAL_GetTick>
 800859e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	88fa      	ldrh	r2, [r7, #6]
 80085a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	88fa      	ldrh	r2, [r7, #6]
 80085ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b8:	d10e      	bne.n	80085d8 <HAL_UART_Receive+0x80>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d105      	bne.n	80085ce <HAL_UART_Receive+0x76>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80085c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085cc:	e02d      	b.n	800862a <HAL_UART_Receive+0xd2>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	22ff      	movs	r2, #255	; 0xff
 80085d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085d6:	e028      	b.n	800862a <HAL_UART_Receive+0xd2>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10d      	bne.n	80085fc <HAL_UART_Receive+0xa4>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d104      	bne.n	80085f2 <HAL_UART_Receive+0x9a>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	22ff      	movs	r2, #255	; 0xff
 80085ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085f0:	e01b      	b.n	800862a <HAL_UART_Receive+0xd2>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	227f      	movs	r2, #127	; 0x7f
 80085f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085fa:	e016      	b.n	800862a <HAL_UART_Receive+0xd2>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008604:	d10d      	bne.n	8008622 <HAL_UART_Receive+0xca>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d104      	bne.n	8008618 <HAL_UART_Receive+0xc0>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	227f      	movs	r2, #127	; 0x7f
 8008612:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008616:	e008      	b.n	800862a <HAL_UART_Receive+0xd2>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	223f      	movs	r2, #63	; 0x3f
 800861c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008620:	e003      	b.n	800862a <HAL_UART_Receive+0xd2>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008630:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800863a:	d108      	bne.n	800864e <HAL_UART_Receive+0xf6>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d104      	bne.n	800864e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008644:	2300      	movs	r3, #0
 8008646:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	61bb      	str	r3, [r7, #24]
 800864c:	e003      	b.n	8008656 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008656:	e037      	b.n	80086c8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2200      	movs	r2, #0
 8008660:	2120      	movs	r1, #32
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 fc44 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d005      	beq.n	800867a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2220      	movs	r2, #32
 8008672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e033      	b.n	80086e2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10c      	bne.n	800869a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008686:	b29a      	uxth	r2, r3
 8008688:	8a7b      	ldrh	r3, [r7, #18]
 800868a:	4013      	ands	r3, r2
 800868c:	b29a      	uxth	r2, r3
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	3302      	adds	r3, #2
 8008696:	61bb      	str	r3, [r7, #24]
 8008698:	e00d      	b.n	80086b6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	8a7b      	ldrh	r3, [r7, #18]
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	4013      	ands	r3, r2
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	3301      	adds	r3, #1
 80086b4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086bc:	b29b      	uxth	r3, r3
 80086be:	3b01      	subs	r3, #1
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1c1      	bne.n	8008658 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	e000      	b.n	80086e2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80086e0:	2302      	movs	r3, #2
  }
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3720      	adds	r7, #32
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
	...

080086ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086f0:	b08a      	sub	sp, #40	; 0x28
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	431a      	orrs	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	431a      	orrs	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	4313      	orrs	r3, r2
 8008712:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	4ba4      	ldr	r3, [pc, #656]	; (80089ac <UART_SetConfig+0x2c0>)
 800871c:	4013      	ands	r3, r2
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	6812      	ldr	r2, [r2, #0]
 8008722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008724:	430b      	orrs	r3, r1
 8008726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a99      	ldr	r2, [pc, #612]	; (80089b0 <UART_SetConfig+0x2c4>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d004      	beq.n	8008758 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008754:	4313      	orrs	r3, r2
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008768:	430a      	orrs	r2, r1
 800876a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a90      	ldr	r2, [pc, #576]	; (80089b4 <UART_SetConfig+0x2c8>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d126      	bne.n	80087c4 <UART_SetConfig+0xd8>
 8008776:	4b90      	ldr	r3, [pc, #576]	; (80089b8 <UART_SetConfig+0x2cc>)
 8008778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800877c:	f003 0303 	and.w	r3, r3, #3
 8008780:	2b03      	cmp	r3, #3
 8008782:	d81b      	bhi.n	80087bc <UART_SetConfig+0xd0>
 8008784:	a201      	add	r2, pc, #4	; (adr r2, 800878c <UART_SetConfig+0xa0>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	0800879d 	.word	0x0800879d
 8008790:	080087ad 	.word	0x080087ad
 8008794:	080087a5 	.word	0x080087a5
 8008798:	080087b5 	.word	0x080087b5
 800879c:	2301      	movs	r3, #1
 800879e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087a2:	e116      	b.n	80089d2 <UART_SetConfig+0x2e6>
 80087a4:	2302      	movs	r3, #2
 80087a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087aa:	e112      	b.n	80089d2 <UART_SetConfig+0x2e6>
 80087ac:	2304      	movs	r3, #4
 80087ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087b2:	e10e      	b.n	80089d2 <UART_SetConfig+0x2e6>
 80087b4:	2308      	movs	r3, #8
 80087b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ba:	e10a      	b.n	80089d2 <UART_SetConfig+0x2e6>
 80087bc:	2310      	movs	r3, #16
 80087be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087c2:	e106      	b.n	80089d2 <UART_SetConfig+0x2e6>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a7c      	ldr	r2, [pc, #496]	; (80089bc <UART_SetConfig+0x2d0>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d138      	bne.n	8008840 <UART_SetConfig+0x154>
 80087ce:	4b7a      	ldr	r3, [pc, #488]	; (80089b8 <UART_SetConfig+0x2cc>)
 80087d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d4:	f003 030c 	and.w	r3, r3, #12
 80087d8:	2b0c      	cmp	r3, #12
 80087da:	d82d      	bhi.n	8008838 <UART_SetConfig+0x14c>
 80087dc:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <UART_SetConfig+0xf8>)
 80087de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	08008819 	.word	0x08008819
 80087e8:	08008839 	.word	0x08008839
 80087ec:	08008839 	.word	0x08008839
 80087f0:	08008839 	.word	0x08008839
 80087f4:	08008829 	.word	0x08008829
 80087f8:	08008839 	.word	0x08008839
 80087fc:	08008839 	.word	0x08008839
 8008800:	08008839 	.word	0x08008839
 8008804:	08008821 	.word	0x08008821
 8008808:	08008839 	.word	0x08008839
 800880c:	08008839 	.word	0x08008839
 8008810:	08008839 	.word	0x08008839
 8008814:	08008831 	.word	0x08008831
 8008818:	2300      	movs	r3, #0
 800881a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800881e:	e0d8      	b.n	80089d2 <UART_SetConfig+0x2e6>
 8008820:	2302      	movs	r3, #2
 8008822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008826:	e0d4      	b.n	80089d2 <UART_SetConfig+0x2e6>
 8008828:	2304      	movs	r3, #4
 800882a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800882e:	e0d0      	b.n	80089d2 <UART_SetConfig+0x2e6>
 8008830:	2308      	movs	r3, #8
 8008832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008836:	e0cc      	b.n	80089d2 <UART_SetConfig+0x2e6>
 8008838:	2310      	movs	r3, #16
 800883a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800883e:	e0c8      	b.n	80089d2 <UART_SetConfig+0x2e6>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a5e      	ldr	r2, [pc, #376]	; (80089c0 <UART_SetConfig+0x2d4>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d125      	bne.n	8008896 <UART_SetConfig+0x1aa>
 800884a:	4b5b      	ldr	r3, [pc, #364]	; (80089b8 <UART_SetConfig+0x2cc>)
 800884c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008850:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008854:	2b30      	cmp	r3, #48	; 0x30
 8008856:	d016      	beq.n	8008886 <UART_SetConfig+0x19a>
 8008858:	2b30      	cmp	r3, #48	; 0x30
 800885a:	d818      	bhi.n	800888e <UART_SetConfig+0x1a2>
 800885c:	2b20      	cmp	r3, #32
 800885e:	d00a      	beq.n	8008876 <UART_SetConfig+0x18a>
 8008860:	2b20      	cmp	r3, #32
 8008862:	d814      	bhi.n	800888e <UART_SetConfig+0x1a2>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <UART_SetConfig+0x182>
 8008868:	2b10      	cmp	r3, #16
 800886a:	d008      	beq.n	800887e <UART_SetConfig+0x192>
 800886c:	e00f      	b.n	800888e <UART_SetConfig+0x1a2>
 800886e:	2300      	movs	r3, #0
 8008870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008874:	e0ad      	b.n	80089d2 <UART_SetConfig+0x2e6>
 8008876:	2302      	movs	r3, #2
 8008878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800887c:	e0a9      	b.n	80089d2 <UART_SetConfig+0x2e6>
 800887e:	2304      	movs	r3, #4
 8008880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008884:	e0a5      	b.n	80089d2 <UART_SetConfig+0x2e6>
 8008886:	2308      	movs	r3, #8
 8008888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800888c:	e0a1      	b.n	80089d2 <UART_SetConfig+0x2e6>
 800888e:	2310      	movs	r3, #16
 8008890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008894:	e09d      	b.n	80089d2 <UART_SetConfig+0x2e6>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a4a      	ldr	r2, [pc, #296]	; (80089c4 <UART_SetConfig+0x2d8>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d125      	bne.n	80088ec <UART_SetConfig+0x200>
 80088a0:	4b45      	ldr	r3, [pc, #276]	; (80089b8 <UART_SetConfig+0x2cc>)
 80088a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80088aa:	2bc0      	cmp	r3, #192	; 0xc0
 80088ac:	d016      	beq.n	80088dc <UART_SetConfig+0x1f0>
 80088ae:	2bc0      	cmp	r3, #192	; 0xc0
 80088b0:	d818      	bhi.n	80088e4 <UART_SetConfig+0x1f8>
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d00a      	beq.n	80088cc <UART_SetConfig+0x1e0>
 80088b6:	2b80      	cmp	r3, #128	; 0x80
 80088b8:	d814      	bhi.n	80088e4 <UART_SetConfig+0x1f8>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <UART_SetConfig+0x1d8>
 80088be:	2b40      	cmp	r3, #64	; 0x40
 80088c0:	d008      	beq.n	80088d4 <UART_SetConfig+0x1e8>
 80088c2:	e00f      	b.n	80088e4 <UART_SetConfig+0x1f8>
 80088c4:	2300      	movs	r3, #0
 80088c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ca:	e082      	b.n	80089d2 <UART_SetConfig+0x2e6>
 80088cc:	2302      	movs	r3, #2
 80088ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088d2:	e07e      	b.n	80089d2 <UART_SetConfig+0x2e6>
 80088d4:	2304      	movs	r3, #4
 80088d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088da:	e07a      	b.n	80089d2 <UART_SetConfig+0x2e6>
 80088dc:	2308      	movs	r3, #8
 80088de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088e2:	e076      	b.n	80089d2 <UART_SetConfig+0x2e6>
 80088e4:	2310      	movs	r3, #16
 80088e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ea:	e072      	b.n	80089d2 <UART_SetConfig+0x2e6>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a35      	ldr	r2, [pc, #212]	; (80089c8 <UART_SetConfig+0x2dc>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d12a      	bne.n	800894c <UART_SetConfig+0x260>
 80088f6:	4b30      	ldr	r3, [pc, #192]	; (80089b8 <UART_SetConfig+0x2cc>)
 80088f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008904:	d01a      	beq.n	800893c <UART_SetConfig+0x250>
 8008906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800890a:	d81b      	bhi.n	8008944 <UART_SetConfig+0x258>
 800890c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008910:	d00c      	beq.n	800892c <UART_SetConfig+0x240>
 8008912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008916:	d815      	bhi.n	8008944 <UART_SetConfig+0x258>
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <UART_SetConfig+0x238>
 800891c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008920:	d008      	beq.n	8008934 <UART_SetConfig+0x248>
 8008922:	e00f      	b.n	8008944 <UART_SetConfig+0x258>
 8008924:	2300      	movs	r3, #0
 8008926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800892a:	e052      	b.n	80089d2 <UART_SetConfig+0x2e6>
 800892c:	2302      	movs	r3, #2
 800892e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008932:	e04e      	b.n	80089d2 <UART_SetConfig+0x2e6>
 8008934:	2304      	movs	r3, #4
 8008936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800893a:	e04a      	b.n	80089d2 <UART_SetConfig+0x2e6>
 800893c:	2308      	movs	r3, #8
 800893e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008942:	e046      	b.n	80089d2 <UART_SetConfig+0x2e6>
 8008944:	2310      	movs	r3, #16
 8008946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800894a:	e042      	b.n	80089d2 <UART_SetConfig+0x2e6>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a17      	ldr	r2, [pc, #92]	; (80089b0 <UART_SetConfig+0x2c4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d13a      	bne.n	80089cc <UART_SetConfig+0x2e0>
 8008956:	4b18      	ldr	r3, [pc, #96]	; (80089b8 <UART_SetConfig+0x2cc>)
 8008958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008960:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008964:	d01a      	beq.n	800899c <UART_SetConfig+0x2b0>
 8008966:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800896a:	d81b      	bhi.n	80089a4 <UART_SetConfig+0x2b8>
 800896c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008970:	d00c      	beq.n	800898c <UART_SetConfig+0x2a0>
 8008972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008976:	d815      	bhi.n	80089a4 <UART_SetConfig+0x2b8>
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <UART_SetConfig+0x298>
 800897c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008980:	d008      	beq.n	8008994 <UART_SetConfig+0x2a8>
 8008982:	e00f      	b.n	80089a4 <UART_SetConfig+0x2b8>
 8008984:	2300      	movs	r3, #0
 8008986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800898a:	e022      	b.n	80089d2 <UART_SetConfig+0x2e6>
 800898c:	2302      	movs	r3, #2
 800898e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008992:	e01e      	b.n	80089d2 <UART_SetConfig+0x2e6>
 8008994:	2304      	movs	r3, #4
 8008996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800899a:	e01a      	b.n	80089d2 <UART_SetConfig+0x2e6>
 800899c:	2308      	movs	r3, #8
 800899e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089a2:	e016      	b.n	80089d2 <UART_SetConfig+0x2e6>
 80089a4:	2310      	movs	r3, #16
 80089a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089aa:	e012      	b.n	80089d2 <UART_SetConfig+0x2e6>
 80089ac:	efff69f3 	.word	0xefff69f3
 80089b0:	40008000 	.word	0x40008000
 80089b4:	40013800 	.word	0x40013800
 80089b8:	40021000 	.word	0x40021000
 80089bc:	40004400 	.word	0x40004400
 80089c0:	40004800 	.word	0x40004800
 80089c4:	40004c00 	.word	0x40004c00
 80089c8:	40005000 	.word	0x40005000
 80089cc:	2310      	movs	r3, #16
 80089ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a9f      	ldr	r2, [pc, #636]	; (8008c54 <UART_SetConfig+0x568>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d17a      	bne.n	8008ad2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089e0:	2b08      	cmp	r3, #8
 80089e2:	d824      	bhi.n	8008a2e <UART_SetConfig+0x342>
 80089e4:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <UART_SetConfig+0x300>)
 80089e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ea:	bf00      	nop
 80089ec:	08008a11 	.word	0x08008a11
 80089f0:	08008a2f 	.word	0x08008a2f
 80089f4:	08008a19 	.word	0x08008a19
 80089f8:	08008a2f 	.word	0x08008a2f
 80089fc:	08008a1f 	.word	0x08008a1f
 8008a00:	08008a2f 	.word	0x08008a2f
 8008a04:	08008a2f 	.word	0x08008a2f
 8008a08:	08008a2f 	.word	0x08008a2f
 8008a0c:	08008a27 	.word	0x08008a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a10:	f7fc fce0 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8008a14:	61f8      	str	r0, [r7, #28]
        break;
 8008a16:	e010      	b.n	8008a3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a18:	4b8f      	ldr	r3, [pc, #572]	; (8008c58 <UART_SetConfig+0x56c>)
 8008a1a:	61fb      	str	r3, [r7, #28]
        break;
 8008a1c:	e00d      	b.n	8008a3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a1e:	f7fc fc41 	bl	80052a4 <HAL_RCC_GetSysClockFreq>
 8008a22:	61f8      	str	r0, [r7, #28]
        break;
 8008a24:	e009      	b.n	8008a3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a2a:	61fb      	str	r3, [r7, #28]
        break;
 8008a2c:	e005      	b.n	8008a3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 80fb 	beq.w	8008c38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	4413      	add	r3, r2
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d305      	bcc.n	8008a5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d903      	bls.n	8008a66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a64:	e0e8      	b.n	8008c38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	461c      	mov	r4, r3
 8008a6c:	4615      	mov	r5, r2
 8008a6e:	f04f 0200 	mov.w	r2, #0
 8008a72:	f04f 0300 	mov.w	r3, #0
 8008a76:	022b      	lsls	r3, r5, #8
 8008a78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008a7c:	0222      	lsls	r2, r4, #8
 8008a7e:	68f9      	ldr	r1, [r7, #12]
 8008a80:	6849      	ldr	r1, [r1, #4]
 8008a82:	0849      	lsrs	r1, r1, #1
 8008a84:	2000      	movs	r0, #0
 8008a86:	4688      	mov	r8, r1
 8008a88:	4681      	mov	r9, r0
 8008a8a:	eb12 0a08 	adds.w	sl, r2, r8
 8008a8e:	eb43 0b09 	adc.w	fp, r3, r9
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	603b      	str	r3, [r7, #0]
 8008a9a:	607a      	str	r2, [r7, #4]
 8008a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aa0:	4650      	mov	r0, sl
 8008aa2:	4659      	mov	r1, fp
 8008aa4:	f7f8 f842 	bl	8000b2c <__aeabi_uldivmod>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4613      	mov	r3, r2
 8008aae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ab6:	d308      	bcc.n	8008aca <UART_SetConfig+0x3de>
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008abe:	d204      	bcs.n	8008aca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	60da      	str	r2, [r3, #12]
 8008ac8:	e0b6      	b.n	8008c38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ad0:	e0b2      	b.n	8008c38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ada:	d15e      	bne.n	8008b9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d828      	bhi.n	8008b36 <UART_SetConfig+0x44a>
 8008ae4:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <UART_SetConfig+0x400>)
 8008ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aea:	bf00      	nop
 8008aec:	08008b11 	.word	0x08008b11
 8008af0:	08008b19 	.word	0x08008b19
 8008af4:	08008b21 	.word	0x08008b21
 8008af8:	08008b37 	.word	0x08008b37
 8008afc:	08008b27 	.word	0x08008b27
 8008b00:	08008b37 	.word	0x08008b37
 8008b04:	08008b37 	.word	0x08008b37
 8008b08:	08008b37 	.word	0x08008b37
 8008b0c:	08008b2f 	.word	0x08008b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b10:	f7fc fc60 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8008b14:	61f8      	str	r0, [r7, #28]
        break;
 8008b16:	e014      	b.n	8008b42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b18:	f7fc fc72 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 8008b1c:	61f8      	str	r0, [r7, #28]
        break;
 8008b1e:	e010      	b.n	8008b42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b20:	4b4d      	ldr	r3, [pc, #308]	; (8008c58 <UART_SetConfig+0x56c>)
 8008b22:	61fb      	str	r3, [r7, #28]
        break;
 8008b24:	e00d      	b.n	8008b42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b26:	f7fc fbbd 	bl	80052a4 <HAL_RCC_GetSysClockFreq>
 8008b2a:	61f8      	str	r0, [r7, #28]
        break;
 8008b2c:	e009      	b.n	8008b42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b32:	61fb      	str	r3, [r7, #28]
        break;
 8008b34:	e005      	b.n	8008b42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d077      	beq.n	8008c38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	005a      	lsls	r2, r3, #1
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	085b      	lsrs	r3, r3, #1
 8008b52:	441a      	add	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	2b0f      	cmp	r3, #15
 8008b62:	d916      	bls.n	8008b92 <UART_SetConfig+0x4a6>
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b6a:	d212      	bcs.n	8008b92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	f023 030f 	bic.w	r3, r3, #15
 8008b74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	085b      	lsrs	r3, r3, #1
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	8afb      	ldrh	r3, [r7, #22]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	8afa      	ldrh	r2, [r7, #22]
 8008b8e:	60da      	str	r2, [r3, #12]
 8008b90:	e052      	b.n	8008c38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b98:	e04e      	b.n	8008c38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	d827      	bhi.n	8008bf2 <UART_SetConfig+0x506>
 8008ba2:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <UART_SetConfig+0x4bc>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bcd 	.word	0x08008bcd
 8008bac:	08008bd5 	.word	0x08008bd5
 8008bb0:	08008bdd 	.word	0x08008bdd
 8008bb4:	08008bf3 	.word	0x08008bf3
 8008bb8:	08008be3 	.word	0x08008be3
 8008bbc:	08008bf3 	.word	0x08008bf3
 8008bc0:	08008bf3 	.word	0x08008bf3
 8008bc4:	08008bf3 	.word	0x08008bf3
 8008bc8:	08008beb 	.word	0x08008beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bcc:	f7fc fc02 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8008bd0:	61f8      	str	r0, [r7, #28]
        break;
 8008bd2:	e014      	b.n	8008bfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bd4:	f7fc fc14 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 8008bd8:	61f8      	str	r0, [r7, #28]
        break;
 8008bda:	e010      	b.n	8008bfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bdc:	4b1e      	ldr	r3, [pc, #120]	; (8008c58 <UART_SetConfig+0x56c>)
 8008bde:	61fb      	str	r3, [r7, #28]
        break;
 8008be0:	e00d      	b.n	8008bfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008be2:	f7fc fb5f 	bl	80052a4 <HAL_RCC_GetSysClockFreq>
 8008be6:	61f8      	str	r0, [r7, #28]
        break;
 8008be8:	e009      	b.n	8008bfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bee:	61fb      	str	r3, [r7, #28]
        break;
 8008bf0:	e005      	b.n	8008bfe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008bfc:	bf00      	nop
    }

    if (pclk != 0U)
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d019      	beq.n	8008c38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	085a      	lsrs	r2, r3, #1
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	441a      	add	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	2b0f      	cmp	r3, #15
 8008c1c:	d909      	bls.n	8008c32 <UART_SetConfig+0x546>
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c24:	d205      	bcs.n	8008c32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	60da      	str	r2, [r3, #12]
 8008c30:	e002      	b.n	8008c38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008c44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3728      	adds	r7, #40	; 0x28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c52:	bf00      	nop
 8008c54:	40008000 	.word	0x40008000
 8008c58:	00f42400 	.word	0x00f42400

08008c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	f003 0308 	and.w	r3, r3, #8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00a      	beq.n	8008c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	430a      	orrs	r2, r1
 8008c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00a      	beq.n	8008ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	430a      	orrs	r2, r1
 8008ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00a      	beq.n	8008cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00a      	beq.n	8008cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	f003 0310 	and.w	r3, r3, #16
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00a      	beq.n	8008d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	f003 0320 	and.w	r3, r3, #32
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00a      	beq.n	8008d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d01a      	beq.n	8008d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d5a:	d10a      	bne.n	8008d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00a      	beq.n	8008d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	605a      	str	r2, [r3, #4]
  }
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b098      	sub	sp, #96	; 0x60
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008db0:	f7fa fcd0 	bl	8003754 <HAL_GetTick>
 8008db4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0308 	and.w	r3, r3, #8
 8008dc0:	2b08      	cmp	r3, #8
 8008dc2:	d12e      	bne.n	8008e22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f88c 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d021      	beq.n	8008e22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de6:	e853 3f00 	ldrex	r3, [r3]
 8008dea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008df2:	653b      	str	r3, [r7, #80]	; 0x50
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8008dfe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e04:	e841 2300 	strex	r3, r2, [r1]
 8008e08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1e6      	bne.n	8008dde <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2220      	movs	r2, #32
 8008e14:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e062      	b.n	8008ee8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0304 	and.w	r3, r3, #4
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	d149      	bne.n	8008ec4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f856 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d03c      	beq.n	8008ec4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	e853 3f00 	ldrex	r3, [r3]
 8008e56:	623b      	str	r3, [r7, #32]
   return(result);
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e68:	633b      	str	r3, [r7, #48]	; 0x30
 8008e6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e70:	e841 2300 	strex	r3, r2, [r1]
 8008e74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1e6      	bne.n	8008e4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3308      	adds	r3, #8
 8008e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	e853 3f00 	ldrex	r3, [r3]
 8008e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 0301 	bic.w	r3, r3, #1
 8008e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3308      	adds	r3, #8
 8008e9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e9c:	61fa      	str	r2, [r7, #28]
 8008e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea0:	69b9      	ldr	r1, [r7, #24]
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	e841 2300 	strex	r3, r2, [r1]
 8008ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e5      	bne.n	8008e7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e011      	b.n	8008ee8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3758      	adds	r7, #88	; 0x58
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	603b      	str	r3, [r7, #0]
 8008efc:	4613      	mov	r3, r2
 8008efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f00:	e049      	b.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f08:	d045      	beq.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f0a:	f7fa fc23 	bl	8003754 <HAL_GetTick>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d302      	bcc.n	8008f20 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e048      	b.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0304 	and.w	r3, r3, #4
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d031      	beq.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	f003 0308 	and.w	r3, r3, #8
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	d110      	bne.n	8008f62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2208      	movs	r2, #8
 8008f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 f838 	bl	8008fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2208      	movs	r2, #8
 8008f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e029      	b.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f70:	d111      	bne.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 f81e 	bl	8008fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e00f      	b.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	bf0c      	ite	eq
 8008fa6:	2301      	moveq	r3, #1
 8008fa8:	2300      	movne	r3, #0
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	461a      	mov	r2, r3
 8008fae:	79fb      	ldrb	r3, [r7, #7]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d0a6      	beq.n	8008f02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b095      	sub	sp, #84	; 0x54
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8008fe6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fec:	e841 2300 	strex	r3, r2, [r1]
 8008ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e6      	bne.n	8008fc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	61fb      	str	r3, [r7, #28]
   return(result);
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	f023 0301 	bic.w	r3, r3, #1
 800900e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3308      	adds	r3, #8
 8009016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009018:	62fa      	str	r2, [r7, #44]	; 0x2c
 800901a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800901e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e5      	bne.n	8008ff8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009030:	2b01      	cmp	r3, #1
 8009032:	d118      	bne.n	8009066 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	60bb      	str	r3, [r7, #8]
   return(result);
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f023 0310 	bic.w	r3, r3, #16
 8009048:	647b      	str	r3, [r7, #68]	; 0x44
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009052:	61bb      	str	r3, [r7, #24]
 8009054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	6979      	ldr	r1, [r7, #20]
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	613b      	str	r3, [r7, #16]
   return(result);
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e6      	bne.n	8009034 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2220      	movs	r2, #32
 800906a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	669a      	str	r2, [r3, #104]	; 0x68
}
 800907a:	bf00      	nop
 800907c:	3754      	adds	r7, #84	; 0x54
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
	...

08009088 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800908c:	4904      	ldr	r1, [pc, #16]	; (80090a0 <MX_FATFS_Init+0x18>)
 800908e:	4805      	ldr	r0, [pc, #20]	; (80090a4 <MX_FATFS_Init+0x1c>)
 8009090:	f002 ffa2 	bl	800bfd8 <FATFS_LinkDriver>
 8009094:	4603      	mov	r3, r0
 8009096:	461a      	mov	r2, r3
 8009098:	4b03      	ldr	r3, [pc, #12]	; (80090a8 <MX_FATFS_Init+0x20>)
 800909a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800909c:	bf00      	nop
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20000808 	.word	0x20000808
 80090a4:	20000028 	.word	0x20000028
 80090a8:	20000804 	.word	0x20000804

080090ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80090ac:	b480      	push	{r7}
 80090ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80090b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 f9d3 	bl	8009474 <USER_SPI_initialize>
 80090ce:	4603      	mov	r3, r0
    //Stat = STA_NOINIT;
    //return Stat;
  /* USER CODE END INIT */
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	4603      	mov	r3, r0
 80090e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fab1 	bl	800964c <USER_SPI_status>
 80090ea:	4603      	mov	r3, r0
	//Stat = STA_NOINIT;
    //return Stat;
  /* USER CODE END STATUS */
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	607a      	str	r2, [r7, #4]
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8009104:	7bf8      	ldrb	r0, [r7, #15]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	f000 fab4 	bl	8009678 <USER_SPI_read>
 8009110:	4603      	mov	r3, r0
    //return RES_OK;
  /* USER CODE END READ */
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
 8009126:	4603      	mov	r3, r0
 8009128:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800912a:	7bf8      	ldrb	r0, [r7, #15]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	f000 fb07 	bl	8009744 <USER_SPI_write>
 8009136:	4603      	mov	r3, r0
    //return RES_OK;
  /* USER CODE END WRITE */
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	603a      	str	r2, [r7, #0]
 800914a:	71fb      	strb	r3, [r7, #7]
 800914c:	460b      	mov	r3, r1
 800914e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8009150:	79b9      	ldrb	r1, [r7, #6]
 8009152:	79fb      	ldrb	r3, [r7, #7]
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fb70 	bl	800983c <USER_SPI_ioctl>
 800915c:	4603      	mov	r3, r0
    //DRESULT res = RES_ERROR;
    //return res;
  /* USER CODE END IOCTL */
}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
	...

08009168 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009170:	f7fa faf0 	bl	8003754 <HAL_GetTick>
 8009174:	4603      	mov	r3, r0
 8009176:	4a04      	ldr	r2, [pc, #16]	; (8009188 <SPI_Timer_On+0x20>)
 8009178:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800917a:	4a04      	ldr	r2, [pc, #16]	; (800918c <SPI_Timer_On+0x24>)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6013      	str	r3, [r2, #0]
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	20000810 	.word	0x20000810
 800918c:	20000814 	.word	0x20000814

08009190 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009194:	f7fa fade 	bl	8003754 <HAL_GetTick>
 8009198:	4602      	mov	r2, r0
 800919a:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <SPI_Timer_Status+0x24>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	1ad2      	subs	r2, r2, r3
 80091a0:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <SPI_Timer_Status+0x28>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	bf34      	ite	cc
 80091a8:	2301      	movcc	r3, #1
 80091aa:	2300      	movcs	r3, #0
 80091ac:	b2db      	uxtb	r3, r3
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20000810 	.word	0x20000810
 80091b8:	20000814 	.word	0x20000814

080091bc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	4603      	mov	r3, r0
 80091c4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80091c6:	f107 020f 	add.w	r2, r7, #15
 80091ca:	1df9      	adds	r1, r7, #7
 80091cc:	2332      	movs	r3, #50	; 0x32
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	2301      	movs	r3, #1
 80091d2:	4804      	ldr	r0, [pc, #16]	; (80091e4 <xchg_spi+0x28>)
 80091d4:	f7fd face 	bl	8006774 <HAL_SPI_TransmitReceive>
    return rxDat;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	2000063c 	.word	0x2000063c

080091e8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80091e8:	b590      	push	{r4, r7, lr}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80091f2:	2300      	movs	r3, #0
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	e00a      	b.n	800920e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	18d4      	adds	r4, r2, r3
 80091fe:	20ff      	movs	r0, #255	; 0xff
 8009200:	f7ff ffdc 	bl	80091bc <xchg_spi>
 8009204:	4603      	mov	r3, r0
 8009206:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3301      	adds	r3, #1
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	429a      	cmp	r2, r3
 8009214:	d3f0      	bcc.n	80091f8 <rcvr_spi_multi+0x10>
	}
}
 8009216:	bf00      	nop
 8009218:	bf00      	nop
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	bd90      	pop	{r4, r7, pc}

08009220 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	b29a      	uxth	r2, r3
 800922e:	f04f 33ff 	mov.w	r3, #4294967295
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	4803      	ldr	r0, [pc, #12]	; (8009244 <xmit_spi_multi+0x24>)
 8009236:	f7fc fff1 	bl	800621c <HAL_SPI_Transmit>
}
 800923a:	bf00      	nop
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	2000063c 	.word	0x2000063c

08009248 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009250:	f7fa fa80 	bl	8003754 <HAL_GetTick>
 8009254:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800925a:	20ff      	movs	r0, #255	; 0xff
 800925c:	f7ff ffae 	bl	80091bc <xchg_spi>
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	2bff      	cmp	r3, #255	; 0xff
 8009268:	d007      	beq.n	800927a <wait_ready+0x32>
 800926a:	f7fa fa73 	bl	8003754 <HAL_GetTick>
 800926e:	4602      	mov	r2, r0
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	429a      	cmp	r2, r3
 8009278:	d8ef      	bhi.n	800925a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	2bff      	cmp	r3, #255	; 0xff
 800927e:	bf0c      	ite	eq
 8009280:	2301      	moveq	r3, #1
 8009282:	2300      	movne	r3, #0
 8009284:	b2db      	uxtb	r3, r3
}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
	...

08009290 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009294:	2201      	movs	r2, #1
 8009296:	2102      	movs	r1, #2
 8009298:	4803      	ldr	r0, [pc, #12]	; (80092a8 <despiselect+0x18>)
 800929a:	f7fa fd47 	bl	8003d2c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800929e:	20ff      	movs	r0, #255	; 0xff
 80092a0:	f7ff ff8c 	bl	80091bc <xchg_spi>

}
 80092a4:	bf00      	nop
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	48000400 	.word	0x48000400

080092ac <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80092b0:	2200      	movs	r2, #0
 80092b2:	2102      	movs	r1, #2
 80092b4:	4809      	ldr	r0, [pc, #36]	; (80092dc <spiselect+0x30>)
 80092b6:	f7fa fd39 	bl	8003d2c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80092ba:	20ff      	movs	r0, #255	; 0xff
 80092bc:	f7ff ff7e 	bl	80091bc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80092c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092c4:	f7ff ffc0 	bl	8009248 <wait_ready>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <spiselect+0x26>
 80092ce:	2301      	movs	r3, #1
 80092d0:	e002      	b.n	80092d8 <spiselect+0x2c>

	despiselect();
 80092d2:	f7ff ffdd 	bl	8009290 <despiselect>
	return 0;	/* Timeout */
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	48000400 	.word	0x48000400

080092e0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80092ea:	20c8      	movs	r0, #200	; 0xc8
 80092ec:	f7ff ff3c 	bl	8009168 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80092f0:	20ff      	movs	r0, #255	; 0xff
 80092f2:	f7ff ff63 	bl	80091bc <xchg_spi>
 80092f6:	4603      	mov	r3, r0
 80092f8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
 80092fc:	2bff      	cmp	r3, #255	; 0xff
 80092fe:	d104      	bne.n	800930a <rcvr_datablock+0x2a>
 8009300:	f7ff ff46 	bl	8009190 <SPI_Timer_Status>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1f2      	bne.n	80092f0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	2bfe      	cmp	r3, #254	; 0xfe
 800930e:	d001      	beq.n	8009314 <rcvr_datablock+0x34>
 8009310:	2300      	movs	r3, #0
 8009312:	e00a      	b.n	800932a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff ff66 	bl	80091e8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800931c:	20ff      	movs	r0, #255	; 0xff
 800931e:	f7ff ff4d 	bl	80091bc <xchg_spi>
 8009322:	20ff      	movs	r0, #255	; 0xff
 8009324:	f7ff ff4a 	bl	80091bc <xchg_spi>

	return 1;						/* Function succeeded */
 8009328:	2301      	movs	r3, #1
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	460b      	mov	r3, r1
 800933c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800933e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009342:	f7ff ff81 	bl	8009248 <wait_ready>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <xmit_datablock+0x1e>
 800934c:	2300      	movs	r3, #0
 800934e:	e01e      	b.n	800938e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	4618      	mov	r0, r3
 8009354:	f7ff ff32 	bl	80091bc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	2bfd      	cmp	r3, #253	; 0xfd
 800935c:	d016      	beq.n	800938c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800935e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff ff5c 	bl	8009220 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009368:	20ff      	movs	r0, #255	; 0xff
 800936a:	f7ff ff27 	bl	80091bc <xchg_spi>
 800936e:	20ff      	movs	r0, #255	; 0xff
 8009370:	f7ff ff24 	bl	80091bc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009374:	20ff      	movs	r0, #255	; 0xff
 8009376:	f7ff ff21 	bl	80091bc <xchg_spi>
 800937a:	4603      	mov	r3, r0
 800937c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	f003 031f 	and.w	r3, r3, #31
 8009384:	2b05      	cmp	r3, #5
 8009386:	d001      	beq.n	800938c <xmit_datablock+0x5a>
 8009388:	2300      	movs	r3, #0
 800938a:	e000      	b.n	800938e <xmit_datablock+0x5c>
	}
	return 1;
 800938c:	2301      	movs	r3, #1
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	4603      	mov	r3, r0
 800939e:	6039      	str	r1, [r7, #0]
 80093a0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80093a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	da0e      	bge.n	80093c8 <send_cmd+0x32>
		cmd &= 0x7F;
 80093aa:	79fb      	ldrb	r3, [r7, #7]
 80093ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80093b2:	2100      	movs	r1, #0
 80093b4:	2037      	movs	r0, #55	; 0x37
 80093b6:	f7ff ffee 	bl	8009396 <send_cmd>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80093be:	7bbb      	ldrb	r3, [r7, #14]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d901      	bls.n	80093c8 <send_cmd+0x32>
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
 80093c6:	e051      	b.n	800946c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80093c8:	79fb      	ldrb	r3, [r7, #7]
 80093ca:	2b0c      	cmp	r3, #12
 80093cc:	d008      	beq.n	80093e0 <send_cmd+0x4a>
		despiselect();
 80093ce:	f7ff ff5f 	bl	8009290 <despiselect>
		if (!spiselect()) return 0xFF;
 80093d2:	f7ff ff6b 	bl	80092ac <spiselect>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <send_cmd+0x4a>
 80093dc:	23ff      	movs	r3, #255	; 0xff
 80093de:	e045      	b.n	800946c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7ff fee7 	bl	80091bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	0e1b      	lsrs	r3, r3, #24
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7ff fee1 	bl	80091bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	0c1b      	lsrs	r3, r3, #16
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff fedb 	bl	80091bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	0a1b      	lsrs	r3, r3, #8
 800940a:	b2db      	uxtb	r3, r3
 800940c:	4618      	mov	r0, r3
 800940e:	f7ff fed5 	bl	80091bc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff fed0 	bl	80091bc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800941c:	2301      	movs	r3, #1
 800941e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009420:	79fb      	ldrb	r3, [r7, #7]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <send_cmd+0x94>
 8009426:	2395      	movs	r3, #149	; 0x95
 8009428:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	2b08      	cmp	r3, #8
 800942e:	d101      	bne.n	8009434 <send_cmd+0x9e>
 8009430:	2387      	movs	r3, #135	; 0x87
 8009432:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff fec0 	bl	80091bc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800943c:	79fb      	ldrb	r3, [r7, #7]
 800943e:	2b0c      	cmp	r3, #12
 8009440:	d102      	bne.n	8009448 <send_cmd+0xb2>
 8009442:	20ff      	movs	r0, #255	; 0xff
 8009444:	f7ff feba 	bl	80091bc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009448:	230a      	movs	r3, #10
 800944a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800944c:	20ff      	movs	r0, #255	; 0xff
 800944e:	f7ff feb5 	bl	80091bc <xchg_spi>
 8009452:	4603      	mov	r3, r0
 8009454:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800945a:	2b00      	cmp	r3, #0
 800945c:	da05      	bge.n	800946a <send_cmd+0xd4>
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	3b01      	subs	r3, #1
 8009462:	73fb      	strb	r3, [r7, #15]
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1f0      	bne.n	800944c <send_cmd+0xb6>

	return res;							/* Return received response */
 800946a:	7bbb      	ldrb	r3, [r7, #14]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009474:	b590      	push	{r4, r7, lr}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	4603      	mov	r3, r0
 800947c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <USER_SPI_initialize+0x14>
 8009484:	2301      	movs	r3, #1
 8009486:	e0d6      	b.n	8009636 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009488:	4b6d      	ldr	r3, [pc, #436]	; (8009640 <USER_SPI_initialize+0x1cc>)
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <USER_SPI_initialize+0x2a>
 8009496:	4b6a      	ldr	r3, [pc, #424]	; (8009640 <USER_SPI_initialize+0x1cc>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	b2db      	uxtb	r3, r3
 800949c:	e0cb      	b.n	8009636 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800949e:	4b69      	ldr	r3, [pc, #420]	; (8009644 <USER_SPI_initialize+0x1d0>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80094a8:	4b66      	ldr	r3, [pc, #408]	; (8009644 <USER_SPI_initialize+0x1d0>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80094b0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80094b2:	230a      	movs	r3, #10
 80094b4:	73fb      	strb	r3, [r7, #15]
 80094b6:	e005      	b.n	80094c4 <USER_SPI_initialize+0x50>
 80094b8:	20ff      	movs	r0, #255	; 0xff
 80094ba:	f7ff fe7f 	bl	80091bc <xchg_spi>
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	3b01      	subs	r3, #1
 80094c2:	73fb      	strb	r3, [r7, #15]
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1f6      	bne.n	80094b8 <USER_SPI_initialize+0x44>

	ty = 0;
 80094ca:	2300      	movs	r3, #0
 80094cc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80094ce:	2100      	movs	r1, #0
 80094d0:	2000      	movs	r0, #0
 80094d2:	f7ff ff60 	bl	8009396 <send_cmd>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b01      	cmp	r3, #1
 80094da:	f040 808b 	bne.w	80095f4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80094de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094e2:	f7ff fe41 	bl	8009168 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80094e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80094ea:	2008      	movs	r0, #8
 80094ec:	f7ff ff53 	bl	8009396 <send_cmd>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d151      	bne.n	800959a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80094f6:	2300      	movs	r3, #0
 80094f8:	73fb      	strb	r3, [r7, #15]
 80094fa:	e00d      	b.n	8009518 <USER_SPI_initialize+0xa4>
 80094fc:	7bfc      	ldrb	r4, [r7, #15]
 80094fe:	20ff      	movs	r0, #255	; 0xff
 8009500:	f7ff fe5c 	bl	80091bc <xchg_spi>
 8009504:	4603      	mov	r3, r0
 8009506:	461a      	mov	r2, r3
 8009508:	f104 0310 	add.w	r3, r4, #16
 800950c:	443b      	add	r3, r7
 800950e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	3301      	adds	r3, #1
 8009516:	73fb      	strb	r3, [r7, #15]
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	2b03      	cmp	r3, #3
 800951c:	d9ee      	bls.n	80094fc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800951e:	7abb      	ldrb	r3, [r7, #10]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d167      	bne.n	80095f4 <USER_SPI_initialize+0x180>
 8009524:	7afb      	ldrb	r3, [r7, #11]
 8009526:	2baa      	cmp	r3, #170	; 0xaa
 8009528:	d164      	bne.n	80095f4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800952a:	bf00      	nop
 800952c:	f7ff fe30 	bl	8009190 <SPI_Timer_Status>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d007      	beq.n	8009546 <USER_SPI_initialize+0xd2>
 8009536:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800953a:	20a9      	movs	r0, #169	; 0xa9
 800953c:	f7ff ff2b 	bl	8009396 <send_cmd>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1f2      	bne.n	800952c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009546:	f7ff fe23 	bl	8009190 <SPI_Timer_Status>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d051      	beq.n	80095f4 <USER_SPI_initialize+0x180>
 8009550:	2100      	movs	r1, #0
 8009552:	203a      	movs	r0, #58	; 0x3a
 8009554:	f7ff ff1f 	bl	8009396 <send_cmd>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d14a      	bne.n	80095f4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
 8009562:	e00d      	b.n	8009580 <USER_SPI_initialize+0x10c>
 8009564:	7bfc      	ldrb	r4, [r7, #15]
 8009566:	20ff      	movs	r0, #255	; 0xff
 8009568:	f7ff fe28 	bl	80091bc <xchg_spi>
 800956c:	4603      	mov	r3, r0
 800956e:	461a      	mov	r2, r3
 8009570:	f104 0310 	add.w	r3, r4, #16
 8009574:	443b      	add	r3, r7
 8009576:	f803 2c08 	strb.w	r2, [r3, #-8]
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	3301      	adds	r3, #1
 800957e:	73fb      	strb	r3, [r7, #15]
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	2b03      	cmp	r3, #3
 8009584:	d9ee      	bls.n	8009564 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009586:	7a3b      	ldrb	r3, [r7, #8]
 8009588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <USER_SPI_initialize+0x120>
 8009590:	230c      	movs	r3, #12
 8009592:	e000      	b.n	8009596 <USER_SPI_initialize+0x122>
 8009594:	2304      	movs	r3, #4
 8009596:	737b      	strb	r3, [r7, #13]
 8009598:	e02c      	b.n	80095f4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800959a:	2100      	movs	r1, #0
 800959c:	20a9      	movs	r0, #169	; 0xa9
 800959e:	f7ff fefa 	bl	8009396 <send_cmd>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d804      	bhi.n	80095b2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80095a8:	2302      	movs	r3, #2
 80095aa:	737b      	strb	r3, [r7, #13]
 80095ac:	23a9      	movs	r3, #169	; 0xa9
 80095ae:	73bb      	strb	r3, [r7, #14]
 80095b0:	e003      	b.n	80095ba <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80095b2:	2301      	movs	r3, #1
 80095b4:	737b      	strb	r3, [r7, #13]
 80095b6:	2301      	movs	r3, #1
 80095b8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80095ba:	bf00      	nop
 80095bc:	f7ff fde8 	bl	8009190 <SPI_Timer_Status>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d007      	beq.n	80095d6 <USER_SPI_initialize+0x162>
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
 80095c8:	2100      	movs	r1, #0
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7ff fee3 	bl	8009396 <send_cmd>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1f2      	bne.n	80095bc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80095d6:	f7ff fddb 	bl	8009190 <SPI_Timer_Status>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d007      	beq.n	80095f0 <USER_SPI_initialize+0x17c>
 80095e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80095e4:	2010      	movs	r0, #16
 80095e6:	f7ff fed6 	bl	8009396 <send_cmd>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <USER_SPI_initialize+0x180>
				ty = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80095f4:	4a14      	ldr	r2, [pc, #80]	; (8009648 <USER_SPI_initialize+0x1d4>)
 80095f6:	7b7b      	ldrb	r3, [r7, #13]
 80095f8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80095fa:	f7ff fe49 	bl	8009290 <despiselect>

	if (ty) {			/* OK */
 80095fe:	7b7b      	ldrb	r3, [r7, #13]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d012      	beq.n	800962a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8009604:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <USER_SPI_initialize+0x1d0>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800960e:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <USER_SPI_initialize+0x1d0>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0210 	orr.w	r2, r2, #16
 8009616:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009618:	4b09      	ldr	r3, [pc, #36]	; (8009640 <USER_SPI_initialize+0x1cc>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f023 0301 	bic.w	r3, r3, #1
 8009622:	b2da      	uxtb	r2, r3
 8009624:	4b06      	ldr	r3, [pc, #24]	; (8009640 <USER_SPI_initialize+0x1cc>)
 8009626:	701a      	strb	r2, [r3, #0]
 8009628:	e002      	b.n	8009630 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800962a:	4b05      	ldr	r3, [pc, #20]	; (8009640 <USER_SPI_initialize+0x1cc>)
 800962c:	2201      	movs	r2, #1
 800962e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009630:	4b03      	ldr	r3, [pc, #12]	; (8009640 <USER_SPI_initialize+0x1cc>)
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	b2db      	uxtb	r3, r3
}
 8009636:	4618      	mov	r0, r3
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	bd90      	pop	{r4, r7, pc}
 800963e:	bf00      	nop
 8009640:	2000003c 	.word	0x2000003c
 8009644:	2000063c 	.word	0x2000063c
 8009648:	2000080c 	.word	0x2000080c

0800964c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <USER_SPI_status+0x14>
 800965c:	2301      	movs	r3, #1
 800965e:	e002      	b.n	8009666 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009660:	4b04      	ldr	r3, [pc, #16]	; (8009674 <USER_SPI_status+0x28>)
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	b2db      	uxtb	r3, r3
}
 8009666:	4618      	mov	r0, r3
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	2000003c 	.word	0x2000003c

08009678 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	607a      	str	r2, [r7, #4]
 8009682:	603b      	str	r3, [r7, #0]
 8009684:	4603      	mov	r3, r0
 8009686:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d102      	bne.n	8009694 <USER_SPI_read+0x1c>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <USER_SPI_read+0x20>
 8009694:	2304      	movs	r3, #4
 8009696:	e04d      	b.n	8009734 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009698:	4b28      	ldr	r3, [pc, #160]	; (800973c <USER_SPI_read+0xc4>)
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <USER_SPI_read+0x32>
 80096a6:	2303      	movs	r3, #3
 80096a8:	e044      	b.n	8009734 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80096aa:	4b25      	ldr	r3, [pc, #148]	; (8009740 <USER_SPI_read+0xc8>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	f003 0308 	and.w	r3, r3, #8
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d102      	bne.n	80096bc <USER_SPI_read+0x44>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	025b      	lsls	r3, r3, #9
 80096ba:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d111      	bne.n	80096e6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	2011      	movs	r0, #17
 80096c6:	f7ff fe66 	bl	8009396 <send_cmd>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d129      	bne.n	8009724 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80096d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80096d4:	68b8      	ldr	r0, [r7, #8]
 80096d6:	f7ff fe03 	bl	80092e0 <rcvr_datablock>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d021      	beq.n	8009724 <USER_SPI_read+0xac>
			count = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	e01e      	b.n	8009724 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80096e6:	6879      	ldr	r1, [r7, #4]
 80096e8:	2012      	movs	r0, #18
 80096ea:	f7ff fe54 	bl	8009396 <send_cmd>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d117      	bne.n	8009724 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80096f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80096f8:	68b8      	ldr	r0, [r7, #8]
 80096fa:	f7ff fdf1 	bl	80092e0 <rcvr_datablock>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00a      	beq.n	800971a <USER_SPI_read+0xa2>
				buff += 512;
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800970a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	3b01      	subs	r3, #1
 8009710:	603b      	str	r3, [r7, #0]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1ed      	bne.n	80096f4 <USER_SPI_read+0x7c>
 8009718:	e000      	b.n	800971c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800971a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800971c:	2100      	movs	r1, #0
 800971e:	200c      	movs	r0, #12
 8009720:	f7ff fe39 	bl	8009396 <send_cmd>
		}
	}
	despiselect();
 8009724:	f7ff fdb4 	bl	8009290 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	bf14      	ite	ne
 800972e:	2301      	movne	r3, #1
 8009730:	2300      	moveq	r3, #0
 8009732:	b2db      	uxtb	r3, r3
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	2000003c 	.word	0x2000003c
 8009740:	2000080c 	.word	0x2000080c

08009744 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	60b9      	str	r1, [r7, #8]
 800974c:	607a      	str	r2, [r7, #4]
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d102      	bne.n	8009760 <USER_SPI_write+0x1c>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <USER_SPI_write+0x20>
 8009760:	2304      	movs	r3, #4
 8009762:	e063      	b.n	800982c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009764:	4b33      	ldr	r3, [pc, #204]	; (8009834 <USER_SPI_write+0xf0>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	b2db      	uxtb	r3, r3
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <USER_SPI_write+0x32>
 8009772:	2303      	movs	r3, #3
 8009774:	e05a      	b.n	800982c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009776:	4b2f      	ldr	r3, [pc, #188]	; (8009834 <USER_SPI_write+0xf0>)
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	b2db      	uxtb	r3, r3
 800977c:	f003 0304 	and.w	r3, r3, #4
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <USER_SPI_write+0x44>
 8009784:	2302      	movs	r3, #2
 8009786:	e051      	b.n	800982c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009788:	4b2b      	ldr	r3, [pc, #172]	; (8009838 <USER_SPI_write+0xf4>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	f003 0308 	and.w	r3, r3, #8
 8009790:	2b00      	cmp	r3, #0
 8009792:	d102      	bne.n	800979a <USER_SPI_write+0x56>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	025b      	lsls	r3, r3, #9
 8009798:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d110      	bne.n	80097c2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80097a0:	6879      	ldr	r1, [r7, #4]
 80097a2:	2018      	movs	r0, #24
 80097a4:	f7ff fdf7 	bl	8009396 <send_cmd>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d136      	bne.n	800981c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80097ae:	21fe      	movs	r1, #254	; 0xfe
 80097b0:	68b8      	ldr	r0, [r7, #8]
 80097b2:	f7ff fdbe 	bl	8009332 <xmit_datablock>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d02f      	beq.n	800981c <USER_SPI_write+0xd8>
			count = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	603b      	str	r3, [r7, #0]
 80097c0:	e02c      	b.n	800981c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80097c2:	4b1d      	ldr	r3, [pc, #116]	; (8009838 <USER_SPI_write+0xf4>)
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	f003 0306 	and.w	r3, r3, #6
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <USER_SPI_write+0x92>
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	2097      	movs	r0, #151	; 0x97
 80097d2:	f7ff fde0 	bl	8009396 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	2019      	movs	r0, #25
 80097da:	f7ff fddc 	bl	8009396 <send_cmd>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d11b      	bne.n	800981c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80097e4:	21fc      	movs	r1, #252	; 0xfc
 80097e6:	68b8      	ldr	r0, [r7, #8]
 80097e8:	f7ff fda3 	bl	8009332 <xmit_datablock>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <USER_SPI_write+0xc4>
				buff += 512;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80097f8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	3b01      	subs	r3, #1
 80097fe:	603b      	str	r3, [r7, #0]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1ee      	bne.n	80097e4 <USER_SPI_write+0xa0>
 8009806:	e000      	b.n	800980a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009808:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800980a:	21fd      	movs	r1, #253	; 0xfd
 800980c:	2000      	movs	r0, #0
 800980e:	f7ff fd90 	bl	8009332 <xmit_datablock>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <USER_SPI_write+0xd8>
 8009818:	2301      	movs	r3, #1
 800981a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800981c:	f7ff fd38 	bl	8009290 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	bf14      	ite	ne
 8009826:	2301      	movne	r3, #1
 8009828:	2300      	moveq	r3, #0
 800982a:	b2db      	uxtb	r3, r3
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	2000003c 	.word	0x2000003c
 8009838:	2000080c 	.word	0x2000080c

0800983c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b08c      	sub	sp, #48	; 0x30
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	603a      	str	r2, [r7, #0]
 8009846:	71fb      	strb	r3, [r7, #7]
 8009848:	460b      	mov	r3, r1
 800984a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <USER_SPI_ioctl+0x1a>
 8009852:	2304      	movs	r3, #4
 8009854:	e15a      	b.n	8009b0c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009856:	4baf      	ldr	r3, [pc, #700]	; (8009b14 <USER_SPI_ioctl+0x2d8>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	b2db      	uxtb	r3, r3
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <USER_SPI_ioctl+0x2c>
 8009864:	2303      	movs	r3, #3
 8009866:	e151      	b.n	8009b0c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800986e:	79bb      	ldrb	r3, [r7, #6]
 8009870:	2b04      	cmp	r3, #4
 8009872:	f200 8136 	bhi.w	8009ae2 <USER_SPI_ioctl+0x2a6>
 8009876:	a201      	add	r2, pc, #4	; (adr r2, 800987c <USER_SPI_ioctl+0x40>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	08009891 	.word	0x08009891
 8009880:	080098a5 	.word	0x080098a5
 8009884:	08009ae3 	.word	0x08009ae3
 8009888:	08009951 	.word	0x08009951
 800988c:	08009a47 	.word	0x08009a47
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009890:	f7ff fd0c 	bl	80092ac <spiselect>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 8127 	beq.w	8009aea <USER_SPI_ioctl+0x2ae>
 800989c:	2300      	movs	r3, #0
 800989e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80098a2:	e122      	b.n	8009aea <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80098a4:	2100      	movs	r1, #0
 80098a6:	2009      	movs	r0, #9
 80098a8:	f7ff fd75 	bl	8009396 <send_cmd>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f040 811d 	bne.w	8009aee <USER_SPI_ioctl+0x2b2>
 80098b4:	f107 030c 	add.w	r3, r7, #12
 80098b8:	2110      	movs	r1, #16
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7ff fd10 	bl	80092e0 <rcvr_datablock>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 8113 	beq.w	8009aee <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80098c8:	7b3b      	ldrb	r3, [r7, #12]
 80098ca:	099b      	lsrs	r3, r3, #6
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d111      	bne.n	80098f6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80098d2:	7d7b      	ldrb	r3, [r7, #21]
 80098d4:	461a      	mov	r2, r3
 80098d6:	7d3b      	ldrb	r3, [r7, #20]
 80098d8:	021b      	lsls	r3, r3, #8
 80098da:	4413      	add	r3, r2
 80098dc:	461a      	mov	r2, r3
 80098de:	7cfb      	ldrb	r3, [r7, #19]
 80098e0:	041b      	lsls	r3, r3, #16
 80098e2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80098e6:	4413      	add	r3, r2
 80098e8:	3301      	adds	r3, #1
 80098ea:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	029a      	lsls	r2, r3, #10
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	e028      	b.n	8009948 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80098f6:	7c7b      	ldrb	r3, [r7, #17]
 80098f8:	f003 030f 	and.w	r3, r3, #15
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	7dbb      	ldrb	r3, [r7, #22]
 8009900:	09db      	lsrs	r3, r3, #7
 8009902:	b2db      	uxtb	r3, r3
 8009904:	4413      	add	r3, r2
 8009906:	b2da      	uxtb	r2, r3
 8009908:	7d7b      	ldrb	r3, [r7, #21]
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	b2db      	uxtb	r3, r3
 800990e:	f003 0306 	and.w	r3, r3, #6
 8009912:	b2db      	uxtb	r3, r3
 8009914:	4413      	add	r3, r2
 8009916:	b2db      	uxtb	r3, r3
 8009918:	3302      	adds	r3, #2
 800991a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800991e:	7d3b      	ldrb	r3, [r7, #20]
 8009920:	099b      	lsrs	r3, r3, #6
 8009922:	b2db      	uxtb	r3, r3
 8009924:	461a      	mov	r2, r3
 8009926:	7cfb      	ldrb	r3, [r7, #19]
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	441a      	add	r2, r3
 800992c:	7cbb      	ldrb	r3, [r7, #18]
 800992e:	029b      	lsls	r3, r3, #10
 8009930:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009934:	4413      	add	r3, r2
 8009936:	3301      	adds	r3, #1
 8009938:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800993a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800993e:	3b09      	subs	r3, #9
 8009940:	69fa      	ldr	r2, [r7, #28]
 8009942:	409a      	lsls	r2, r3
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800994e:	e0ce      	b.n	8009aee <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009950:	4b71      	ldr	r3, [pc, #452]	; (8009b18 <USER_SPI_ioctl+0x2dc>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b00      	cmp	r3, #0
 800995a:	d031      	beq.n	80099c0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800995c:	2100      	movs	r1, #0
 800995e:	208d      	movs	r0, #141	; 0x8d
 8009960:	f7ff fd19 	bl	8009396 <send_cmd>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	f040 80c3 	bne.w	8009af2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800996c:	20ff      	movs	r0, #255	; 0xff
 800996e:	f7ff fc25 	bl	80091bc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009972:	f107 030c 	add.w	r3, r7, #12
 8009976:	2110      	movs	r1, #16
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff fcb1 	bl	80092e0 <rcvr_datablock>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 80b6 	beq.w	8009af2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009986:	2330      	movs	r3, #48	; 0x30
 8009988:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800998c:	e007      	b.n	800999e <USER_SPI_ioctl+0x162>
 800998e:	20ff      	movs	r0, #255	; 0xff
 8009990:	f7ff fc14 	bl	80091bc <xchg_spi>
 8009994:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009998:	3b01      	subs	r3, #1
 800999a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800999e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1f3      	bne.n	800998e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80099a6:	7dbb      	ldrb	r3, [r7, #22]
 80099a8:	091b      	lsrs	r3, r3, #4
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	461a      	mov	r2, r3
 80099ae:	2310      	movs	r3, #16
 80099b0:	fa03 f202 	lsl.w	r2, r3, r2
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80099be:	e098      	b.n	8009af2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80099c0:	2100      	movs	r1, #0
 80099c2:	2009      	movs	r0, #9
 80099c4:	f7ff fce7 	bl	8009396 <send_cmd>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f040 8091 	bne.w	8009af2 <USER_SPI_ioctl+0x2b6>
 80099d0:	f107 030c 	add.w	r3, r7, #12
 80099d4:	2110      	movs	r1, #16
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7ff fc82 	bl	80092e0 <rcvr_datablock>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 8087 	beq.w	8009af2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80099e4:	4b4c      	ldr	r3, [pc, #304]	; (8009b18 <USER_SPI_ioctl+0x2dc>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	f003 0302 	and.w	r3, r3, #2
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d012      	beq.n	8009a16 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80099f0:	7dbb      	ldrb	r3, [r7, #22]
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80099f8:	7dfa      	ldrb	r2, [r7, #23]
 80099fa:	09d2      	lsrs	r2, r2, #7
 80099fc:	b2d2      	uxtb	r2, r2
 80099fe:	4413      	add	r3, r2
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	7e7b      	ldrb	r3, [r7, #25]
 8009a04:	099b      	lsrs	r3, r3, #6
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0e:	461a      	mov	r2, r3
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	e013      	b.n	8009a3e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009a16:	7dbb      	ldrb	r3, [r7, #22]
 8009a18:	109b      	asrs	r3, r3, #2
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	f003 031f 	and.w	r3, r3, #31
 8009a20:	3301      	adds	r3, #1
 8009a22:	7dfa      	ldrb	r2, [r7, #23]
 8009a24:	00d2      	lsls	r2, r2, #3
 8009a26:	f002 0218 	and.w	r2, r2, #24
 8009a2a:	7df9      	ldrb	r1, [r7, #23]
 8009a2c:	0949      	lsrs	r1, r1, #5
 8009a2e:	b2c9      	uxtb	r1, r1
 8009a30:	440a      	add	r2, r1
 8009a32:	3201      	adds	r2, #1
 8009a34:	fb02 f303 	mul.w	r3, r2, r3
 8009a38:	461a      	mov	r2, r3
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009a44:	e055      	b.n	8009af2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009a46:	4b34      	ldr	r3, [pc, #208]	; (8009b18 <USER_SPI_ioctl+0x2dc>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	f003 0306 	and.w	r3, r3, #6
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d051      	beq.n	8009af6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009a52:	f107 020c 	add.w	r2, r7, #12
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	210b      	movs	r1, #11
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7ff feee 	bl	800983c <USER_SPI_ioctl>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d149      	bne.n	8009afa <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009a66:	7b3b      	ldrb	r3, [r7, #12]
 8009a68:	099b      	lsrs	r3, r3, #6
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d104      	bne.n	8009a7a <USER_SPI_ioctl+0x23e>
 8009a70:	7dbb      	ldrb	r3, [r7, #22]
 8009a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d041      	beq.n	8009afe <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	623b      	str	r3, [r7, #32]
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009a8a:	4b23      	ldr	r3, [pc, #140]	; (8009b18 <USER_SPI_ioctl+0x2dc>)
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	f003 0308 	and.w	r3, r3, #8
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d105      	bne.n	8009aa2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a98:	025b      	lsls	r3, r3, #9
 8009a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	025b      	lsls	r3, r3, #9
 8009aa0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa4:	2020      	movs	r0, #32
 8009aa6:	f7ff fc76 	bl	8009396 <send_cmd>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d128      	bne.n	8009b02 <USER_SPI_ioctl+0x2c6>
 8009ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ab2:	2021      	movs	r0, #33	; 0x21
 8009ab4:	f7ff fc6f 	bl	8009396 <send_cmd>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d121      	bne.n	8009b02 <USER_SPI_ioctl+0x2c6>
 8009abe:	2100      	movs	r1, #0
 8009ac0:	2026      	movs	r0, #38	; 0x26
 8009ac2:	f7ff fc68 	bl	8009396 <send_cmd>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d11a      	bne.n	8009b02 <USER_SPI_ioctl+0x2c6>
 8009acc:	f247 5030 	movw	r0, #30000	; 0x7530
 8009ad0:	f7ff fbba 	bl	8009248 <wait_ready>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d013      	beq.n	8009b02 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009ada:	2300      	movs	r3, #0
 8009adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009ae0:	e00f      	b.n	8009b02 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009ae2:	2304      	movs	r3, #4
 8009ae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009ae8:	e00c      	b.n	8009b04 <USER_SPI_ioctl+0x2c8>
		break;
 8009aea:	bf00      	nop
 8009aec:	e00a      	b.n	8009b04 <USER_SPI_ioctl+0x2c8>
		break;
 8009aee:	bf00      	nop
 8009af0:	e008      	b.n	8009b04 <USER_SPI_ioctl+0x2c8>
		break;
 8009af2:	bf00      	nop
 8009af4:	e006      	b.n	8009b04 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009af6:	bf00      	nop
 8009af8:	e004      	b.n	8009b04 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009afa:	bf00      	nop
 8009afc:	e002      	b.n	8009b04 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009afe:	bf00      	nop
 8009b00:	e000      	b.n	8009b04 <USER_SPI_ioctl+0x2c8>
		break;
 8009b02:	bf00      	nop
	}

	despiselect();
 8009b04:	f7ff fbc4 	bl	8009290 <despiselect>

	return res;
 8009b08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3730      	adds	r7, #48	; 0x30
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	2000003c 	.word	0x2000003c
 8009b18:	2000080c 	.word	0x2000080c

08009b1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b26:	79fb      	ldrb	r3, [r7, #7]
 8009b28:	4a08      	ldr	r2, [pc, #32]	; (8009b4c <disk_status+0x30>)
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	79fa      	ldrb	r2, [r7, #7]
 8009b34:	4905      	ldr	r1, [pc, #20]	; (8009b4c <disk_status+0x30>)
 8009b36:	440a      	add	r2, r1
 8009b38:	7a12      	ldrb	r2, [r2, #8]
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	4798      	blx	r3
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20000840 	.word	0x20000840

08009b50 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009b5e:	79fb      	ldrb	r3, [r7, #7]
 8009b60:	4a0d      	ldr	r2, [pc, #52]	; (8009b98 <disk_initialize+0x48>)
 8009b62:	5cd3      	ldrb	r3, [r2, r3]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d111      	bne.n	8009b8c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009b68:	79fb      	ldrb	r3, [r7, #7]
 8009b6a:	4a0b      	ldr	r2, [pc, #44]	; (8009b98 <disk_initialize+0x48>)
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b70:	79fb      	ldrb	r3, [r7, #7]
 8009b72:	4a09      	ldr	r2, [pc, #36]	; (8009b98 <disk_initialize+0x48>)
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	79fa      	ldrb	r2, [r7, #7]
 8009b7e:	4906      	ldr	r1, [pc, #24]	; (8009b98 <disk_initialize+0x48>)
 8009b80:	440a      	add	r2, r1
 8009b82:	7a12      	ldrb	r2, [r2, #8]
 8009b84:	4610      	mov	r0, r2
 8009b86:	4798      	blx	r3
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	20000840 	.word	0x20000840

08009b9c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b9c:	b590      	push	{r4, r7, lr}
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	607a      	str	r2, [r7, #4]
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	4603      	mov	r3, r0
 8009baa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	4a0a      	ldr	r2, [pc, #40]	; (8009bd8 <disk_read+0x3c>)
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	689c      	ldr	r4, [r3, #8]
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	4a07      	ldr	r2, [pc, #28]	; (8009bd8 <disk_read+0x3c>)
 8009bbc:	4413      	add	r3, r2
 8009bbe:	7a18      	ldrb	r0, [r3, #8]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	68b9      	ldr	r1, [r7, #8]
 8009bc6:	47a0      	blx	r4
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	371c      	adds	r7, #28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd90      	pop	{r4, r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000840 	.word	0x20000840

08009bdc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009bdc:	b590      	push	{r4, r7, lr}
 8009bde:	b087      	sub	sp, #28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	607a      	str	r2, [r7, #4]
 8009be6:	603b      	str	r3, [r7, #0]
 8009be8:	4603      	mov	r3, r0
 8009bea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	4a0a      	ldr	r2, [pc, #40]	; (8009c18 <disk_write+0x3c>)
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	68dc      	ldr	r4, [r3, #12]
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	4a07      	ldr	r2, [pc, #28]	; (8009c18 <disk_write+0x3c>)
 8009bfc:	4413      	add	r3, r2
 8009bfe:	7a18      	ldrb	r0, [r3, #8]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	68b9      	ldr	r1, [r7, #8]
 8009c06:	47a0      	blx	r4
 8009c08:	4603      	mov	r3, r0
 8009c0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd90      	pop	{r4, r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20000840 	.word	0x20000840

08009c1c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	603a      	str	r2, [r7, #0]
 8009c26:	71fb      	strb	r3, [r7, #7]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	4a09      	ldr	r2, [pc, #36]	; (8009c54 <disk_ioctl+0x38>)
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	79fa      	ldrb	r2, [r7, #7]
 8009c3a:	4906      	ldr	r1, [pc, #24]	; (8009c54 <disk_ioctl+0x38>)
 8009c3c:	440a      	add	r2, r1
 8009c3e:	7a10      	ldrb	r0, [r2, #8]
 8009c40:	79b9      	ldrb	r1, [r7, #6]
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	4798      	blx	r3
 8009c46:	4603      	mov	r3, r0
 8009c48:	73fb      	strb	r3, [r7, #15]
  return res;
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	20000840 	.word	0x20000840

08009c58 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3301      	adds	r3, #1
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009c68:	89fb      	ldrh	r3, [r7, #14]
 8009c6a:	021b      	lsls	r3, r3, #8
 8009c6c:	b21a      	sxth	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	b21b      	sxth	r3, r3
 8009c74:	4313      	orrs	r3, r2
 8009c76:	b21b      	sxth	r3, r3
 8009c78:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009c7a:	89fb      	ldrh	r3, [r7, #14]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3303      	adds	r3, #3
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	021b      	lsls	r3, r3, #8
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	3202      	adds	r2, #2
 8009ca0:	7812      	ldrb	r2, [r2, #0]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	021b      	lsls	r3, r3, #8
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	3201      	adds	r2, #1
 8009cae:	7812      	ldrb	r2, [r2, #0]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	021b      	lsls	r3, r3, #8
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	7812      	ldrb	r2, [r2, #0]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]
	return rv;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b083      	sub	sp, #12
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	1c5a      	adds	r2, r3, #1
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	887a      	ldrh	r2, [r7, #2]
 8009ce2:	b2d2      	uxtb	r2, r2
 8009ce4:	701a      	strb	r2, [r3, #0]
 8009ce6:	887b      	ldrh	r3, [r7, #2]
 8009ce8:	0a1b      	lsrs	r3, r3, #8
 8009cea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	607a      	str	r2, [r7, #4]
 8009cf2:	887a      	ldrh	r2, [r7, #2]
 8009cf4:	b2d2      	uxtb	r2, r2
 8009cf6:	701a      	strb	r2, [r3, #0]
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	1c5a      	adds	r2, r3, #1
 8009d12:	607a      	str	r2, [r7, #4]
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	b2d2      	uxtb	r2, r2
 8009d18:	701a      	strb	r2, [r3, #0]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	0a1b      	lsrs	r3, r3, #8
 8009d1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	607a      	str	r2, [r7, #4]
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	b2d2      	uxtb	r2, r2
 8009d2a:	701a      	strb	r2, [r3, #0]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	0a1b      	lsrs	r3, r3, #8
 8009d30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	b2d2      	uxtb	r2, r2
 8009d3c:	701a      	strb	r2, [r3, #0]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	0a1b      	lsrs	r3, r3, #8
 8009d42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	607a      	str	r2, [r7, #4]
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	b2d2      	uxtb	r2, r2
 8009d4e:	701a      	strb	r2, [r3, #0]
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00d      	beq.n	8009d92 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	1c53      	adds	r3, r2, #1
 8009d7a:	613b      	str	r3, [r7, #16]
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	1c59      	adds	r1, r3, #1
 8009d80:	6179      	str	r1, [r7, #20]
 8009d82:	7812      	ldrb	r2, [r2, #0]
 8009d84:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	607b      	str	r3, [r7, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f1      	bne.n	8009d76 <mem_cpy+0x1a>
	}
}
 8009d92:	bf00      	nop
 8009d94:	371c      	adds	r7, #28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009d9e:	b480      	push	{r7}
 8009da0:	b087      	sub	sp, #28
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	617a      	str	r2, [r7, #20]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	b2d2      	uxtb	r2, r2
 8009db8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	607b      	str	r3, [r7, #4]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1f3      	bne.n	8009dae <mem_set+0x10>
}
 8009dc6:	bf00      	nop
 8009dc8:	bf00      	nop
 8009dca:	371c      	adds	r7, #28
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009dd4:	b480      	push	{r7}
 8009dd6:	b089      	sub	sp, #36	; 0x24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	61fb      	str	r3, [r7, #28]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	61fa      	str	r2, [r7, #28]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	4619      	mov	r1, r3
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	1c5a      	adds	r2, r3, #1
 8009dfa:	61ba      	str	r2, [r7, #24]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	1acb      	subs	r3, r1, r3
 8009e00:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	607b      	str	r3, [r7, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <mem_cmp+0x40>
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0eb      	beq.n	8009dec <mem_cmp+0x18>

	return r;
 8009e14:	697b      	ldr	r3, [r7, #20]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3724      	adds	r7, #36	; 0x24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009e2c:	e002      	b.n	8009e34 <chk_chr+0x12>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3301      	adds	r3, #1
 8009e32:	607b      	str	r3, [r7, #4]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d005      	beq.n	8009e48 <chk_chr+0x26>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	461a      	mov	r2, r3
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d1f2      	bne.n	8009e2e <chk_chr+0xc>
	return *str;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e62:	2300      	movs	r3, #0
 8009e64:	60bb      	str	r3, [r7, #8]
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	e029      	b.n	8009ec0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009e6c:	4a27      	ldr	r2, [pc, #156]	; (8009f0c <chk_lock+0xb4>)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	011b      	lsls	r3, r3, #4
 8009e72:	4413      	add	r3, r2
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d01d      	beq.n	8009eb6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e7a:	4a24      	ldr	r2, [pc, #144]	; (8009f0c <chk_lock+0xb4>)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	4413      	add	r3, r2
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d116      	bne.n	8009eba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009e8c:	4a1f      	ldr	r2, [pc, #124]	; (8009f0c <chk_lock+0xb4>)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	011b      	lsls	r3, r3, #4
 8009e92:	4413      	add	r3, r2
 8009e94:	3304      	adds	r3, #4
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d10c      	bne.n	8009eba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ea0:	4a1a      	ldr	r2, [pc, #104]	; (8009f0c <chk_lock+0xb4>)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	011b      	lsls	r3, r3, #4
 8009ea6:	4413      	add	r3, r2
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d102      	bne.n	8009eba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009eb4:	e007      	b.n	8009ec6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d9d2      	bls.n	8009e6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d109      	bne.n	8009ee0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d102      	bne.n	8009ed8 <chk_lock+0x80>
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d101      	bne.n	8009edc <chk_lock+0x84>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	e010      	b.n	8009efe <chk_lock+0xa6>
 8009edc:	2312      	movs	r3, #18
 8009ede:	e00e      	b.n	8009efe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d108      	bne.n	8009ef8 <chk_lock+0xa0>
 8009ee6:	4a09      	ldr	r2, [pc, #36]	; (8009f0c <chk_lock+0xb4>)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	011b      	lsls	r3, r3, #4
 8009eec:	4413      	add	r3, r2
 8009eee:	330c      	adds	r3, #12
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ef6:	d101      	bne.n	8009efc <chk_lock+0xa4>
 8009ef8:	2310      	movs	r3, #16
 8009efa:	e000      	b.n	8009efe <chk_lock+0xa6>
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	20000820 	.word	0x20000820

08009f10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f16:	2300      	movs	r3, #0
 8009f18:	607b      	str	r3, [r7, #4]
 8009f1a:	e002      	b.n	8009f22 <enq_lock+0x12>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	607b      	str	r3, [r7, #4]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d806      	bhi.n	8009f36 <enq_lock+0x26>
 8009f28:	4a09      	ldr	r2, [pc, #36]	; (8009f50 <enq_lock+0x40>)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	011b      	lsls	r3, r3, #4
 8009f2e:	4413      	add	r3, r2
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1f2      	bne.n	8009f1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	bf14      	ite	ne
 8009f3c:	2301      	movne	r3, #1
 8009f3e:	2300      	moveq	r3, #0
 8009f40:	b2db      	uxtb	r3, r3
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	20000820 	.word	0x20000820

08009f54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	e01f      	b.n	8009fa4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009f64:	4a41      	ldr	r2, [pc, #260]	; (800a06c <inc_lock+0x118>)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	011b      	lsls	r3, r3, #4
 8009f6a:	4413      	add	r3, r2
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d113      	bne.n	8009f9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009f76:	4a3d      	ldr	r2, [pc, #244]	; (800a06c <inc_lock+0x118>)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	4413      	add	r3, r2
 8009f7e:	3304      	adds	r3, #4
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d109      	bne.n	8009f9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009f8a:	4a38      	ldr	r2, [pc, #224]	; (800a06c <inc_lock+0x118>)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	4413      	add	r3, r2
 8009f92:	3308      	adds	r3, #8
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d006      	beq.n	8009fac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d9dc      	bls.n	8009f64 <inc_lock+0x10>
 8009faa:	e000      	b.n	8009fae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009fac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d132      	bne.n	800a01a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	e002      	b.n	8009fc0 <inc_lock+0x6c>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	60fb      	str	r3, [r7, #12]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d806      	bhi.n	8009fd4 <inc_lock+0x80>
 8009fc6:	4a29      	ldr	r2, [pc, #164]	; (800a06c <inc_lock+0x118>)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	011b      	lsls	r3, r3, #4
 8009fcc:	4413      	add	r3, r2
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1f2      	bne.n	8009fba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d101      	bne.n	8009fde <inc_lock+0x8a>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	e040      	b.n	800a060 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	4922      	ldr	r1, [pc, #136]	; (800a06c <inc_lock+0x118>)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	011b      	lsls	r3, r3, #4
 8009fe8:	440b      	add	r3, r1
 8009fea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	689a      	ldr	r2, [r3, #8]
 8009ff0:	491e      	ldr	r1, [pc, #120]	; (800a06c <inc_lock+0x118>)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	011b      	lsls	r3, r3, #4
 8009ff6:	440b      	add	r3, r1
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	695a      	ldr	r2, [r3, #20]
 800a000:	491a      	ldr	r1, [pc, #104]	; (800a06c <inc_lock+0x118>)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	011b      	lsls	r3, r3, #4
 800a006:	440b      	add	r3, r1
 800a008:	3308      	adds	r3, #8
 800a00a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a00c:	4a17      	ldr	r2, [pc, #92]	; (800a06c <inc_lock+0x118>)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	011b      	lsls	r3, r3, #4
 800a012:	4413      	add	r3, r2
 800a014:	330c      	adds	r3, #12
 800a016:	2200      	movs	r2, #0
 800a018:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d009      	beq.n	800a034 <inc_lock+0xe0>
 800a020:	4a12      	ldr	r2, [pc, #72]	; (800a06c <inc_lock+0x118>)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	011b      	lsls	r3, r3, #4
 800a026:	4413      	add	r3, r2
 800a028:	330c      	adds	r3, #12
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <inc_lock+0xe0>
 800a030:	2300      	movs	r3, #0
 800a032:	e015      	b.n	800a060 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d108      	bne.n	800a04c <inc_lock+0xf8>
 800a03a:	4a0c      	ldr	r2, [pc, #48]	; (800a06c <inc_lock+0x118>)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	011b      	lsls	r3, r3, #4
 800a040:	4413      	add	r3, r2
 800a042:	330c      	adds	r3, #12
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	3301      	adds	r3, #1
 800a048:	b29a      	uxth	r2, r3
 800a04a:	e001      	b.n	800a050 <inc_lock+0xfc>
 800a04c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a050:	4906      	ldr	r1, [pc, #24]	; (800a06c <inc_lock+0x118>)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	011b      	lsls	r3, r3, #4
 800a056:	440b      	add	r3, r1
 800a058:	330c      	adds	r3, #12
 800a05a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	3301      	adds	r3, #1
}
 800a060:	4618      	mov	r0, r3
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	20000820 	.word	0x20000820

0800a070 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	607b      	str	r3, [r7, #4]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d825      	bhi.n	800a0d0 <dec_lock+0x60>
		n = Files[i].ctr;
 800a084:	4a17      	ldr	r2, [pc, #92]	; (800a0e4 <dec_lock+0x74>)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	011b      	lsls	r3, r3, #4
 800a08a:	4413      	add	r3, r2
 800a08c:	330c      	adds	r3, #12
 800a08e:	881b      	ldrh	r3, [r3, #0]
 800a090:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a092:	89fb      	ldrh	r3, [r7, #14]
 800a094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a098:	d101      	bne.n	800a09e <dec_lock+0x2e>
 800a09a:	2300      	movs	r3, #0
 800a09c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a09e:	89fb      	ldrh	r3, [r7, #14]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <dec_lock+0x3a>
 800a0a4:	89fb      	ldrh	r3, [r7, #14]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a0aa:	4a0e      	ldr	r2, [pc, #56]	; (800a0e4 <dec_lock+0x74>)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	011b      	lsls	r3, r3, #4
 800a0b0:	4413      	add	r3, r2
 800a0b2:	330c      	adds	r3, #12
 800a0b4:	89fa      	ldrh	r2, [r7, #14]
 800a0b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a0b8:	89fb      	ldrh	r3, [r7, #14]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d105      	bne.n	800a0ca <dec_lock+0x5a>
 800a0be:	4a09      	ldr	r2, [pc, #36]	; (800a0e4 <dec_lock+0x74>)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	011b      	lsls	r3, r3, #4
 800a0c4:	4413      	add	r3, r2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	737b      	strb	r3, [r7, #13]
 800a0ce:	e001      	b.n	800a0d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a0d4:	7b7b      	ldrb	r3, [r7, #13]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	20000820 	.word	0x20000820

0800a0e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	e010      	b.n	800a118 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a0f6:	4a0d      	ldr	r2, [pc, #52]	; (800a12c <clear_lock+0x44>)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	011b      	lsls	r3, r3, #4
 800a0fc:	4413      	add	r3, r2
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	429a      	cmp	r2, r3
 800a104:	d105      	bne.n	800a112 <clear_lock+0x2a>
 800a106:	4a09      	ldr	r2, [pc, #36]	; (800a12c <clear_lock+0x44>)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	011b      	lsls	r3, r3, #4
 800a10c:	4413      	add	r3, r2
 800a10e:	2200      	movs	r2, #0
 800a110:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3301      	adds	r3, #1
 800a116:	60fb      	str	r3, [r7, #12]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d9eb      	bls.n	800a0f6 <clear_lock+0xe>
	}
}
 800a11e:	bf00      	nop
 800a120:	bf00      	nop
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	20000820 	.word	0x20000820

0800a130 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a138:	2300      	movs	r3, #0
 800a13a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	78db      	ldrb	r3, [r3, #3]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d034      	beq.n	800a1ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	7858      	ldrb	r0, [r3, #1]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a154:	2301      	movs	r3, #1
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	f7ff fd40 	bl	8009bdc <disk_write>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d002      	beq.n	800a168 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a162:	2301      	movs	r3, #1
 800a164:	73fb      	strb	r3, [r7, #15]
 800a166:	e022      	b.n	800a1ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	1ad2      	subs	r2, r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d217      	bcs.n	800a1ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	789b      	ldrb	r3, [r3, #2]
 800a182:	613b      	str	r3, [r7, #16]
 800a184:	e010      	b.n	800a1a8 <sync_window+0x78>
					wsect += fs->fsize;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	4413      	add	r3, r2
 800a18e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	7858      	ldrb	r0, [r3, #1]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a19a:	2301      	movs	r3, #1
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	f7ff fd1d 	bl	8009bdc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d8eb      	bhi.n	800a186 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d01b      	beq.n	800a208 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7ff ffad 	bl	800a130 <sync_window>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a1da:	7bfb      	ldrb	r3, [r7, #15]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d113      	bne.n	800a208 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7858      	ldrb	r0, [r3, #1]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	f7ff fcd5 	bl	8009b9c <disk_read>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d004      	beq.n	800a202 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a208:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7ff ff87 	bl	800a130 <sync_window>
 800a222:	4603      	mov	r3, r0
 800a224:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d158      	bne.n	800a2de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	2b03      	cmp	r3, #3
 800a232:	d148      	bne.n	800a2c6 <sync_fs+0xb2>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	791b      	ldrb	r3, [r3, #4]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d144      	bne.n	800a2c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	3330      	adds	r3, #48	; 0x30
 800a240:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a244:	2100      	movs	r1, #0
 800a246:	4618      	mov	r0, r3
 800a248:	f7ff fda9 	bl	8009d9e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	3330      	adds	r3, #48	; 0x30
 800a250:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a254:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a258:	4618      	mov	r0, r3
 800a25a:	f7ff fd38 	bl	8009cce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	3330      	adds	r3, #48	; 0x30
 800a262:	4921      	ldr	r1, [pc, #132]	; (800a2e8 <sync_fs+0xd4>)
 800a264:	4618      	mov	r0, r3
 800a266:	f7ff fd4d 	bl	8009d04 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3330      	adds	r3, #48	; 0x30
 800a26e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a272:	491e      	ldr	r1, [pc, #120]	; (800a2ec <sync_fs+0xd8>)
 800a274:	4618      	mov	r0, r3
 800a276:	f7ff fd45 	bl	8009d04 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3330      	adds	r3, #48	; 0x30
 800a27e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	4619      	mov	r1, r3
 800a288:	4610      	mov	r0, r2
 800a28a:	f7ff fd3b 	bl	8009d04 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3330      	adds	r3, #48	; 0x30
 800a292:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	4619      	mov	r1, r3
 800a29c:	4610      	mov	r0, r2
 800a29e:	f7ff fd31 	bl	8009d04 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	7858      	ldrb	r0, [r3, #1]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	f7ff fc8e 	bl	8009bdc <disk_write>
			fs->fsi_flag = 0;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	785b      	ldrb	r3, [r3, #1]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7ff fca4 	bl	8009c1c <disk_ioctl>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d001      	beq.n	800a2de <sync_fs+0xca>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	41615252 	.word	0x41615252
 800a2ec:	61417272 	.word	0x61417272

0800a2f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	3b02      	subs	r3, #2
 800a2fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	3b02      	subs	r3, #2
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d301      	bcc.n	800a310 <clust2sect+0x20>
 800a30c:	2300      	movs	r3, #0
 800a30e:	e008      	b.n	800a322 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	895b      	ldrh	r3, [r3, #10]
 800a314:	461a      	mov	r2, r3
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	fb03 f202 	mul.w	r2, r3, r2
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a320:	4413      	add	r3, r2
}
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b086      	sub	sp, #24
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d904      	bls.n	800a34e <get_fat+0x20>
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	695b      	ldr	r3, [r3, #20]
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d302      	bcc.n	800a354 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a34e:	2301      	movs	r3, #1
 800a350:	617b      	str	r3, [r7, #20]
 800a352:	e08f      	b.n	800a474 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a354:	f04f 33ff 	mov.w	r3, #4294967295
 800a358:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d062      	beq.n	800a428 <get_fat+0xfa>
 800a362:	2b03      	cmp	r3, #3
 800a364:	dc7c      	bgt.n	800a460 <get_fat+0x132>
 800a366:	2b01      	cmp	r3, #1
 800a368:	d002      	beq.n	800a370 <get_fat+0x42>
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d042      	beq.n	800a3f4 <get_fat+0xc6>
 800a36e:	e077      	b.n	800a460 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	60fb      	str	r3, [r7, #12]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	4413      	add	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	6a1a      	ldr	r2, [r3, #32]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	0a5b      	lsrs	r3, r3, #9
 800a386:	4413      	add	r3, r2
 800a388:	4619      	mov	r1, r3
 800a38a:	6938      	ldr	r0, [r7, #16]
 800a38c:	f7ff ff14 	bl	800a1b8 <move_window>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d167      	bne.n	800a466 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	60fa      	str	r2, [r7, #12]
 800a39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	6a1a      	ldr	r2, [r3, #32]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	0a5b      	lsrs	r3, r3, #9
 800a3b2:	4413      	add	r3, r2
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6938      	ldr	r0, [r7, #16]
 800a3b8:	f7ff fefe 	bl	800a1b8 <move_window>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d153      	bne.n	800a46a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3d0:	021b      	lsls	r3, r3, #8
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	f003 0301 	and.w	r3, r3, #1
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <get_fat+0xbc>
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	091b      	lsrs	r3, r3, #4
 800a3e8:	e002      	b.n	800a3f0 <get_fat+0xc2>
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3f0:	617b      	str	r3, [r7, #20]
			break;
 800a3f2:	e03f      	b.n	800a474 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	6a1a      	ldr	r2, [r3, #32]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	0a1b      	lsrs	r3, r3, #8
 800a3fc:	4413      	add	r3, r2
 800a3fe:	4619      	mov	r1, r3
 800a400:	6938      	ldr	r0, [r7, #16]
 800a402:	f7ff fed9 	bl	800a1b8 <move_window>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d130      	bne.n	800a46e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a41a:	4413      	add	r3, r2
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff fc1b 	bl	8009c58 <ld_word>
 800a422:	4603      	mov	r3, r0
 800a424:	617b      	str	r3, [r7, #20]
			break;
 800a426:	e025      	b.n	800a474 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	6a1a      	ldr	r2, [r3, #32]
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	09db      	lsrs	r3, r3, #7
 800a430:	4413      	add	r3, r2
 800a432:	4619      	mov	r1, r3
 800a434:	6938      	ldr	r0, [r7, #16]
 800a436:	f7ff febf 	bl	800a1b8 <move_window>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d118      	bne.n	800a472 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a44e:	4413      	add	r3, r2
 800a450:	4618      	mov	r0, r3
 800a452:	f7ff fc19 	bl	8009c88 <ld_dword>
 800a456:	4603      	mov	r3, r0
 800a458:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a45c:	617b      	str	r3, [r7, #20]
			break;
 800a45e:	e009      	b.n	800a474 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a460:	2301      	movs	r3, #1
 800a462:	617b      	str	r3, [r7, #20]
 800a464:	e006      	b.n	800a474 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a466:	bf00      	nop
 800a468:	e004      	b.n	800a474 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a46a:	bf00      	nop
 800a46c:	e002      	b.n	800a474 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a46e:	bf00      	nop
 800a470:	e000      	b.n	800a474 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a472:	bf00      	nop
		}
	}

	return val;
 800a474:	697b      	ldr	r3, [r7, #20]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a47e:	b590      	push	{r4, r7, lr}
 800a480:	b089      	sub	sp, #36	; 0x24
 800a482:	af00      	add	r7, sp, #0
 800a484:	60f8      	str	r0, [r7, #12]
 800a486:	60b9      	str	r1, [r7, #8]
 800a488:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a48a:	2302      	movs	r3, #2
 800a48c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b01      	cmp	r3, #1
 800a492:	f240 80d9 	bls.w	800a648 <put_fat+0x1ca>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	f080 80d3 	bcs.w	800a648 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	f000 8096 	beq.w	800a5d8 <put_fat+0x15a>
 800a4ac:	2b03      	cmp	r3, #3
 800a4ae:	f300 80cb 	bgt.w	800a648 <put_fat+0x1ca>
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d002      	beq.n	800a4bc <put_fat+0x3e>
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d06e      	beq.n	800a598 <put_fat+0x11a>
 800a4ba:	e0c5      	b.n	800a648 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	61bb      	str	r3, [r7, #24]
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	085b      	lsrs	r3, r3, #1
 800a4c4:	69ba      	ldr	r2, [r7, #24]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6a1a      	ldr	r2, [r3, #32]
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	0a5b      	lsrs	r3, r3, #9
 800a4d2:	4413      	add	r3, r2
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f7ff fe6e 	bl	800a1b8 <move_window>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4e0:	7ffb      	ldrb	r3, [r7, #31]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f040 80a9 	bne.w	800a63a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	1c59      	adds	r1, r3, #1
 800a4f2:	61b9      	str	r1, [r7, #24]
 800a4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f8:	4413      	add	r3, r2
 800a4fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00d      	beq.n	800a522 <put_fat+0xa4>
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	b25b      	sxtb	r3, r3
 800a50c:	f003 030f 	and.w	r3, r3, #15
 800a510:	b25a      	sxtb	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	b2db      	uxtb	r3, r3
 800a516:	011b      	lsls	r3, r3, #4
 800a518:	b25b      	sxtb	r3, r3
 800a51a:	4313      	orrs	r3, r2
 800a51c:	b25b      	sxtb	r3, r3
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	e001      	b.n	800a526 <put_fat+0xa8>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	b2db      	uxtb	r3, r3
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2201      	movs	r2, #1
 800a52e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6a1a      	ldr	r2, [r3, #32]
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	0a5b      	lsrs	r3, r3, #9
 800a538:	4413      	add	r3, r2
 800a53a:	4619      	mov	r1, r3
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7ff fe3b 	bl	800a1b8 <move_window>
 800a542:	4603      	mov	r3, r0
 800a544:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a546:	7ffb      	ldrb	r3, [r7, #31]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d178      	bne.n	800a63e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a558:	4413      	add	r3, r2
 800a55a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <put_fat+0xf0>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	091b      	lsrs	r3, r3, #4
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	e00e      	b.n	800a58c <put_fat+0x10e>
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	b25b      	sxtb	r3, r3
 800a574:	f023 030f 	bic.w	r3, r3, #15
 800a578:	b25a      	sxtb	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	0a1b      	lsrs	r3, r3, #8
 800a57e:	b25b      	sxtb	r3, r3
 800a580:	f003 030f 	and.w	r3, r3, #15
 800a584:	b25b      	sxtb	r3, r3
 800a586:	4313      	orrs	r3, r2
 800a588:	b25b      	sxtb	r3, r3
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2201      	movs	r2, #1
 800a594:	70da      	strb	r2, [r3, #3]
			break;
 800a596:	e057      	b.n	800a648 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6a1a      	ldr	r2, [r3, #32]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	0a1b      	lsrs	r3, r3, #8
 800a5a0:	4413      	add	r3, r2
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f7ff fe07 	bl	800a1b8 <move_window>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5ae:	7ffb      	ldrb	r3, [r7, #31]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d146      	bne.n	800a642 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a5c2:	4413      	add	r3, r2
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	b292      	uxth	r2, r2
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff fb7f 	bl	8009cce <st_word>
			fs->wflag = 1;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	70da      	strb	r2, [r3, #3]
			break;
 800a5d6:	e037      	b.n	800a648 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6a1a      	ldr	r2, [r3, #32]
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	09db      	lsrs	r3, r3, #7
 800a5e0:	4413      	add	r3, r2
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f7ff fde7 	bl	800a1b8 <move_window>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5ee:	7ffb      	ldrb	r3, [r7, #31]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d128      	bne.n	800a646 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a608:	4413      	add	r3, r2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff fb3c 	bl	8009c88 <ld_dword>
 800a610:	4603      	mov	r3, r0
 800a612:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a616:	4323      	orrs	r3, r4
 800a618:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a628:	4413      	add	r3, r2
 800a62a:	6879      	ldr	r1, [r7, #4]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7ff fb69 	bl	8009d04 <st_dword>
			fs->wflag = 1;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2201      	movs	r2, #1
 800a636:	70da      	strb	r2, [r3, #3]
			break;
 800a638:	e006      	b.n	800a648 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a63a:	bf00      	nop
 800a63c:	e004      	b.n	800a648 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a63e:	bf00      	nop
 800a640:	e002      	b.n	800a648 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a642:	bf00      	nop
 800a644:	e000      	b.n	800a648 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a646:	bf00      	nop
		}
	}
	return res;
 800a648:	7ffb      	ldrb	r3, [r7, #31]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3724      	adds	r7, #36	; 0x24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd90      	pop	{r4, r7, pc}

0800a652 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b088      	sub	sp, #32
 800a656:	af00      	add	r7, sp, #0
 800a658:	60f8      	str	r0, [r7, #12]
 800a65a:	60b9      	str	r1, [r7, #8]
 800a65c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d904      	bls.n	800a678 <remove_chain+0x26>
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	429a      	cmp	r2, r3
 800a676:	d301      	bcc.n	800a67c <remove_chain+0x2a>
 800a678:	2302      	movs	r3, #2
 800a67a:	e04b      	b.n	800a714 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00c      	beq.n	800a69c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a682:	f04f 32ff 	mov.w	r2, #4294967295
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	69b8      	ldr	r0, [r7, #24]
 800a68a:	f7ff fef8 	bl	800a47e <put_fat>
 800a68e:	4603      	mov	r3, r0
 800a690:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a692:	7ffb      	ldrb	r3, [r7, #31]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d001      	beq.n	800a69c <remove_chain+0x4a>
 800a698:	7ffb      	ldrb	r3, [r7, #31]
 800a69a:	e03b      	b.n	800a714 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a69c:	68b9      	ldr	r1, [r7, #8]
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7ff fe45 	bl	800a32e <get_fat>
 800a6a4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d031      	beq.n	800a710 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d101      	bne.n	800a6b6 <remove_chain+0x64>
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	e02e      	b.n	800a714 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6bc:	d101      	bne.n	800a6c2 <remove_chain+0x70>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e028      	b.n	800a714 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	68b9      	ldr	r1, [r7, #8]
 800a6c6:	69b8      	ldr	r0, [r7, #24]
 800a6c8:	f7ff fed9 	bl	800a47e <put_fat>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a6d0:	7ffb      	ldrb	r3, [r7, #31]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <remove_chain+0x88>
 800a6d6:	7ffb      	ldrb	r3, [r7, #31]
 800a6d8:	e01c      	b.n	800a714 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	691a      	ldr	r2, [r3, #16]
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	3b02      	subs	r3, #2
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d20b      	bcs.n	800a700 <remove_chain+0xae>
			fs->free_clst++;
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	1c5a      	adds	r2, r3, #1
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	791b      	ldrb	r3, [r3, #4]
 800a6f6:	f043 0301 	orr.w	r3, r3, #1
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d3c6      	bcc.n	800a69c <remove_chain+0x4a>
 800a70e:	e000      	b.n	800a712 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a710:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3720      	adds	r7, #32
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b088      	sub	sp, #32
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10d      	bne.n	800a74e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d004      	beq.n	800a748 <create_chain+0x2c>
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	69ba      	ldr	r2, [r7, #24]
 800a744:	429a      	cmp	r2, r3
 800a746:	d31b      	bcc.n	800a780 <create_chain+0x64>
 800a748:	2301      	movs	r3, #1
 800a74a:	61bb      	str	r3, [r7, #24]
 800a74c:	e018      	b.n	800a780 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7ff fdec 	bl	800a32e <get_fat>
 800a756:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d801      	bhi.n	800a762 <create_chain+0x46>
 800a75e:	2301      	movs	r3, #1
 800a760:	e070      	b.n	800a844 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a768:	d101      	bne.n	800a76e <create_chain+0x52>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	e06a      	b.n	800a844 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	429a      	cmp	r2, r3
 800a776:	d201      	bcs.n	800a77c <create_chain+0x60>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	e063      	b.n	800a844 <create_chain+0x128>
		scl = clst;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	3301      	adds	r3, #1
 800a788:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	69fa      	ldr	r2, [r7, #28]
 800a790:	429a      	cmp	r2, r3
 800a792:	d307      	bcc.n	800a7a4 <create_chain+0x88>
				ncl = 2;
 800a794:	2302      	movs	r3, #2
 800a796:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a798:	69fa      	ldr	r2, [r7, #28]
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d901      	bls.n	800a7a4 <create_chain+0x88>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	e04f      	b.n	800a844 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a7a4:	69f9      	ldr	r1, [r7, #28]
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7ff fdc1 	bl	800a32e <get_fat>
 800a7ac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00e      	beq.n	800a7d2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d003      	beq.n	800a7c2 <create_chain+0xa6>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c0:	d101      	bne.n	800a7c6 <create_chain+0xaa>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	e03e      	b.n	800a844 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a7c6:	69fa      	ldr	r2, [r7, #28]
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d1da      	bne.n	800a784 <create_chain+0x68>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e038      	b.n	800a844 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a7d2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d8:	69f9      	ldr	r1, [r7, #28]
 800a7da:	6938      	ldr	r0, [r7, #16]
 800a7dc:	f7ff fe4f 	bl	800a47e <put_fat>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d109      	bne.n	800a7fe <create_chain+0xe2>
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d006      	beq.n	800a7fe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a7f0:	69fa      	ldr	r2, [r7, #28]
 800a7f2:	6839      	ldr	r1, [r7, #0]
 800a7f4:	6938      	ldr	r0, [r7, #16]
 800a7f6:	f7ff fe42 	bl	800a47e <put_fat>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a7fe:	7dfb      	ldrb	r3, [r7, #23]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d116      	bne.n	800a832 <create_chain+0x116>
		fs->last_clst = ncl;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	69fa      	ldr	r2, [r7, #28]
 800a808:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	691a      	ldr	r2, [r3, #16]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	3b02      	subs	r3, #2
 800a814:	429a      	cmp	r2, r3
 800a816:	d804      	bhi.n	800a822 <create_chain+0x106>
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	1e5a      	subs	r2, r3, #1
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	791b      	ldrb	r3, [r3, #4]
 800a826:	f043 0301 	orr.w	r3, r3, #1
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	711a      	strb	r2, [r3, #4]
 800a830:	e007      	b.n	800a842 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a832:	7dfb      	ldrb	r3, [r7, #23]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d102      	bne.n	800a83e <create_chain+0x122>
 800a838:	f04f 33ff 	mov.w	r3, #4294967295
 800a83c:	e000      	b.n	800a840 <create_chain+0x124>
 800a83e:	2301      	movs	r3, #1
 800a840:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a842:	69fb      	ldr	r3, [r7, #28]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3720      	adds	r7, #32
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a860:	3304      	adds	r3, #4
 800a862:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	0a5b      	lsrs	r3, r3, #9
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	8952      	ldrh	r2, [r2, #10]
 800a86c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a870:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	1d1a      	adds	r2, r3, #4
 800a876:	613a      	str	r2, [r7, #16]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <clmt_clust+0x3a>
 800a882:	2300      	movs	r3, #0
 800a884:	e010      	b.n	800a8a8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d307      	bcc.n	800a89e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	617b      	str	r3, [r7, #20]
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	3304      	adds	r3, #4
 800a89a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a89c:	e7e9      	b.n	800a872 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a89e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	4413      	add	r3, r2
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	371c      	adds	r7, #28
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b086      	sub	sp, #24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8ca:	d204      	bcs.n	800a8d6 <dir_sdi+0x22>
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	f003 031f 	and.w	r3, r3, #31
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <dir_sdi+0x26>
		return FR_INT_ERR;
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	e063      	b.n	800a9a2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d106      	bne.n	800a8fa <dir_sdi+0x46>
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d902      	bls.n	800a8fa <dir_sdi+0x46>
		clst = fs->dirbase;
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10c      	bne.n	800a91a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	095b      	lsrs	r3, r3, #5
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	8912      	ldrh	r2, [r2, #8]
 800a908:	4293      	cmp	r3, r2
 800a90a:	d301      	bcc.n	800a910 <dir_sdi+0x5c>
 800a90c:	2302      	movs	r3, #2
 800a90e:	e048      	b.n	800a9a2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	61da      	str	r2, [r3, #28]
 800a918:	e029      	b.n	800a96e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	895b      	ldrh	r3, [r3, #10]
 800a91e:	025b      	lsls	r3, r3, #9
 800a920:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a922:	e019      	b.n	800a958 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6979      	ldr	r1, [r7, #20]
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff fd00 	bl	800a32e <get_fat>
 800a92e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a936:	d101      	bne.n	800a93c <dir_sdi+0x88>
 800a938:	2301      	movs	r3, #1
 800a93a:	e032      	b.n	800a9a2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d904      	bls.n	800a94c <dir_sdi+0x98>
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d301      	bcc.n	800a950 <dir_sdi+0x9c>
 800a94c:	2302      	movs	r3, #2
 800a94e:	e028      	b.n	800a9a2 <dir_sdi+0xee>
			ofs -= csz;
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d2e1      	bcs.n	800a924 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a960:	6979      	ldr	r1, [r7, #20]
 800a962:	6938      	ldr	r0, [r7, #16]
 800a964:	f7ff fcc4 	bl	800a2f0 <clust2sect>
 800a968:	4602      	mov	r2, r0
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	697a      	ldr	r2, [r7, #20]
 800a972:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	69db      	ldr	r3, [r3, #28]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <dir_sdi+0xcc>
 800a97c:	2302      	movs	r3, #2
 800a97e:	e010      	b.n	800a9a2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	69da      	ldr	r2, [r3, #28]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	0a5b      	lsrs	r3, r3, #9
 800a988:	441a      	add	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a99a:	441a      	add	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3718      	adds	r7, #24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b086      	sub	sp, #24
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	3320      	adds	r3, #32
 800a9c0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d003      	beq.n	800a9d2 <dir_next+0x28>
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9d0:	d301      	bcc.n	800a9d6 <dir_next+0x2c>
 800a9d2:	2304      	movs	r3, #4
 800a9d4:	e0aa      	b.n	800ab2c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f040 8098 	bne.w	800ab12 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	1c5a      	adds	r2, r3, #1
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10b      	bne.n	800aa0c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	095b      	lsrs	r3, r3, #5
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	8912      	ldrh	r2, [r2, #8]
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	f0c0 8088 	bcc.w	800ab12 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	61da      	str	r2, [r3, #28]
 800aa08:	2304      	movs	r3, #4
 800aa0a:	e08f      	b.n	800ab2c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	0a5b      	lsrs	r3, r3, #9
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	8952      	ldrh	r2, [r2, #10]
 800aa14:	3a01      	subs	r2, #1
 800aa16:	4013      	ands	r3, r2
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d17a      	bne.n	800ab12 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	4619      	mov	r1, r3
 800aa24:	4610      	mov	r0, r2
 800aa26:	f7ff fc82 	bl	800a32e <get_fat>
 800aa2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d801      	bhi.n	800aa36 <dir_next+0x8c>
 800aa32:	2302      	movs	r3, #2
 800aa34:	e07a      	b.n	800ab2c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3c:	d101      	bne.n	800aa42 <dir_next+0x98>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e074      	b.n	800ab2c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d358      	bcc.n	800aafe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d104      	bne.n	800aa5c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	61da      	str	r2, [r3, #28]
 800aa58:	2304      	movs	r3, #4
 800aa5a:	e067      	b.n	800ab2c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	4619      	mov	r1, r3
 800aa64:	4610      	mov	r0, r2
 800aa66:	f7ff fe59 	bl	800a71c <create_chain>
 800aa6a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <dir_next+0xcc>
 800aa72:	2307      	movs	r3, #7
 800aa74:	e05a      	b.n	800ab2c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d101      	bne.n	800aa80 <dir_next+0xd6>
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	e055      	b.n	800ab2c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa86:	d101      	bne.n	800aa8c <dir_next+0xe2>
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e04f      	b.n	800ab2c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f7ff fb4f 	bl	800a130 <sync_window>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <dir_next+0xf2>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e047      	b.n	800ab2c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	3330      	adds	r3, #48	; 0x30
 800aaa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff f979 	bl	8009d9e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aaac:	2300      	movs	r3, #0
 800aaae:	613b      	str	r3, [r7, #16]
 800aab0:	6979      	ldr	r1, [r7, #20]
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f7ff fc1c 	bl	800a2f0 <clust2sect>
 800aab8:	4602      	mov	r2, r0
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	62da      	str	r2, [r3, #44]	; 0x2c
 800aabe:	e012      	b.n	800aae6 <dir_next+0x13c>
						fs->wflag = 1;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2201      	movs	r2, #1
 800aac4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f7ff fb32 	bl	800a130 <sync_window>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d001      	beq.n	800aad6 <dir_next+0x12c>
 800aad2:	2301      	movs	r3, #1
 800aad4:	e02a      	b.n	800ab2c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	3301      	adds	r3, #1
 800aada:	613b      	str	r3, [r7, #16]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	1c5a      	adds	r2, r3, #1
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	62da      	str	r2, [r3, #44]	; 0x2c
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	895b      	ldrh	r3, [r3, #10]
 800aaea:	461a      	mov	r2, r3
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d3e6      	bcc.n	800aac0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	1ad2      	subs	r2, r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ab04:	6979      	ldr	r1, [r7, #20]
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7ff fbf2 	bl	800a2f0 <clust2sect>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab24:	441a      	add	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3718      	adds	r7, #24
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ab44:	2100      	movs	r1, #0
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff feb4 	bl	800a8b4 <dir_sdi>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab50:	7dfb      	ldrb	r3, [r7, #23]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d12b      	bne.n	800abae <dir_alloc+0x7a>
		n = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	69db      	ldr	r3, [r3, #28]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	f7ff fb29 	bl	800a1b8 <move_window>
 800ab66:	4603      	mov	r3, r0
 800ab68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab6a:	7dfb      	ldrb	r3, [r7, #23]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d11d      	bne.n	800abac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a1b      	ldr	r3, [r3, #32]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	2be5      	cmp	r3, #229	; 0xe5
 800ab78:	d004      	beq.n	800ab84 <dir_alloc+0x50>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d107      	bne.n	800ab94 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	3301      	adds	r3, #1
 800ab88:	613b      	str	r3, [r7, #16]
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d102      	bne.n	800ab98 <dir_alloc+0x64>
 800ab92:	e00c      	b.n	800abae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ab94:	2300      	movs	r3, #0
 800ab96:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ab98:	2101      	movs	r1, #1
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f7ff ff05 	bl	800a9aa <dir_next>
 800aba0:	4603      	mov	r3, r0
 800aba2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aba4:	7dfb      	ldrb	r3, [r7, #23]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d0d7      	beq.n	800ab5a <dir_alloc+0x26>
 800abaa:	e000      	b.n	800abae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800abac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800abae:	7dfb      	ldrb	r3, [r7, #23]
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d101      	bne.n	800abb8 <dir_alloc+0x84>
 800abb4:	2307      	movs	r3, #7
 800abb6:	75fb      	strb	r3, [r7, #23]
	return res;
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b084      	sub	sp, #16
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	331a      	adds	r3, #26
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7ff f841 	bl	8009c58 <ld_word>
 800abd6:	4603      	mov	r3, r0
 800abd8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	2b03      	cmp	r3, #3
 800abe0:	d109      	bne.n	800abf6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	3314      	adds	r3, #20
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7ff f836 	bl	8009c58 <ld_word>
 800abec:	4603      	mov	r3, r0
 800abee:	041b      	lsls	r3, r3, #16
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800abf6:	68fb      	ldr	r3, [r7, #12]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	331a      	adds	r3, #26
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	b292      	uxth	r2, r2
 800ac14:	4611      	mov	r1, r2
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7ff f859 	bl	8009cce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d109      	bne.n	800ac38 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	f103 0214 	add.w	r2, r3, #20
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	0c1b      	lsrs	r3, r3, #16
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	4619      	mov	r1, r3
 800ac32:	4610      	mov	r0, r2
 800ac34:	f7ff f84b 	bl	8009cce <st_word>
	}
}
 800ac38:	bf00      	nop
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ac4e:	2100      	movs	r1, #0
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff fe2f 	bl	800a8b4 <dir_sdi>
 800ac56:	4603      	mov	r3, r0
 800ac58:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ac5a:	7dfb      	ldrb	r3, [r7, #23]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d001      	beq.n	800ac64 <dir_find+0x24>
 800ac60:	7dfb      	ldrb	r3, [r7, #23]
 800ac62:	e03e      	b.n	800ace2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	69db      	ldr	r3, [r3, #28]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6938      	ldr	r0, [r7, #16]
 800ac6c:	f7ff faa4 	bl	800a1b8 <move_window>
 800ac70:	4603      	mov	r3, r0
 800ac72:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d12f      	bne.n	800acda <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d102      	bne.n	800ac8e <dir_find+0x4e>
 800ac88:	2304      	movs	r3, #4
 800ac8a:	75fb      	strb	r3, [r7, #23]
 800ac8c:	e028      	b.n	800ace0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a1b      	ldr	r3, [r3, #32]
 800ac92:	330b      	adds	r3, #11
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a1b      	ldr	r3, [r3, #32]
 800aca4:	330b      	adds	r3, #11
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	f003 0308 	and.w	r3, r3, #8
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10a      	bne.n	800acc6 <dir_find+0x86>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a18      	ldr	r0, [r3, #32]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3324      	adds	r3, #36	; 0x24
 800acb8:	220b      	movs	r2, #11
 800acba:	4619      	mov	r1, r3
 800acbc:	f7ff f88a 	bl	8009dd4 <mem_cmp>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00b      	beq.n	800acde <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800acc6:	2100      	movs	r1, #0
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff fe6e 	bl	800a9aa <dir_next>
 800acce:	4603      	mov	r3, r0
 800acd0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800acd2:	7dfb      	ldrb	r3, [r7, #23]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d0c5      	beq.n	800ac64 <dir_find+0x24>
 800acd8:	e002      	b.n	800ace0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800acda:	bf00      	nop
 800acdc:	e000      	b.n	800ace0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800acde:	bf00      	nop

	return res;
 800ace0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3718      	adds	r7, #24
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800acf8:	2101      	movs	r1, #1
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7ff ff1a 	bl	800ab34 <dir_alloc>
 800ad00:	4603      	mov	r3, r0
 800ad02:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ad04:	7bfb      	ldrb	r3, [r7, #15]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d11c      	bne.n	800ad44 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	68b8      	ldr	r0, [r7, #8]
 800ad12:	f7ff fa51 	bl	800a1b8 <move_window>
 800ad16:	4603      	mov	r3, r0
 800ad18:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ad1a:	7bfb      	ldrb	r3, [r7, #15]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d111      	bne.n	800ad44 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	2220      	movs	r2, #32
 800ad26:	2100      	movs	r1, #0
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7ff f838 	bl	8009d9e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a18      	ldr	r0, [r3, #32]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3324      	adds	r3, #36	; 0x24
 800ad36:	220b      	movs	r2, #11
 800ad38:	4619      	mov	r1, r3
 800ad3a:	f7ff f80f 	bl	8009d5c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	2201      	movs	r2, #1
 800ad42:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
	...

0800ad50 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	60fb      	str	r3, [r7, #12]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	3324      	adds	r3, #36	; 0x24
 800ad64:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ad66:	220b      	movs	r2, #11
 800ad68:	2120      	movs	r1, #32
 800ad6a:	68b8      	ldr	r0, [r7, #8]
 800ad6c:	f7ff f817 	bl	8009d9e <mem_set>
	si = i = 0; ni = 8;
 800ad70:	2300      	movs	r3, #0
 800ad72:	613b      	str	r3, [r7, #16]
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	61fb      	str	r3, [r7, #28]
 800ad78:	2308      	movs	r3, #8
 800ad7a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	1c5a      	adds	r2, r3, #1
 800ad80:	61fa      	str	r2, [r7, #28]
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	4413      	add	r3, r2
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ad8a:	7efb      	ldrb	r3, [r7, #27]
 800ad8c:	2b20      	cmp	r3, #32
 800ad8e:	d94e      	bls.n	800ae2e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ad90:	7efb      	ldrb	r3, [r7, #27]
 800ad92:	2b2f      	cmp	r3, #47	; 0x2f
 800ad94:	d006      	beq.n	800ada4 <create_name+0x54>
 800ad96:	7efb      	ldrb	r3, [r7, #27]
 800ad98:	2b5c      	cmp	r3, #92	; 0x5c
 800ad9a:	d110      	bne.n	800adbe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ad9c:	e002      	b.n	800ada4 <create_name+0x54>
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	3301      	adds	r3, #1
 800ada2:	61fb      	str	r3, [r7, #28]
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	4413      	add	r3, r2
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b2f      	cmp	r3, #47	; 0x2f
 800adae:	d0f6      	beq.n	800ad9e <create_name+0x4e>
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	4413      	add	r3, r2
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	2b5c      	cmp	r3, #92	; 0x5c
 800adba:	d0f0      	beq.n	800ad9e <create_name+0x4e>
			break;
 800adbc:	e038      	b.n	800ae30 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800adbe:	7efb      	ldrb	r3, [r7, #27]
 800adc0:	2b2e      	cmp	r3, #46	; 0x2e
 800adc2:	d003      	beq.n	800adcc <create_name+0x7c>
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d30c      	bcc.n	800ade6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	2b0b      	cmp	r3, #11
 800add0:	d002      	beq.n	800add8 <create_name+0x88>
 800add2:	7efb      	ldrb	r3, [r7, #27]
 800add4:	2b2e      	cmp	r3, #46	; 0x2e
 800add6:	d001      	beq.n	800addc <create_name+0x8c>
 800add8:	2306      	movs	r3, #6
 800adda:	e044      	b.n	800ae66 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800addc:	2308      	movs	r3, #8
 800adde:	613b      	str	r3, [r7, #16]
 800ade0:	230b      	movs	r3, #11
 800ade2:	617b      	str	r3, [r7, #20]
			continue;
 800ade4:	e022      	b.n	800ae2c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ade6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800adea:	2b00      	cmp	r3, #0
 800adec:	da04      	bge.n	800adf8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800adee:	7efb      	ldrb	r3, [r7, #27]
 800adf0:	3b80      	subs	r3, #128	; 0x80
 800adf2:	4a1f      	ldr	r2, [pc, #124]	; (800ae70 <create_name+0x120>)
 800adf4:	5cd3      	ldrb	r3, [r2, r3]
 800adf6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800adf8:	7efb      	ldrb	r3, [r7, #27]
 800adfa:	4619      	mov	r1, r3
 800adfc:	481d      	ldr	r0, [pc, #116]	; (800ae74 <create_name+0x124>)
 800adfe:	f7ff f810 	bl	8009e22 <chk_chr>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <create_name+0xbc>
 800ae08:	2306      	movs	r3, #6
 800ae0a:	e02c      	b.n	800ae66 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ae0c:	7efb      	ldrb	r3, [r7, #27]
 800ae0e:	2b60      	cmp	r3, #96	; 0x60
 800ae10:	d905      	bls.n	800ae1e <create_name+0xce>
 800ae12:	7efb      	ldrb	r3, [r7, #27]
 800ae14:	2b7a      	cmp	r3, #122	; 0x7a
 800ae16:	d802      	bhi.n	800ae1e <create_name+0xce>
 800ae18:	7efb      	ldrb	r3, [r7, #27]
 800ae1a:	3b20      	subs	r3, #32
 800ae1c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	1c5a      	adds	r2, r3, #1
 800ae22:	613a      	str	r2, [r7, #16]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	4413      	add	r3, r2
 800ae28:	7efa      	ldrb	r2, [r7, #27]
 800ae2a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ae2c:	e7a6      	b.n	800ad7c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ae2e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	441a      	add	r2, r3
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <create_name+0xf4>
 800ae40:	2306      	movs	r3, #6
 800ae42:	e010      	b.n	800ae66 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	2be5      	cmp	r3, #229	; 0xe5
 800ae4a:	d102      	bne.n	800ae52 <create_name+0x102>
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	2205      	movs	r2, #5
 800ae50:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ae52:	7efb      	ldrb	r3, [r7, #27]
 800ae54:	2b20      	cmp	r3, #32
 800ae56:	d801      	bhi.n	800ae5c <create_name+0x10c>
 800ae58:	2204      	movs	r2, #4
 800ae5a:	e000      	b.n	800ae5e <create_name+0x10e>
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	330b      	adds	r3, #11
 800ae62:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ae64:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3720      	adds	r7, #32
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	0800dee0 	.word	0x0800dee0
 800ae74:	0800dbc4 	.word	0x0800dbc4

0800ae78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ae8c:	e002      	b.n	800ae94 <follow_path+0x1c>
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	3301      	adds	r3, #1
 800ae92:	603b      	str	r3, [r7, #0]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b2f      	cmp	r3, #47	; 0x2f
 800ae9a:	d0f8      	beq.n	800ae8e <follow_path+0x16>
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	2b5c      	cmp	r3, #92	; 0x5c
 800aea2:	d0f4      	beq.n	800ae8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	2200      	movs	r2, #0
 800aea8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	2b1f      	cmp	r3, #31
 800aeb0:	d80a      	bhi.n	800aec8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2280      	movs	r2, #128	; 0x80
 800aeb6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800aeba:	2100      	movs	r1, #0
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f7ff fcf9 	bl	800a8b4 <dir_sdi>
 800aec2:	4603      	mov	r3, r0
 800aec4:	75fb      	strb	r3, [r7, #23]
 800aec6:	e043      	b.n	800af50 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aec8:	463b      	mov	r3, r7
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff ff3f 	bl	800ad50 <create_name>
 800aed2:	4603      	mov	r3, r0
 800aed4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d134      	bne.n	800af46 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f7ff feaf 	bl	800ac40 <dir_find>
 800aee2:	4603      	mov	r3, r0
 800aee4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aeec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00a      	beq.n	800af0a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
 800aef6:	2b04      	cmp	r3, #4
 800aef8:	d127      	bne.n	800af4a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aefa:	7afb      	ldrb	r3, [r7, #11]
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	d122      	bne.n	800af4a <follow_path+0xd2>
 800af04:	2305      	movs	r3, #5
 800af06:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800af08:	e01f      	b.n	800af4a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af0a:	7afb      	ldrb	r3, [r7, #11]
 800af0c:	f003 0304 	and.w	r3, r3, #4
 800af10:	2b00      	cmp	r3, #0
 800af12:	d11c      	bne.n	800af4e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	799b      	ldrb	r3, [r3, #6]
 800af18:	f003 0310 	and.w	r3, r3, #16
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d102      	bne.n	800af26 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800af20:	2305      	movs	r3, #5
 800af22:	75fb      	strb	r3, [r7, #23]
 800af24:	e014      	b.n	800af50 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af34:	4413      	add	r3, r2
 800af36:	4619      	mov	r1, r3
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f7ff fe42 	bl	800abc2 <ld_clust>
 800af3e:	4602      	mov	r2, r0
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af44:	e7c0      	b.n	800aec8 <follow_path+0x50>
			if (res != FR_OK) break;
 800af46:	bf00      	nop
 800af48:	e002      	b.n	800af50 <follow_path+0xd8>
				break;
 800af4a:	bf00      	nop
 800af4c:	e000      	b.n	800af50 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af4e:	bf00      	nop
			}
		}
	}

	return res;
 800af50:	7dfb      	ldrb	r3, [r7, #23]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800af5a:	b480      	push	{r7}
 800af5c:	b087      	sub	sp, #28
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800af62:	f04f 33ff 	mov.w	r3, #4294967295
 800af66:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d031      	beq.n	800afd4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	617b      	str	r3, [r7, #20]
 800af76:	e002      	b.n	800af7e <get_ldnumber+0x24>
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	3301      	adds	r3, #1
 800af7c:	617b      	str	r3, [r7, #20]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b20      	cmp	r3, #32
 800af84:	d903      	bls.n	800af8e <get_ldnumber+0x34>
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	2b3a      	cmp	r3, #58	; 0x3a
 800af8c:	d1f4      	bne.n	800af78 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b3a      	cmp	r3, #58	; 0x3a
 800af94:	d11c      	bne.n	800afd0 <get_ldnumber+0x76>
			tp = *path;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	1c5a      	adds	r2, r3, #1
 800afa0:	60fa      	str	r2, [r7, #12]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	3b30      	subs	r3, #48	; 0x30
 800afa6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2b09      	cmp	r3, #9
 800afac:	d80e      	bhi.n	800afcc <get_ldnumber+0x72>
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d10a      	bne.n	800afcc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d107      	bne.n	800afcc <get_ldnumber+0x72>
					vol = (int)i;
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	3301      	adds	r3, #1
 800afc4:	617b      	str	r3, [r7, #20]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	e002      	b.n	800afd6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800afd0:	2300      	movs	r3, #0
 800afd2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800afd4:	693b      	ldr	r3, [r7, #16]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	371c      	adds	r7, #28
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
	...

0800afe4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	70da      	strb	r2, [r3, #3]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f04f 32ff 	mov.w	r2, #4294967295
 800affa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7ff f8da 	bl	800a1b8 <move_window>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <check_fs+0x2a>
 800b00a:	2304      	movs	r3, #4
 800b00c:	e038      	b.n	800b080 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	3330      	adds	r3, #48	; 0x30
 800b012:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b016:	4618      	mov	r0, r3
 800b018:	f7fe fe1e 	bl	8009c58 <ld_word>
 800b01c:	4603      	mov	r3, r0
 800b01e:	461a      	mov	r2, r3
 800b020:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b024:	429a      	cmp	r2, r3
 800b026:	d001      	beq.n	800b02c <check_fs+0x48>
 800b028:	2303      	movs	r3, #3
 800b02a:	e029      	b.n	800b080 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b032:	2be9      	cmp	r3, #233	; 0xe9
 800b034:	d009      	beq.n	800b04a <check_fs+0x66>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b03c:	2beb      	cmp	r3, #235	; 0xeb
 800b03e:	d11e      	bne.n	800b07e <check_fs+0x9a>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b046:	2b90      	cmp	r3, #144	; 0x90
 800b048:	d119      	bne.n	800b07e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	3330      	adds	r3, #48	; 0x30
 800b04e:	3336      	adds	r3, #54	; 0x36
 800b050:	4618      	mov	r0, r3
 800b052:	f7fe fe19 	bl	8009c88 <ld_dword>
 800b056:	4603      	mov	r3, r0
 800b058:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b05c:	4a0a      	ldr	r2, [pc, #40]	; (800b088 <check_fs+0xa4>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d101      	bne.n	800b066 <check_fs+0x82>
 800b062:	2300      	movs	r3, #0
 800b064:	e00c      	b.n	800b080 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	3330      	adds	r3, #48	; 0x30
 800b06a:	3352      	adds	r3, #82	; 0x52
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7fe fe0b 	bl	8009c88 <ld_dword>
 800b072:	4603      	mov	r3, r0
 800b074:	4a05      	ldr	r2, [pc, #20]	; (800b08c <check_fs+0xa8>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d101      	bne.n	800b07e <check_fs+0x9a>
 800b07a:	2300      	movs	r3, #0
 800b07c:	e000      	b.n	800b080 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b07e:	2302      	movs	r3, #2
}
 800b080:	4618      	mov	r0, r3
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	00544146 	.word	0x00544146
 800b08c:	33544146 	.word	0x33544146

0800b090 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b096      	sub	sp, #88	; 0x58
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	4613      	mov	r3, r2
 800b09c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f7ff ff58 	bl	800af5a <get_ldnumber>
 800b0aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	da01      	bge.n	800b0b6 <find_volume+0x26>
 800b0b2:	230b      	movs	r3, #11
 800b0b4:	e22d      	b.n	800b512 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b0b6:	4aa1      	ldr	r2, [pc, #644]	; (800b33c <find_volume+0x2ac>)
 800b0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <find_volume+0x3a>
 800b0c6:	230c      	movs	r3, #12
 800b0c8:	e223      	b.n	800b512 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b0d0:	79fb      	ldrb	r3, [r7, #7]
 800b0d2:	f023 0301 	bic.w	r3, r3, #1
 800b0d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d01a      	beq.n	800b116 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e2:	785b      	ldrb	r3, [r3, #1]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fe fd19 	bl	8009b1c <disk_status>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b0f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10c      	bne.n	800b116 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b0fc:	79fb      	ldrb	r3, [r7, #7]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d007      	beq.n	800b112 <find_volume+0x82>
 800b102:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b106:	f003 0304 	and.w	r3, r3, #4
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b10e:	230a      	movs	r3, #10
 800b110:	e1ff      	b.n	800b512 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b112:	2300      	movs	r3, #0
 800b114:	e1fd      	b.n	800b512 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b118:	2200      	movs	r2, #0
 800b11a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b122:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	785b      	ldrb	r3, [r3, #1]
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fe fd11 	bl	8009b50 <disk_initialize>
 800b12e:	4603      	mov	r3, r0
 800b130:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b134:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b138:	f003 0301 	and.w	r3, r3, #1
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b140:	2303      	movs	r3, #3
 800b142:	e1e6      	b.n	800b512 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b144:	79fb      	ldrb	r3, [r7, #7]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d007      	beq.n	800b15a <find_volume+0xca>
 800b14a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b14e:	f003 0304 	and.w	r3, r3, #4
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b156:	230a      	movs	r3, #10
 800b158:	e1db      	b.n	800b512 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b15e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b160:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b162:	f7ff ff3f 	bl	800afe4 <check_fs>
 800b166:	4603      	mov	r3, r0
 800b168:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b16c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b170:	2b02      	cmp	r3, #2
 800b172:	d149      	bne.n	800b208 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b174:	2300      	movs	r3, #0
 800b176:	643b      	str	r3, [r7, #64]	; 0x40
 800b178:	e01e      	b.n	800b1b8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b182:	011b      	lsls	r3, r3, #4
 800b184:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b188:	4413      	add	r3, r2
 800b18a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18e:	3304      	adds	r3, #4
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d006      	beq.n	800b1a4 <find_volume+0x114>
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	3308      	adds	r3, #8
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe fd74 	bl	8009c88 <ld_dword>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	e000      	b.n	800b1a6 <find_volume+0x116>
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	3358      	adds	r3, #88	; 0x58
 800b1ac:	443b      	add	r3, r7
 800b1ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	643b      	str	r3, [r7, #64]	; 0x40
 800b1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ba:	2b03      	cmp	r3, #3
 800b1bc:	d9dd      	bls.n	800b17a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b1be:	2300      	movs	r3, #0
 800b1c0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b1c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <find_volume+0x13e>
 800b1c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	3358      	adds	r3, #88	; 0x58
 800b1d4:	443b      	add	r3, r7
 800b1d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b1da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d005      	beq.n	800b1ee <find_volume+0x15e>
 800b1e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b1e6:	f7ff fefd 	bl	800afe4 <check_fs>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	e000      	b.n	800b1f0 <find_volume+0x160>
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d905      	bls.n	800b208 <find_volume+0x178>
 800b1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1fe:	3301      	adds	r3, #1
 800b200:	643b      	str	r3, [r7, #64]	; 0x40
 800b202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b204:	2b03      	cmp	r3, #3
 800b206:	d9e2      	bls.n	800b1ce <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b20c:	2b04      	cmp	r3, #4
 800b20e:	d101      	bne.n	800b214 <find_volume+0x184>
 800b210:	2301      	movs	r3, #1
 800b212:	e17e      	b.n	800b512 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d901      	bls.n	800b220 <find_volume+0x190>
 800b21c:	230d      	movs	r3, #13
 800b21e:	e178      	b.n	800b512 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b222:	3330      	adds	r3, #48	; 0x30
 800b224:	330b      	adds	r3, #11
 800b226:	4618      	mov	r0, r3
 800b228:	f7fe fd16 	bl	8009c58 <ld_word>
 800b22c:	4603      	mov	r3, r0
 800b22e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b232:	d001      	beq.n	800b238 <find_volume+0x1a8>
 800b234:	230d      	movs	r3, #13
 800b236:	e16c      	b.n	800b512 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23a:	3330      	adds	r3, #48	; 0x30
 800b23c:	3316      	adds	r3, #22
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe fd0a 	bl	8009c58 <ld_word>
 800b244:	4603      	mov	r3, r0
 800b246:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d106      	bne.n	800b25c <find_volume+0x1cc>
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	3330      	adds	r3, #48	; 0x30
 800b252:	3324      	adds	r3, #36	; 0x24
 800b254:	4618      	mov	r0, r3
 800b256:	f7fe fd17 	bl	8009c88 <ld_dword>
 800b25a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b260:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b264:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26e:	789b      	ldrb	r3, [r3, #2]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d005      	beq.n	800b280 <find_volume+0x1f0>
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	789b      	ldrb	r3, [r3, #2]
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d001      	beq.n	800b280 <find_volume+0x1f0>
 800b27c:	230d      	movs	r3, #13
 800b27e:	e148      	b.n	800b512 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b282:	789b      	ldrb	r3, [r3, #2]
 800b284:	461a      	mov	r2, r3
 800b286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b288:	fb02 f303 	mul.w	r3, r2, r3
 800b28c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b294:	b29a      	uxth	r2, r3
 800b296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b298:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	895b      	ldrh	r3, [r3, #10]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d008      	beq.n	800b2b4 <find_volume+0x224>
 800b2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a4:	895b      	ldrh	r3, [r3, #10]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	895b      	ldrh	r3, [r3, #10]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <find_volume+0x228>
 800b2b4:	230d      	movs	r3, #13
 800b2b6:	e12c      	b.n	800b512 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ba:	3330      	adds	r3, #48	; 0x30
 800b2bc:	3311      	adds	r3, #17
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fe fcca 	bl	8009c58 <ld_word>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ce:	891b      	ldrh	r3, [r3, #8]
 800b2d0:	f003 030f 	and.w	r3, r3, #15
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <find_volume+0x24e>
 800b2da:	230d      	movs	r3, #13
 800b2dc:	e119      	b.n	800b512 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e0:	3330      	adds	r3, #48	; 0x30
 800b2e2:	3313      	adds	r3, #19
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fe fcb7 	bl	8009c58 <ld_word>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b2ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d106      	bne.n	800b302 <find_volume+0x272>
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	3330      	adds	r3, #48	; 0x30
 800b2f8:	3320      	adds	r3, #32
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fe fcc4 	bl	8009c88 <ld_dword>
 800b300:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b304:	3330      	adds	r3, #48	; 0x30
 800b306:	330e      	adds	r3, #14
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fe fca5 	bl	8009c58 <ld_word>
 800b30e:	4603      	mov	r3, r0
 800b310:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b312:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <find_volume+0x28c>
 800b318:	230d      	movs	r3, #13
 800b31a:	e0fa      	b.n	800b512 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b31c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b31e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b320:	4413      	add	r3, r2
 800b322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b324:	8912      	ldrh	r2, [r2, #8]
 800b326:	0912      	lsrs	r2, r2, #4
 800b328:	b292      	uxth	r2, r2
 800b32a:	4413      	add	r3, r2
 800b32c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b32e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	429a      	cmp	r2, r3
 800b334:	d204      	bcs.n	800b340 <find_volume+0x2b0>
 800b336:	230d      	movs	r3, #13
 800b338:	e0eb      	b.n	800b512 <find_volume+0x482>
 800b33a:	bf00      	nop
 800b33c:	20000818 	.word	0x20000818
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b348:	8952      	ldrh	r2, [r2, #10]
 800b34a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b34e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b352:	2b00      	cmp	r3, #0
 800b354:	d101      	bne.n	800b35a <find_volume+0x2ca>
 800b356:	230d      	movs	r3, #13
 800b358:	e0db      	b.n	800b512 <find_volume+0x482>
		fmt = FS_FAT32;
 800b35a:	2303      	movs	r3, #3
 800b35c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b362:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b366:	4293      	cmp	r3, r2
 800b368:	d802      	bhi.n	800b370 <find_volume+0x2e0>
 800b36a:	2302      	movs	r3, #2
 800b36c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b376:	4293      	cmp	r3, r2
 800b378:	d802      	bhi.n	800b380 <find_volume+0x2f0>
 800b37a:	2301      	movs	r3, #1
 800b37c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	1c9a      	adds	r2, r3, #2
 800b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b386:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b38c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b38e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b392:	441a      	add	r2, r3
 800b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b396:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b398:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	441a      	add	r2, r3
 800b39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b3a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d11e      	bne.n	800b3e8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ac:	3330      	adds	r3, #48	; 0x30
 800b3ae:	332a      	adds	r3, #42	; 0x2a
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fe fc51 	bl	8009c58 <ld_word>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <find_volume+0x330>
 800b3bc:	230d      	movs	r3, #13
 800b3be:	e0a8      	b.n	800b512 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c2:	891b      	ldrh	r3, [r3, #8]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <find_volume+0x33c>
 800b3c8:	230d      	movs	r3, #13
 800b3ca:	e0a2      	b.n	800b512 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ce:	3330      	adds	r3, #48	; 0x30
 800b3d0:	332c      	adds	r3, #44	; 0x2c
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fe fc58 	bl	8009c88 <ld_dword>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3dc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	647b      	str	r3, [r7, #68]	; 0x44
 800b3e6:	e01f      	b.n	800b428 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ea:	891b      	ldrh	r3, [r3, #8]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d101      	bne.n	800b3f4 <find_volume+0x364>
 800b3f0:	230d      	movs	r3, #13
 800b3f2:	e08e      	b.n	800b512 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	6a1a      	ldr	r2, [r3, #32]
 800b3f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3fa:	441a      	add	r2, r3
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fe:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b400:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b404:	2b02      	cmp	r3, #2
 800b406:	d103      	bne.n	800b410 <find_volume+0x380>
 800b408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40a:	695b      	ldr	r3, [r3, #20]
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	e00a      	b.n	800b426 <find_volume+0x396>
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	695a      	ldr	r2, [r3, #20]
 800b414:	4613      	mov	r3, r2
 800b416:	005b      	lsls	r3, r3, #1
 800b418:	4413      	add	r3, r2
 800b41a:	085a      	lsrs	r2, r3, #1
 800b41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	f003 0301 	and.w	r3, r3, #1
 800b424:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b426:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42a:	699a      	ldr	r2, [r3, #24]
 800b42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b42e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b432:	0a5b      	lsrs	r3, r3, #9
 800b434:	429a      	cmp	r2, r3
 800b436:	d201      	bcs.n	800b43c <find_volume+0x3ac>
 800b438:	230d      	movs	r3, #13
 800b43a:	e06a      	b.n	800b512 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	f04f 32ff 	mov.w	r2, #4294967295
 800b442:	611a      	str	r2, [r3, #16]
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	691a      	ldr	r2, [r3, #16]
 800b448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	2280      	movs	r2, #128	; 0x80
 800b450:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b452:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b456:	2b03      	cmp	r3, #3
 800b458:	d149      	bne.n	800b4ee <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45c:	3330      	adds	r3, #48	; 0x30
 800b45e:	3330      	adds	r3, #48	; 0x30
 800b460:	4618      	mov	r0, r3
 800b462:	f7fe fbf9 	bl	8009c58 <ld_word>
 800b466:	4603      	mov	r3, r0
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d140      	bne.n	800b4ee <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b46c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b46e:	3301      	adds	r3, #1
 800b470:	4619      	mov	r1, r3
 800b472:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b474:	f7fe fea0 	bl	800a1b8 <move_window>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d137      	bne.n	800b4ee <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b480:	2200      	movs	r2, #0
 800b482:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b486:	3330      	adds	r3, #48	; 0x30
 800b488:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fe fbe3 	bl	8009c58 <ld_word>
 800b492:	4603      	mov	r3, r0
 800b494:	461a      	mov	r2, r3
 800b496:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d127      	bne.n	800b4ee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	3330      	adds	r3, #48	; 0x30
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fe fbf0 	bl	8009c88 <ld_dword>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	4a1c      	ldr	r2, [pc, #112]	; (800b51c <find_volume+0x48c>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d11e      	bne.n	800b4ee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b2:	3330      	adds	r3, #48	; 0x30
 800b4b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fe fbe5 	bl	8009c88 <ld_dword>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	4a17      	ldr	r2, [pc, #92]	; (800b520 <find_volume+0x490>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d113      	bne.n	800b4ee <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c8:	3330      	adds	r3, #48	; 0x30
 800b4ca:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fe fbda 	bl	8009c88 <ld_dword>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	3330      	adds	r3, #48	; 0x30
 800b4de:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fe fbd0 	bl	8009c88 <ld_dword>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ec:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b4f4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b4f6:	4b0b      	ldr	r3, [pc, #44]	; (800b524 <find_volume+0x494>)
 800b4f8:	881b      	ldrh	r3, [r3, #0]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	4b09      	ldr	r3, [pc, #36]	; (800b524 <find_volume+0x494>)
 800b500:	801a      	strh	r2, [r3, #0]
 800b502:	4b08      	ldr	r3, [pc, #32]	; (800b524 <find_volume+0x494>)
 800b504:	881a      	ldrh	r2, [r3, #0]
 800b506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b508:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b50a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b50c:	f7fe fdec 	bl	800a0e8 <clear_lock>
#endif
	return FR_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3758      	adds	r7, #88	; 0x58
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	41615252 	.word	0x41615252
 800b520:	61417272 	.word	0x61417272
 800b524:	2000081c 	.word	0x2000081c

0800b528 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b532:	2309      	movs	r3, #9
 800b534:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d01c      	beq.n	800b576 <validate+0x4e>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d018      	beq.n	800b576 <validate+0x4e>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d013      	beq.n	800b576 <validate+0x4e>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	889a      	ldrh	r2, [r3, #4]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	88db      	ldrh	r3, [r3, #6]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d10c      	bne.n	800b576 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	785b      	ldrb	r3, [r3, #1]
 800b562:	4618      	mov	r0, r3
 800b564:	f7fe fada 	bl	8009b1c <disk_status>
 800b568:	4603      	mov	r3, r0
 800b56a:	f003 0301 	and.w	r3, r3, #1
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <validate+0x4e>
			res = FR_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b576:	7bfb      	ldrb	r3, [r7, #15]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d102      	bne.n	800b582 <validate+0x5a>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	e000      	b.n	800b584 <validate+0x5c>
 800b582:	2300      	movs	r3, #0
 800b584:	683a      	ldr	r2, [r7, #0]
 800b586:	6013      	str	r3, [r2, #0]
	return res;
 800b588:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
	...

0800b594 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b088      	sub	sp, #32
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b5a6:	f107 0310 	add.w	r3, r7, #16
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7ff fcd5 	bl	800af5a <get_ldnumber>
 800b5b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	da01      	bge.n	800b5bc <f_mount+0x28>
 800b5b8:	230b      	movs	r3, #11
 800b5ba:	e02b      	b.n	800b614 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b5bc:	4a17      	ldr	r2, [pc, #92]	; (800b61c <f_mount+0x88>)
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d005      	beq.n	800b5d8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b5cc:	69b8      	ldr	r0, [r7, #24]
 800b5ce:	f7fe fd8b 	bl	800a0e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	490d      	ldr	r1, [pc, #52]	; (800b61c <f_mount+0x88>)
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d002      	beq.n	800b5fa <f_mount+0x66>
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d001      	beq.n	800b5fe <f_mount+0x6a>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	e00a      	b.n	800b614 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b5fe:	f107 010c 	add.w	r1, r7, #12
 800b602:	f107 0308 	add.w	r3, r7, #8
 800b606:	2200      	movs	r2, #0
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff fd41 	bl	800b090 <find_volume>
 800b60e:	4603      	mov	r3, r0
 800b610:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b612:	7dfb      	ldrb	r3, [r7, #23]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3720      	adds	r7, #32
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	20000818 	.word	0x20000818

0800b620 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b098      	sub	sp, #96	; 0x60
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	4613      	mov	r3, r2
 800b62c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d101      	bne.n	800b638 <f_open+0x18>
 800b634:	2309      	movs	r3, #9
 800b636:	e1ad      	b.n	800b994 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b638:	79fb      	ldrb	r3, [r7, #7]
 800b63a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b63e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b640:	79fa      	ldrb	r2, [r7, #7]
 800b642:	f107 0110 	add.w	r1, r7, #16
 800b646:	f107 0308 	add.w	r3, r7, #8
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7ff fd20 	bl	800b090 <find_volume>
 800b650:	4603      	mov	r3, r0
 800b652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	f040 8191 	bne.w	800b982 <f_open+0x362>
		dj.obj.fs = fs;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	f107 0314 	add.w	r3, r7, #20
 800b66a:	4611      	mov	r1, r2
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7ff fc03 	bl	800ae78 <follow_path>
 800b672:	4603      	mov	r3, r0
 800b674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d11a      	bne.n	800b6b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b680:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b684:	b25b      	sxtb	r3, r3
 800b686:	2b00      	cmp	r3, #0
 800b688:	da03      	bge.n	800b692 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b68a:	2306      	movs	r3, #6
 800b68c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b690:	e011      	b.n	800b6b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b692:	79fb      	ldrb	r3, [r7, #7]
 800b694:	f023 0301 	bic.w	r3, r3, #1
 800b698:	2b00      	cmp	r3, #0
 800b69a:	bf14      	ite	ne
 800b69c:	2301      	movne	r3, #1
 800b69e:	2300      	moveq	r3, #0
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	f107 0314 	add.w	r3, r7, #20
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fe fbd4 	bl	8009e58 <chk_lock>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b6b6:	79fb      	ldrb	r3, [r7, #7]
 800b6b8:	f003 031c 	and.w	r3, r3, #28
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d07f      	beq.n	800b7c0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b6c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d017      	beq.n	800b6f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b6c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6cc:	2b04      	cmp	r3, #4
 800b6ce:	d10e      	bne.n	800b6ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b6d0:	f7fe fc1e 	bl	8009f10 <enq_lock>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d006      	beq.n	800b6e8 <f_open+0xc8>
 800b6da:	f107 0314 	add.w	r3, r7, #20
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff fb03 	bl	800acea <dir_register>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	e000      	b.n	800b6ea <f_open+0xca>
 800b6e8:	2312      	movs	r3, #18
 800b6ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b6ee:	79fb      	ldrb	r3, [r7, #7]
 800b6f0:	f043 0308 	orr.w	r3, r3, #8
 800b6f4:	71fb      	strb	r3, [r7, #7]
 800b6f6:	e010      	b.n	800b71a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b6f8:	7ebb      	ldrb	r3, [r7, #26]
 800b6fa:	f003 0311 	and.w	r3, r3, #17
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <f_open+0xea>
					res = FR_DENIED;
 800b702:	2307      	movs	r3, #7
 800b704:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b708:	e007      	b.n	800b71a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b70a:	79fb      	ldrb	r3, [r7, #7]
 800b70c:	f003 0304 	and.w	r3, r3, #4
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <f_open+0xfa>
 800b714:	2308      	movs	r3, #8
 800b716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b71a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d168      	bne.n	800b7f4 <f_open+0x1d4>
 800b722:	79fb      	ldrb	r3, [r7, #7]
 800b724:	f003 0308 	and.w	r3, r3, #8
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d063      	beq.n	800b7f4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b72c:	f7fd fcbe 	bl	80090ac <get_fattime>
 800b730:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b734:	330e      	adds	r3, #14
 800b736:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fe fae3 	bl	8009d04 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b740:	3316      	adds	r3, #22
 800b742:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b744:	4618      	mov	r0, r3
 800b746:	f7fe fadd 	bl	8009d04 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74c:	330b      	adds	r3, #11
 800b74e:	2220      	movs	r2, #32
 800b750:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b756:	4611      	mov	r1, r2
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff fa32 	bl	800abc2 <ld_clust>
 800b75e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b764:	2200      	movs	r2, #0
 800b766:	4618      	mov	r0, r3
 800b768:	f7ff fa4a 	bl	800ac00 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b76e:	331c      	adds	r3, #28
 800b770:	2100      	movs	r1, #0
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe fac6 	bl	8009d04 <st_dword>
					fs->wflag = 1;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	2201      	movs	r2, #1
 800b77c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b77e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b780:	2b00      	cmp	r3, #0
 800b782:	d037      	beq.n	800b7f4 <f_open+0x1d4>
						dw = fs->winsect;
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b788:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b78a:	f107 0314 	add.w	r3, r7, #20
 800b78e:	2200      	movs	r2, #0
 800b790:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe ff5d 	bl	800a652 <remove_chain>
 800b798:	4603      	mov	r3, r0
 800b79a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b79e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d126      	bne.n	800b7f4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fe fd04 	bl	800a1b8 <move_window>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7ba:	3a01      	subs	r2, #1
 800b7bc:	60da      	str	r2, [r3, #12]
 800b7be:	e019      	b.n	800b7f4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b7c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d115      	bne.n	800b7f4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b7c8:	7ebb      	ldrb	r3, [r7, #26]
 800b7ca:	f003 0310 	and.w	r3, r3, #16
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <f_open+0x1ba>
					res = FR_NO_FILE;
 800b7d2:	2304      	movs	r3, #4
 800b7d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b7d8:	e00c      	b.n	800b7f4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	f003 0302 	and.w	r3, r3, #2
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d007      	beq.n	800b7f4 <f_open+0x1d4>
 800b7e4:	7ebb      	ldrb	r3, [r7, #26]
 800b7e6:	f003 0301 	and.w	r3, r3, #1
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d002      	beq.n	800b7f4 <f_open+0x1d4>
						res = FR_DENIED;
 800b7ee:	2307      	movs	r3, #7
 800b7f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b7f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d128      	bne.n	800b84e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b7fc:	79fb      	ldrb	r3, [r7, #7]
 800b7fe:	f003 0308 	and.w	r3, r3, #8
 800b802:	2b00      	cmp	r3, #0
 800b804:	d003      	beq.n	800b80e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b806:	79fb      	ldrb	r3, [r7, #7]
 800b808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b80c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b81c:	79fb      	ldrb	r3, [r7, #7]
 800b81e:	f023 0301 	bic.w	r3, r3, #1
 800b822:	2b00      	cmp	r3, #0
 800b824:	bf14      	ite	ne
 800b826:	2301      	movne	r3, #1
 800b828:	2300      	moveq	r3, #0
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	461a      	mov	r2, r3
 800b82e:	f107 0314 	add.w	r3, r7, #20
 800b832:	4611      	mov	r1, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f7fe fb8d 	bl	8009f54 <inc_lock>
 800b83a:	4602      	mov	r2, r0
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d102      	bne.n	800b84e <f_open+0x22e>
 800b848:	2302      	movs	r3, #2
 800b84a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b84e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b852:	2b00      	cmp	r3, #0
 800b854:	f040 8095 	bne.w	800b982 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b85c:	4611      	mov	r1, r2
 800b85e:	4618      	mov	r0, r3
 800b860:	f7ff f9af 	bl	800abc2 <ld_clust>
 800b864:	4602      	mov	r2, r0
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b86c:	331c      	adds	r3, #28
 800b86e:	4618      	mov	r0, r3
 800b870:	f7fe fa0a 	bl	8009c88 <ld_dword>
 800b874:	4602      	mov	r2, r0
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2200      	movs	r2, #0
 800b87e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	88da      	ldrh	r2, [r3, #6]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	79fa      	ldrb	r2, [r7, #7]
 800b892:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	3330      	adds	r3, #48	; 0x30
 800b8aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7fe fa74 	bl	8009d9e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b8b6:	79fb      	ldrb	r3, [r7, #7]
 800b8b8:	f003 0320 	and.w	r3, r3, #32
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d060      	beq.n	800b982 <f_open+0x362>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d05c      	beq.n	800b982 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	68da      	ldr	r2, [r3, #12]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	895b      	ldrh	r3, [r3, #10]
 800b8d4:	025b      	lsls	r3, r3, #9
 800b8d6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	657b      	str	r3, [r7, #84]	; 0x54
 800b8e4:	e016      	b.n	800b914 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe fd1f 	bl	800a32e <get_fat>
 800b8f0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b8f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d802      	bhi.n	800b8fe <f_open+0x2de>
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b8fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b904:	d102      	bne.n	800b90c <f_open+0x2ec>
 800b906:	2301      	movs	r3, #1
 800b908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b90c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	657b      	str	r3, [r7, #84]	; 0x54
 800b914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d103      	bne.n	800b924 <f_open+0x304>
 800b91c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b91e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b920:	429a      	cmp	r2, r3
 800b922:	d8e0      	bhi.n	800b8e6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b928:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b92a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d127      	bne.n	800b982 <f_open+0x362>
 800b932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d022      	beq.n	800b982 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b940:	4618      	mov	r0, r3
 800b942:	f7fe fcd5 	bl	800a2f0 <clust2sect>
 800b946:	6478      	str	r0, [r7, #68]	; 0x44
 800b948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d103      	bne.n	800b956 <f_open+0x336>
						res = FR_INT_ERR;
 800b94e:	2302      	movs	r3, #2
 800b950:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b954:	e015      	b.n	800b982 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b958:	0a5a      	lsrs	r2, r3, #9
 800b95a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b95c:	441a      	add	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	7858      	ldrb	r0, [r3, #1]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6a1a      	ldr	r2, [r3, #32]
 800b970:	2301      	movs	r3, #1
 800b972:	f7fe f913 	bl	8009b9c <disk_read>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <f_open+0x362>
 800b97c:	2301      	movs	r3, #1
 800b97e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b986:	2b00      	cmp	r3, #0
 800b988:	d002      	beq.n	800b990 <f_open+0x370>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b994:	4618      	mov	r0, r3
 800b996:	3760      	adds	r7, #96	; 0x60
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08c      	sub	sp, #48	; 0x30
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f107 0210 	add.w	r2, r7, #16
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7ff fdb3 	bl	800b528 <validate>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b9c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d107      	bne.n	800b9e0 <f_write+0x44>
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	7d5b      	ldrb	r3, [r3, #21]
 800b9d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b9d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <f_write+0x4a>
 800b9e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9e4:	e14b      	b.n	800bc7e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	7d1b      	ldrb	r3, [r3, #20]
 800b9ea:	f003 0302 	and.w	r3, r3, #2
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <f_write+0x5a>
 800b9f2:	2307      	movs	r3, #7
 800b9f4:	e143      	b.n	800bc7e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	699a      	ldr	r2, [r3, #24]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	441a      	add	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	f080 812d 	bcs.w	800bc62 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	43db      	mvns	r3, r3
 800ba0e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ba10:	e127      	b.n	800bc62 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f040 80e3 	bne.w	800bbe6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	699b      	ldr	r3, [r3, #24]
 800ba24:	0a5b      	lsrs	r3, r3, #9
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	8952      	ldrh	r2, [r2, #10]
 800ba2a:	3a01      	subs	r2, #1
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d143      	bne.n	800babe <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10c      	bne.n	800ba58 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ba44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d11a      	bne.n	800ba80 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe fe64 	bl	800a71c <create_chain>
 800ba54:	62b8      	str	r0, [r7, #40]	; 0x28
 800ba56:	e013      	b.n	800ba80 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d007      	beq.n	800ba70 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	4619      	mov	r1, r3
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f7fe fef0 	bl	800a84c <clmt_clust>
 800ba6c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ba6e:	e007      	b.n	800ba80 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	4619      	mov	r1, r3
 800ba78:	4610      	mov	r0, r2
 800ba7a:	f7fe fe4f 	bl	800a71c <create_chain>
 800ba7e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 80f2 	beq.w	800bc6c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d104      	bne.n	800ba98 <f_write+0xfc>
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2202      	movs	r2, #2
 800ba92:	755a      	strb	r2, [r3, #21]
 800ba94:	2302      	movs	r3, #2
 800ba96:	e0f2      	b.n	800bc7e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ba98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9e:	d104      	bne.n	800baaa <f_write+0x10e>
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2201      	movs	r2, #1
 800baa4:	755a      	strb	r2, [r3, #21]
 800baa6:	2301      	movs	r3, #1
 800baa8:	e0e9      	b.n	800bc7e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d102      	bne.n	800babe <f_write+0x122>
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800babc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	7d1b      	ldrb	r3, [r3, #20]
 800bac2:	b25b      	sxtb	r3, r3
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	da18      	bge.n	800bafa <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	7858      	ldrb	r0, [r3, #1]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6a1a      	ldr	r2, [r3, #32]
 800bad6:	2301      	movs	r3, #1
 800bad8:	f7fe f880 	bl	8009bdc <disk_write>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d004      	beq.n	800baec <f_write+0x150>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2201      	movs	r2, #1
 800bae6:	755a      	strb	r2, [r3, #21]
 800bae8:	2301      	movs	r3, #1
 800baea:	e0c8      	b.n	800bc7e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	7d1b      	ldrb	r3, [r3, #20]
 800baf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bafa:	693a      	ldr	r2, [r7, #16]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	69db      	ldr	r3, [r3, #28]
 800bb00:	4619      	mov	r1, r3
 800bb02:	4610      	mov	r0, r2
 800bb04:	f7fe fbf4 	bl	800a2f0 <clust2sect>
 800bb08:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d104      	bne.n	800bb1a <f_write+0x17e>
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2202      	movs	r2, #2
 800bb14:	755a      	strb	r2, [r3, #21]
 800bb16:	2302      	movs	r3, #2
 800bb18:	e0b1      	b.n	800bc7e <f_write+0x2e2>
			sect += csect;
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	4413      	add	r3, r2
 800bb20:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	0a5b      	lsrs	r3, r3, #9
 800bb26:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bb28:	6a3b      	ldr	r3, [r7, #32]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d03c      	beq.n	800bba8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	4413      	add	r3, r2
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	8952      	ldrh	r2, [r2, #10]
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d905      	bls.n	800bb48 <f_write+0x1ac>
					cc = fs->csize - csect;
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	895b      	ldrh	r3, [r3, #10]
 800bb40:	461a      	mov	r2, r3
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	1ad3      	subs	r3, r2, r3
 800bb46:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	7858      	ldrb	r0, [r3, #1]
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	69f9      	ldr	r1, [r7, #28]
 800bb52:	f7fe f843 	bl	8009bdc <disk_write>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d004      	beq.n	800bb66 <f_write+0x1ca>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	755a      	strb	r2, [r3, #21]
 800bb62:	2301      	movs	r3, #1
 800bb64:	e08b      	b.n	800bc7e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6a1a      	ldr	r2, [r3, #32]
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	6a3a      	ldr	r2, [r7, #32]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d915      	bls.n	800bba0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6a1a      	ldr	r2, [r3, #32]
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	025b      	lsls	r3, r3, #9
 800bb84:	69fa      	ldr	r2, [r7, #28]
 800bb86:	4413      	add	r3, r2
 800bb88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	f7fe f8e5 	bl	8009d5c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	7d1b      	ldrb	r3, [r3, #20]
 800bb96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	025b      	lsls	r3, r3, #9
 800bba4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bba6:	e03f      	b.n	800bc28 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	697a      	ldr	r2, [r7, #20]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d016      	beq.n	800bbe0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	699a      	ldr	r2, [r3, #24]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d210      	bcs.n	800bbe0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	7858      	ldrb	r0, [r3, #1]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbc8:	2301      	movs	r3, #1
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	f7fd ffe6 	bl	8009b9c <disk_read>
 800bbd0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d004      	beq.n	800bbe0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	755a      	strb	r2, [r3, #21]
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e04e      	b.n	800bc7e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbee:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bbf2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bbf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d901      	bls.n	800bc00 <f_write+0x264>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc0e:	4413      	add	r3, r2
 800bc10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc12:	69f9      	ldr	r1, [r7, #28]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fe f8a1 	bl	8009d5c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	7d1b      	ldrb	r3, [r3, #20]
 800bc1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bc28:	69fa      	ldr	r2, [r7, #28]
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	4413      	add	r3, r2
 800bc2e:	61fb      	str	r3, [r7, #28]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	699a      	ldr	r2, [r3, #24]
 800bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc36:	441a      	add	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	619a      	str	r2, [r3, #24]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	68da      	ldr	r2, [r3, #12]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	bf38      	it	cc
 800bc48:	461a      	movcc	r2, r3
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	60da      	str	r2, [r3, #12]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc54:	441a      	add	r2, r3
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	601a      	str	r2, [r3, #0]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	1ad3      	subs	r3, r2, r3
 800bc60:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f47f aed4 	bne.w	800ba12 <f_write+0x76>
 800bc6a:	e000      	b.n	800bc6e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc6c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	7d1b      	ldrb	r3, [r3, #20]
 800bc72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3730      	adds	r7, #48	; 0x30
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b086      	sub	sp, #24
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f107 0208 	add.w	r2, r7, #8
 800bc94:	4611      	mov	r1, r2
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7ff fc46 	bl	800b528 <validate>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bca0:	7dfb      	ldrb	r3, [r7, #23]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d168      	bne.n	800bd78 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	7d1b      	ldrb	r3, [r3, #20]
 800bcaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d062      	beq.n	800bd78 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	7d1b      	ldrb	r3, [r3, #20]
 800bcb6:	b25b      	sxtb	r3, r3
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	da15      	bge.n	800bce8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	7858      	ldrb	r0, [r3, #1]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a1a      	ldr	r2, [r3, #32]
 800bcca:	2301      	movs	r3, #1
 800bccc:	f7fd ff86 	bl	8009bdc <disk_write>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d001      	beq.n	800bcda <f_sync+0x54>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e04f      	b.n	800bd7a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	7d1b      	ldrb	r3, [r3, #20]
 800bcde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bce8:	f7fd f9e0 	bl	80090ac <get_fattime>
 800bcec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	4610      	mov	r0, r2
 800bcf8:	f7fe fa5e 	bl	800a1b8 <move_window>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bd00:	7dfb      	ldrb	r3, [r7, #23]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d138      	bne.n	800bd78 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd0a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	330b      	adds	r3, #11
 800bd10:	781a      	ldrb	r2, [r3, #0]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	330b      	adds	r3, #11
 800bd16:	f042 0220 	orr.w	r2, r2, #32
 800bd1a:	b2d2      	uxtb	r2, r2
 800bd1c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6818      	ldr	r0, [r3, #0]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	461a      	mov	r2, r3
 800bd28:	68f9      	ldr	r1, [r7, #12]
 800bd2a:	f7fe ff69 	bl	800ac00 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f103 021c 	add.w	r2, r3, #28
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	4610      	mov	r0, r2
 800bd3c:	f7fd ffe2 	bl	8009d04 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	3316      	adds	r3, #22
 800bd44:	6939      	ldr	r1, [r7, #16]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fd ffdc 	bl	8009d04 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3312      	adds	r3, #18
 800bd50:	2100      	movs	r1, #0
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fd ffbb 	bl	8009cce <st_word>
					fs->wflag = 1;
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fe fa57 	bl	800a214 <sync_fs>
 800bd66:	4603      	mov	r3, r0
 800bd68:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	7d1b      	ldrb	r3, [r3, #20]
 800bd6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bd78:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3718      	adds	r7, #24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b084      	sub	sp, #16
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff ff7b 	bl	800bc86 <f_sync>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d118      	bne.n	800bdcc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f107 0208 	add.w	r2, r7, #8
 800bda0:	4611      	mov	r1, r2
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7ff fbc0 	bl	800b528 <validate>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10c      	bne.n	800bdcc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe f95a 	bl	800a070 <dec_lock>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d102      	bne.n	800bdcc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b092      	sub	sp, #72	; 0x48
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800bde2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bde6:	f107 030c 	add.w	r3, r7, #12
 800bdea:	2200      	movs	r2, #0
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7ff f94f 	bl	800b090 <find_volume>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800bdf8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f040 8099 	bne.w	800bf34 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800be02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	691a      	ldr	r2, [r3, #16]
 800be0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0e:	695b      	ldr	r3, [r3, #20]
 800be10:	3b02      	subs	r3, #2
 800be12:	429a      	cmp	r2, r3
 800be14:	d804      	bhi.n	800be20 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be18:	691a      	ldr	r2, [r3, #16]
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	e089      	b.n	800bf34 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800be20:	2300      	movs	r3, #0
 800be22:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d128      	bne.n	800be7e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800be2c:	2302      	movs	r3, #2
 800be2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be32:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800be34:	f107 0314 	add.w	r3, r7, #20
 800be38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fe fa77 	bl	800a32e <get_fat>
 800be40:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800be42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be48:	d103      	bne.n	800be52 <f_getfree+0x7c>
 800be4a:	2301      	movs	r3, #1
 800be4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800be50:	e063      	b.n	800bf1a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800be52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be54:	2b01      	cmp	r3, #1
 800be56:	d103      	bne.n	800be60 <f_getfree+0x8a>
 800be58:	2302      	movs	r3, #2
 800be5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800be5e:	e05c      	b.n	800bf1a <f_getfree+0x144>
					if (stat == 0) nfree++;
 800be60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be62:	2b00      	cmp	r3, #0
 800be64:	d102      	bne.n	800be6c <f_getfree+0x96>
 800be66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be68:	3301      	adds	r3, #1
 800be6a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800be6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be6e:	3301      	adds	r3, #1
 800be70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be78:	429a      	cmp	r2, r3
 800be7a:	d3db      	bcc.n	800be34 <f_getfree+0x5e>
 800be7c:	e04d      	b.n	800bf1a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be80:	695b      	ldr	r3, [r3, #20]
 800be82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be86:	6a1b      	ldr	r3, [r3, #32]
 800be88:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800be8a:	2300      	movs	r3, #0
 800be8c:	637b      	str	r3, [r7, #52]	; 0x34
 800be8e:	2300      	movs	r3, #0
 800be90:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800be92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be94:	2b00      	cmp	r3, #0
 800be96:	d113      	bne.n	800bec0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800be98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9c:	1c5a      	adds	r2, r3, #1
 800be9e:	63ba      	str	r2, [r7, #56]	; 0x38
 800bea0:	4619      	mov	r1, r3
 800bea2:	f7fe f989 	bl	800a1b8 <move_window>
 800bea6:	4603      	mov	r3, r0
 800bea8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800beac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d131      	bne.n	800bf18 <f_getfree+0x142>
							p = fs->win;
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	3330      	adds	r3, #48	; 0x30
 800beb8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800beba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bebe:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800bec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d10f      	bne.n	800bee8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800bec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beca:	f7fd fec5 	bl	8009c58 <ld_word>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d102      	bne.n	800beda <f_getfree+0x104>
 800bed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bed6:	3301      	adds	r3, #1
 800bed8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	3302      	adds	r3, #2
 800bede:	633b      	str	r3, [r7, #48]	; 0x30
 800bee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee2:	3b02      	subs	r3, #2
 800bee4:	637b      	str	r3, [r7, #52]	; 0x34
 800bee6:	e010      	b.n	800bf0a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800bee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beea:	f7fd fecd 	bl	8009c88 <ld_dword>
 800beee:	4603      	mov	r3, r0
 800bef0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d102      	bne.n	800befe <f_getfree+0x128>
 800bef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800befa:	3301      	adds	r3, #1
 800befc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800befe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf00:	3304      	adds	r3, #4
 800bf02:	633b      	str	r3, [r7, #48]	; 0x30
 800bf04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf06:	3b04      	subs	r3, #4
 800bf08:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800bf0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1bd      	bne.n	800be92 <f_getfree+0xbc>
 800bf16:	e000      	b.n	800bf1a <f_getfree+0x144>
							if (res != FR_OK) break;
 800bf18:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf1e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800bf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf24:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800bf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf28:	791a      	ldrb	r2, [r3, #4]
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	f042 0201 	orr.w	r2, r2, #1
 800bf30:	b2d2      	uxtb	r2, r2
 800bf32:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800bf34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3748      	adds	r7, #72	; 0x48
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b087      	sub	sp, #28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bf52:	2300      	movs	r3, #0
 800bf54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bf56:	4b1f      	ldr	r3, [pc, #124]	; (800bfd4 <FATFS_LinkDriverEx+0x94>)
 800bf58:	7a5b      	ldrb	r3, [r3, #9]
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d131      	bne.n	800bfc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bf60:	4b1c      	ldr	r3, [pc, #112]	; (800bfd4 <FATFS_LinkDriverEx+0x94>)
 800bf62:	7a5b      	ldrb	r3, [r3, #9]
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	461a      	mov	r2, r3
 800bf68:	4b1a      	ldr	r3, [pc, #104]	; (800bfd4 <FATFS_LinkDriverEx+0x94>)
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bf6e:	4b19      	ldr	r3, [pc, #100]	; (800bfd4 <FATFS_LinkDriverEx+0x94>)
 800bf70:	7a5b      	ldrb	r3, [r3, #9]
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	4a17      	ldr	r2, [pc, #92]	; (800bfd4 <FATFS_LinkDriverEx+0x94>)
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bf7e:	4b15      	ldr	r3, [pc, #84]	; (800bfd4 <FATFS_LinkDriverEx+0x94>)
 800bf80:	7a5b      	ldrb	r3, [r3, #9]
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	461a      	mov	r2, r3
 800bf86:	4b13      	ldr	r3, [pc, #76]	; (800bfd4 <FATFS_LinkDriverEx+0x94>)
 800bf88:	4413      	add	r3, r2
 800bf8a:	79fa      	ldrb	r2, [r7, #7]
 800bf8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf8e:	4b11      	ldr	r3, [pc, #68]	; (800bfd4 <FATFS_LinkDriverEx+0x94>)
 800bf90:	7a5b      	ldrb	r3, [r3, #9]
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	b2d1      	uxtb	r1, r2
 800bf98:	4a0e      	ldr	r2, [pc, #56]	; (800bfd4 <FATFS_LinkDriverEx+0x94>)
 800bf9a:	7251      	strb	r1, [r2, #9]
 800bf9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf9e:	7dbb      	ldrb	r3, [r7, #22]
 800bfa0:	3330      	adds	r3, #48	; 0x30
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	223a      	movs	r2, #58	; 0x3a
 800bfae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	3302      	adds	r3, #2
 800bfb4:	222f      	movs	r2, #47	; 0x2f
 800bfb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	3303      	adds	r3, #3
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bfc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	371c      	adds	r7, #28
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
 800bfd2:	bf00      	nop
 800bfd4:	20000840 	.word	0x20000840

0800bfd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	6839      	ldr	r1, [r7, #0]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff ffaa 	bl	800bf40 <FATFS_LinkDriverEx>
 800bfec:	4603      	mov	r3, r0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
	...

0800bff8 <std>:
 800bff8:	2300      	movs	r3, #0
 800bffa:	b510      	push	{r4, lr}
 800bffc:	4604      	mov	r4, r0
 800bffe:	e9c0 3300 	strd	r3, r3, [r0]
 800c002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c006:	6083      	str	r3, [r0, #8]
 800c008:	8181      	strh	r1, [r0, #12]
 800c00a:	6643      	str	r3, [r0, #100]	; 0x64
 800c00c:	81c2      	strh	r2, [r0, #14]
 800c00e:	6183      	str	r3, [r0, #24]
 800c010:	4619      	mov	r1, r3
 800c012:	2208      	movs	r2, #8
 800c014:	305c      	adds	r0, #92	; 0x5c
 800c016:	f000 f9f7 	bl	800c408 <memset>
 800c01a:	4b0d      	ldr	r3, [pc, #52]	; (800c050 <std+0x58>)
 800c01c:	6263      	str	r3, [r4, #36]	; 0x24
 800c01e:	4b0d      	ldr	r3, [pc, #52]	; (800c054 <std+0x5c>)
 800c020:	62a3      	str	r3, [r4, #40]	; 0x28
 800c022:	4b0d      	ldr	r3, [pc, #52]	; (800c058 <std+0x60>)
 800c024:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c026:	4b0d      	ldr	r3, [pc, #52]	; (800c05c <std+0x64>)
 800c028:	6323      	str	r3, [r4, #48]	; 0x30
 800c02a:	4b0d      	ldr	r3, [pc, #52]	; (800c060 <std+0x68>)
 800c02c:	6224      	str	r4, [r4, #32]
 800c02e:	429c      	cmp	r4, r3
 800c030:	d006      	beq.n	800c040 <std+0x48>
 800c032:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c036:	4294      	cmp	r4, r2
 800c038:	d002      	beq.n	800c040 <std+0x48>
 800c03a:	33d0      	adds	r3, #208	; 0xd0
 800c03c:	429c      	cmp	r4, r3
 800c03e:	d105      	bne.n	800c04c <std+0x54>
 800c040:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c048:	f000 ba66 	b.w	800c518 <__retarget_lock_init_recursive>
 800c04c:	bd10      	pop	{r4, pc}
 800c04e:	bf00      	nop
 800c050:	0800c259 	.word	0x0800c259
 800c054:	0800c27b 	.word	0x0800c27b
 800c058:	0800c2b3 	.word	0x0800c2b3
 800c05c:	0800c2d7 	.word	0x0800c2d7
 800c060:	2000084c 	.word	0x2000084c

0800c064 <stdio_exit_handler>:
 800c064:	4a02      	ldr	r2, [pc, #8]	; (800c070 <stdio_exit_handler+0xc>)
 800c066:	4903      	ldr	r1, [pc, #12]	; (800c074 <stdio_exit_handler+0x10>)
 800c068:	4803      	ldr	r0, [pc, #12]	; (800c078 <stdio_exit_handler+0x14>)
 800c06a:	f000 b869 	b.w	800c140 <_fwalk_sglue>
 800c06e:	bf00      	nop
 800c070:	20000040 	.word	0x20000040
 800c074:	0800cdc5 	.word	0x0800cdc5
 800c078:	2000004c 	.word	0x2000004c

0800c07c <cleanup_stdio>:
 800c07c:	6841      	ldr	r1, [r0, #4]
 800c07e:	4b0c      	ldr	r3, [pc, #48]	; (800c0b0 <cleanup_stdio+0x34>)
 800c080:	4299      	cmp	r1, r3
 800c082:	b510      	push	{r4, lr}
 800c084:	4604      	mov	r4, r0
 800c086:	d001      	beq.n	800c08c <cleanup_stdio+0x10>
 800c088:	f000 fe9c 	bl	800cdc4 <_fflush_r>
 800c08c:	68a1      	ldr	r1, [r4, #8]
 800c08e:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <cleanup_stdio+0x38>)
 800c090:	4299      	cmp	r1, r3
 800c092:	d002      	beq.n	800c09a <cleanup_stdio+0x1e>
 800c094:	4620      	mov	r0, r4
 800c096:	f000 fe95 	bl	800cdc4 <_fflush_r>
 800c09a:	68e1      	ldr	r1, [r4, #12]
 800c09c:	4b06      	ldr	r3, [pc, #24]	; (800c0b8 <cleanup_stdio+0x3c>)
 800c09e:	4299      	cmp	r1, r3
 800c0a0:	d004      	beq.n	800c0ac <cleanup_stdio+0x30>
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0a8:	f000 be8c 	b.w	800cdc4 <_fflush_r>
 800c0ac:	bd10      	pop	{r4, pc}
 800c0ae:	bf00      	nop
 800c0b0:	2000084c 	.word	0x2000084c
 800c0b4:	200008b4 	.word	0x200008b4
 800c0b8:	2000091c 	.word	0x2000091c

0800c0bc <global_stdio_init.part.0>:
 800c0bc:	b510      	push	{r4, lr}
 800c0be:	4b0b      	ldr	r3, [pc, #44]	; (800c0ec <global_stdio_init.part.0+0x30>)
 800c0c0:	4c0b      	ldr	r4, [pc, #44]	; (800c0f0 <global_stdio_init.part.0+0x34>)
 800c0c2:	4a0c      	ldr	r2, [pc, #48]	; (800c0f4 <global_stdio_init.part.0+0x38>)
 800c0c4:	601a      	str	r2, [r3, #0]
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	2104      	movs	r1, #4
 800c0cc:	f7ff ff94 	bl	800bff8 <std>
 800c0d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	2109      	movs	r1, #9
 800c0d8:	f7ff ff8e 	bl	800bff8 <std>
 800c0dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c0e0:	2202      	movs	r2, #2
 800c0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0e6:	2112      	movs	r1, #18
 800c0e8:	f7ff bf86 	b.w	800bff8 <std>
 800c0ec:	20000984 	.word	0x20000984
 800c0f0:	2000084c 	.word	0x2000084c
 800c0f4:	0800c065 	.word	0x0800c065

0800c0f8 <__sfp_lock_acquire>:
 800c0f8:	4801      	ldr	r0, [pc, #4]	; (800c100 <__sfp_lock_acquire+0x8>)
 800c0fa:	f000 ba0e 	b.w	800c51a <__retarget_lock_acquire_recursive>
 800c0fe:	bf00      	nop
 800c100:	2000098d 	.word	0x2000098d

0800c104 <__sfp_lock_release>:
 800c104:	4801      	ldr	r0, [pc, #4]	; (800c10c <__sfp_lock_release+0x8>)
 800c106:	f000 ba09 	b.w	800c51c <__retarget_lock_release_recursive>
 800c10a:	bf00      	nop
 800c10c:	2000098d 	.word	0x2000098d

0800c110 <__sinit>:
 800c110:	b510      	push	{r4, lr}
 800c112:	4604      	mov	r4, r0
 800c114:	f7ff fff0 	bl	800c0f8 <__sfp_lock_acquire>
 800c118:	6a23      	ldr	r3, [r4, #32]
 800c11a:	b11b      	cbz	r3, 800c124 <__sinit+0x14>
 800c11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c120:	f7ff bff0 	b.w	800c104 <__sfp_lock_release>
 800c124:	4b04      	ldr	r3, [pc, #16]	; (800c138 <__sinit+0x28>)
 800c126:	6223      	str	r3, [r4, #32]
 800c128:	4b04      	ldr	r3, [pc, #16]	; (800c13c <__sinit+0x2c>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d1f5      	bne.n	800c11c <__sinit+0xc>
 800c130:	f7ff ffc4 	bl	800c0bc <global_stdio_init.part.0>
 800c134:	e7f2      	b.n	800c11c <__sinit+0xc>
 800c136:	bf00      	nop
 800c138:	0800c07d 	.word	0x0800c07d
 800c13c:	20000984 	.word	0x20000984

0800c140 <_fwalk_sglue>:
 800c140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c144:	4607      	mov	r7, r0
 800c146:	4688      	mov	r8, r1
 800c148:	4614      	mov	r4, r2
 800c14a:	2600      	movs	r6, #0
 800c14c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c150:	f1b9 0901 	subs.w	r9, r9, #1
 800c154:	d505      	bpl.n	800c162 <_fwalk_sglue+0x22>
 800c156:	6824      	ldr	r4, [r4, #0]
 800c158:	2c00      	cmp	r4, #0
 800c15a:	d1f7      	bne.n	800c14c <_fwalk_sglue+0xc>
 800c15c:	4630      	mov	r0, r6
 800c15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c162:	89ab      	ldrh	r3, [r5, #12]
 800c164:	2b01      	cmp	r3, #1
 800c166:	d907      	bls.n	800c178 <_fwalk_sglue+0x38>
 800c168:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c16c:	3301      	adds	r3, #1
 800c16e:	d003      	beq.n	800c178 <_fwalk_sglue+0x38>
 800c170:	4629      	mov	r1, r5
 800c172:	4638      	mov	r0, r7
 800c174:	47c0      	blx	r8
 800c176:	4306      	orrs	r6, r0
 800c178:	3568      	adds	r5, #104	; 0x68
 800c17a:	e7e9      	b.n	800c150 <_fwalk_sglue+0x10>

0800c17c <iprintf>:
 800c17c:	b40f      	push	{r0, r1, r2, r3}
 800c17e:	b507      	push	{r0, r1, r2, lr}
 800c180:	4906      	ldr	r1, [pc, #24]	; (800c19c <iprintf+0x20>)
 800c182:	ab04      	add	r3, sp, #16
 800c184:	6808      	ldr	r0, [r1, #0]
 800c186:	f853 2b04 	ldr.w	r2, [r3], #4
 800c18a:	6881      	ldr	r1, [r0, #8]
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	f000 fae9 	bl	800c764 <_vfiprintf_r>
 800c192:	b003      	add	sp, #12
 800c194:	f85d eb04 	ldr.w	lr, [sp], #4
 800c198:	b004      	add	sp, #16
 800c19a:	4770      	bx	lr
 800c19c:	20000098 	.word	0x20000098

0800c1a0 <_puts_r>:
 800c1a0:	6a03      	ldr	r3, [r0, #32]
 800c1a2:	b570      	push	{r4, r5, r6, lr}
 800c1a4:	6884      	ldr	r4, [r0, #8]
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	460e      	mov	r6, r1
 800c1aa:	b90b      	cbnz	r3, 800c1b0 <_puts_r+0x10>
 800c1ac:	f7ff ffb0 	bl	800c110 <__sinit>
 800c1b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1b2:	07db      	lsls	r3, r3, #31
 800c1b4:	d405      	bmi.n	800c1c2 <_puts_r+0x22>
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	0598      	lsls	r0, r3, #22
 800c1ba:	d402      	bmi.n	800c1c2 <_puts_r+0x22>
 800c1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1be:	f000 f9ac 	bl	800c51a <__retarget_lock_acquire_recursive>
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	0719      	lsls	r1, r3, #28
 800c1c6:	d513      	bpl.n	800c1f0 <_puts_r+0x50>
 800c1c8:	6923      	ldr	r3, [r4, #16]
 800c1ca:	b18b      	cbz	r3, 800c1f0 <_puts_r+0x50>
 800c1cc:	3e01      	subs	r6, #1
 800c1ce:	68a3      	ldr	r3, [r4, #8]
 800c1d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	60a3      	str	r3, [r4, #8]
 800c1d8:	b9e9      	cbnz	r1, 800c216 <_puts_r+0x76>
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	da2e      	bge.n	800c23c <_puts_r+0x9c>
 800c1de:	4622      	mov	r2, r4
 800c1e0:	210a      	movs	r1, #10
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f000 f87b 	bl	800c2de <__swbuf_r>
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	d007      	beq.n	800c1fc <_puts_r+0x5c>
 800c1ec:	250a      	movs	r5, #10
 800c1ee:	e007      	b.n	800c200 <_puts_r+0x60>
 800c1f0:	4621      	mov	r1, r4
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	f000 f8b0 	bl	800c358 <__swsetup_r>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d0e7      	beq.n	800c1cc <_puts_r+0x2c>
 800c1fc:	f04f 35ff 	mov.w	r5, #4294967295
 800c200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c202:	07da      	lsls	r2, r3, #31
 800c204:	d405      	bmi.n	800c212 <_puts_r+0x72>
 800c206:	89a3      	ldrh	r3, [r4, #12]
 800c208:	059b      	lsls	r3, r3, #22
 800c20a:	d402      	bmi.n	800c212 <_puts_r+0x72>
 800c20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c20e:	f000 f985 	bl	800c51c <__retarget_lock_release_recursive>
 800c212:	4628      	mov	r0, r5
 800c214:	bd70      	pop	{r4, r5, r6, pc}
 800c216:	2b00      	cmp	r3, #0
 800c218:	da04      	bge.n	800c224 <_puts_r+0x84>
 800c21a:	69a2      	ldr	r2, [r4, #24]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	dc06      	bgt.n	800c22e <_puts_r+0x8e>
 800c220:	290a      	cmp	r1, #10
 800c222:	d004      	beq.n	800c22e <_puts_r+0x8e>
 800c224:	6823      	ldr	r3, [r4, #0]
 800c226:	1c5a      	adds	r2, r3, #1
 800c228:	6022      	str	r2, [r4, #0]
 800c22a:	7019      	strb	r1, [r3, #0]
 800c22c:	e7cf      	b.n	800c1ce <_puts_r+0x2e>
 800c22e:	4622      	mov	r2, r4
 800c230:	4628      	mov	r0, r5
 800c232:	f000 f854 	bl	800c2de <__swbuf_r>
 800c236:	3001      	adds	r0, #1
 800c238:	d1c9      	bne.n	800c1ce <_puts_r+0x2e>
 800c23a:	e7df      	b.n	800c1fc <_puts_r+0x5c>
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	250a      	movs	r5, #10
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	6022      	str	r2, [r4, #0]
 800c244:	701d      	strb	r5, [r3, #0]
 800c246:	e7db      	b.n	800c200 <_puts_r+0x60>

0800c248 <puts>:
 800c248:	4b02      	ldr	r3, [pc, #8]	; (800c254 <puts+0xc>)
 800c24a:	4601      	mov	r1, r0
 800c24c:	6818      	ldr	r0, [r3, #0]
 800c24e:	f7ff bfa7 	b.w	800c1a0 <_puts_r>
 800c252:	bf00      	nop
 800c254:	20000098 	.word	0x20000098

0800c258 <__sread>:
 800c258:	b510      	push	{r4, lr}
 800c25a:	460c      	mov	r4, r1
 800c25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c260:	f000 f90c 	bl	800c47c <_read_r>
 800c264:	2800      	cmp	r0, #0
 800c266:	bfab      	itete	ge
 800c268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c26a:	89a3      	ldrhlt	r3, [r4, #12]
 800c26c:	181b      	addge	r3, r3, r0
 800c26e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c272:	bfac      	ite	ge
 800c274:	6563      	strge	r3, [r4, #84]	; 0x54
 800c276:	81a3      	strhlt	r3, [r4, #12]
 800c278:	bd10      	pop	{r4, pc}

0800c27a <__swrite>:
 800c27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c27e:	461f      	mov	r7, r3
 800c280:	898b      	ldrh	r3, [r1, #12]
 800c282:	05db      	lsls	r3, r3, #23
 800c284:	4605      	mov	r5, r0
 800c286:	460c      	mov	r4, r1
 800c288:	4616      	mov	r6, r2
 800c28a:	d505      	bpl.n	800c298 <__swrite+0x1e>
 800c28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c290:	2302      	movs	r3, #2
 800c292:	2200      	movs	r2, #0
 800c294:	f000 f8e0 	bl	800c458 <_lseek_r>
 800c298:	89a3      	ldrh	r3, [r4, #12]
 800c29a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c29e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2a2:	81a3      	strh	r3, [r4, #12]
 800c2a4:	4632      	mov	r2, r6
 800c2a6:	463b      	mov	r3, r7
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ae:	f000 b8f7 	b.w	800c4a0 <_write_r>

0800c2b2 <__sseek>:
 800c2b2:	b510      	push	{r4, lr}
 800c2b4:	460c      	mov	r4, r1
 800c2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ba:	f000 f8cd 	bl	800c458 <_lseek_r>
 800c2be:	1c43      	adds	r3, r0, #1
 800c2c0:	89a3      	ldrh	r3, [r4, #12]
 800c2c2:	bf15      	itete	ne
 800c2c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2ce:	81a3      	strheq	r3, [r4, #12]
 800c2d0:	bf18      	it	ne
 800c2d2:	81a3      	strhne	r3, [r4, #12]
 800c2d4:	bd10      	pop	{r4, pc}

0800c2d6 <__sclose>:
 800c2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2da:	f000 b8ad 	b.w	800c438 <_close_r>

0800c2de <__swbuf_r>:
 800c2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e0:	460e      	mov	r6, r1
 800c2e2:	4614      	mov	r4, r2
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	b118      	cbz	r0, 800c2f0 <__swbuf_r+0x12>
 800c2e8:	6a03      	ldr	r3, [r0, #32]
 800c2ea:	b90b      	cbnz	r3, 800c2f0 <__swbuf_r+0x12>
 800c2ec:	f7ff ff10 	bl	800c110 <__sinit>
 800c2f0:	69a3      	ldr	r3, [r4, #24]
 800c2f2:	60a3      	str	r3, [r4, #8]
 800c2f4:	89a3      	ldrh	r3, [r4, #12]
 800c2f6:	071a      	lsls	r2, r3, #28
 800c2f8:	d525      	bpl.n	800c346 <__swbuf_r+0x68>
 800c2fa:	6923      	ldr	r3, [r4, #16]
 800c2fc:	b31b      	cbz	r3, 800c346 <__swbuf_r+0x68>
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	6922      	ldr	r2, [r4, #16]
 800c302:	1a98      	subs	r0, r3, r2
 800c304:	6963      	ldr	r3, [r4, #20]
 800c306:	b2f6      	uxtb	r6, r6
 800c308:	4283      	cmp	r3, r0
 800c30a:	4637      	mov	r7, r6
 800c30c:	dc04      	bgt.n	800c318 <__swbuf_r+0x3a>
 800c30e:	4621      	mov	r1, r4
 800c310:	4628      	mov	r0, r5
 800c312:	f000 fd57 	bl	800cdc4 <_fflush_r>
 800c316:	b9e0      	cbnz	r0, 800c352 <__swbuf_r+0x74>
 800c318:	68a3      	ldr	r3, [r4, #8]
 800c31a:	3b01      	subs	r3, #1
 800c31c:	60a3      	str	r3, [r4, #8]
 800c31e:	6823      	ldr	r3, [r4, #0]
 800c320:	1c5a      	adds	r2, r3, #1
 800c322:	6022      	str	r2, [r4, #0]
 800c324:	701e      	strb	r6, [r3, #0]
 800c326:	6962      	ldr	r2, [r4, #20]
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d004      	beq.n	800c338 <__swbuf_r+0x5a>
 800c32e:	89a3      	ldrh	r3, [r4, #12]
 800c330:	07db      	lsls	r3, r3, #31
 800c332:	d506      	bpl.n	800c342 <__swbuf_r+0x64>
 800c334:	2e0a      	cmp	r6, #10
 800c336:	d104      	bne.n	800c342 <__swbuf_r+0x64>
 800c338:	4621      	mov	r1, r4
 800c33a:	4628      	mov	r0, r5
 800c33c:	f000 fd42 	bl	800cdc4 <_fflush_r>
 800c340:	b938      	cbnz	r0, 800c352 <__swbuf_r+0x74>
 800c342:	4638      	mov	r0, r7
 800c344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c346:	4621      	mov	r1, r4
 800c348:	4628      	mov	r0, r5
 800c34a:	f000 f805 	bl	800c358 <__swsetup_r>
 800c34e:	2800      	cmp	r0, #0
 800c350:	d0d5      	beq.n	800c2fe <__swbuf_r+0x20>
 800c352:	f04f 37ff 	mov.w	r7, #4294967295
 800c356:	e7f4      	b.n	800c342 <__swbuf_r+0x64>

0800c358 <__swsetup_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	4b2a      	ldr	r3, [pc, #168]	; (800c404 <__swsetup_r+0xac>)
 800c35c:	4605      	mov	r5, r0
 800c35e:	6818      	ldr	r0, [r3, #0]
 800c360:	460c      	mov	r4, r1
 800c362:	b118      	cbz	r0, 800c36c <__swsetup_r+0x14>
 800c364:	6a03      	ldr	r3, [r0, #32]
 800c366:	b90b      	cbnz	r3, 800c36c <__swsetup_r+0x14>
 800c368:	f7ff fed2 	bl	800c110 <__sinit>
 800c36c:	89a3      	ldrh	r3, [r4, #12]
 800c36e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c372:	0718      	lsls	r0, r3, #28
 800c374:	d422      	bmi.n	800c3bc <__swsetup_r+0x64>
 800c376:	06d9      	lsls	r1, r3, #27
 800c378:	d407      	bmi.n	800c38a <__swsetup_r+0x32>
 800c37a:	2309      	movs	r3, #9
 800c37c:	602b      	str	r3, [r5, #0]
 800c37e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c382:	81a3      	strh	r3, [r4, #12]
 800c384:	f04f 30ff 	mov.w	r0, #4294967295
 800c388:	e034      	b.n	800c3f4 <__swsetup_r+0x9c>
 800c38a:	0758      	lsls	r0, r3, #29
 800c38c:	d512      	bpl.n	800c3b4 <__swsetup_r+0x5c>
 800c38e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c390:	b141      	cbz	r1, 800c3a4 <__swsetup_r+0x4c>
 800c392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c396:	4299      	cmp	r1, r3
 800c398:	d002      	beq.n	800c3a0 <__swsetup_r+0x48>
 800c39a:	4628      	mov	r0, r5
 800c39c:	f000 f8c0 	bl	800c520 <_free_r>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	6363      	str	r3, [r4, #52]	; 0x34
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3aa:	81a3      	strh	r3, [r4, #12]
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	6063      	str	r3, [r4, #4]
 800c3b0:	6923      	ldr	r3, [r4, #16]
 800c3b2:	6023      	str	r3, [r4, #0]
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	f043 0308 	orr.w	r3, r3, #8
 800c3ba:	81a3      	strh	r3, [r4, #12]
 800c3bc:	6923      	ldr	r3, [r4, #16]
 800c3be:	b94b      	cbnz	r3, 800c3d4 <__swsetup_r+0x7c>
 800c3c0:	89a3      	ldrh	r3, [r4, #12]
 800c3c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3ca:	d003      	beq.n	800c3d4 <__swsetup_r+0x7c>
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	f000 fd46 	bl	800ce60 <__smakebuf_r>
 800c3d4:	89a0      	ldrh	r0, [r4, #12]
 800c3d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3da:	f010 0301 	ands.w	r3, r0, #1
 800c3de:	d00a      	beq.n	800c3f6 <__swsetup_r+0x9e>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	60a3      	str	r3, [r4, #8]
 800c3e4:	6963      	ldr	r3, [r4, #20]
 800c3e6:	425b      	negs	r3, r3
 800c3e8:	61a3      	str	r3, [r4, #24]
 800c3ea:	6923      	ldr	r3, [r4, #16]
 800c3ec:	b943      	cbnz	r3, 800c400 <__swsetup_r+0xa8>
 800c3ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3f2:	d1c4      	bne.n	800c37e <__swsetup_r+0x26>
 800c3f4:	bd38      	pop	{r3, r4, r5, pc}
 800c3f6:	0781      	lsls	r1, r0, #30
 800c3f8:	bf58      	it	pl
 800c3fa:	6963      	ldrpl	r3, [r4, #20]
 800c3fc:	60a3      	str	r3, [r4, #8]
 800c3fe:	e7f4      	b.n	800c3ea <__swsetup_r+0x92>
 800c400:	2000      	movs	r0, #0
 800c402:	e7f7      	b.n	800c3f4 <__swsetup_r+0x9c>
 800c404:	20000098 	.word	0x20000098

0800c408 <memset>:
 800c408:	4402      	add	r2, r0
 800c40a:	4603      	mov	r3, r0
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d100      	bne.n	800c412 <memset+0xa>
 800c410:	4770      	bx	lr
 800c412:	f803 1b01 	strb.w	r1, [r3], #1
 800c416:	e7f9      	b.n	800c40c <memset+0x4>

0800c418 <strcat>:
 800c418:	b510      	push	{r4, lr}
 800c41a:	4602      	mov	r2, r0
 800c41c:	7814      	ldrb	r4, [r2, #0]
 800c41e:	4613      	mov	r3, r2
 800c420:	3201      	adds	r2, #1
 800c422:	2c00      	cmp	r4, #0
 800c424:	d1fa      	bne.n	800c41c <strcat+0x4>
 800c426:	3b01      	subs	r3, #1
 800c428:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c42c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c430:	2a00      	cmp	r2, #0
 800c432:	d1f9      	bne.n	800c428 <strcat+0x10>
 800c434:	bd10      	pop	{r4, pc}
	...

0800c438 <_close_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	4d06      	ldr	r5, [pc, #24]	; (800c454 <_close_r+0x1c>)
 800c43c:	2300      	movs	r3, #0
 800c43e:	4604      	mov	r4, r0
 800c440:	4608      	mov	r0, r1
 800c442:	602b      	str	r3, [r5, #0]
 800c444:	f7f7 f86f 	bl	8003526 <_close>
 800c448:	1c43      	adds	r3, r0, #1
 800c44a:	d102      	bne.n	800c452 <_close_r+0x1a>
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	b103      	cbz	r3, 800c452 <_close_r+0x1a>
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	20000988 	.word	0x20000988

0800c458 <_lseek_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4d07      	ldr	r5, [pc, #28]	; (800c478 <_lseek_r+0x20>)
 800c45c:	4604      	mov	r4, r0
 800c45e:	4608      	mov	r0, r1
 800c460:	4611      	mov	r1, r2
 800c462:	2200      	movs	r2, #0
 800c464:	602a      	str	r2, [r5, #0]
 800c466:	461a      	mov	r2, r3
 800c468:	f7f7 f884 	bl	8003574 <_lseek>
 800c46c:	1c43      	adds	r3, r0, #1
 800c46e:	d102      	bne.n	800c476 <_lseek_r+0x1e>
 800c470:	682b      	ldr	r3, [r5, #0]
 800c472:	b103      	cbz	r3, 800c476 <_lseek_r+0x1e>
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	bd38      	pop	{r3, r4, r5, pc}
 800c478:	20000988 	.word	0x20000988

0800c47c <_read_r>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	4d07      	ldr	r5, [pc, #28]	; (800c49c <_read_r+0x20>)
 800c480:	4604      	mov	r4, r0
 800c482:	4608      	mov	r0, r1
 800c484:	4611      	mov	r1, r2
 800c486:	2200      	movs	r2, #0
 800c488:	602a      	str	r2, [r5, #0]
 800c48a:	461a      	mov	r2, r3
 800c48c:	f7f7 f812 	bl	80034b4 <_read>
 800c490:	1c43      	adds	r3, r0, #1
 800c492:	d102      	bne.n	800c49a <_read_r+0x1e>
 800c494:	682b      	ldr	r3, [r5, #0]
 800c496:	b103      	cbz	r3, 800c49a <_read_r+0x1e>
 800c498:	6023      	str	r3, [r4, #0]
 800c49a:	bd38      	pop	{r3, r4, r5, pc}
 800c49c:	20000988 	.word	0x20000988

0800c4a0 <_write_r>:
 800c4a0:	b538      	push	{r3, r4, r5, lr}
 800c4a2:	4d07      	ldr	r5, [pc, #28]	; (800c4c0 <_write_r+0x20>)
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	4608      	mov	r0, r1
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	602a      	str	r2, [r5, #0]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	f7f7 f81d 	bl	80034ee <_write>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	d102      	bne.n	800c4be <_write_r+0x1e>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	b103      	cbz	r3, 800c4be <_write_r+0x1e>
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	20000988 	.word	0x20000988

0800c4c4 <__errno>:
 800c4c4:	4b01      	ldr	r3, [pc, #4]	; (800c4cc <__errno+0x8>)
 800c4c6:	6818      	ldr	r0, [r3, #0]
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	20000098 	.word	0x20000098

0800c4d0 <__libc_init_array>:
 800c4d0:	b570      	push	{r4, r5, r6, lr}
 800c4d2:	4d0d      	ldr	r5, [pc, #52]	; (800c508 <__libc_init_array+0x38>)
 800c4d4:	4c0d      	ldr	r4, [pc, #52]	; (800c50c <__libc_init_array+0x3c>)
 800c4d6:	1b64      	subs	r4, r4, r5
 800c4d8:	10a4      	asrs	r4, r4, #2
 800c4da:	2600      	movs	r6, #0
 800c4dc:	42a6      	cmp	r6, r4
 800c4de:	d109      	bne.n	800c4f4 <__libc_init_array+0x24>
 800c4e0:	4d0b      	ldr	r5, [pc, #44]	; (800c510 <__libc_init_array+0x40>)
 800c4e2:	4c0c      	ldr	r4, [pc, #48]	; (800c514 <__libc_init_array+0x44>)
 800c4e4:	f000 fd2a 	bl	800cf3c <_init>
 800c4e8:	1b64      	subs	r4, r4, r5
 800c4ea:	10a4      	asrs	r4, r4, #2
 800c4ec:	2600      	movs	r6, #0
 800c4ee:	42a6      	cmp	r6, r4
 800c4f0:	d105      	bne.n	800c4fe <__libc_init_array+0x2e>
 800c4f2:	bd70      	pop	{r4, r5, r6, pc}
 800c4f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f8:	4798      	blx	r3
 800c4fa:	3601      	adds	r6, #1
 800c4fc:	e7ee      	b.n	800c4dc <__libc_init_array+0xc>
 800c4fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800c502:	4798      	blx	r3
 800c504:	3601      	adds	r6, #1
 800c506:	e7f2      	b.n	800c4ee <__libc_init_array+0x1e>
 800c508:	0800df9c 	.word	0x0800df9c
 800c50c:	0800df9c 	.word	0x0800df9c
 800c510:	0800df9c 	.word	0x0800df9c
 800c514:	0800dfa0 	.word	0x0800dfa0

0800c518 <__retarget_lock_init_recursive>:
 800c518:	4770      	bx	lr

0800c51a <__retarget_lock_acquire_recursive>:
 800c51a:	4770      	bx	lr

0800c51c <__retarget_lock_release_recursive>:
 800c51c:	4770      	bx	lr
	...

0800c520 <_free_r>:
 800c520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c522:	2900      	cmp	r1, #0
 800c524:	d044      	beq.n	800c5b0 <_free_r+0x90>
 800c526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c52a:	9001      	str	r0, [sp, #4]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f1a1 0404 	sub.w	r4, r1, #4
 800c532:	bfb8      	it	lt
 800c534:	18e4      	addlt	r4, r4, r3
 800c536:	f000 f8df 	bl	800c6f8 <__malloc_lock>
 800c53a:	4a1e      	ldr	r2, [pc, #120]	; (800c5b4 <_free_r+0x94>)
 800c53c:	9801      	ldr	r0, [sp, #4]
 800c53e:	6813      	ldr	r3, [r2, #0]
 800c540:	b933      	cbnz	r3, 800c550 <_free_r+0x30>
 800c542:	6063      	str	r3, [r4, #4]
 800c544:	6014      	str	r4, [r2, #0]
 800c546:	b003      	add	sp, #12
 800c548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c54c:	f000 b8da 	b.w	800c704 <__malloc_unlock>
 800c550:	42a3      	cmp	r3, r4
 800c552:	d908      	bls.n	800c566 <_free_r+0x46>
 800c554:	6825      	ldr	r5, [r4, #0]
 800c556:	1961      	adds	r1, r4, r5
 800c558:	428b      	cmp	r3, r1
 800c55a:	bf01      	itttt	eq
 800c55c:	6819      	ldreq	r1, [r3, #0]
 800c55e:	685b      	ldreq	r3, [r3, #4]
 800c560:	1949      	addeq	r1, r1, r5
 800c562:	6021      	streq	r1, [r4, #0]
 800c564:	e7ed      	b.n	800c542 <_free_r+0x22>
 800c566:	461a      	mov	r2, r3
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	b10b      	cbz	r3, 800c570 <_free_r+0x50>
 800c56c:	42a3      	cmp	r3, r4
 800c56e:	d9fa      	bls.n	800c566 <_free_r+0x46>
 800c570:	6811      	ldr	r1, [r2, #0]
 800c572:	1855      	adds	r5, r2, r1
 800c574:	42a5      	cmp	r5, r4
 800c576:	d10b      	bne.n	800c590 <_free_r+0x70>
 800c578:	6824      	ldr	r4, [r4, #0]
 800c57a:	4421      	add	r1, r4
 800c57c:	1854      	adds	r4, r2, r1
 800c57e:	42a3      	cmp	r3, r4
 800c580:	6011      	str	r1, [r2, #0]
 800c582:	d1e0      	bne.n	800c546 <_free_r+0x26>
 800c584:	681c      	ldr	r4, [r3, #0]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	6053      	str	r3, [r2, #4]
 800c58a:	440c      	add	r4, r1
 800c58c:	6014      	str	r4, [r2, #0]
 800c58e:	e7da      	b.n	800c546 <_free_r+0x26>
 800c590:	d902      	bls.n	800c598 <_free_r+0x78>
 800c592:	230c      	movs	r3, #12
 800c594:	6003      	str	r3, [r0, #0]
 800c596:	e7d6      	b.n	800c546 <_free_r+0x26>
 800c598:	6825      	ldr	r5, [r4, #0]
 800c59a:	1961      	adds	r1, r4, r5
 800c59c:	428b      	cmp	r3, r1
 800c59e:	bf04      	itt	eq
 800c5a0:	6819      	ldreq	r1, [r3, #0]
 800c5a2:	685b      	ldreq	r3, [r3, #4]
 800c5a4:	6063      	str	r3, [r4, #4]
 800c5a6:	bf04      	itt	eq
 800c5a8:	1949      	addeq	r1, r1, r5
 800c5aa:	6021      	streq	r1, [r4, #0]
 800c5ac:	6054      	str	r4, [r2, #4]
 800c5ae:	e7ca      	b.n	800c546 <_free_r+0x26>
 800c5b0:	b003      	add	sp, #12
 800c5b2:	bd30      	pop	{r4, r5, pc}
 800c5b4:	20000990 	.word	0x20000990

0800c5b8 <sbrk_aligned>:
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	4e0e      	ldr	r6, [pc, #56]	; (800c5f4 <sbrk_aligned+0x3c>)
 800c5bc:	460c      	mov	r4, r1
 800c5be:	6831      	ldr	r1, [r6, #0]
 800c5c0:	4605      	mov	r5, r0
 800c5c2:	b911      	cbnz	r1, 800c5ca <sbrk_aligned+0x12>
 800c5c4:	f000 fcaa 	bl	800cf1c <_sbrk_r>
 800c5c8:	6030      	str	r0, [r6, #0]
 800c5ca:	4621      	mov	r1, r4
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	f000 fca5 	bl	800cf1c <_sbrk_r>
 800c5d2:	1c43      	adds	r3, r0, #1
 800c5d4:	d00a      	beq.n	800c5ec <sbrk_aligned+0x34>
 800c5d6:	1cc4      	adds	r4, r0, #3
 800c5d8:	f024 0403 	bic.w	r4, r4, #3
 800c5dc:	42a0      	cmp	r0, r4
 800c5de:	d007      	beq.n	800c5f0 <sbrk_aligned+0x38>
 800c5e0:	1a21      	subs	r1, r4, r0
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	f000 fc9a 	bl	800cf1c <_sbrk_r>
 800c5e8:	3001      	adds	r0, #1
 800c5ea:	d101      	bne.n	800c5f0 <sbrk_aligned+0x38>
 800c5ec:	f04f 34ff 	mov.w	r4, #4294967295
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
 800c5f4:	20000994 	.word	0x20000994

0800c5f8 <_malloc_r>:
 800c5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5fc:	1ccd      	adds	r5, r1, #3
 800c5fe:	f025 0503 	bic.w	r5, r5, #3
 800c602:	3508      	adds	r5, #8
 800c604:	2d0c      	cmp	r5, #12
 800c606:	bf38      	it	cc
 800c608:	250c      	movcc	r5, #12
 800c60a:	2d00      	cmp	r5, #0
 800c60c:	4607      	mov	r7, r0
 800c60e:	db01      	blt.n	800c614 <_malloc_r+0x1c>
 800c610:	42a9      	cmp	r1, r5
 800c612:	d905      	bls.n	800c620 <_malloc_r+0x28>
 800c614:	230c      	movs	r3, #12
 800c616:	603b      	str	r3, [r7, #0]
 800c618:	2600      	movs	r6, #0
 800c61a:	4630      	mov	r0, r6
 800c61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c620:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6f4 <_malloc_r+0xfc>
 800c624:	f000 f868 	bl	800c6f8 <__malloc_lock>
 800c628:	f8d8 3000 	ldr.w	r3, [r8]
 800c62c:	461c      	mov	r4, r3
 800c62e:	bb5c      	cbnz	r4, 800c688 <_malloc_r+0x90>
 800c630:	4629      	mov	r1, r5
 800c632:	4638      	mov	r0, r7
 800c634:	f7ff ffc0 	bl	800c5b8 <sbrk_aligned>
 800c638:	1c43      	adds	r3, r0, #1
 800c63a:	4604      	mov	r4, r0
 800c63c:	d155      	bne.n	800c6ea <_malloc_r+0xf2>
 800c63e:	f8d8 4000 	ldr.w	r4, [r8]
 800c642:	4626      	mov	r6, r4
 800c644:	2e00      	cmp	r6, #0
 800c646:	d145      	bne.n	800c6d4 <_malloc_r+0xdc>
 800c648:	2c00      	cmp	r4, #0
 800c64a:	d048      	beq.n	800c6de <_malloc_r+0xe6>
 800c64c:	6823      	ldr	r3, [r4, #0]
 800c64e:	4631      	mov	r1, r6
 800c650:	4638      	mov	r0, r7
 800c652:	eb04 0903 	add.w	r9, r4, r3
 800c656:	f000 fc61 	bl	800cf1c <_sbrk_r>
 800c65a:	4581      	cmp	r9, r0
 800c65c:	d13f      	bne.n	800c6de <_malloc_r+0xe6>
 800c65e:	6821      	ldr	r1, [r4, #0]
 800c660:	1a6d      	subs	r5, r5, r1
 800c662:	4629      	mov	r1, r5
 800c664:	4638      	mov	r0, r7
 800c666:	f7ff ffa7 	bl	800c5b8 <sbrk_aligned>
 800c66a:	3001      	adds	r0, #1
 800c66c:	d037      	beq.n	800c6de <_malloc_r+0xe6>
 800c66e:	6823      	ldr	r3, [r4, #0]
 800c670:	442b      	add	r3, r5
 800c672:	6023      	str	r3, [r4, #0]
 800c674:	f8d8 3000 	ldr.w	r3, [r8]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d038      	beq.n	800c6ee <_malloc_r+0xf6>
 800c67c:	685a      	ldr	r2, [r3, #4]
 800c67e:	42a2      	cmp	r2, r4
 800c680:	d12b      	bne.n	800c6da <_malloc_r+0xe2>
 800c682:	2200      	movs	r2, #0
 800c684:	605a      	str	r2, [r3, #4]
 800c686:	e00f      	b.n	800c6a8 <_malloc_r+0xb0>
 800c688:	6822      	ldr	r2, [r4, #0]
 800c68a:	1b52      	subs	r2, r2, r5
 800c68c:	d41f      	bmi.n	800c6ce <_malloc_r+0xd6>
 800c68e:	2a0b      	cmp	r2, #11
 800c690:	d917      	bls.n	800c6c2 <_malloc_r+0xca>
 800c692:	1961      	adds	r1, r4, r5
 800c694:	42a3      	cmp	r3, r4
 800c696:	6025      	str	r5, [r4, #0]
 800c698:	bf18      	it	ne
 800c69a:	6059      	strne	r1, [r3, #4]
 800c69c:	6863      	ldr	r3, [r4, #4]
 800c69e:	bf08      	it	eq
 800c6a0:	f8c8 1000 	streq.w	r1, [r8]
 800c6a4:	5162      	str	r2, [r4, r5]
 800c6a6:	604b      	str	r3, [r1, #4]
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f104 060b 	add.w	r6, r4, #11
 800c6ae:	f000 f829 	bl	800c704 <__malloc_unlock>
 800c6b2:	f026 0607 	bic.w	r6, r6, #7
 800c6b6:	1d23      	adds	r3, r4, #4
 800c6b8:	1af2      	subs	r2, r6, r3
 800c6ba:	d0ae      	beq.n	800c61a <_malloc_r+0x22>
 800c6bc:	1b9b      	subs	r3, r3, r6
 800c6be:	50a3      	str	r3, [r4, r2]
 800c6c0:	e7ab      	b.n	800c61a <_malloc_r+0x22>
 800c6c2:	42a3      	cmp	r3, r4
 800c6c4:	6862      	ldr	r2, [r4, #4]
 800c6c6:	d1dd      	bne.n	800c684 <_malloc_r+0x8c>
 800c6c8:	f8c8 2000 	str.w	r2, [r8]
 800c6cc:	e7ec      	b.n	800c6a8 <_malloc_r+0xb0>
 800c6ce:	4623      	mov	r3, r4
 800c6d0:	6864      	ldr	r4, [r4, #4]
 800c6d2:	e7ac      	b.n	800c62e <_malloc_r+0x36>
 800c6d4:	4634      	mov	r4, r6
 800c6d6:	6876      	ldr	r6, [r6, #4]
 800c6d8:	e7b4      	b.n	800c644 <_malloc_r+0x4c>
 800c6da:	4613      	mov	r3, r2
 800c6dc:	e7cc      	b.n	800c678 <_malloc_r+0x80>
 800c6de:	230c      	movs	r3, #12
 800c6e0:	603b      	str	r3, [r7, #0]
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	f000 f80e 	bl	800c704 <__malloc_unlock>
 800c6e8:	e797      	b.n	800c61a <_malloc_r+0x22>
 800c6ea:	6025      	str	r5, [r4, #0]
 800c6ec:	e7dc      	b.n	800c6a8 <_malloc_r+0xb0>
 800c6ee:	605b      	str	r3, [r3, #4]
 800c6f0:	deff      	udf	#255	; 0xff
 800c6f2:	bf00      	nop
 800c6f4:	20000990 	.word	0x20000990

0800c6f8 <__malloc_lock>:
 800c6f8:	4801      	ldr	r0, [pc, #4]	; (800c700 <__malloc_lock+0x8>)
 800c6fa:	f7ff bf0e 	b.w	800c51a <__retarget_lock_acquire_recursive>
 800c6fe:	bf00      	nop
 800c700:	2000098c 	.word	0x2000098c

0800c704 <__malloc_unlock>:
 800c704:	4801      	ldr	r0, [pc, #4]	; (800c70c <__malloc_unlock+0x8>)
 800c706:	f7ff bf09 	b.w	800c51c <__retarget_lock_release_recursive>
 800c70a:	bf00      	nop
 800c70c:	2000098c 	.word	0x2000098c

0800c710 <__sfputc_r>:
 800c710:	6893      	ldr	r3, [r2, #8]
 800c712:	3b01      	subs	r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	b410      	push	{r4}
 800c718:	6093      	str	r3, [r2, #8]
 800c71a:	da08      	bge.n	800c72e <__sfputc_r+0x1e>
 800c71c:	6994      	ldr	r4, [r2, #24]
 800c71e:	42a3      	cmp	r3, r4
 800c720:	db01      	blt.n	800c726 <__sfputc_r+0x16>
 800c722:	290a      	cmp	r1, #10
 800c724:	d103      	bne.n	800c72e <__sfputc_r+0x1e>
 800c726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c72a:	f7ff bdd8 	b.w	800c2de <__swbuf_r>
 800c72e:	6813      	ldr	r3, [r2, #0]
 800c730:	1c58      	adds	r0, r3, #1
 800c732:	6010      	str	r0, [r2, #0]
 800c734:	7019      	strb	r1, [r3, #0]
 800c736:	4608      	mov	r0, r1
 800c738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <__sfputs_r>:
 800c73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c740:	4606      	mov	r6, r0
 800c742:	460f      	mov	r7, r1
 800c744:	4614      	mov	r4, r2
 800c746:	18d5      	adds	r5, r2, r3
 800c748:	42ac      	cmp	r4, r5
 800c74a:	d101      	bne.n	800c750 <__sfputs_r+0x12>
 800c74c:	2000      	movs	r0, #0
 800c74e:	e007      	b.n	800c760 <__sfputs_r+0x22>
 800c750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c754:	463a      	mov	r2, r7
 800c756:	4630      	mov	r0, r6
 800c758:	f7ff ffda 	bl	800c710 <__sfputc_r>
 800c75c:	1c43      	adds	r3, r0, #1
 800c75e:	d1f3      	bne.n	800c748 <__sfputs_r+0xa>
 800c760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c764 <_vfiprintf_r>:
 800c764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c768:	460d      	mov	r5, r1
 800c76a:	b09d      	sub	sp, #116	; 0x74
 800c76c:	4614      	mov	r4, r2
 800c76e:	4698      	mov	r8, r3
 800c770:	4606      	mov	r6, r0
 800c772:	b118      	cbz	r0, 800c77c <_vfiprintf_r+0x18>
 800c774:	6a03      	ldr	r3, [r0, #32]
 800c776:	b90b      	cbnz	r3, 800c77c <_vfiprintf_r+0x18>
 800c778:	f7ff fcca 	bl	800c110 <__sinit>
 800c77c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c77e:	07d9      	lsls	r1, r3, #31
 800c780:	d405      	bmi.n	800c78e <_vfiprintf_r+0x2a>
 800c782:	89ab      	ldrh	r3, [r5, #12]
 800c784:	059a      	lsls	r2, r3, #22
 800c786:	d402      	bmi.n	800c78e <_vfiprintf_r+0x2a>
 800c788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c78a:	f7ff fec6 	bl	800c51a <__retarget_lock_acquire_recursive>
 800c78e:	89ab      	ldrh	r3, [r5, #12]
 800c790:	071b      	lsls	r3, r3, #28
 800c792:	d501      	bpl.n	800c798 <_vfiprintf_r+0x34>
 800c794:	692b      	ldr	r3, [r5, #16]
 800c796:	b99b      	cbnz	r3, 800c7c0 <_vfiprintf_r+0x5c>
 800c798:	4629      	mov	r1, r5
 800c79a:	4630      	mov	r0, r6
 800c79c:	f7ff fddc 	bl	800c358 <__swsetup_r>
 800c7a0:	b170      	cbz	r0, 800c7c0 <_vfiprintf_r+0x5c>
 800c7a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7a4:	07dc      	lsls	r4, r3, #31
 800c7a6:	d504      	bpl.n	800c7b2 <_vfiprintf_r+0x4e>
 800c7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ac:	b01d      	add	sp, #116	; 0x74
 800c7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b2:	89ab      	ldrh	r3, [r5, #12]
 800c7b4:	0598      	lsls	r0, r3, #22
 800c7b6:	d4f7      	bmi.n	800c7a8 <_vfiprintf_r+0x44>
 800c7b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ba:	f7ff feaf 	bl	800c51c <__retarget_lock_release_recursive>
 800c7be:	e7f3      	b.n	800c7a8 <_vfiprintf_r+0x44>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c4:	2320      	movs	r3, #32
 800c7c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7ce:	2330      	movs	r3, #48	; 0x30
 800c7d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c984 <_vfiprintf_r+0x220>
 800c7d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7d8:	f04f 0901 	mov.w	r9, #1
 800c7dc:	4623      	mov	r3, r4
 800c7de:	469a      	mov	sl, r3
 800c7e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7e4:	b10a      	cbz	r2, 800c7ea <_vfiprintf_r+0x86>
 800c7e6:	2a25      	cmp	r2, #37	; 0x25
 800c7e8:	d1f9      	bne.n	800c7de <_vfiprintf_r+0x7a>
 800c7ea:	ebba 0b04 	subs.w	fp, sl, r4
 800c7ee:	d00b      	beq.n	800c808 <_vfiprintf_r+0xa4>
 800c7f0:	465b      	mov	r3, fp
 800c7f2:	4622      	mov	r2, r4
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f7ff ffa1 	bl	800c73e <__sfputs_r>
 800c7fc:	3001      	adds	r0, #1
 800c7fe:	f000 80a9 	beq.w	800c954 <_vfiprintf_r+0x1f0>
 800c802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c804:	445a      	add	r2, fp
 800c806:	9209      	str	r2, [sp, #36]	; 0x24
 800c808:	f89a 3000 	ldrb.w	r3, [sl]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f000 80a1 	beq.w	800c954 <_vfiprintf_r+0x1f0>
 800c812:	2300      	movs	r3, #0
 800c814:	f04f 32ff 	mov.w	r2, #4294967295
 800c818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c81c:	f10a 0a01 	add.w	sl, sl, #1
 800c820:	9304      	str	r3, [sp, #16]
 800c822:	9307      	str	r3, [sp, #28]
 800c824:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c828:	931a      	str	r3, [sp, #104]	; 0x68
 800c82a:	4654      	mov	r4, sl
 800c82c:	2205      	movs	r2, #5
 800c82e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c832:	4854      	ldr	r0, [pc, #336]	; (800c984 <_vfiprintf_r+0x220>)
 800c834:	f7f3 fce4 	bl	8000200 <memchr>
 800c838:	9a04      	ldr	r2, [sp, #16]
 800c83a:	b9d8      	cbnz	r0, 800c874 <_vfiprintf_r+0x110>
 800c83c:	06d1      	lsls	r1, r2, #27
 800c83e:	bf44      	itt	mi
 800c840:	2320      	movmi	r3, #32
 800c842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c846:	0713      	lsls	r3, r2, #28
 800c848:	bf44      	itt	mi
 800c84a:	232b      	movmi	r3, #43	; 0x2b
 800c84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c850:	f89a 3000 	ldrb.w	r3, [sl]
 800c854:	2b2a      	cmp	r3, #42	; 0x2a
 800c856:	d015      	beq.n	800c884 <_vfiprintf_r+0x120>
 800c858:	9a07      	ldr	r2, [sp, #28]
 800c85a:	4654      	mov	r4, sl
 800c85c:	2000      	movs	r0, #0
 800c85e:	f04f 0c0a 	mov.w	ip, #10
 800c862:	4621      	mov	r1, r4
 800c864:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c868:	3b30      	subs	r3, #48	; 0x30
 800c86a:	2b09      	cmp	r3, #9
 800c86c:	d94d      	bls.n	800c90a <_vfiprintf_r+0x1a6>
 800c86e:	b1b0      	cbz	r0, 800c89e <_vfiprintf_r+0x13a>
 800c870:	9207      	str	r2, [sp, #28]
 800c872:	e014      	b.n	800c89e <_vfiprintf_r+0x13a>
 800c874:	eba0 0308 	sub.w	r3, r0, r8
 800c878:	fa09 f303 	lsl.w	r3, r9, r3
 800c87c:	4313      	orrs	r3, r2
 800c87e:	9304      	str	r3, [sp, #16]
 800c880:	46a2      	mov	sl, r4
 800c882:	e7d2      	b.n	800c82a <_vfiprintf_r+0xc6>
 800c884:	9b03      	ldr	r3, [sp, #12]
 800c886:	1d19      	adds	r1, r3, #4
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	9103      	str	r1, [sp, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	bfbb      	ittet	lt
 800c890:	425b      	neglt	r3, r3
 800c892:	f042 0202 	orrlt.w	r2, r2, #2
 800c896:	9307      	strge	r3, [sp, #28]
 800c898:	9307      	strlt	r3, [sp, #28]
 800c89a:	bfb8      	it	lt
 800c89c:	9204      	strlt	r2, [sp, #16]
 800c89e:	7823      	ldrb	r3, [r4, #0]
 800c8a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c8a2:	d10c      	bne.n	800c8be <_vfiprintf_r+0x15a>
 800c8a4:	7863      	ldrb	r3, [r4, #1]
 800c8a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c8a8:	d134      	bne.n	800c914 <_vfiprintf_r+0x1b0>
 800c8aa:	9b03      	ldr	r3, [sp, #12]
 800c8ac:	1d1a      	adds	r2, r3, #4
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	9203      	str	r2, [sp, #12]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	bfb8      	it	lt
 800c8b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8ba:	3402      	adds	r4, #2
 800c8bc:	9305      	str	r3, [sp, #20]
 800c8be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c994 <_vfiprintf_r+0x230>
 800c8c2:	7821      	ldrb	r1, [r4, #0]
 800c8c4:	2203      	movs	r2, #3
 800c8c6:	4650      	mov	r0, sl
 800c8c8:	f7f3 fc9a 	bl	8000200 <memchr>
 800c8cc:	b138      	cbz	r0, 800c8de <_vfiprintf_r+0x17a>
 800c8ce:	9b04      	ldr	r3, [sp, #16]
 800c8d0:	eba0 000a 	sub.w	r0, r0, sl
 800c8d4:	2240      	movs	r2, #64	; 0x40
 800c8d6:	4082      	lsls	r2, r0
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	3401      	adds	r4, #1
 800c8dc:	9304      	str	r3, [sp, #16]
 800c8de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e2:	4829      	ldr	r0, [pc, #164]	; (800c988 <_vfiprintf_r+0x224>)
 800c8e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8e8:	2206      	movs	r2, #6
 800c8ea:	f7f3 fc89 	bl	8000200 <memchr>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d03f      	beq.n	800c972 <_vfiprintf_r+0x20e>
 800c8f2:	4b26      	ldr	r3, [pc, #152]	; (800c98c <_vfiprintf_r+0x228>)
 800c8f4:	bb1b      	cbnz	r3, 800c93e <_vfiprintf_r+0x1da>
 800c8f6:	9b03      	ldr	r3, [sp, #12]
 800c8f8:	3307      	adds	r3, #7
 800c8fa:	f023 0307 	bic.w	r3, r3, #7
 800c8fe:	3308      	adds	r3, #8
 800c900:	9303      	str	r3, [sp, #12]
 800c902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c904:	443b      	add	r3, r7
 800c906:	9309      	str	r3, [sp, #36]	; 0x24
 800c908:	e768      	b.n	800c7dc <_vfiprintf_r+0x78>
 800c90a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c90e:	460c      	mov	r4, r1
 800c910:	2001      	movs	r0, #1
 800c912:	e7a6      	b.n	800c862 <_vfiprintf_r+0xfe>
 800c914:	2300      	movs	r3, #0
 800c916:	3401      	adds	r4, #1
 800c918:	9305      	str	r3, [sp, #20]
 800c91a:	4619      	mov	r1, r3
 800c91c:	f04f 0c0a 	mov.w	ip, #10
 800c920:	4620      	mov	r0, r4
 800c922:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c926:	3a30      	subs	r2, #48	; 0x30
 800c928:	2a09      	cmp	r2, #9
 800c92a:	d903      	bls.n	800c934 <_vfiprintf_r+0x1d0>
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d0c6      	beq.n	800c8be <_vfiprintf_r+0x15a>
 800c930:	9105      	str	r1, [sp, #20]
 800c932:	e7c4      	b.n	800c8be <_vfiprintf_r+0x15a>
 800c934:	fb0c 2101 	mla	r1, ip, r1, r2
 800c938:	4604      	mov	r4, r0
 800c93a:	2301      	movs	r3, #1
 800c93c:	e7f0      	b.n	800c920 <_vfiprintf_r+0x1bc>
 800c93e:	ab03      	add	r3, sp, #12
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	462a      	mov	r2, r5
 800c944:	4b12      	ldr	r3, [pc, #72]	; (800c990 <_vfiprintf_r+0x22c>)
 800c946:	a904      	add	r1, sp, #16
 800c948:	4630      	mov	r0, r6
 800c94a:	f3af 8000 	nop.w
 800c94e:	4607      	mov	r7, r0
 800c950:	1c78      	adds	r0, r7, #1
 800c952:	d1d6      	bne.n	800c902 <_vfiprintf_r+0x19e>
 800c954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c956:	07d9      	lsls	r1, r3, #31
 800c958:	d405      	bmi.n	800c966 <_vfiprintf_r+0x202>
 800c95a:	89ab      	ldrh	r3, [r5, #12]
 800c95c:	059a      	lsls	r2, r3, #22
 800c95e:	d402      	bmi.n	800c966 <_vfiprintf_r+0x202>
 800c960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c962:	f7ff fddb 	bl	800c51c <__retarget_lock_release_recursive>
 800c966:	89ab      	ldrh	r3, [r5, #12]
 800c968:	065b      	lsls	r3, r3, #25
 800c96a:	f53f af1d 	bmi.w	800c7a8 <_vfiprintf_r+0x44>
 800c96e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c970:	e71c      	b.n	800c7ac <_vfiprintf_r+0x48>
 800c972:	ab03      	add	r3, sp, #12
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	462a      	mov	r2, r5
 800c978:	4b05      	ldr	r3, [pc, #20]	; (800c990 <_vfiprintf_r+0x22c>)
 800c97a:	a904      	add	r1, sp, #16
 800c97c:	4630      	mov	r0, r6
 800c97e:	f000 f879 	bl	800ca74 <_printf_i>
 800c982:	e7e4      	b.n	800c94e <_vfiprintf_r+0x1ea>
 800c984:	0800df60 	.word	0x0800df60
 800c988:	0800df6a 	.word	0x0800df6a
 800c98c:	00000000 	.word	0x00000000
 800c990:	0800c73f 	.word	0x0800c73f
 800c994:	0800df66 	.word	0x0800df66

0800c998 <_printf_common>:
 800c998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c99c:	4616      	mov	r6, r2
 800c99e:	4699      	mov	r9, r3
 800c9a0:	688a      	ldr	r2, [r1, #8]
 800c9a2:	690b      	ldr	r3, [r1, #16]
 800c9a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	bfb8      	it	lt
 800c9ac:	4613      	movlt	r3, r2
 800c9ae:	6033      	str	r3, [r6, #0]
 800c9b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9b4:	4607      	mov	r7, r0
 800c9b6:	460c      	mov	r4, r1
 800c9b8:	b10a      	cbz	r2, 800c9be <_printf_common+0x26>
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	6033      	str	r3, [r6, #0]
 800c9be:	6823      	ldr	r3, [r4, #0]
 800c9c0:	0699      	lsls	r1, r3, #26
 800c9c2:	bf42      	ittt	mi
 800c9c4:	6833      	ldrmi	r3, [r6, #0]
 800c9c6:	3302      	addmi	r3, #2
 800c9c8:	6033      	strmi	r3, [r6, #0]
 800c9ca:	6825      	ldr	r5, [r4, #0]
 800c9cc:	f015 0506 	ands.w	r5, r5, #6
 800c9d0:	d106      	bne.n	800c9e0 <_printf_common+0x48>
 800c9d2:	f104 0a19 	add.w	sl, r4, #25
 800c9d6:	68e3      	ldr	r3, [r4, #12]
 800c9d8:	6832      	ldr	r2, [r6, #0]
 800c9da:	1a9b      	subs	r3, r3, r2
 800c9dc:	42ab      	cmp	r3, r5
 800c9de:	dc26      	bgt.n	800ca2e <_printf_common+0x96>
 800c9e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9e4:	1e13      	subs	r3, r2, #0
 800c9e6:	6822      	ldr	r2, [r4, #0]
 800c9e8:	bf18      	it	ne
 800c9ea:	2301      	movne	r3, #1
 800c9ec:	0692      	lsls	r2, r2, #26
 800c9ee:	d42b      	bmi.n	800ca48 <_printf_common+0xb0>
 800c9f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9f4:	4649      	mov	r1, r9
 800c9f6:	4638      	mov	r0, r7
 800c9f8:	47c0      	blx	r8
 800c9fa:	3001      	adds	r0, #1
 800c9fc:	d01e      	beq.n	800ca3c <_printf_common+0xa4>
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	6922      	ldr	r2, [r4, #16]
 800ca02:	f003 0306 	and.w	r3, r3, #6
 800ca06:	2b04      	cmp	r3, #4
 800ca08:	bf02      	ittt	eq
 800ca0a:	68e5      	ldreq	r5, [r4, #12]
 800ca0c:	6833      	ldreq	r3, [r6, #0]
 800ca0e:	1aed      	subeq	r5, r5, r3
 800ca10:	68a3      	ldr	r3, [r4, #8]
 800ca12:	bf0c      	ite	eq
 800ca14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca18:	2500      	movne	r5, #0
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	bfc4      	itt	gt
 800ca1e:	1a9b      	subgt	r3, r3, r2
 800ca20:	18ed      	addgt	r5, r5, r3
 800ca22:	2600      	movs	r6, #0
 800ca24:	341a      	adds	r4, #26
 800ca26:	42b5      	cmp	r5, r6
 800ca28:	d11a      	bne.n	800ca60 <_printf_common+0xc8>
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	e008      	b.n	800ca40 <_printf_common+0xa8>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	4652      	mov	r2, sl
 800ca32:	4649      	mov	r1, r9
 800ca34:	4638      	mov	r0, r7
 800ca36:	47c0      	blx	r8
 800ca38:	3001      	adds	r0, #1
 800ca3a:	d103      	bne.n	800ca44 <_printf_common+0xac>
 800ca3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca44:	3501      	adds	r5, #1
 800ca46:	e7c6      	b.n	800c9d6 <_printf_common+0x3e>
 800ca48:	18e1      	adds	r1, r4, r3
 800ca4a:	1c5a      	adds	r2, r3, #1
 800ca4c:	2030      	movs	r0, #48	; 0x30
 800ca4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca52:	4422      	add	r2, r4
 800ca54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca5c:	3302      	adds	r3, #2
 800ca5e:	e7c7      	b.n	800c9f0 <_printf_common+0x58>
 800ca60:	2301      	movs	r3, #1
 800ca62:	4622      	mov	r2, r4
 800ca64:	4649      	mov	r1, r9
 800ca66:	4638      	mov	r0, r7
 800ca68:	47c0      	blx	r8
 800ca6a:	3001      	adds	r0, #1
 800ca6c:	d0e6      	beq.n	800ca3c <_printf_common+0xa4>
 800ca6e:	3601      	adds	r6, #1
 800ca70:	e7d9      	b.n	800ca26 <_printf_common+0x8e>
	...

0800ca74 <_printf_i>:
 800ca74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca78:	7e0f      	ldrb	r7, [r1, #24]
 800ca7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca7c:	2f78      	cmp	r7, #120	; 0x78
 800ca7e:	4691      	mov	r9, r2
 800ca80:	4680      	mov	r8, r0
 800ca82:	460c      	mov	r4, r1
 800ca84:	469a      	mov	sl, r3
 800ca86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca8a:	d807      	bhi.n	800ca9c <_printf_i+0x28>
 800ca8c:	2f62      	cmp	r7, #98	; 0x62
 800ca8e:	d80a      	bhi.n	800caa6 <_printf_i+0x32>
 800ca90:	2f00      	cmp	r7, #0
 800ca92:	f000 80d4 	beq.w	800cc3e <_printf_i+0x1ca>
 800ca96:	2f58      	cmp	r7, #88	; 0x58
 800ca98:	f000 80c0 	beq.w	800cc1c <_printf_i+0x1a8>
 800ca9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800caa4:	e03a      	b.n	800cb1c <_printf_i+0xa8>
 800caa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800caaa:	2b15      	cmp	r3, #21
 800caac:	d8f6      	bhi.n	800ca9c <_printf_i+0x28>
 800caae:	a101      	add	r1, pc, #4	; (adr r1, 800cab4 <_printf_i+0x40>)
 800cab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cab4:	0800cb0d 	.word	0x0800cb0d
 800cab8:	0800cb21 	.word	0x0800cb21
 800cabc:	0800ca9d 	.word	0x0800ca9d
 800cac0:	0800ca9d 	.word	0x0800ca9d
 800cac4:	0800ca9d 	.word	0x0800ca9d
 800cac8:	0800ca9d 	.word	0x0800ca9d
 800cacc:	0800cb21 	.word	0x0800cb21
 800cad0:	0800ca9d 	.word	0x0800ca9d
 800cad4:	0800ca9d 	.word	0x0800ca9d
 800cad8:	0800ca9d 	.word	0x0800ca9d
 800cadc:	0800ca9d 	.word	0x0800ca9d
 800cae0:	0800cc25 	.word	0x0800cc25
 800cae4:	0800cb4d 	.word	0x0800cb4d
 800cae8:	0800cbdf 	.word	0x0800cbdf
 800caec:	0800ca9d 	.word	0x0800ca9d
 800caf0:	0800ca9d 	.word	0x0800ca9d
 800caf4:	0800cc47 	.word	0x0800cc47
 800caf8:	0800ca9d 	.word	0x0800ca9d
 800cafc:	0800cb4d 	.word	0x0800cb4d
 800cb00:	0800ca9d 	.word	0x0800ca9d
 800cb04:	0800ca9d 	.word	0x0800ca9d
 800cb08:	0800cbe7 	.word	0x0800cbe7
 800cb0c:	682b      	ldr	r3, [r5, #0]
 800cb0e:	1d1a      	adds	r2, r3, #4
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	602a      	str	r2, [r5, #0]
 800cb14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e09f      	b.n	800cc60 <_printf_i+0x1ec>
 800cb20:	6820      	ldr	r0, [r4, #0]
 800cb22:	682b      	ldr	r3, [r5, #0]
 800cb24:	0607      	lsls	r7, r0, #24
 800cb26:	f103 0104 	add.w	r1, r3, #4
 800cb2a:	6029      	str	r1, [r5, #0]
 800cb2c:	d501      	bpl.n	800cb32 <_printf_i+0xbe>
 800cb2e:	681e      	ldr	r6, [r3, #0]
 800cb30:	e003      	b.n	800cb3a <_printf_i+0xc6>
 800cb32:	0646      	lsls	r6, r0, #25
 800cb34:	d5fb      	bpl.n	800cb2e <_printf_i+0xba>
 800cb36:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb3a:	2e00      	cmp	r6, #0
 800cb3c:	da03      	bge.n	800cb46 <_printf_i+0xd2>
 800cb3e:	232d      	movs	r3, #45	; 0x2d
 800cb40:	4276      	negs	r6, r6
 800cb42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb46:	485a      	ldr	r0, [pc, #360]	; (800ccb0 <_printf_i+0x23c>)
 800cb48:	230a      	movs	r3, #10
 800cb4a:	e012      	b.n	800cb72 <_printf_i+0xfe>
 800cb4c:	682b      	ldr	r3, [r5, #0]
 800cb4e:	6820      	ldr	r0, [r4, #0]
 800cb50:	1d19      	adds	r1, r3, #4
 800cb52:	6029      	str	r1, [r5, #0]
 800cb54:	0605      	lsls	r5, r0, #24
 800cb56:	d501      	bpl.n	800cb5c <_printf_i+0xe8>
 800cb58:	681e      	ldr	r6, [r3, #0]
 800cb5a:	e002      	b.n	800cb62 <_printf_i+0xee>
 800cb5c:	0641      	lsls	r1, r0, #25
 800cb5e:	d5fb      	bpl.n	800cb58 <_printf_i+0xe4>
 800cb60:	881e      	ldrh	r6, [r3, #0]
 800cb62:	4853      	ldr	r0, [pc, #332]	; (800ccb0 <_printf_i+0x23c>)
 800cb64:	2f6f      	cmp	r7, #111	; 0x6f
 800cb66:	bf0c      	ite	eq
 800cb68:	2308      	moveq	r3, #8
 800cb6a:	230a      	movne	r3, #10
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb72:	6865      	ldr	r5, [r4, #4]
 800cb74:	60a5      	str	r5, [r4, #8]
 800cb76:	2d00      	cmp	r5, #0
 800cb78:	bfa2      	ittt	ge
 800cb7a:	6821      	ldrge	r1, [r4, #0]
 800cb7c:	f021 0104 	bicge.w	r1, r1, #4
 800cb80:	6021      	strge	r1, [r4, #0]
 800cb82:	b90e      	cbnz	r6, 800cb88 <_printf_i+0x114>
 800cb84:	2d00      	cmp	r5, #0
 800cb86:	d04b      	beq.n	800cc20 <_printf_i+0x1ac>
 800cb88:	4615      	mov	r5, r2
 800cb8a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb8e:	fb03 6711 	mls	r7, r3, r1, r6
 800cb92:	5dc7      	ldrb	r7, [r0, r7]
 800cb94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb98:	4637      	mov	r7, r6
 800cb9a:	42bb      	cmp	r3, r7
 800cb9c:	460e      	mov	r6, r1
 800cb9e:	d9f4      	bls.n	800cb8a <_printf_i+0x116>
 800cba0:	2b08      	cmp	r3, #8
 800cba2:	d10b      	bne.n	800cbbc <_printf_i+0x148>
 800cba4:	6823      	ldr	r3, [r4, #0]
 800cba6:	07de      	lsls	r6, r3, #31
 800cba8:	d508      	bpl.n	800cbbc <_printf_i+0x148>
 800cbaa:	6923      	ldr	r3, [r4, #16]
 800cbac:	6861      	ldr	r1, [r4, #4]
 800cbae:	4299      	cmp	r1, r3
 800cbb0:	bfde      	ittt	le
 800cbb2:	2330      	movle	r3, #48	; 0x30
 800cbb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbbc:	1b52      	subs	r2, r2, r5
 800cbbe:	6122      	str	r2, [r4, #16]
 800cbc0:	f8cd a000 	str.w	sl, [sp]
 800cbc4:	464b      	mov	r3, r9
 800cbc6:	aa03      	add	r2, sp, #12
 800cbc8:	4621      	mov	r1, r4
 800cbca:	4640      	mov	r0, r8
 800cbcc:	f7ff fee4 	bl	800c998 <_printf_common>
 800cbd0:	3001      	adds	r0, #1
 800cbd2:	d14a      	bne.n	800cc6a <_printf_i+0x1f6>
 800cbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd8:	b004      	add	sp, #16
 800cbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbde:	6823      	ldr	r3, [r4, #0]
 800cbe0:	f043 0320 	orr.w	r3, r3, #32
 800cbe4:	6023      	str	r3, [r4, #0]
 800cbe6:	4833      	ldr	r0, [pc, #204]	; (800ccb4 <_printf_i+0x240>)
 800cbe8:	2778      	movs	r7, #120	; 0x78
 800cbea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	6829      	ldr	r1, [r5, #0]
 800cbf2:	061f      	lsls	r7, r3, #24
 800cbf4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbf8:	d402      	bmi.n	800cc00 <_printf_i+0x18c>
 800cbfa:	065f      	lsls	r7, r3, #25
 800cbfc:	bf48      	it	mi
 800cbfe:	b2b6      	uxthmi	r6, r6
 800cc00:	07df      	lsls	r7, r3, #31
 800cc02:	bf48      	it	mi
 800cc04:	f043 0320 	orrmi.w	r3, r3, #32
 800cc08:	6029      	str	r1, [r5, #0]
 800cc0a:	bf48      	it	mi
 800cc0c:	6023      	strmi	r3, [r4, #0]
 800cc0e:	b91e      	cbnz	r6, 800cc18 <_printf_i+0x1a4>
 800cc10:	6823      	ldr	r3, [r4, #0]
 800cc12:	f023 0320 	bic.w	r3, r3, #32
 800cc16:	6023      	str	r3, [r4, #0]
 800cc18:	2310      	movs	r3, #16
 800cc1a:	e7a7      	b.n	800cb6c <_printf_i+0xf8>
 800cc1c:	4824      	ldr	r0, [pc, #144]	; (800ccb0 <_printf_i+0x23c>)
 800cc1e:	e7e4      	b.n	800cbea <_printf_i+0x176>
 800cc20:	4615      	mov	r5, r2
 800cc22:	e7bd      	b.n	800cba0 <_printf_i+0x12c>
 800cc24:	682b      	ldr	r3, [r5, #0]
 800cc26:	6826      	ldr	r6, [r4, #0]
 800cc28:	6961      	ldr	r1, [r4, #20]
 800cc2a:	1d18      	adds	r0, r3, #4
 800cc2c:	6028      	str	r0, [r5, #0]
 800cc2e:	0635      	lsls	r5, r6, #24
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	d501      	bpl.n	800cc38 <_printf_i+0x1c4>
 800cc34:	6019      	str	r1, [r3, #0]
 800cc36:	e002      	b.n	800cc3e <_printf_i+0x1ca>
 800cc38:	0670      	lsls	r0, r6, #25
 800cc3a:	d5fb      	bpl.n	800cc34 <_printf_i+0x1c0>
 800cc3c:	8019      	strh	r1, [r3, #0]
 800cc3e:	2300      	movs	r3, #0
 800cc40:	6123      	str	r3, [r4, #16]
 800cc42:	4615      	mov	r5, r2
 800cc44:	e7bc      	b.n	800cbc0 <_printf_i+0x14c>
 800cc46:	682b      	ldr	r3, [r5, #0]
 800cc48:	1d1a      	adds	r2, r3, #4
 800cc4a:	602a      	str	r2, [r5, #0]
 800cc4c:	681d      	ldr	r5, [r3, #0]
 800cc4e:	6862      	ldr	r2, [r4, #4]
 800cc50:	2100      	movs	r1, #0
 800cc52:	4628      	mov	r0, r5
 800cc54:	f7f3 fad4 	bl	8000200 <memchr>
 800cc58:	b108      	cbz	r0, 800cc5e <_printf_i+0x1ea>
 800cc5a:	1b40      	subs	r0, r0, r5
 800cc5c:	6060      	str	r0, [r4, #4]
 800cc5e:	6863      	ldr	r3, [r4, #4]
 800cc60:	6123      	str	r3, [r4, #16]
 800cc62:	2300      	movs	r3, #0
 800cc64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc68:	e7aa      	b.n	800cbc0 <_printf_i+0x14c>
 800cc6a:	6923      	ldr	r3, [r4, #16]
 800cc6c:	462a      	mov	r2, r5
 800cc6e:	4649      	mov	r1, r9
 800cc70:	4640      	mov	r0, r8
 800cc72:	47d0      	blx	sl
 800cc74:	3001      	adds	r0, #1
 800cc76:	d0ad      	beq.n	800cbd4 <_printf_i+0x160>
 800cc78:	6823      	ldr	r3, [r4, #0]
 800cc7a:	079b      	lsls	r3, r3, #30
 800cc7c:	d413      	bmi.n	800cca6 <_printf_i+0x232>
 800cc7e:	68e0      	ldr	r0, [r4, #12]
 800cc80:	9b03      	ldr	r3, [sp, #12]
 800cc82:	4298      	cmp	r0, r3
 800cc84:	bfb8      	it	lt
 800cc86:	4618      	movlt	r0, r3
 800cc88:	e7a6      	b.n	800cbd8 <_printf_i+0x164>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	4632      	mov	r2, r6
 800cc8e:	4649      	mov	r1, r9
 800cc90:	4640      	mov	r0, r8
 800cc92:	47d0      	blx	sl
 800cc94:	3001      	adds	r0, #1
 800cc96:	d09d      	beq.n	800cbd4 <_printf_i+0x160>
 800cc98:	3501      	adds	r5, #1
 800cc9a:	68e3      	ldr	r3, [r4, #12]
 800cc9c:	9903      	ldr	r1, [sp, #12]
 800cc9e:	1a5b      	subs	r3, r3, r1
 800cca0:	42ab      	cmp	r3, r5
 800cca2:	dcf2      	bgt.n	800cc8a <_printf_i+0x216>
 800cca4:	e7eb      	b.n	800cc7e <_printf_i+0x20a>
 800cca6:	2500      	movs	r5, #0
 800cca8:	f104 0619 	add.w	r6, r4, #25
 800ccac:	e7f5      	b.n	800cc9a <_printf_i+0x226>
 800ccae:	bf00      	nop
 800ccb0:	0800df71 	.word	0x0800df71
 800ccb4:	0800df82 	.word	0x0800df82

0800ccb8 <__sflush_r>:
 800ccb8:	898a      	ldrh	r2, [r1, #12]
 800ccba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccbe:	4605      	mov	r5, r0
 800ccc0:	0710      	lsls	r0, r2, #28
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	d458      	bmi.n	800cd78 <__sflush_r+0xc0>
 800ccc6:	684b      	ldr	r3, [r1, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	dc05      	bgt.n	800ccd8 <__sflush_r+0x20>
 800cccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	dc02      	bgt.n	800ccd8 <__sflush_r+0x20>
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccda:	2e00      	cmp	r6, #0
 800ccdc:	d0f9      	beq.n	800ccd2 <__sflush_r+0x1a>
 800ccde:	2300      	movs	r3, #0
 800cce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cce4:	682f      	ldr	r7, [r5, #0]
 800cce6:	6a21      	ldr	r1, [r4, #32]
 800cce8:	602b      	str	r3, [r5, #0]
 800ccea:	d032      	beq.n	800cd52 <__sflush_r+0x9a>
 800ccec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccee:	89a3      	ldrh	r3, [r4, #12]
 800ccf0:	075a      	lsls	r2, r3, #29
 800ccf2:	d505      	bpl.n	800cd00 <__sflush_r+0x48>
 800ccf4:	6863      	ldr	r3, [r4, #4]
 800ccf6:	1ac0      	subs	r0, r0, r3
 800ccf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccfa:	b10b      	cbz	r3, 800cd00 <__sflush_r+0x48>
 800ccfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccfe:	1ac0      	subs	r0, r0, r3
 800cd00:	2300      	movs	r3, #0
 800cd02:	4602      	mov	r2, r0
 800cd04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd06:	6a21      	ldr	r1, [r4, #32]
 800cd08:	4628      	mov	r0, r5
 800cd0a:	47b0      	blx	r6
 800cd0c:	1c43      	adds	r3, r0, #1
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	d106      	bne.n	800cd20 <__sflush_r+0x68>
 800cd12:	6829      	ldr	r1, [r5, #0]
 800cd14:	291d      	cmp	r1, #29
 800cd16:	d82b      	bhi.n	800cd70 <__sflush_r+0xb8>
 800cd18:	4a29      	ldr	r2, [pc, #164]	; (800cdc0 <__sflush_r+0x108>)
 800cd1a:	410a      	asrs	r2, r1
 800cd1c:	07d6      	lsls	r6, r2, #31
 800cd1e:	d427      	bmi.n	800cd70 <__sflush_r+0xb8>
 800cd20:	2200      	movs	r2, #0
 800cd22:	6062      	str	r2, [r4, #4]
 800cd24:	04d9      	lsls	r1, r3, #19
 800cd26:	6922      	ldr	r2, [r4, #16]
 800cd28:	6022      	str	r2, [r4, #0]
 800cd2a:	d504      	bpl.n	800cd36 <__sflush_r+0x7e>
 800cd2c:	1c42      	adds	r2, r0, #1
 800cd2e:	d101      	bne.n	800cd34 <__sflush_r+0x7c>
 800cd30:	682b      	ldr	r3, [r5, #0]
 800cd32:	b903      	cbnz	r3, 800cd36 <__sflush_r+0x7e>
 800cd34:	6560      	str	r0, [r4, #84]	; 0x54
 800cd36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd38:	602f      	str	r7, [r5, #0]
 800cd3a:	2900      	cmp	r1, #0
 800cd3c:	d0c9      	beq.n	800ccd2 <__sflush_r+0x1a>
 800cd3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd42:	4299      	cmp	r1, r3
 800cd44:	d002      	beq.n	800cd4c <__sflush_r+0x94>
 800cd46:	4628      	mov	r0, r5
 800cd48:	f7ff fbea 	bl	800c520 <_free_r>
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	6360      	str	r0, [r4, #52]	; 0x34
 800cd50:	e7c0      	b.n	800ccd4 <__sflush_r+0x1c>
 800cd52:	2301      	movs	r3, #1
 800cd54:	4628      	mov	r0, r5
 800cd56:	47b0      	blx	r6
 800cd58:	1c41      	adds	r1, r0, #1
 800cd5a:	d1c8      	bne.n	800ccee <__sflush_r+0x36>
 800cd5c:	682b      	ldr	r3, [r5, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d0c5      	beq.n	800ccee <__sflush_r+0x36>
 800cd62:	2b1d      	cmp	r3, #29
 800cd64:	d001      	beq.n	800cd6a <__sflush_r+0xb2>
 800cd66:	2b16      	cmp	r3, #22
 800cd68:	d101      	bne.n	800cd6e <__sflush_r+0xb6>
 800cd6a:	602f      	str	r7, [r5, #0]
 800cd6c:	e7b1      	b.n	800ccd2 <__sflush_r+0x1a>
 800cd6e:	89a3      	ldrh	r3, [r4, #12]
 800cd70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd74:	81a3      	strh	r3, [r4, #12]
 800cd76:	e7ad      	b.n	800ccd4 <__sflush_r+0x1c>
 800cd78:	690f      	ldr	r7, [r1, #16]
 800cd7a:	2f00      	cmp	r7, #0
 800cd7c:	d0a9      	beq.n	800ccd2 <__sflush_r+0x1a>
 800cd7e:	0793      	lsls	r3, r2, #30
 800cd80:	680e      	ldr	r6, [r1, #0]
 800cd82:	bf08      	it	eq
 800cd84:	694b      	ldreq	r3, [r1, #20]
 800cd86:	600f      	str	r7, [r1, #0]
 800cd88:	bf18      	it	ne
 800cd8a:	2300      	movne	r3, #0
 800cd8c:	eba6 0807 	sub.w	r8, r6, r7
 800cd90:	608b      	str	r3, [r1, #8]
 800cd92:	f1b8 0f00 	cmp.w	r8, #0
 800cd96:	dd9c      	ble.n	800ccd2 <__sflush_r+0x1a>
 800cd98:	6a21      	ldr	r1, [r4, #32]
 800cd9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd9c:	4643      	mov	r3, r8
 800cd9e:	463a      	mov	r2, r7
 800cda0:	4628      	mov	r0, r5
 800cda2:	47b0      	blx	r6
 800cda4:	2800      	cmp	r0, #0
 800cda6:	dc06      	bgt.n	800cdb6 <__sflush_r+0xfe>
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdae:	81a3      	strh	r3, [r4, #12]
 800cdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb4:	e78e      	b.n	800ccd4 <__sflush_r+0x1c>
 800cdb6:	4407      	add	r7, r0
 800cdb8:	eba8 0800 	sub.w	r8, r8, r0
 800cdbc:	e7e9      	b.n	800cd92 <__sflush_r+0xda>
 800cdbe:	bf00      	nop
 800cdc0:	dfbffffe 	.word	0xdfbffffe

0800cdc4 <_fflush_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	690b      	ldr	r3, [r1, #16]
 800cdc8:	4605      	mov	r5, r0
 800cdca:	460c      	mov	r4, r1
 800cdcc:	b913      	cbnz	r3, 800cdd4 <_fflush_r+0x10>
 800cdce:	2500      	movs	r5, #0
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	bd38      	pop	{r3, r4, r5, pc}
 800cdd4:	b118      	cbz	r0, 800cdde <_fflush_r+0x1a>
 800cdd6:	6a03      	ldr	r3, [r0, #32]
 800cdd8:	b90b      	cbnz	r3, 800cdde <_fflush_r+0x1a>
 800cdda:	f7ff f999 	bl	800c110 <__sinit>
 800cdde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d0f3      	beq.n	800cdce <_fflush_r+0xa>
 800cde6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cde8:	07d0      	lsls	r0, r2, #31
 800cdea:	d404      	bmi.n	800cdf6 <_fflush_r+0x32>
 800cdec:	0599      	lsls	r1, r3, #22
 800cdee:	d402      	bmi.n	800cdf6 <_fflush_r+0x32>
 800cdf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdf2:	f7ff fb92 	bl	800c51a <__retarget_lock_acquire_recursive>
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	f7ff ff5d 	bl	800ccb8 <__sflush_r>
 800cdfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce00:	07da      	lsls	r2, r3, #31
 800ce02:	4605      	mov	r5, r0
 800ce04:	d4e4      	bmi.n	800cdd0 <_fflush_r+0xc>
 800ce06:	89a3      	ldrh	r3, [r4, #12]
 800ce08:	059b      	lsls	r3, r3, #22
 800ce0a:	d4e1      	bmi.n	800cdd0 <_fflush_r+0xc>
 800ce0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce0e:	f7ff fb85 	bl	800c51c <__retarget_lock_release_recursive>
 800ce12:	e7dd      	b.n	800cdd0 <_fflush_r+0xc>

0800ce14 <__swhatbuf_r>:
 800ce14:	b570      	push	{r4, r5, r6, lr}
 800ce16:	460c      	mov	r4, r1
 800ce18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	b096      	sub	sp, #88	; 0x58
 800ce20:	4615      	mov	r5, r2
 800ce22:	461e      	mov	r6, r3
 800ce24:	da0d      	bge.n	800ce42 <__swhatbuf_r+0x2e>
 800ce26:	89a3      	ldrh	r3, [r4, #12]
 800ce28:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ce2c:	f04f 0100 	mov.w	r1, #0
 800ce30:	bf0c      	ite	eq
 800ce32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ce36:	2340      	movne	r3, #64	; 0x40
 800ce38:	2000      	movs	r0, #0
 800ce3a:	6031      	str	r1, [r6, #0]
 800ce3c:	602b      	str	r3, [r5, #0]
 800ce3e:	b016      	add	sp, #88	; 0x58
 800ce40:	bd70      	pop	{r4, r5, r6, pc}
 800ce42:	466a      	mov	r2, sp
 800ce44:	f000 f848 	bl	800ced8 <_fstat_r>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	dbec      	blt.n	800ce26 <__swhatbuf_r+0x12>
 800ce4c:	9901      	ldr	r1, [sp, #4]
 800ce4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ce52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ce56:	4259      	negs	r1, r3
 800ce58:	4159      	adcs	r1, r3
 800ce5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce5e:	e7eb      	b.n	800ce38 <__swhatbuf_r+0x24>

0800ce60 <__smakebuf_r>:
 800ce60:	898b      	ldrh	r3, [r1, #12]
 800ce62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce64:	079d      	lsls	r5, r3, #30
 800ce66:	4606      	mov	r6, r0
 800ce68:	460c      	mov	r4, r1
 800ce6a:	d507      	bpl.n	800ce7c <__smakebuf_r+0x1c>
 800ce6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	6123      	str	r3, [r4, #16]
 800ce74:	2301      	movs	r3, #1
 800ce76:	6163      	str	r3, [r4, #20]
 800ce78:	b002      	add	sp, #8
 800ce7a:	bd70      	pop	{r4, r5, r6, pc}
 800ce7c:	ab01      	add	r3, sp, #4
 800ce7e:	466a      	mov	r2, sp
 800ce80:	f7ff ffc8 	bl	800ce14 <__swhatbuf_r>
 800ce84:	9900      	ldr	r1, [sp, #0]
 800ce86:	4605      	mov	r5, r0
 800ce88:	4630      	mov	r0, r6
 800ce8a:	f7ff fbb5 	bl	800c5f8 <_malloc_r>
 800ce8e:	b948      	cbnz	r0, 800cea4 <__smakebuf_r+0x44>
 800ce90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce94:	059a      	lsls	r2, r3, #22
 800ce96:	d4ef      	bmi.n	800ce78 <__smakebuf_r+0x18>
 800ce98:	f023 0303 	bic.w	r3, r3, #3
 800ce9c:	f043 0302 	orr.w	r3, r3, #2
 800cea0:	81a3      	strh	r3, [r4, #12]
 800cea2:	e7e3      	b.n	800ce6c <__smakebuf_r+0xc>
 800cea4:	89a3      	ldrh	r3, [r4, #12]
 800cea6:	6020      	str	r0, [r4, #0]
 800cea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceac:	81a3      	strh	r3, [r4, #12]
 800ceae:	9b00      	ldr	r3, [sp, #0]
 800ceb0:	6163      	str	r3, [r4, #20]
 800ceb2:	9b01      	ldr	r3, [sp, #4]
 800ceb4:	6120      	str	r0, [r4, #16]
 800ceb6:	b15b      	cbz	r3, 800ced0 <__smakebuf_r+0x70>
 800ceb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cebc:	4630      	mov	r0, r6
 800cebe:	f000 f81d 	bl	800cefc <_isatty_r>
 800cec2:	b128      	cbz	r0, 800ced0 <__smakebuf_r+0x70>
 800cec4:	89a3      	ldrh	r3, [r4, #12]
 800cec6:	f023 0303 	bic.w	r3, r3, #3
 800ceca:	f043 0301 	orr.w	r3, r3, #1
 800cece:	81a3      	strh	r3, [r4, #12]
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	431d      	orrs	r5, r3
 800ced4:	81a5      	strh	r5, [r4, #12]
 800ced6:	e7cf      	b.n	800ce78 <__smakebuf_r+0x18>

0800ced8 <_fstat_r>:
 800ced8:	b538      	push	{r3, r4, r5, lr}
 800ceda:	4d07      	ldr	r5, [pc, #28]	; (800cef8 <_fstat_r+0x20>)
 800cedc:	2300      	movs	r3, #0
 800cede:	4604      	mov	r4, r0
 800cee0:	4608      	mov	r0, r1
 800cee2:	4611      	mov	r1, r2
 800cee4:	602b      	str	r3, [r5, #0]
 800cee6:	f7f6 fb2a 	bl	800353e <_fstat>
 800ceea:	1c43      	adds	r3, r0, #1
 800ceec:	d102      	bne.n	800cef4 <_fstat_r+0x1c>
 800ceee:	682b      	ldr	r3, [r5, #0]
 800cef0:	b103      	cbz	r3, 800cef4 <_fstat_r+0x1c>
 800cef2:	6023      	str	r3, [r4, #0]
 800cef4:	bd38      	pop	{r3, r4, r5, pc}
 800cef6:	bf00      	nop
 800cef8:	20000988 	.word	0x20000988

0800cefc <_isatty_r>:
 800cefc:	b538      	push	{r3, r4, r5, lr}
 800cefe:	4d06      	ldr	r5, [pc, #24]	; (800cf18 <_isatty_r+0x1c>)
 800cf00:	2300      	movs	r3, #0
 800cf02:	4604      	mov	r4, r0
 800cf04:	4608      	mov	r0, r1
 800cf06:	602b      	str	r3, [r5, #0]
 800cf08:	f7f6 fb29 	bl	800355e <_isatty>
 800cf0c:	1c43      	adds	r3, r0, #1
 800cf0e:	d102      	bne.n	800cf16 <_isatty_r+0x1a>
 800cf10:	682b      	ldr	r3, [r5, #0]
 800cf12:	b103      	cbz	r3, 800cf16 <_isatty_r+0x1a>
 800cf14:	6023      	str	r3, [r4, #0]
 800cf16:	bd38      	pop	{r3, r4, r5, pc}
 800cf18:	20000988 	.word	0x20000988

0800cf1c <_sbrk_r>:
 800cf1c:	b538      	push	{r3, r4, r5, lr}
 800cf1e:	4d06      	ldr	r5, [pc, #24]	; (800cf38 <_sbrk_r+0x1c>)
 800cf20:	2300      	movs	r3, #0
 800cf22:	4604      	mov	r4, r0
 800cf24:	4608      	mov	r0, r1
 800cf26:	602b      	str	r3, [r5, #0]
 800cf28:	f7f6 fb32 	bl	8003590 <_sbrk>
 800cf2c:	1c43      	adds	r3, r0, #1
 800cf2e:	d102      	bne.n	800cf36 <_sbrk_r+0x1a>
 800cf30:	682b      	ldr	r3, [r5, #0]
 800cf32:	b103      	cbz	r3, 800cf36 <_sbrk_r+0x1a>
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	bd38      	pop	{r3, r4, r5, pc}
 800cf38:	20000988 	.word	0x20000988

0800cf3c <_init>:
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3e:	bf00      	nop
 800cf40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf42:	bc08      	pop	{r3}
 800cf44:	469e      	mov	lr, r3
 800cf46:	4770      	bx	lr

0800cf48 <_fini>:
 800cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4a:	bf00      	nop
 800cf4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf4e:	bc08      	pop	{r3}
 800cf50:	469e      	mov	lr, r3
 800cf52:	4770      	bx	lr
