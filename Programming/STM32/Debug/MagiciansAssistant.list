
MagiciansAssistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001014  0800ce90  0800ce90  0001ce90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dea4  0800dea4  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dea4  0800dea4  0001dea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800deac  0800deac  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800deac  0800deac  0001deac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800deb0  0800deb0  0001deb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800deb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  2000009c  0800df50  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000998  0800df50  00020998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dce7  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004036  00000000  00000000  0003ddf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a78  00000000  00000000  00041e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001497  00000000  00000000  000438a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ba50  00000000  00000000  00044d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023657  00000000  00000000  0007078f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fccf2  00000000  00000000  00093de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007848  00000000  00000000  00190ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00198320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce78 	.word	0x0800ce78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800ce78 	.word	0x0800ce78

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b970 	b.w	8000e14 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9e08      	ldr	r6, [sp, #32]
 8000b52:	460d      	mov	r5, r1
 8000b54:	4604      	mov	r4, r0
 8000b56:	460f      	mov	r7, r1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d14a      	bne.n	8000bf2 <__udivmoddi4+0xa6>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	4694      	mov	ip, r2
 8000b60:	d965      	bls.n	8000c2e <__udivmoddi4+0xe2>
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	b143      	cbz	r3, 8000b7a <__udivmoddi4+0x2e>
 8000b68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b6c:	f1c3 0220 	rsb	r2, r3, #32
 8000b70:	409f      	lsls	r7, r3
 8000b72:	fa20 f202 	lsr.w	r2, r0, r2
 8000b76:	4317      	orrs	r7, r2
 8000b78:	409c      	lsls	r4, r3
 8000b7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b7e:	fa1f f58c 	uxth.w	r5, ip
 8000b82:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b86:	0c22      	lsrs	r2, r4, #16
 8000b88:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b90:	fb01 f005 	mul.w	r0, r1, r5
 8000b94:	4290      	cmp	r0, r2
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x62>
 8000b98:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ba0:	f080 811c 	bcs.w	8000ddc <__udivmoddi4+0x290>
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	f240 8119 	bls.w	8000ddc <__udivmoddi4+0x290>
 8000baa:	3902      	subs	r1, #2
 8000bac:	4462      	add	r2, ip
 8000bae:	1a12      	subs	r2, r2, r0
 8000bb0:	b2a4      	uxth	r4, r4
 8000bb2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bb6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bbe:	fb00 f505 	mul.w	r5, r0, r5
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	d90a      	bls.n	8000bdc <__udivmoddi4+0x90>
 8000bc6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bca:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bce:	f080 8107 	bcs.w	8000de0 <__udivmoddi4+0x294>
 8000bd2:	42a5      	cmp	r5, r4
 8000bd4:	f240 8104 	bls.w	8000de0 <__udivmoddi4+0x294>
 8000bd8:	4464      	add	r4, ip
 8000bda:	3802      	subs	r0, #2
 8000bdc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be0:	1b64      	subs	r4, r4, r5
 8000be2:	2100      	movs	r1, #0
 8000be4:	b11e      	cbz	r6, 8000bee <__udivmoddi4+0xa2>
 8000be6:	40dc      	lsrs	r4, r3
 8000be8:	2300      	movs	r3, #0
 8000bea:	e9c6 4300 	strd	r4, r3, [r6]
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0xbc>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	f000 80ed 	beq.w	8000dd6 <__udivmoddi4+0x28a>
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	e9c6 0500 	strd	r0, r5, [r6]
 8000c02:	4608      	mov	r0, r1
 8000c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c08:	fab3 f183 	clz	r1, r3
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	d149      	bne.n	8000ca4 <__udivmoddi4+0x158>
 8000c10:	42ab      	cmp	r3, r5
 8000c12:	d302      	bcc.n	8000c1a <__udivmoddi4+0xce>
 8000c14:	4282      	cmp	r2, r0
 8000c16:	f200 80f8 	bhi.w	8000e0a <__udivmoddi4+0x2be>
 8000c1a:	1a84      	subs	r4, r0, r2
 8000c1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c20:	2001      	movs	r0, #1
 8000c22:	4617      	mov	r7, r2
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d0e2      	beq.n	8000bee <__udivmoddi4+0xa2>
 8000c28:	e9c6 4700 	strd	r4, r7, [r6]
 8000c2c:	e7df      	b.n	8000bee <__udivmoddi4+0xa2>
 8000c2e:	b902      	cbnz	r2, 8000c32 <__udivmoddi4+0xe6>
 8000c30:	deff      	udf	#255	; 0xff
 8000c32:	fab2 f382 	clz	r3, r2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8090 	bne.w	8000d5c <__udivmoddi4+0x210>
 8000c3c:	1a8a      	subs	r2, r1, r2
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f fe8c 	uxth.w	lr, ip
 8000c46:	2101      	movs	r1, #1
 8000c48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c50:	0c22      	lsrs	r2, r4, #16
 8000c52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c56:	fb0e f005 	mul.w	r0, lr, r5
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x124>
 8000c5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x122>
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	f200 80cb 	bhi.w	8000e04 <__udivmoddi4+0x2b8>
 8000c6e:	4645      	mov	r5, r8
 8000c70:	1a12      	subs	r2, r2, r0
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c78:	fb07 2210 	mls	r2, r7, r0, r2
 8000c7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c80:	fb0e fe00 	mul.w	lr, lr, r0
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x14e>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c90:	d202      	bcs.n	8000c98 <__udivmoddi4+0x14c>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	f200 80bb 	bhi.w	8000e0e <__udivmoddi4+0x2c2>
 8000c98:	4610      	mov	r0, r2
 8000c9a:	eba4 040e 	sub.w	r4, r4, lr
 8000c9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ca2:	e79f      	b.n	8000be4 <__udivmoddi4+0x98>
 8000ca4:	f1c1 0720 	rsb	r7, r1, #32
 8000ca8:	408b      	lsls	r3, r1
 8000caa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cb6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cba:	40fd      	lsrs	r5, r7
 8000cbc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc0:	4323      	orrs	r3, r4
 8000cc2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	fb09 5518 	mls	r5, r9, r8, r5
 8000cce:	0c1c      	lsrs	r4, r3, #16
 8000cd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cd8:	42a5      	cmp	r5, r4
 8000cda:	fa02 f201 	lsl.w	r2, r2, r1
 8000cde:	fa00 f001 	lsl.w	r0, r0, r1
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b0>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cec:	f080 8088 	bcs.w	8000e00 <__udivmoddi4+0x2b4>
 8000cf0:	42a5      	cmp	r5, r4
 8000cf2:	f240 8085 	bls.w	8000e00 <__udivmoddi4+0x2b4>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	4464      	add	r4, ip
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	b29d      	uxth	r5, r3
 8000d00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d04:	fb09 4413 	mls	r4, r9, r3, r4
 8000d08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1da>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d1c:	d26c      	bcs.n	8000df8 <__udivmoddi4+0x2ac>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	d96a      	bls.n	8000df8 <__udivmoddi4+0x2ac>
 8000d22:	3b02      	subs	r3, #2
 8000d24:	4464      	add	r4, ip
 8000d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	42ac      	cmp	r4, r5
 8000d34:	46c8      	mov	r8, r9
 8000d36:	46ae      	mov	lr, r5
 8000d38:	d356      	bcc.n	8000de8 <__udivmoddi4+0x29c>
 8000d3a:	d053      	beq.n	8000de4 <__udivmoddi4+0x298>
 8000d3c:	b156      	cbz	r6, 8000d54 <__udivmoddi4+0x208>
 8000d3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d42:	eb64 040e 	sbc.w	r4, r4, lr
 8000d46:	fa04 f707 	lsl.w	r7, r4, r7
 8000d4a:	40ca      	lsrs	r2, r1
 8000d4c:	40cc      	lsrs	r4, r1
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	e9c6 7400 	strd	r7, r4, [r6]
 8000d54:	4618      	mov	r0, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5c:	f1c3 0120 	rsb	r1, r3, #32
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	fa20 f201 	lsr.w	r2, r0, r1
 8000d68:	fa25 f101 	lsr.w	r1, r5, r1
 8000d6c:	409d      	lsls	r5, r3
 8000d6e:	432a      	orrs	r2, r5
 8000d70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d86:	fb00 f50e 	mul.w	r5, r0, lr
 8000d8a:	428d      	cmp	r5, r1
 8000d8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x258>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9a:	d22f      	bcs.n	8000dfc <__udivmoddi4+0x2b0>
 8000d9c:	428d      	cmp	r5, r1
 8000d9e:	d92d      	bls.n	8000dfc <__udivmoddi4+0x2b0>
 8000da0:	3802      	subs	r0, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	1b49      	subs	r1, r1, r5
 8000da6:	b292      	uxth	r2, r2
 8000da8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dac:	fb07 1115 	mls	r1, r7, r5, r1
 8000db0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db4:	fb05 f10e 	mul.w	r1, r5, lr
 8000db8:	4291      	cmp	r1, r2
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x282>
 8000dbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc4:	d216      	bcs.n	8000df4 <__udivmoddi4+0x2a8>
 8000dc6:	4291      	cmp	r1, r2
 8000dc8:	d914      	bls.n	8000df4 <__udivmoddi4+0x2a8>
 8000dca:	3d02      	subs	r5, #2
 8000dcc:	4462      	add	r2, ip
 8000dce:	1a52      	subs	r2, r2, r1
 8000dd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dd4:	e738      	b.n	8000c48 <__udivmoddi4+0xfc>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e708      	b.n	8000bee <__udivmoddi4+0xa2>
 8000ddc:	4639      	mov	r1, r7
 8000dde:	e6e6      	b.n	8000bae <__udivmoddi4+0x62>
 8000de0:	4610      	mov	r0, r2
 8000de2:	e6fb      	b.n	8000bdc <__udivmoddi4+0x90>
 8000de4:	4548      	cmp	r0, r9
 8000de6:	d2a9      	bcs.n	8000d3c <__udivmoddi4+0x1f0>
 8000de8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000df0:	3b01      	subs	r3, #1
 8000df2:	e7a3      	b.n	8000d3c <__udivmoddi4+0x1f0>
 8000df4:	4645      	mov	r5, r8
 8000df6:	e7ea      	b.n	8000dce <__udivmoddi4+0x282>
 8000df8:	462b      	mov	r3, r5
 8000dfa:	e794      	b.n	8000d26 <__udivmoddi4+0x1da>
 8000dfc:	4640      	mov	r0, r8
 8000dfe:	e7d1      	b.n	8000da4 <__udivmoddi4+0x258>
 8000e00:	46d0      	mov	r8, sl
 8000e02:	e77b      	b.n	8000cfc <__udivmoddi4+0x1b0>
 8000e04:	3d02      	subs	r5, #2
 8000e06:	4462      	add	r2, ip
 8000e08:	e732      	b.n	8000c70 <__udivmoddi4+0x124>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e70a      	b.n	8000c24 <__udivmoddi4+0xd8>
 8000e0e:	4464      	add	r4, ip
 8000e10:	3802      	subs	r0, #2
 8000e12:	e742      	b.n	8000c9a <__udivmoddi4+0x14e>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <initArducam>:
 * The chip select signal should always be LOW during the SPI read or write bus cycle
 * I2C interfaces directly with the OV2640 sensor (the camera itself)
 * SPI interfaces with the Chip as a whole, to indirectly control the camera
 */
//void initArducam(ArducamController* pCtrl, I2C_HandleTypeDef* pHI2C, SPI_HandleTypeDef* pHSPI, GPIO_TypeDef* pCSPort, uint16_t csPinNo, GPIO_TypeDef* pFlashPort, uint16_t flashPinNo){
HAL_StatusTypeDef initArducam(ArducamController* pCtrl){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	printf("Initializing ArduCam\n");
 8000e20:	4836      	ldr	r0, [pc, #216]	; (8000efc <initArducam+0xe4>)
 8000e22:	f00b f9bf 	bl	800c1a4 <puts>

	resetCPLD(pCtrl);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 fb48 	bl	80014bc <resetCPLD>
	if((pCtrl->status = HAL_I2C_IsDeviceReady(pCtrl->pI2CHandle, I2C_ADDR_WRITE, 1, HAL_MAX_DELAY)) != HAL_OK ||
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6858      	ldr	r0, [r3, #4]
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	2201      	movs	r2, #1
 8000e36:	2160      	movs	r1, #96	; 0x60
 8000e38:	f003 f8f2 	bl	8004020 <HAL_I2C_IsDeviceReady>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	701a      	strb	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10e      	bne.n	8000e6a <initArducam+0x52>
			(pCtrl->status = HAL_I2C_IsDeviceReady(pCtrl->pI2CHandle, I2C_ADDR_READ, 1, HAL_MAX_DELAY != HAL_OK))){
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6858      	ldr	r0, [r3, #4]
 8000e50:	2301      	movs	r3, #1
 8000e52:	2201      	movs	r2, #1
 8000e54:	2161      	movs	r1, #97	; 0x61
 8000e56:	f003 f8e3 	bl	8004020 <HAL_I2C_IsDeviceReady>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	781b      	ldrb	r3, [r3, #0]
	if((pCtrl->status = HAL_I2C_IsDeviceReady(pCtrl->pI2CHandle, I2C_ADDR_WRITE, 1, HAL_MAX_DELAY)) != HAL_OK ||
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <initArducam+0x5a>
		printf("Arducam I2C Error.\n");
 8000e6a:	4825      	ldr	r0, [pc, #148]	; (8000f00 <initArducam+0xe8>)
 8000e6c:	f00b f99a 	bl	800c1a4 <puts>
 8000e70:	e032      	b.n	8000ed8 <initArducam+0xc0>
	} else if(!isSPIWorking(pCtrl)){
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f9d0 	bl	8001218 <isSPIWorking>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d103      	bne.n	8000e86 <initArducam+0x6e>
		printf("Arducam SPI Error.\n");
 8000e7e:	4821      	ldr	r0, [pc, #132]	; (8000f04 <initArducam+0xec>)
 8000e80:	f00b f990 	bl	800c1a4 <puts>
 8000e84:	e028      	b.n	8000ed8 <initArducam+0xc0>
	} else {
		printf("Arducam I2C Check Passed | SPI Check Passed\n");
 8000e86:	4820      	ldr	r0, [pc, #128]	; (8000f08 <initArducam+0xf0>)
 8000e88:	f00b f98c 	bl	800c1a4 <puts>

		pCtrl->pictureBufferSize = 0;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000e92:	2200      	movs	r2, #0
 8000e94:	83da      	strh	r2, [r3, #30]
		pCtrl->base64Size = 0;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	839a      	strh	r2, [r3, #28]
		memset(pCtrl->pictureBuffer, 0, MAX_PIC_BUF_SIZE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	331a      	adds	r3, #26
 8000ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f00b fa5a 	bl	800c364 <memset>
		memset(pCtrl->base64Buffer, 0, MAX_BASE64_BUF_SIZE);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb6:	331a      	adds	r3, #26
 8000eb8:	f241 0201 	movw	r2, #4097	; 0x1001
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f00b fa50 	bl	800c364 <memset>

		setDefaultSettings(pCtrl);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f95f 	bl	8001188 <setDefaultSettings>
		HAL_Delay(1000);
 8000eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ece:	f002 fbfb 	bl	80036c8 <HAL_Delay>
		shutter(pCtrl);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 fb7f 	bl	80015d6 <shutter>
	}

	if(pCtrl->status != HAL_OK){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <initArducam+0xd0>
		printf("FAILED Arducam Init\n");
 8000ee0:	480a      	ldr	r0, [pc, #40]	; (8000f0c <initArducam+0xf4>)
 8000ee2:	f00b f95f 	bl	800c1a4 <puts>
 8000ee6:	e002      	b.n	8000eee <initArducam+0xd6>
	} else {
		printf("SUCCESS Arducam Init\n");
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <initArducam+0xf8>)
 8000eea:	f00b f95b 	bl	800c1a4 <puts>
	}

	return pCtrl->status;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	781b      	ldrb	r3, [r3, #0]

	//printStatus(pCtrl);
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	0800ce90 	.word	0x0800ce90
 8000f00:	0800cea8 	.word	0x0800cea8
 8000f04:	0800cebc 	.word	0x0800cebc
 8000f08:	0800ced0 	.word	0x0800ced0
 8000f0c:	0800cefc 	.word	0x0800cefc
 8000f10:	0800cf10 	.word	0x0800cf10

08000f14 <disconnectArducam>:

//Deconstructor
HAL_StatusTypeDef disconnectArducam(ArducamController* pCtrl){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	printf("Disconnecting Arducam Controller...\n");
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <disconnectArducam+0x1c>)
 8000f1e:	f00b f941 	bl	800c1a4 <puts>
	return pCtrl->status;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	781b      	ldrb	r3, [r3, #0]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0800cf28 	.word	0x0800cf28

08000f34 <singleCapture>:

//Fills pictureBuffer with the Picture Data
HAL_StatusTypeDef singleCapture(ArducamController* pCtrl){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
		printf("Starting Capture\n");
 8000f3c:	4820      	ldr	r0, [pc, #128]	; (8000fc0 <singleCapture+0x8c>)
 8000f3e:	f00b f931 	bl	800c1a4 <puts>

		flashOn(pCtrl);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 fb59 	bl	80015fa <flashOn>

		resetFIFOPointers(pCtrl);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 faeb 	bl	8001524 <resetFIFOPointers>
		clearFIFOFlag(pCtrl);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fad8 	bl	8001504 <clearFIFOFlag>
		setNCaptureFrames(pCtrl, 1);
 8000f54:	2101      	movs	r1, #1
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fb04 	bl	8001564 <setNCaptureFrames>
		setCaptureFlag(pCtrl);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 faf1 	bl	8001544 <setCaptureFlag>

		while(!isFIFOReady(pCtrl)){
 8000f62:	e003      	b.n	8000f6c <singleCapture+0x38>
			HAL_Delay(CAPTURE_DELAY);//    Wait 'til Finished Flag is set
 8000f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f68:	f002 fbae 	bl	80036c8 <HAL_Delay>
		while(!isFIFOReady(pCtrl)){
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 fa8f 	bl	8001490 <isFIFOReady>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f5      	beq.n	8000f64 <singleCapture+0x30>
		}
		printf("FIFO Write Finished!\n");
 8000f78:	4812      	ldr	r0, [pc, #72]	; (8000fc4 <singleCapture+0x90>)
 8000f7a:	f00b f913 	bl	800c1a4 <puts>
		flashOff(pCtrl);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 fb4b 	bl	800161a <flashOff>

		if(burstReadFIFO(pCtrl) == 0){
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 f823 	bl	8000fd0 <burstReadFIFO>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <singleCapture+0x62>
			pCtrl->status = HAL_ERROR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
		}

		if(pCtrl->status != HAL_OK){
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d006      	beq.n	8000fac <singleCapture+0x78>
			printf("FAILED Single Snap\n");
 8000f9e:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <singleCapture+0x94>)
 8000fa0:	f00b f900 	bl	800c1a4 <puts>
			registerDump(pCtrl);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 fb49 	bl	800163c <registerDump>
 8000faa:	e002      	b.n	8000fb2 <singleCapture+0x7e>
		} else {
			printf("SUCCESS Single Snap\n");
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <singleCapture+0x98>)
 8000fae:	f00b f8f9 	bl	800c1a4 <puts>
		}

		return pCtrl->status;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	0800cf4c 	.word	0x0800cf4c
 8000fc4:	0800cf60 	.word	0x0800cf60
 8000fc8:	0800cf78 	.word	0x0800cf78
 8000fcc:	0800cf8c 	.word	0x0800cf8c

08000fd0 <burstReadFIFO>:

//Returns the amount of data (in bytes) read from FIFO
uint16_t burstReadFIFO(ArducamController *pCtrl){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	6078      	str	r0, [r7, #4]

	uint32_t fifoLength = getFIFOLength(pCtrl);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f885 	bl	80010e8 <getFIFOLength>
 8000fde:	6138      	str	r0, [r7, #16]
	uint32_t transmissionSize = fifoLength;
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	617b      	str	r3, [r7, #20]
	if(fifoLength > 4096){
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fea:	d906      	bls.n	8000ffa <burstReadFIFO+0x2a>
		printf("Had to Truncate FIFO Transfer\n");
 8000fec:	4839      	ldr	r0, [pc, #228]	; (80010d4 <burstReadFIFO+0x104>)
 8000fee:	f00b f8d9 	bl	800c1a4 <puts>
		transmissionSize = 4096;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e00c      	b.n	8001014 <burstReadFIFO+0x44>
	} else if(fifoLength == 0){
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d109      	bne.n	8001014 <burstReadFIFO+0x44>
		printf("FAILED burst read FIFO, FIFO has no data\n");
 8001000:	4835      	ldr	r0, [pc, #212]	; (80010d8 <burstReadFIFO+0x108>)
 8001002:	f00b f8cf 	bl	800c1a4 <puts>
		pCtrl->pictureBufferSize = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800100c:	2200      	movs	r2, #0
 800100e:	83da      	strh	r2, [r3, #30]
		return 0;
 8001010:	2300      	movs	r3, #0
 8001012:	e05a      	b.n	80010ca <burstReadFIFO+0xfa>
	}

	clearPicBuf(pCtrl);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f89d 	bl	8001154 <clearPicBuf>
	pCtrl->pictureBufferSize = transmissionSize; //TODO: Need to figure out how much data to buffer
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	b29a      	uxth	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001024:	83da      	strh	r2, [r3, #30]

	printf("Reading %u bytes from Arducam\n", pCtrl->pictureBufferSize);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800102c:	8bdb      	ldrh	r3, [r3, #30]
 800102e:	4619      	mov	r1, r3
 8001030:	482a      	ldr	r0, [pc, #168]	; (80010dc <burstReadFIFO+0x10c>)
 8001032:	f00b f851 	bl	800c0d8 <iprintf>
	cam_enable(pCtrl);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 faad 	bl	8001596 <cam_enable>

	uint8_t cmd = FIFO_BURST_READ;
 800103c:	233c      	movs	r3, #60	; 0x3c
 800103e:	73fb      	strb	r3, [r7, #15]
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &cmd, pCtrl->pictureBuffer, 1, HAL_MAX_DELAY);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6898      	ldr	r0, [r3, #8]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f103 021a 	add.w	r2, r3, #26
 800104a:	f107 010f 	add.w	r1, r7, #15
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	f005 fb3b 	bl	80066d0 <HAL_SPI_TransmitReceive>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	701a      	strb	r2, [r3, #0]
	if(pCtrl->status != HAL_OK){
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <burstReadFIFO+0xaa>
		printf("FAILED sending FIFO_BURST_READ byte\n");
 800106a:	481d      	ldr	r0, [pc, #116]	; (80010e0 <burstReadFIFO+0x110>)
 800106c:	f00b f89a 	bl	800c1a4 <puts>
		printStatus(pCtrl);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f001 f993 	bl	800239c <printStatus>
		return 0;
 8001076:	2300      	movs	r3, #0
 8001078:	e027      	b.n	80010ca <burstReadFIFO+0xfa>
	} else {
		pCtrl -> status = HAL_SPI_Receive(pCtrl->pSPIHandle, pCtrl->pictureBuffer, pCtrl->pictureBufferSize, HAL_MAX_DELAY); //Read bytes into pictureBuffer
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6898      	ldr	r0, [r3, #8]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f103 011a 	add.w	r1, r3, #26
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800108a:	8bda      	ldrh	r2, [r3, #30]
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	f005 f9e7 	bl	8006462 <HAL_SPI_Receive>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	701a      	strb	r2, [r3, #0]
		if(pCtrl->status != HAL_OK){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <burstReadFIFO+0xe4>
			printf("FAILED receiving picture data from SPI bus\n");
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <burstReadFIFO+0x114>)
 80010a6:	f00b f87d 	bl	800c1a4 <puts>
			printStatus(pCtrl);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f001 f976 	bl	800239c <printStatus>
			return 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e00a      	b.n	80010ca <burstReadFIFO+0xfa>
		}
	}
	HAL_Delay(1000);
 80010b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b8:	f002 fb06 	bl	80036c8 <HAL_Delay>

	cam_disable(pCtrl);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 fa7a 	bl	80015b6 <cam_disable>
	return pCtrl->pictureBufferSize;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80010c8:	8bdb      	ldrh	r3, [r3, #30]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	0800cfa0 	.word	0x0800cfa0
 80010d8:	0800cfc0 	.word	0x0800cfc0
 80010dc:	0800cfec 	.word	0x0800cfec
 80010e0:	0800d00c 	.word	0x0800d00c
 80010e4:	0800d030 	.word	0x0800d030

080010e8 <getFIFOLength>:

//How we find the number of bytes the FIFO is holding (for burst reading)
uint32_t getFIFOLength(ArducamController *pCtrl){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	uint32_t reg0 = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
	uint32_t reg1 = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
	uint32_t reg2 = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
	uint32_t fifoLength = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]

	reg0 = (uint32_t) spiRegRead(pCtrl, FIFO_BYTE0);
 8001100:	2142      	movs	r1, #66	; 0x42
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f964 	bl	80013d0 <spiRegRead>
 8001108:	4603      	mov	r3, r0
 800110a:	617b      	str	r3, [r7, #20]
	reg1 = (uint32_t) spiRegRead(pCtrl, FIFO_BYTE1);
 800110c:	2143      	movs	r1, #67	; 0x43
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f95e 	bl	80013d0 <spiRegRead>
 8001114:	4603      	mov	r3, r0
 8001116:	613b      	str	r3, [r7, #16]
	reg2 = (uint32_t) (spiRegRead(pCtrl, FIFO_BYTE2) & 0x7F);
 8001118:	2144      	movs	r1, #68	; 0x44
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f958 	bl	80013d0 <spiRegRead>
 8001120:	4603      	mov	r3, r0
 8001122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001126:	60fb      	str	r3, [r7, #12]

	//fifoLength = ((longReg2 << 16) | (longReg1 << 8) | longReg0) & 0x007FFFFF;
	fifoLength = ((reg2 << 16) | (reg1 << 8) | reg0) & 0x007FFFFF;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	041a      	lsls	r2, r3, #16
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	431a      	orrs	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	4313      	orrs	r3, r2
 8001136:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800113a:	60bb      	str	r3, [r7, #8]
	printf("FIFO Length : %lu bytes\n", fifoLength);
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	4804      	ldr	r0, [pc, #16]	; (8001150 <getFIFOLength+0x68>)
 8001140:	f00a ffca 	bl	800c0d8 <iprintf>
	return fifoLength;
 8001144:	68bb      	ldr	r3, [r7, #8]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	0800d05c 	.word	0x0800d05c

08001154 <clearPicBuf>:

//Clears the picture buffer and base 64 buffer
//Sets all bytes to 0xFF
void clearPicBuf(ArducamController* pCtrl){
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	memset(pCtrl->pictureBuffer, 0, MAX_PIC_BUF_SIZE);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	331a      	adds	r3, #26
 8001160:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f00b f8fc 	bl	800c364 <memset>
	memset(pCtrl->base64Buffer, 0, MAX_BASE64_BUF_SIZE);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001172:	331a      	adds	r3, #26
 8001174:	f241 0201 	movw	r2, #4097	; 0x1001
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f00b f8f2 	bl	800c364 <memset>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <setDefaultSettings>:

void setDefaultSettings(ArducamController* pCtrl){
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	printf("Configuring Default Settings\n");
 8001190:	481c      	ldr	r0, [pc, #112]	; (8001204 <setDefaultSettings+0x7c>)
 8001192:	f00b f807 	bl	800c1a4 <puts>
	uint8_t data = 0x01;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0xFF, data);
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	461a      	mov	r2, r3
 800119e:	21ff      	movs	r1, #255	; 0xff
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f869 	bl	8001278 <i2cRegWrite>
	data = 0x80;
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0x12, data);
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	461a      	mov	r2, r3
 80011ae:	2112      	movs	r1, #18
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f861 	bl	8001278 <i2cRegWrite>
	HAL_Delay(100);
 80011b6:	2064      	movs	r0, #100	; 0x64
 80011b8:	f002 fa86 	bl	80036c8 <HAL_Delay>

	i2cWriteMultiple(pCtrl, OV2640_JPEG_INIT);
 80011bc:	4912      	ldr	r1, [pc, #72]	; (8001208 <setDefaultSettings+0x80>)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f88e 	bl	80012e0 <i2cWriteMultiple>
	i2cWriteMultiple(pCtrl, OV2640_YUV422);
 80011c4:	4911      	ldr	r1, [pc, #68]	; (800120c <setDefaultSettings+0x84>)
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f88a 	bl	80012e0 <i2cWriteMultiple>
	i2cWriteMultiple(pCtrl, OV2640_JPEG);
 80011cc:	4910      	ldr	r1, [pc, #64]	; (8001210 <setDefaultSettings+0x88>)
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f886 	bl	80012e0 <i2cWriteMultiple>
	data = 0x01;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0xFF, data);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	461a      	mov	r2, r3
 80011dc:	21ff      	movs	r1, #255	; 0xff
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f84a 	bl	8001278 <i2cRegWrite>
	data = 0x00;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0x15, data);
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	461a      	mov	r2, r3
 80011ec:	2115      	movs	r1, #21
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f842 	bl	8001278 <i2cRegWrite>
	i2cWriteMultiple(pCtrl, OV2640_320x240_JPEG);
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <setDefaultSettings+0x8c>)
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f872 	bl	80012e0 <i2cWriteMultiple>

	// Sets VSync Polarity Low
	/*data = 0x02;
	spiRegWrite(pCtrl, (uint8_t)0x03, data);*/

}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800d078 	.word	0x0800d078
 8001208:	0800db18 	.word	0x0800db18
 800120c:	0800dc98 	.word	0x0800dc98
 8001210:	0800dcac 	.word	0x0800dcac
 8001214:	0800dcc0 	.word	0x0800dcc0

08001218 <isSPIWorking>:


int isSPIWorking(ArducamController *pCtrl){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	uint8_t origVal = 0x00;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]
	uint8_t testVal = 0xAB;
 8001224:	23ab      	movs	r3, #171	; 0xab
 8001226:	73bb      	strb	r3, [r7, #14]
	uint8_t newVal = 0x00;
 8001228:	2300      	movs	r3, #0
 800122a:	737b      	strb	r3, [r7, #13]

	origVal = spiRegRead(pCtrl, TEST_REGISTER);
 800122c:	2100      	movs	r1, #0
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f8ce 	bl	80013d0 <spiRegRead>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]
	testVal = origVal + 1;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	3301      	adds	r3, #1
 800123c:	73bb      	strb	r3, [r7, #14]
	if(spiRegWrite(pCtrl, TEST_REGISTER, testVal) != HAL_OK){
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	461a      	mov	r2, r3
 8001242:	2100      	movs	r1, #0
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f86b 	bl	8001320 <spiRegWrite>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <isSPIWorking+0x3c>
		return 0;
 8001250:	2300      	movs	r3, #0
 8001252:	e00c      	b.n	800126e <isSPIWorking+0x56>
	}
	newVal = spiRegRead(pCtrl, TEST_REGISTER);
 8001254:	2100      	movs	r1, #0
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f8ba 	bl	80013d0 <spiRegRead>
 800125c:	4603      	mov	r3, r0
 800125e:	737b      	strb	r3, [r7, #13]

	return (newVal == testVal);
 8001260:	7b7a      	ldrb	r2, [r7, #13]
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	429a      	cmp	r2, r3
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <i2cRegWrite>:

/*To Write over i2c:
* Request I2C_ADDR_WRITE -> Send Cam Register Address (left shift device addr's by 1) -> Send Data bytes
*/
void i2cRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t data){
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
 8001284:	4613      	mov	r3, r2
 8001286:	70bb      	strb	r3, [r7, #2]
	printf("(I2C) Writing 0x%04X to Reg 0x%02X\n", data, reg);
 8001288:	78bb      	ldrb	r3, [r7, #2]
 800128a:	78fa      	ldrb	r2, [r7, #3]
 800128c:	4619      	mov	r1, r3
 800128e:	4812      	ldr	r0, [pc, #72]	; (80012d8 <i2cRegWrite+0x60>)
 8001290:	f00a ff22 	bl	800c0d8 <iprintf>

	uint8_t transmission[2] = {reg, data};
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	733b      	strb	r3, [r7, #12]
 8001298:	78bb      	ldrb	r3, [r7, #2]
 800129a:	737b      	strb	r3, [r7, #13]

	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, transmission, 2, CAM_TIMEOUT);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6858      	ldr	r0, [r3, #4]
 80012a0:	f107 020c 	add.w	r2, r7, #12
 80012a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2302      	movs	r3, #2
 80012ac:	2160      	movs	r1, #96	; 0x60
 80012ae:	f002 fd9f 	bl	8003df0 <HAL_I2C_Master_Transmit>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	701a      	strb	r2, [r3, #0]
	if(pCtrl->status != HAL_OK){
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <i2cRegWrite+0x56>
		printf("FAILED Writing I2C Reg\n");
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <i2cRegWrite+0x64>)
 80012c4:	f00a ff6e 	bl	800c1a4 <puts>
		printStatus(pCtrl);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f001 f867 	bl	800239c <printStatus>
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, pData, (uint16_t) size, CAM_TIMEOUT);
	if(pCtrl->status != HAL_OK){
		printf("FAILED Writing I2C Data\n");
		printStatus(pCtrl);
	}*/
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	0800d098 	.word	0x0800d098
 80012dc:	0800d0bc 	.word	0x0800d0bc

080012e0 <i2cWriteMultiple>:
	printf("(I2C) Read 0x%02X from 0x%02X\n", data, reg);
	return data;

}

void i2cWriteMultiple(ArducamController* pCtrl, const struct SensorReg *regList){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	struct SensorReg *current = (struct SensorReg *) regList;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	60fb      	str	r3, [r7, #12]

	while(current->addr != 0xFF || current->val != 0xFF){
 80012ee:	e00a      	b.n	8001306 <i2cWriteMultiple+0x26>
		i2cRegWrite(pCtrl, current->addr, current->val);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	7819      	ldrb	r1, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	785b      	ldrb	r3, [r3, #1]
 80012f8:	461a      	mov	r2, r3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffbc 	bl	8001278 <i2cRegWrite>
		current++;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3302      	adds	r3, #2
 8001304:	60fb      	str	r3, [r7, #12]
	while(current->addr != 0xFF || current->val != 0xFF){
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2bff      	cmp	r3, #255	; 0xff
 800130c:	d1f0      	bne.n	80012f0 <i2cWriteMultiple+0x10>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	785b      	ldrb	r3, [r3, #1]
 8001312:	2bff      	cmp	r3, #255	; 0xff
 8001314:	d1ec      	bne.n	80012f0 <i2cWriteMultiple+0x10>
	}

}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <spiRegWrite>:

HAL_StatusTypeDef spiRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t data){
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
 800132c:	4613      	mov	r3, r2
 800132e:	70bb      	strb	r3, [r7, #2]
	cam_enable(pCtrl); // CS Pin Set LOW
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f930 	bl	8001596 <cam_enable>
	HAL_Delay(CS_DELAY);
 8001336:	2000      	movs	r0, #0
 8001338:	f002 f9c6 	bl	80036c8 <HAL_Delay>
	uint8_t maskedAddr = reg | SPI_WRITE_MASK; // a 1 followed by Reg addr, to write to reg
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001342:	b2db      	uxtb	r3, r3
 8001344:	73fb      	strb	r3, [r7, #15]

	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, &maskedAddr, 1, CAM_TIMEOUT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6898      	ldr	r0, [r3, #8]
 800134a:	f107 010f 	add.w	r1, r7, #15
 800134e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001352:	2201      	movs	r2, #1
 8001354:	f004 ff10 	bl	8006178 <HAL_SPI_Transmit>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	701a      	strb	r2, [r3, #0]
	printf("(SPI) Writing 0x%02X to 0x%02X | cmd = 0x%02X\n", data, reg, maskedAddr);
 8001360:	78bb      	ldrb	r3, [r7, #2]
 8001362:	4619      	mov	r1, r3
 8001364:	78fa      	ldrb	r2, [r7, #3]
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	4816      	ldr	r0, [pc, #88]	; (80013c4 <spiRegWrite+0xa4>)
 800136a:	f00a feb5 	bl	800c0d8 <iprintf>
	if(pCtrl->status != HAL_OK){
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <spiRegWrite+0x62>
		printf("FAILED Sending SPI_READ_MASK\n");
 8001376:	4814      	ldr	r0, [pc, #80]	; (80013c8 <spiRegWrite+0xa8>)
 8001378:	f00a ff14 	bl	800c1a4 <puts>
		printStatus(pCtrl);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f001 f80d 	bl	800239c <printStatus>
	}
	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, &data, 1, CAM_TIMEOUT);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6898      	ldr	r0, [r3, #8]
 8001386:	1cb9      	adds	r1, r7, #2
 8001388:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800138c:	2201      	movs	r2, #1
 800138e:	f004 fef3 	bl	8006178 <HAL_SPI_Transmit>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	701a      	strb	r2, [r3, #0]
	if(pCtrl->status != HAL_OK){
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <spiRegWrite+0x92>
		printf("FAILED Writing SPI Reg 0x%02X\n", reg);
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	4619      	mov	r1, r3
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <spiRegWrite+0xac>)
 80013a8:	f00a fe96 	bl	800c0d8 <iprintf>
		printStatus(pCtrl);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fff5 	bl	800239c <printStatus>
	}
	cam_disable(pCtrl);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f8ff 	bl	80015b6 <cam_disable>
	return pCtrl->status;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	781b      	ldrb	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	0800d10c 	.word	0x0800d10c
 80013c8:	0800d13c 	.word	0x0800d13c
 80013cc:	0800d15c 	.word	0x0800d15c

080013d0 <spiRegRead>:

uint8_t spiRegRead(ArducamController* pCtrl, uint8_t reg){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
	cam_enable(pCtrl);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f8da 	bl	8001596 <cam_enable>
	HAL_Delay(CS_DELAY);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f002 f970 	bl	80036c8 <HAL_Delay>
	uint8_t maskedAddr = reg & SPI_READ_MASK; // a 0 followed by register to read
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	73fb      	strb	r3, [r7, #15]
	uint8_t dummyByte = 0x00;
 80013f2:	2300      	movs	r3, #0
 80013f4:	73bb      	strb	r3, [r7, #14]
	uint8_t dataByte = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	737b      	strb	r3, [r7, #13]

	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &maskedAddr, &dataByte, 1, CAM_TIMEOUT);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6898      	ldr	r0, [r3, #8]
 80013fe:	f107 020d 	add.w	r2, r7, #13
 8001402:	f107 010f 	add.w	r1, r7, #15
 8001406:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	f005 f95f 	bl	80066d0 <HAL_SPI_TransmitReceive>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	701a      	strb	r2, [r3, #0]
	if(pCtrl->status != HAL_OK){
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <spiRegRead+0x5e>
		printf("FAILED Sending SPI_READ_MASK\n");
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <spiRegRead+0xb4>)
 8001424:	f00a febe 	bl	800c1a4 <puts>
		printStatus(pCtrl);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 ffb7 	bl	800239c <printStatus>
	}
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &dummyByte, &dataByte, 1, CAM_TIMEOUT);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6898      	ldr	r0, [r3, #8]
 8001432:	f107 020d 	add.w	r2, r7, #13
 8001436:	f107 010e 	add.w	r1, r7, #14
 800143a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	f005 f945 	bl	80066d0 <HAL_SPI_TransmitReceive>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	701a      	strb	r2, [r3, #0]
	if(pCtrl->status != HAL_OK){
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <spiRegRead+0x96>
		printf("FAILED Reading SPI Reg 0x%02X\n", reg);
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	4619      	mov	r1, r3
 800145a:	480b      	ldr	r0, [pc, #44]	; (8001488 <spiRegRead+0xb8>)
 800145c:	f00a fe3c 	bl	800c0d8 <iprintf>
		printStatus(pCtrl);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 ff9b 	bl	800239c <printStatus>
	}
	cam_disable(pCtrl);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8a5 	bl	80015b6 <cam_disable>
	printf("(SPI) Read 0x%02X from 0x%02X\n", dataByte, reg);
 800146c:	7b7b      	ldrb	r3, [r7, #13]
 800146e:	4619      	mov	r1, r3
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	461a      	mov	r2, r3
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <spiRegRead+0xbc>)
 8001476:	f00a fe2f 	bl	800c0d8 <iprintf>
	return dataByte;
 800147a:	7b7b      	ldrb	r3, [r7, #13]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	0800d13c 	.word	0x0800d13c
 8001488:	0800d17c 	.word	0x0800d17c
 800148c:	0800d19c 	.word	0x0800d19c

08001490 <isFIFOReady>:

//Returns FIFO 'finished' flag. 0 -> FIFO is busy, 1 -> capture is finished
int isFIFOReady(ArducamController* pCtrl){
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	uint8_t registerData = spiRegRead(pCtrl, FIFO_STATUS_REG);
 8001498:	2141      	movs	r1, #65	; 0x41
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff98 	bl	80013d0 <spiRegRead>
 80014a0:	4603      	mov	r3, r0
 80014a2:	73fb      	strb	r3, [r7, #15]

	int isFinished = checkBit(registerData, 3);
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2103      	movs	r1, #3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 ff37 	bl	800231c <checkBit>
 80014ae:	60b8      	str	r0, [r7, #8]
	//printf("FIFO Ready Flag : %d\n", isFinished);
	return isFinished;
 80014b0:	68bb      	ldr	r3, [r7, #8]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <resetCPLD>:

//Resets the CPLD
void resetCPLD(ArducamController* pCtrl){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	printf("Resetting Arducam CPLD\n\r");
 80014c4:	480e      	ldr	r0, [pc, #56]	; (8001500 <resetCPLD+0x44>)
 80014c6:	f00a fe07 	bl	800c0d8 <iprintf>
	uint8_t cmd = 0x80;
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, 0x07, cmd);
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	461a      	mov	r2, r3
 80014d2:	2107      	movs	r1, #7
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff23 	bl	8001320 <spiRegWrite>
	HAL_Delay(100);
 80014da:	2064      	movs	r0, #100	; 0x64
 80014dc:	f002 f8f4 	bl	80036c8 <HAL_Delay>
	cmd = 0x00;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, 0x07, cmd);
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	461a      	mov	r2, r3
 80014e8:	2107      	movs	r1, #7
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff18 	bl	8001320 <spiRegWrite>
	HAL_Delay(100);
 80014f0:	2064      	movs	r0, #100	; 0x64
 80014f2:	f002 f8e9 	bl	80036c8 <HAL_Delay>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	0800d1bc 	.word	0x0800d1bc

08001504 <clearFIFOFlag>:

void clearFIFOFlag(ArducamController* pCtrl){
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_FLAG_CLR;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, cmd);
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	461a      	mov	r2, r3
 8001514:	2104      	movs	r1, #4
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ff02 	bl	8001320 <spiRegWrite>
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <resetFIFOPointers>:

void resetFIFOPointers(ArducamController* pCtrl){
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_PTR_CLR;
 800152c:	2330      	movs	r3, #48	; 0x30
 800152e:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, cmd);
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	461a      	mov	r2, r3
 8001534:	2104      	movs	r1, #4
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fef2 	bl	8001320 <spiRegWrite>
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <setCaptureFlag>:

void setCaptureFlag(ArducamController* pCtrl){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = SET_CAPTURE_FLAG;
 800154c:	2302      	movs	r3, #2
 800154e:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, cmd);
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	461a      	mov	r2, r3
 8001554:	2104      	movs	r1, #4
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fee2 	bl	8001320 <spiRegWrite>
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <setNCaptureFrames>:

void setNCaptureFrames(ArducamController* pCtrl, int n){
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
	uint8_t cmd = 0x01;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
	if((0 < n) && (n <= 7)){ cmd = (uint8_t) n; }
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	dd04      	ble.n	8001582 <setNCaptureFrames+0x1e>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2b07      	cmp	r3, #7
 800157c:	dc01      	bgt.n	8001582 <setNCaptureFrames+0x1e>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	73fb      	strb	r3, [r7, #15]

	spiRegWrite(pCtrl, CAPTURE_CONTROL_REG, cmd);
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	461a      	mov	r2, r3
 8001586:	2101      	movs	r1, #1
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fec9 	bl	8001320 <spiRegWrite>
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <cam_enable>:

void cam_enable(ArducamController* pCtrl){
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pCSPort, pCtrl->csPinNo, GPIO_PIN_RESET);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68d8      	ldr	r0, [r3, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	8a1b      	ldrh	r3, [r3, #16]
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	f002 fb6d 	bl	8003c88 <HAL_GPIO_WritePin>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <cam_disable>:

void cam_disable(ArducamController* pCtrl){
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pCSPort, pCtrl->csPinNo, GPIO_PIN_SET);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68d8      	ldr	r0, [r3, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	8a1b      	ldrh	r3, [r3, #16]
 80015c6:	2201      	movs	r2, #1
 80015c8:	4619      	mov	r1, r3
 80015ca:	f002 fb5d 	bl	8003c88 <HAL_GPIO_WritePin>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <shutter>:

void shutter(ArducamController* pCtrl){
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
	flashOn(pCtrl);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f80b 	bl	80015fa <flashOn>
	HAL_Delay(SHUTTER_DELAY);
 80015e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015e8:	f002 f86e 	bl	80036c8 <HAL_Delay>
	flashOff(pCtrl);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f814 	bl	800161a <flashOff>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <flashOn>:

void flashOn(ArducamController* pCtrl){
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pFlashPort, pCtrl->flashPinNo, GPIO_PIN_SET);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6958      	ldr	r0, [r3, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	8b1b      	ldrh	r3, [r3, #24]
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	f002 fb3b 	bl	8003c88 <HAL_GPIO_WritePin>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <flashOff>:

void flashOff(ArducamController* pCtrl){
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pFlashPort, pCtrl->flashPinNo, GPIO_PIN_RESET);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6958      	ldr	r0, [r3, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	8b1b      	ldrh	r3, [r3, #24]
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	f002 fb2b 	bl	8003c88 <HAL_GPIO_WritePin>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <registerDump>:

//Prints all of the relevant registers in the Arducam
void registerDump(ArducamController* pCtrl){
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	uint8_t data;
	printf("Register Table:\n");
 8001644:	4830      	ldr	r0, [pc, #192]	; (8001708 <registerDump+0xcc>)
 8001646:	f00a fdad 	bl	800c1a4 <puts>
	i2cRegRead(pCtrl, FIFO_BYTE1, &data, 1);
	printf("FIFO Byte 1: 0x%02X\n", data);
	i2cRegRead(pCtrl, FIFO_BYTE2, &data, 1);
	printf("FIFO Byte 2: 0x%02X\n", data);*/

	printf("(SPI Read)\n");
 800164a:	4830      	ldr	r0, [pc, #192]	; (800170c <registerDump+0xd0>)
 800164c:	f00a fdaa 	bl	800c1a4 <puts>
	data = spiRegRead(pCtrl, TEST_REGISTER);
 8001650:	2100      	movs	r1, #0
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff febc 	bl	80013d0 <spiRegRead>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
	printf("Test Register: 0x%02X\n", data);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	4619      	mov	r1, r3
 8001660:	482b      	ldr	r0, [pc, #172]	; (8001710 <registerDump+0xd4>)
 8001662:	f00a fd39 	bl	800c0d8 <iprintf>
	data = spiRegRead(pCtrl, CAPTURE_CONTROL_REG);
 8001666:	2101      	movs	r1, #1
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff feb1 	bl	80013d0 <spiRegRead>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
	printf("Capture Control Register: 0x%02X\n", data);
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	4619      	mov	r1, r3
 8001676:	4827      	ldr	r0, [pc, #156]	; (8001714 <registerDump+0xd8>)
 8001678:	f00a fd2e 	bl	800c0d8 <iprintf>
	data = spiRegRead(pCtrl, FIFO_CONTROL_REG);
 800167c:	2104      	movs	r1, #4
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fea6 	bl	80013d0 <spiRegRead>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
	printf("FIFO Control Register: 0x%02X\n", data);
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	4619      	mov	r1, r3
 800168c:	4822      	ldr	r0, [pc, #136]	; (8001718 <registerDump+0xdc>)
 800168e:	f00a fd23 	bl	800c0d8 <iprintf>
	data = spiRegRead(pCtrl, CHIP_VERSION_REG);
 8001692:	2140      	movs	r1, #64	; 0x40
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fe9b 	bl	80013d0 <spiRegRead>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]
	printf("Chip Version: 0x%02X\n", data);
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	4619      	mov	r1, r3
 80016a2:	481e      	ldr	r0, [pc, #120]	; (800171c <registerDump+0xe0>)
 80016a4:	f00a fd18 	bl	800c0d8 <iprintf>
	data = spiRegRead(pCtrl, FIFO_STATUS_REG);
 80016a8:	2141      	movs	r1, #65	; 0x41
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fe90 	bl	80013d0 <spiRegRead>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
	printf("FIFO Status Register: 0x%02X\n", data);
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4819      	ldr	r0, [pc, #100]	; (8001720 <registerDump+0xe4>)
 80016ba:	f00a fd0d 	bl	800c0d8 <iprintf>
	data = spiRegRead(pCtrl, FIFO_BYTE0);
 80016be:	2142      	movs	r1, #66	; 0x42
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fe85 	bl	80013d0 <spiRegRead>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]
	printf("FIFO Byte 0: 0x%02X\n", data);
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	4619      	mov	r1, r3
 80016ce:	4815      	ldr	r0, [pc, #84]	; (8001724 <registerDump+0xe8>)
 80016d0:	f00a fd02 	bl	800c0d8 <iprintf>
	data = spiRegRead(pCtrl, FIFO_BYTE1);
 80016d4:	2143      	movs	r1, #67	; 0x43
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fe7a 	bl	80013d0 <spiRegRead>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
	printf("FIFO Byte 1: 0x%02X\n", data);
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4810      	ldr	r0, [pc, #64]	; (8001728 <registerDump+0xec>)
 80016e6:	f00a fcf7 	bl	800c0d8 <iprintf>
	data = spiRegRead(pCtrl, FIFO_BYTE2);
 80016ea:	2144      	movs	r1, #68	; 0x44
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fe6f 	bl	80013d0 <spiRegRead>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]
	printf("FIFO Byte 2: 0x%02X\n", data);
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	4619      	mov	r1, r3
 80016fa:	480c      	ldr	r0, [pc, #48]	; (800172c <registerDump+0xf0>)
 80016fc:	f00a fcec 	bl	800c0d8 <iprintf>

}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	0800d1d8 	.word	0x0800d1d8
 800170c:	0800d1e8 	.word	0x0800d1e8
 8001710:	0800d1f4 	.word	0x0800d1f4
 8001714:	0800d20c 	.word	0x0800d20c
 8001718:	0800d230 	.word	0x0800d230
 800171c:	0800d250 	.word	0x0800d250
 8001720:	0800d268 	.word	0x0800d268
 8001724:	0800d288 	.word	0x0800d288
 8001728:	0800d2a0 	.word	0x0800d2a0
 800172c:	0800d2b8 	.word	0x0800d2b8

08001730 <picToBase64>:

const char BASE64LOOKUPTABLE[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

//Fills the base64 buffer
void picToBase64(ArducamController* pCtrl){
 8001730:	b580      	push	{r7, lr}
 8001732:	b08e      	sub	sp, #56	; 0x38
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  printf("Converting data to Base64...\n");
 8001738:	489f      	ldr	r0, [pc, #636]	; (80019b8 <picToBase64+0x288>)
 800173a:	f00a fd33 	bl	800c1a4 <puts>

  uint8_t *inputBytes = pCtrl->pictureBuffer;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	331a      	adds	r3, #26
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  int nBytes = pCtrl->pictureBufferSize;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800174a:	8bdb      	ldrh	r3, [r3, #30]
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28

  char *output = pCtrl->base64Buffer;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001754:	331a      	adds	r3, #26
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t byte0, byte1, byte2;
  uint8_t base64Digit0, base64Digit1, base64Digit2, base64Digit3;
  uint8_t tableIdx0, tableIdx1, tableIdx2, tableIdx3;
  uint32_t threeByteCombo;

  int inputIdx = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
  int outputIdx = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
  while(inputIdx < nBytes-2){
 8001760:	e059      	b.n	8001816 <picToBase64+0xe6>
    byte0 = inputBytes[inputIdx];
 8001762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	623b      	str	r3, [r7, #32]
    byte1 = inputBytes[inputIdx+1];
 800176c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176e:	3301      	adds	r3, #1
 8001770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	61fb      	str	r3, [r7, #28]
    byte2 = inputBytes[inputIdx+2];
 8001778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177a:	3302      	adds	r3, #2
 800177c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	61bb      	str	r3, [r7, #24]
    threeByteCombo = ((byte0 << 16) | (byte1 << 8) | byte2); // 24 bits
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	041a      	lsls	r2, r3, #16
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	4313      	orrs	r3, r2
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	617b      	str	r3, [r7, #20]

    // Turn every 6 bits into a Base64 digit
    tableIdx0 = (threeByteCombo >> 18);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	0c9b      	lsrs	r3, r3, #18
 8001798:	74fb      	strb	r3, [r7, #19]
    tableIdx1 = (threeByteCombo >> 12) & 0x3F;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	0b1b      	lsrs	r3, r3, #12
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a4:	74bb      	strb	r3, [r7, #18]
    tableIdx2 = (threeByteCombo >> 6) & 0x3F;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	099b      	lsrs	r3, r3, #6
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017b0:	747b      	strb	r3, [r7, #17]
    tableIdx3 = threeByteCombo & 0x3F;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ba:	743b      	strb	r3, [r7, #16]

    base64Digit0 = BASE64LOOKUPTABLE[tableIdx0];
 80017bc:	7cfb      	ldrb	r3, [r7, #19]
 80017be:	4a7f      	ldr	r2, [pc, #508]	; (80019bc <picToBase64+0x28c>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	73fb      	strb	r3, [r7, #15]
    base64Digit1 = BASE64LOOKUPTABLE[tableIdx1];
 80017c4:	7cbb      	ldrb	r3, [r7, #18]
 80017c6:	4a7d      	ldr	r2, [pc, #500]	; (80019bc <picToBase64+0x28c>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	73bb      	strb	r3, [r7, #14]
    base64Digit2 = BASE64LOOKUPTABLE[tableIdx2];
 80017cc:	7c7b      	ldrb	r3, [r7, #17]
 80017ce:	4a7b      	ldr	r2, [pc, #492]	; (80019bc <picToBase64+0x28c>)
 80017d0:	5cd3      	ldrb	r3, [r2, r3]
 80017d2:	737b      	strb	r3, [r7, #13]
    base64Digit3 = BASE64LOOKUPTABLE[tableIdx3];
 80017d4:	7c3b      	ldrb	r3, [r7, #16]
 80017d6:	4a79      	ldr	r2, [pc, #484]	; (80019bc <picToBase64+0x28c>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	733b      	strb	r3, [r7, #12]

    output[outputIdx] = (char) base64Digit0;
 80017dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e0:	4413      	add	r3, r2
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	701a      	strb	r2, [r3, #0]
    output[outputIdx + 1] = (char) base64Digit1;
 80017e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e8:	3301      	adds	r3, #1
 80017ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ec:	4413      	add	r3, r2
 80017ee:	7bba      	ldrb	r2, [r7, #14]
 80017f0:	701a      	strb	r2, [r3, #0]
    output[outputIdx + 2] = (char) base64Digit2;
 80017f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f4:	3302      	adds	r3, #2
 80017f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f8:	4413      	add	r3, r2
 80017fa:	7b7a      	ldrb	r2, [r7, #13]
 80017fc:	701a      	strb	r2, [r3, #0]
    output[outputIdx + 3] = (char) base64Digit3;
 80017fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001800:	3303      	adds	r3, #3
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	4413      	add	r3, r2
 8001806:	7b3a      	ldrb	r2, [r7, #12]
 8001808:	701a      	strb	r2, [r3, #0]

    inputIdx += 3;
 800180a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180c:	3303      	adds	r3, #3
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
    outputIdx += 4;
 8001810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001812:	3304      	adds	r3, #4
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
  while(inputIdx < nBytes-2){
 8001816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001818:	3b02      	subs	r3, #2
 800181a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800181c:	429a      	cmp	r2, r3
 800181e:	dba0      	blt.n	8001762 <picToBase64+0x32>
  }

  // Padding if necessary
  if((nBytes-1)%3 == 2){
 8001820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001822:	1e59      	subs	r1, r3, #1
 8001824:	4b66      	ldr	r3, [pc, #408]	; (80019c0 <picToBase64+0x290>)
 8001826:	fb83 3201 	smull	r3, r2, r3, r1
 800182a:	17cb      	asrs	r3, r1, #31
 800182c:	1ad2      	subs	r2, r2, r3
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	1aca      	subs	r2, r1, r3
 8001836:	2a02      	cmp	r2, #2
 8001838:	d152      	bne.n	80018e0 <picToBase64+0x1b0>

    byte0 = inputBytes[nBytes-2];
 800183a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183c:	3b02      	subs	r3, #2
 800183e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001840:	4413      	add	r3, r2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	623b      	str	r3, [r7, #32]
    byte1 = inputBytes[nBytes-1];
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001848:	3b01      	subs	r3, #1
 800184a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	61fb      	str	r3, [r7, #28]
    byte2 = 0; //Will need to pad here
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
    threeByteCombo = ((byte0 << 16) | (byte1 << 8) | byte2); // 24 bits
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	041a      	lsls	r2, r3, #16
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	4313      	orrs	r3, r2
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

    // Turn every 6 bits into a Base64 digit
    tableIdx0 = (threeByteCombo >> 18);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	0c9b      	lsrs	r3, r3, #18
 800186a:	74fb      	strb	r3, [r7, #19]
    tableIdx1 = (threeByteCombo >> 12) & 0x3F;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	0b1b      	lsrs	r3, r3, #12
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001876:	74bb      	strb	r3, [r7, #18]
    tableIdx2 = (threeByteCombo >> 6) & 0x3F;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	099b      	lsrs	r3, r3, #6
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001882:	747b      	strb	r3, [r7, #17]
    tableIdx3 = threeByteCombo & 0x3F;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800188c:	743b      	strb	r3, [r7, #16]

    base64Digit0 = BASE64LOOKUPTABLE[tableIdx0];
 800188e:	7cfb      	ldrb	r3, [r7, #19]
 8001890:	4a4a      	ldr	r2, [pc, #296]	; (80019bc <picToBase64+0x28c>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	73fb      	strb	r3, [r7, #15]
    base64Digit1 = BASE64LOOKUPTABLE[tableIdx1];
 8001896:	7cbb      	ldrb	r3, [r7, #18]
 8001898:	4a48      	ldr	r2, [pc, #288]	; (80019bc <picToBase64+0x28c>)
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	73bb      	strb	r3, [r7, #14]
    base64Digit2 = BASE64LOOKUPTABLE[tableIdx2];
 800189e:	7c7b      	ldrb	r3, [r7, #17]
 80018a0:	4a46      	ldr	r2, [pc, #280]	; (80019bc <picToBase64+0x28c>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	737b      	strb	r3, [r7, #13]
    base64Digit3 = '=';
 80018a6:	233d      	movs	r3, #61	; 0x3d
 80018a8:	733b      	strb	r3, [r7, #12]

    output[outputIdx] = (char) base64Digit0;
 80018aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ae:	4413      	add	r3, r2
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	701a      	strb	r2, [r3, #0]
	output[outputIdx + 1] = (char) base64Digit1;
 80018b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b6:	3301      	adds	r3, #1
 80018b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ba:	4413      	add	r3, r2
 80018bc:	7bba      	ldrb	r2, [r7, #14]
 80018be:	701a      	strb	r2, [r3, #0]
	output[outputIdx + 2] = (char) base64Digit2;
 80018c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c2:	3302      	adds	r3, #2
 80018c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c6:	4413      	add	r3, r2
 80018c8:	7b7a      	ldrb	r2, [r7, #13]
 80018ca:	701a      	strb	r2, [r3, #0]
	output[outputIdx + 3] = (char) base64Digit3;
 80018cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ce:	3303      	adds	r3, #3
 80018d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d2:	4413      	add	r3, r2
 80018d4:	7b3a      	ldrb	r2, [r7, #12]
 80018d6:	701a      	strb	r2, [r3, #0]
	outputIdx += 4;
 80018d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018da:	3304      	adds	r3, #4
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
 80018de:	e058      	b.n	8001992 <picToBase64+0x262>
  } else if ((nBytes-1)%3 == 1){
 80018e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e2:	1e59      	subs	r1, r3, #1
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <picToBase64+0x290>)
 80018e6:	fb83 3201 	smull	r3, r2, r3, r1
 80018ea:	17cb      	asrs	r3, r1, #31
 80018ec:	1ad2      	subs	r2, r2, r3
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	1aca      	subs	r2, r1, r3
 80018f6:	2a01      	cmp	r2, #1
 80018f8:	d14b      	bne.n	8001992 <picToBase64+0x262>
    byte0 = inputBytes[nBytes-1];
 80018fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fc:	3b01      	subs	r3, #1
 80018fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001900:	4413      	add	r3, r2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	623b      	str	r3, [r7, #32]
    byte1 = 0; //Will need to pad here
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    byte2 = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
    threeByteCombo = ((byte0 << 16) | (byte1 << 8) | byte2); // 24 bits
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	041a      	lsls	r2, r3, #16
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	4313      	orrs	r3, r2
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	617b      	str	r3, [r7, #20]

    // Turn every 6 bits into a Base64 digit
    tableIdx0 = (threeByteCombo >> 18);
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	0c9b      	lsrs	r3, r3, #18
 8001922:	74fb      	strb	r3, [r7, #19]
    tableIdx1 = (threeByteCombo >> 12) & 0x3F;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	0b1b      	lsrs	r3, r3, #12
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800192e:	74bb      	strb	r3, [r7, #18]
    tableIdx2 = (threeByteCombo >> 6) & 0x3F;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	099b      	lsrs	r3, r3, #6
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800193a:	747b      	strb	r3, [r7, #17]
    tableIdx3 = threeByteCombo & 0x3F;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001944:	743b      	strb	r3, [r7, #16]

    base64Digit0 = BASE64LOOKUPTABLE[tableIdx0];
 8001946:	7cfb      	ldrb	r3, [r7, #19]
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <picToBase64+0x28c>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	73fb      	strb	r3, [r7, #15]
    base64Digit1 = BASE64LOOKUPTABLE[tableIdx1];
 800194e:	7cbb      	ldrb	r3, [r7, #18]
 8001950:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <picToBase64+0x28c>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	73bb      	strb	r3, [r7, #14]
    base64Digit2 = '=';
 8001956:	233d      	movs	r3, #61	; 0x3d
 8001958:	737b      	strb	r3, [r7, #13]
    base64Digit3 = '=';
 800195a:	233d      	movs	r3, #61	; 0x3d
 800195c:	733b      	strb	r3, [r7, #12]

    output[outputIdx] = (char) base64Digit0;
 800195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001962:	4413      	add	r3, r2
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	701a      	strb	r2, [r3, #0]
	output[outputIdx + 1] = (char) base64Digit1;
 8001968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196a:	3301      	adds	r3, #1
 800196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196e:	4413      	add	r3, r2
 8001970:	7bba      	ldrb	r2, [r7, #14]
 8001972:	701a      	strb	r2, [r3, #0]
	output[outputIdx + 2] = (char) base64Digit2;
 8001974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001976:	3302      	adds	r3, #2
 8001978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197a:	4413      	add	r3, r2
 800197c:	7b7a      	ldrb	r2, [r7, #13]
 800197e:	701a      	strb	r2, [r3, #0]
	output[outputIdx + 3] = (char) base64Digit3;
 8001980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001982:	3303      	adds	r3, #3
 8001984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001986:	4413      	add	r3, r2
 8001988:	7b3a      	ldrb	r2, [r7, #12]
 800198a:	701a      	strb	r2, [r3, #0]
	outputIdx += 4;
 800198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198e:	3304      	adds	r3, #4
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
  }

  pCtrl->base64Size = outputIdx;
 8001992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001994:	b29a      	uxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800199c:	839a      	strh	r2, [r3, #28]
  printf("Base 64 Data = %s\n", pCtrl->base64Buffer);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a4:	331a      	adds	r3, #26
 80019a6:	4619      	mov	r1, r3
 80019a8:	4806      	ldr	r0, [pc, #24]	; (80019c4 <picToBase64+0x294>)
 80019aa:	f00a fb95 	bl	800c0d8 <iprintf>
}
 80019ae:	bf00      	nop
 80019b0:	3738      	adds	r7, #56	; 0x38
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	0800d2d0 	.word	0x0800d2d0
 80019bc:	0800dd10 	.word	0x0800dd10
 80019c0:	55555556 	.word	0x55555556
 80019c4:	0800d2f0 	.word	0x0800d2f0

080019c8 <initSD>:

FATFS fatFS; 	//Fatfs handle
FIL file; 		//File handle
FRESULT fres; //Result after operations

HAL_StatusTypeDef initSD(SDController* pCtrl){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	printf("Initializing SD Controller...\n");
 80019d0:	480f      	ldr	r0, [pc, #60]	; (8001a10 <initSD+0x48>)
 80019d2:	f00a fbe7 	bl	800c1a4 <puts>

	// Mount the File System
	if(mountFS(pCtrl) != HAL_OK){
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f840 	bl	8001a5c <mountFS>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <initSD+0x30>
		printf("FAILED SD Init\n | Status : %s\n", stat2Str(pCtrl->status));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fcaa 	bl	8002340 <stat2Str>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4619      	mov	r1, r3
 80019f0:	4808      	ldr	r0, [pc, #32]	; (8001a14 <initSD+0x4c>)
 80019f2:	f00a fb71 	bl	800c0d8 <iprintf>
 80019f6:	e004      	b.n	8001a02 <initSD+0x3a>
	} else {
		printf("SUCCESS SD Initialized\n");
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <initSD+0x50>)
 80019fa:	f00a fbd3 	bl	800c1a4 <puts>
		getSDStats();
 80019fe:	f000 f887 	bl	8001b10 <getSDStats>
	}

	return pCtrl->status;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	781b      	ldrb	r3, [r3, #0]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	0800d304 	.word	0x0800d304
 8001a14:	0800d324 	.word	0x0800d324
 8001a18:	0800d344 	.word	0x0800d344

08001a1c <disconnectSD>:

HAL_StatusTypeDef disconnectSD(SDController* pCtrl){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	printf("Disconnecting SD Card...\n");
 8001a24:	480a      	ldr	r0, [pc, #40]	; (8001a50 <disconnectSD+0x34>)
 8001a26:	f00a fbbd 	bl	800c1a4 <puts>
	if(dismountFS(pCtrl) != HAL_OK){	//Took out closeFile() from here since it should be closed if(closeFile(pCtrl) && ...)
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f844 	bl	8001ab8 <dismountFS>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <disconnectSD+0x22>
		printf("FAILED Disconnecting SD\n");
 8001a36:	4807      	ldr	r0, [pc, #28]	; (8001a54 <disconnectSD+0x38>)
 8001a38:	f00a fbb4 	bl	800c1a4 <puts>
 8001a3c:	e002      	b.n	8001a44 <disconnectSD+0x28>
	} else {
		printf("SUCCESS SD Disconnected\n");
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <disconnectSD+0x3c>)
 8001a40:	f00a fbb0 	bl	800c1a4 <puts>
	}

	return pCtrl->status;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	781b      	ldrb	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	0800d35c 	.word	0x0800d35c
 8001a54:	0800d378 	.word	0x0800d378
 8001a58:	0800d390 	.word	0x0800d390

08001a5c <mountFS>:

HAL_StatusTypeDef mountFS(SDController *pCtrl){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	fres = f_mount(&fatFS, "", 1);
 8001a64:	2201      	movs	r2, #1
 8001a66:	490f      	ldr	r1, [pc, #60]	; (8001aa4 <mountFS+0x48>)
 8001a68:	480f      	ldr	r0, [pc, #60]	; (8001aa8 <mountFS+0x4c>)
 8001a6a:	f009 fd41 	bl	800b4f0 <f_mount>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <mountFS+0x50>)
 8001a74:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK){
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <mountFS+0x50>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <mountFS+0x36>
		printf("FAILED mounting FS | FRESULT : %i\n", fres);
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <mountFS+0x50>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	480a      	ldr	r0, [pc, #40]	; (8001ab0 <mountFS+0x54>)
 8001a86:	f00a fb27 	bl	800c0d8 <iprintf>
		pCtrl->status = HAL_ERROR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e002      	b.n	8001a98 <mountFS+0x3c>
	} else {
		printf("SUCCESS File System mounted\n");
 8001a92:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <mountFS+0x58>)
 8001a94:	f00a fb86 	bl	800c1a4 <puts>
	}
	return pCtrl->status;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	0800d3a8 	.word	0x0800d3a8
 8001aa8:	200000b8 	.word	0x200000b8
 8001aac:	20000518 	.word	0x20000518
 8001ab0:	0800d3ac 	.word	0x0800d3ac
 8001ab4:	0800d3d0 	.word	0x0800d3d0

08001ab8 <dismountFS>:

HAL_StatusTypeDef dismountFS(SDController* pCtrl){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	fres = f_mount(NULL, "", 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	490f      	ldr	r1, [pc, #60]	; (8001b00 <dismountFS+0x48>)
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f009 fd13 	bl	800b4f0 <f_mount>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <dismountFS+0x4c>)
 8001ad0:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK){
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <dismountFS+0x4c>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <dismountFS+0x36>
		printf("FAILED dismounting FS | FRESULT : %i\n", fres);
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <dismountFS+0x4c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4809      	ldr	r0, [pc, #36]	; (8001b08 <dismountFS+0x50>)
 8001ae2:	f00a faf9 	bl	800c0d8 <iprintf>
		pCtrl->status = HAL_ERROR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e002      	b.n	8001af4 <dismountFS+0x3c>
	} else {
		printf("SUCCESS File System mounted\n");
 8001aee:	4807      	ldr	r0, [pc, #28]	; (8001b0c <dismountFS+0x54>)
 8001af0:	f00a fb58 	bl	800c1a4 <puts>
	}
	return pCtrl->status;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	781b      	ldrb	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	0800d3a8 	.word	0x0800d3a8
 8001b04:	20000518 	.word	0x20000518
 8001b08:	0800d3ec 	.word	0x0800d3ec
 8001b0c:	0800d3d0 	.word	0x0800d3d0

08001b10 <getSDStats>:

//Prints SD FS Stats
void getSDStats(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
	DWORD freeClusters, freeSectors, totalSectors;
	FATFS* pFreeFS;

	fres = f_getfree("", &freeClusters, &pFreeFS);
 8001b16:	463a      	mov	r2, r7
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4815      	ldr	r0, [pc, #84]	; (8001b74 <getSDStats+0x64>)
 8001b1e:	f00a f908 	bl	800bd32 <f_getfree>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <getSDStats+0x68>)
 8001b28:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK){
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <getSDStats+0x68>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <getSDStats+0x30>
		printf("FAILED to get SD stats | FRESULT : %i\n", fres);
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <getSDStats+0x68>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4810      	ldr	r0, [pc, #64]	; (8001b7c <getSDStats+0x6c>)
 8001b3a:	f00a facd 	bl	800c0d8 <iprintf>
 8001b3e:	e016      	b.n	8001b6e <getSDStats+0x5e>
		return;
	}

	totalSectors = (pFreeFS->n_fatent - 2) * pFreeFS->csize;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	3b02      	subs	r3, #2
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	8952      	ldrh	r2, [r2, #10]
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	60fb      	str	r3, [r7, #12]
	freeSectors = freeClusters * pFreeFS->csize;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	895b      	ldrh	r3, [r3, #10]
 8001b54:	461a      	mov	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	fb02 f303 	mul.w	r3, r2, r3
 8001b5c:	60bb      	str	r3, [r7, #8]

	printf("SD Stats:\n%10lu KB Total Capacity\n%10lu KB Free Space.\r\n", totalSectors / 2, freeSectors / 2);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	0859      	lsrs	r1, r3, #1
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	461a      	mov	r2, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <getSDStats+0x70>)
 8001b6a:	f00a fab5 	bl	800c0d8 <iprintf>
}
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	0800d3a8 	.word	0x0800d3a8
 8001b78:	20000518 	.word	0x20000518
 8001b7c:	0800d414 	.word	0x0800d414
 8001b80:	0800d43c 	.word	0x0800d43c

08001b84 <openFile>:

HAL_StatusTypeDef openFile(SDController* pCtrl, char* filename, BYTE perms){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	71fb      	strb	r3, [r7, #7]
	fres = f_open(&file, (const TCHAR*) filename, perms); // See if this mask works or if i have to split this over reads/writes
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	461a      	mov	r2, r3
 8001b96:	68b9      	ldr	r1, [r7, #8]
 8001b98:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <openFile+0x54>)
 8001b9a:	f009 fcef 	bl	800b57c <f_open>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <openFile+0x58>)
 8001ba4:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <openFile+0x58>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <openFile+0x40>
		printf("FAILED to open '%s' | FRESULT : %i\n", filename, fres);
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <openFile+0x58>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	480a      	ldr	r0, [pc, #40]	; (8001be0 <openFile+0x5c>)
 8001bb8:	f00a fa8e 	bl	800c0d8 <iprintf>
		pCtrl -> status = HAL_ERROR;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	e003      	b.n	8001bcc <openFile+0x48>
	} else {
		printf("SUCCESS opening '%s'\n", filename);
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <openFile+0x60>)
 8001bc8:	f00a fa86 	bl	800c0d8 <iprintf>
	}

	return pCtrl->status;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	781b      	ldrb	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200002e8 	.word	0x200002e8
 8001bdc:	20000518 	.word	0x20000518
 8001be0:	0800d478 	.word	0x0800d478
 8001be4:	0800d49c 	.word	0x0800d49c

08001be8 <writeFile>:

	closeFile(pCtrl);
	return pCtrl->status;
}

HAL_StatusTypeDef writeFile(SDController *pCtrl, char *filename, void *dataToWrite, UINT length){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
	UINT bytesWrote;

	openFile(pCtrl, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001bf6:	221a      	movs	r2, #26
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f7ff ffc2 	bl	8001b84 <openFile>
	fres = f_write(&file, (const void*) dataToWrite, length, &bytesWrote);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4811      	ldr	r0, [pc, #68]	; (8001c50 <writeFile+0x68>)
 8001c0a:	f009 fe75 	bl	800b8f8 <f_write>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <writeFile+0x6c>)
 8001c14:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) {
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <writeFile+0x6c>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d008      	beq.n	8001c30 <writeFile+0x48>
		printf("FAILED writing %d bytes to '%s' | \n", length, filename);
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	6839      	ldr	r1, [r7, #0]
 8001c22:	480d      	ldr	r0, [pc, #52]	; (8001c58 <writeFile+0x70>)
 8001c24:	f00a fa58 	bl	800c0d8 <iprintf>
		pCtrl->status = HAL_ERROR;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e005      	b.n	8001c3c <writeFile+0x54>
	} else {
		printf("SUCCESS writing %d bytes to '%s'\n", bytesWrote, filename);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4619      	mov	r1, r3
 8001c36:	4809      	ldr	r0, [pc, #36]	; (8001c5c <writeFile+0x74>)
 8001c38:	f00a fa4e 	bl	800c0d8 <iprintf>
	}

	closeFile(pCtrl);
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f80f 	bl	8001c60 <closeFile>
	return pCtrl->status;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	781b      	ldrb	r3, [r3, #0]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200002e8 	.word	0x200002e8
 8001c54:	20000518 	.word	0x20000518
 8001c58:	0800d508 	.word	0x0800d508
 8001c5c:	0800d52c 	.word	0x0800d52c

08001c60 <closeFile>:

HAL_StatusTypeDef closeFile(SDController* pCtrl){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	fres = f_close(&file);
 8001c68:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <closeFile+0x44>)
 8001c6a:	f00a f838 	bl	800bcde <f_close>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <closeFile+0x48>)
 8001c74:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK){
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <closeFile+0x48>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <closeFile+0x32>
		printf("FAILED to close file | FRESULT : %i\n", fres);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <closeFile+0x48>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	4619      	mov	r1, r3
 8001c84:	4809      	ldr	r0, [pc, #36]	; (8001cac <closeFile+0x4c>)
 8001c86:	f00a fa27 	bl	800c0d8 <iprintf>
		pCtrl->status = HAL_ERROR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	e002      	b.n	8001c98 <closeFile+0x38>
	} else {
		printf("SUCCESS closing file\n");
 8001c92:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <closeFile+0x50>)
 8001c94:	f00a fa86 	bl	800c1a4 <puts>
	}

	return pCtrl->status;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200002e8 	.word	0x200002e8
 8001ca8:	20000518 	.word	0x20000518
 8001cac:	0800d550 	.word	0x0800d550
 8001cb0:	0800d578 	.word	0x0800d578

08001cb4 <initServoController>:
#include <math.h>

// TODO: Make another Level shifter for Right_Servo
// TODO : Add a safety switch for the Servo Power Supply (or a 9v)

HAL_StatusTypeDef initServoController(ServoController *pCtrl){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	printf("Initializing Servo Controller\n");
 8001cbc:	480a      	ldr	r0, [pc, #40]	; (8001ce8 <initServoController+0x34>)
 8001cbe:	f00a fa71 	bl	800c1a4 <puts>

	// Allocate ServoList
	memset(pCtrl->servoList, 0, sizeof(Servo) * MAX_NUM_SERVOS);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3308      	adds	r3, #8
 8001cc6:	223c      	movs	r2, #60	; 0x3c
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f00a fb4a 	bl	800c364 <memset>
	pCtrl->numServos = 0;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
	pCtrl->status = HAL_OK;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]

	return pCtrl->status;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	781b      	ldrb	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	0800d590 	.word	0x0800d590

08001cec <addServo>:

void addServo(ServoController *pCtrl, Servo servo){
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	4638      	mov	r0, r7
 8001cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(pCtrl->numServos >= MAX_NUM_SERVOS){
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	dd05      	ble.n	8001d0e <addServo+0x22>
		printf("FAILED Add Servo (%s)\n", servo.name);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	4820      	ldr	r0, [pc, #128]	; (8001d88 <addServo+0x9c>)
 8001d08:	f00a f9e6 	bl	800c0d8 <iprintf>
		return;
 8001d0c:	e038      	b.n	8001d80 <addServo+0x94>
	}

	pCtrl->servoList[pCtrl->numServos] = servo;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d12:	68f9      	ldr	r1, [r7, #12]
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3308      	adds	r3, #8
 8001d20:	461c      	mov	r4, r3
 8001d22:	463b      	mov	r3, r7
 8001d24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	pCtrl->status = HAL_TIM_PWM_Start(servo.pTIMHandle, servo.channel);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f005 f962 	bl	8006ffc <HAL_TIM_PWM_Start>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	701a      	strb	r2, [r3, #0]
	setServoPosition(servo, SERVO_POS_CENTER);
 8001d40:	235a      	movs	r3, #90	; 0x5a
 8001d42:	463a      	mov	r2, r7
 8001d44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d46:	f000 f827 	bl	8001d98 <setServoPosition>
	if(pCtrl->status != HAL_OK){
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <addServo+0x80>
		printf("FAILED to Add  Servo (%s) | Status : %s\n", servo.name, stat2Str(pCtrl->status));
 8001d52:	683c      	ldr	r4, [r7, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 faf1 	bl	8002340 <stat2Str>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4621      	mov	r1, r4
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <addServo+0xa0>)
 8001d66:	f00a f9b7 	bl	800c0d8 <iprintf>
 8001d6a:	e009      	b.n	8001d80 <addServo+0x94>
	} else {
		pCtrl->numServos += 1;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
		printf("SUCCESS Added Servo (%s)\n", servo.name);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <addServo+0xa4>)
 8001d7c:	f00a f9ac 	bl	800c0d8 <iprintf>
	}

}
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd90      	pop	{r4, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	0800d5b0 	.word	0x0800d5b0
 8001d8c:	0800d5c8 	.word	0x0800d5c8
 8001d90:	0800d5f4 	.word	0x0800d5f4
 8001d94:	00000000 	.word	0x00000000

08001d98 <setServoPosition>:

//https://www.youtube.com/watch?v=AjN58ceQaF4
//http://www.ee.ic.ac.uk/pcheung/teaching/DE1_EE/stores/sg90_datasheet.pdf
//Position in degrees

void setServoPosition(Servo servo, int position){
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b08b      	sub	sp, #44	; 0x2c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	1d3c      	adds	r4, r7, #4
 8001da0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001da4:	603b      	str	r3, [r7, #0]
	printf("Setting Servo (%s) to %d\n", servo.name, position);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	4619      	mov	r1, r3
 8001dac:	482e      	ldr	r0, [pc, #184]	; (8001e68 <setServoPosition+0xd0>)
 8001dae:	f00a f993 	bl	800c0d8 <iprintf>
	uint32_t CCR1Val;
	int degrees;

	if(position <= 0){
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	dc02      	bgt.n	8001dbe <setServoPosition+0x26>
		degrees = SERVO_POS_LEFT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbc:	e007      	b.n	8001dce <setServoPosition+0x36>
	} else if(position >= 180){
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2bb3      	cmp	r3, #179	; 0xb3
 8001dc2:	dd02      	ble.n	8001dca <setServoPosition+0x32>
		degrees = SERVO_POS_RIGHT;
 8001dc4:	23b4      	movs	r3, #180	; 0xb4
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc8:	e001      	b.n	8001dce <setServoPosition+0x36>
	} else {
		degrees = position;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float secPerDeg = .001 / 180;
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <setServoPosition+0xd4>)
 8001dd0:	623b      	str	r3, [r7, #32]
	float pulseTime = .001 + (degrees*secPerDeg);
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ddc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de4:	ee17 0a90 	vmov	r0, s15
 8001de8:	f7fe fbb6 	bl	8000558 <__aeabi_f2d>
 8001dec:	a31a      	add	r3, pc, #104	; (adr r3, 8001e58 <setServoPosition+0xc0>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fa53 	bl	800029c <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe fe3d 	bl	8000a7c <__aeabi_d2f>
 8001e02:	4603      	mov	r3, r0
 8001e04:	61fb      	str	r3, [r7, #28]
	float dutyCycle = (pulseTime / .02);
 8001e06:	69f8      	ldr	r0, [r7, #28]
 8001e08:	f7fe fba6 	bl	8000558 <__aeabi_f2d>
 8001e0c:	a314      	add	r3, pc, #80	; (adr r3, 8001e60 <setServoPosition+0xc8>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fd23 	bl	800085c <__aeabi_ddiv>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fe2d 	bl	8000a7c <__aeabi_d2f>
 8001e22:	4603      	mov	r3, r0
 8001e24:	61bb      	str	r3, [r7, #24]

	CCR1Val = (uint32_t) (dutyCycle * 1000);
 8001e26:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e2a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001e70 <setServoPosition+0xd8>
 8001e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e36:	ee17 3a90 	vmov	r3, s15
 8001e3a:	617b      	str	r3, [r7, #20]

	//printf("CCR Val = %lu\n", CCR1Val);
	servo.pTIMHandle->Instance->CCR1 = CCR1Val;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(SERVO_DELAY);
 8001e44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e48:	f001 fc3e 	bl	80036c8 <HAL_Delay>

}
 8001e4c:	bf00      	nop
 8001e4e:	372c      	adds	r7, #44	; 0x2c
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd90      	pop	{r4, r7, pc}
 8001e54:	f3af 8000 	nop.w
 8001e58:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e5c:	3f50624d 	.word	0x3f50624d
 8001e60:	47ae147b 	.word	0x47ae147b
 8001e64:	3f947ae1 	.word	0x3f947ae1
 8001e68:	0800d610 	.word	0x0800d610
 8001e6c:	36ba69dc 	.word	0x36ba69dc
 8001e70:	447a0000 	.word	0x447a0000

08001e74 <resetAllServos>:

HAL_StatusTypeDef resetAllServos(ServoController *pCtrl){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	printf("Resetting Servos...\n");
 8001e7c:	4813      	ldr	r0, [pc, #76]	; (8001ecc <resetAllServos+0x58>)
 8001e7e:	f00a f991 	bl	800c1a4 <puts>

	Servo servo;
	for(int i = 0; i < pCtrl->numServos; i++){
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	e016      	b.n	8001eb6 <resetAllServos+0x42>
		servo = pCtrl->servoList[i];
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	f103 0208 	add.w	r2, r3, #8
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ea0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		setServoPosition(servo, SERVO_POS_CENTER);
 8001ea4:	235a      	movs	r3, #90	; 0x5a
 8001ea6:	f107 0208 	add.w	r2, r7, #8
 8001eaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eac:	f7ff ff74 	bl	8001d98 <setServoPosition>
	for(int i = 0; i < pCtrl->numServos; i++){
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbe3      	blt.n	8001e88 <resetAllServos+0x14>
	}

	return pCtrl->status;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	0800d62c 	.word	0x0800d62c

08001ed0 <shuffle>:
}

// Generates a random integer and flicks a card from the left and right piles one by one based on the bits of the number generated
// Bit = 0 -> Left Pile | Bit = 1 -> Right Pile
#define MAX_CARDS 160
HAL_StatusTypeDef shuffle(ServoController *pCtrl, int numCards){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]

	if(numCards > MAX_CARDS){
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2ba0      	cmp	r3, #160	; 0xa0
 8001ede:	dd06      	ble.n	8001eee <shuffle+0x1e>
		printf("FAILED Deck Shuffle. Too many cards.\n");
 8001ee0:	483a      	ldr	r0, [pc, #232]	; (8001fcc <shuffle+0xfc>)
 8001ee2:	f00a f95f 	bl	800c1a4 <puts>
		pCtrl->status = HAL_ERROR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e068      	b.n	8001fc0 <shuffle+0xf0>
	} else if(pCtrl->numServos < 2){
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	dc06      	bgt.n	8001f04 <shuffle+0x34>
		printf("FAILED Card Shuffle. Not enough servos connected.\n");
 8001ef6:	4836      	ldr	r0, [pc, #216]	; (8001fd0 <shuffle+0x100>)
 8001ef8:	f00a f954 	bl	800c1a4 <puts>
		pCtrl->status = HAL_ERROR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e05d      	b.n	8001fc0 <shuffle+0xf0>
	} else {

		HAL_RNG_StateTypeDef state = HAL_RNG_GetState(pCtrl->pRNGHandle);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 f885 	bl	8006018 <HAL_RNG_GetState>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	76fb      	strb	r3, [r7, #27]
		if(state != HAL_RNG_STATE_READY){
 8001f12:	7efb      	ldrb	r3, [r7, #27]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d008      	beq.n	8001f2a <shuffle+0x5a>
			printf("| RNG Error : %x\n", state);
 8001f18:	7efb      	ldrb	r3, [r7, #27]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	482d      	ldr	r0, [pc, #180]	; (8001fd4 <shuffle+0x104>)
 8001f1e:	f00a f8db 	bl	800c0d8 <iprintf>
			pCtrl->status = HAL_ERROR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e04a      	b.n	8001fc0 <shuffle+0xf0>
		} else {
			int nRandoms = ceil(numCards/32); //Number of random numbers we'll need.
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	da00      	bge.n	8001f32 <shuffle+0x62>
 8001f30:	331f      	adds	r3, #31
 8001f32:	115b      	asrs	r3, r3, #5
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fafd 	bl	8000534 <__aeabi_i2d>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f7fe fd73 	bl	8000a2c <__aeabi_d2iz>
 8001f46:	4603      	mov	r3, r0
 8001f48:	617b      	str	r3, [r7, #20]
			uint32_t rand = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
			int cardsLeft = numCards;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24

			//Generate as many random numbers as necessary (1 bit per card)
			for(int i = 0; i < nRandoms; i++){
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
 8001f56:	e02f      	b.n	8001fb8 <shuffle+0xe8>
				pCtrl->status = HAL_RNG_GenerateRandomNumber(pCtrl->pRNGHandle, &rand);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f107 020c 	add.w	r2, r7, #12
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 ff83 	bl	8005e6e <HAL_RNG_GenerateRandomNumber>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	701a      	strb	r2, [r3, #0]
				if(pCtrl->status != HAL_OK){
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <shuffle+0xb6>
					printf("FAILED Generating Random Number\n");
 8001f78:	4817      	ldr	r0, [pc, #92]	; (8001fd8 <shuffle+0x108>)
 8001f7a:	f00a f913 	bl	800c1a4 <puts>
					printStatus(pCtrl);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fa0c 	bl	800239c <printStatus>
					break;
 8001f84:	e01c      	b.n	8001fc0 <shuffle+0xf0>
				} else {
					//Process 32 cards at a time
					for(int cardIdx = 0; cardIdx < 32; cardIdx++){
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e00f      	b.n	8001fac <shuffle+0xdc>
						int pile = checkBit(rand, cardIdx);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	69f9      	ldr	r1, [r7, #28]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f9c3 	bl	800231c <checkBit>
 8001f96:	6138      	str	r0, [r7, #16]
						drawCard(pCtrl, pile);
 8001f98:	6939      	ldr	r1, [r7, #16]
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f81e 	bl	8001fdc <drawCard>
						cardsLeft--;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
					for(int cardIdx = 0; cardIdx < 32; cardIdx++){
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b1f      	cmp	r3, #31
 8001fb0:	ddec      	ble.n	8001f8c <shuffle+0xbc>
			for(int i = 0; i < nRandoms; i++){
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	623b      	str	r3, [r7, #32]
 8001fb8:	6a3a      	ldr	r2, [r7, #32]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dbcb      	blt.n	8001f58 <shuffle+0x88>
				}
			}
		}
	}

	return pCtrl->status;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	0800d640 	.word	0x0800d640
 8001fd0:	0800d668 	.word	0x0800d668
 8001fd4:	0800d69c 	.word	0x0800d69c
 8001fd8:	0800d6b0 	.word	0x0800d6b0

08001fdc <drawCard>:

// Pile = 0 -> Draw from Left Pile
// Pile = 1 -> Draw form Right Pile
void drawCard(ServoController *pCtrl, int pile){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
	int servoNo = pile;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	617b      	str	r3, [r7, #20]
	if(pCtrl->numServos <= servoNo){
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	db04      	blt.n	8001ffe <drawCard+0x22>
		printf("FAILED Card Draw. Servo #%d not attached.\n", pile);
 8001ff4:	6839      	ldr	r1, [r7, #0]
 8001ff6:	4821      	ldr	r0, [pc, #132]	; (800207c <drawCard+0xa0>)
 8001ff8:	f00a f86e 	bl	800c0d8 <iprintf>
 8001ffc:	e03b      	b.n	8002076 <drawCard+0x9a>
		return;
	}

	// Makes servo kick outwards then inwards
	Servo servo = pCtrl->servoList[servoNo];
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	f103 0208 	add.w	r2, r3, #8
 8002010:	f107 0308 	add.w	r3, r7, #8
 8002014:	ca07      	ldmia	r2, {r0, r1, r2}
 8002016:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(servoNo % 2 == 0){	// Left Servo
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d114      	bne.n	800204e <drawCard+0x72>
		setServoPosition(servo, SERVO_POS_LEFT);
 8002024:	2300      	movs	r3, #0
 8002026:	f107 0208 	add.w	r2, r7, #8
 800202a:	ca07      	ldmia	r2, {r0, r1, r2}
 800202c:	f7ff feb4 	bl	8001d98 <setServoPosition>
		HAL_Delay(SERVO_DELAY);
 8002030:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002034:	f001 fb48 	bl	80036c8 <HAL_Delay>
		setServoPosition(servo, SERVO_POS_RIGHT);
 8002038:	23b4      	movs	r3, #180	; 0xb4
 800203a:	f107 0208 	add.w	r2, r7, #8
 800203e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002040:	f7ff feaa 	bl	8001d98 <setServoPosition>
		HAL_Delay(SERVO_DELAY);
 8002044:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002048:	f001 fb3e 	bl	80036c8 <HAL_Delay>
 800204c:	e013      	b.n	8002076 <drawCard+0x9a>
	} else {	// Right Servo
		setServoPosition(servo, SERVO_POS_RIGHT);
 800204e:	23b4      	movs	r3, #180	; 0xb4
 8002050:	f107 0208 	add.w	r2, r7, #8
 8002054:	ca07      	ldmia	r2, {r0, r1, r2}
 8002056:	f7ff fe9f 	bl	8001d98 <setServoPosition>
		HAL_Delay(SERVO_DELAY);
 800205a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800205e:	f001 fb33 	bl	80036c8 <HAL_Delay>
		setServoPosition(servo, SERVO_POS_LEFT);
 8002062:	2300      	movs	r3, #0
 8002064:	f107 0208 	add.w	r2, r7, #8
 8002068:	ca07      	ldmia	r2, {r0, r1, r2}
 800206a:	f7ff fe95 	bl	8001d98 <setServoPosition>
		HAL_Delay(SERVO_DELAY);
 800206e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002072:	f001 fb29 	bl	80036c8 <HAL_Delay>
	}

}
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	0800d6d0 	.word	0x0800d6d0

08002080 <disconnectServos>:

HAL_StatusTypeDef disconnectServos(ServoController* pCtrl){
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	printf("Disconnecting Servo Controller...\n");
 8002088:	481b      	ldr	r0, [pc, #108]	; (80020f8 <disconnectServos+0x78>)
 800208a:	f00a f88b 	bl	800c1a4 <puts>

	resetAllServos(pCtrl);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fef0 	bl	8001e74 <resetAllServos>
	Servo servo;
	for(int i = 0; i < pCtrl->numServos; i++){
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	e023      	b.n	80020e2 <disconnectServos+0x62>
		servo = pCtrl->servoList[i];
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	f103 0208 	add.w	r2, r3, #8
 80020ac:	f107 0308 	add.w	r3, r7, #8
 80020b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80020b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		pCtrl->status = HAL_TIM_PWM_Stop(servo.pTIMHandle, servo.channel);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f005 f8a3 	bl	8007208 <HAL_TIM_PWM_Stop>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	701a      	strb	r2, [r3, #0]
		if(pCtrl->status != HAL_OK){
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d004      	beq.n	80020dc <disconnectServos+0x5c>
			printf("FAILED to Stop Servo (%s)\n", servo.name);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4809      	ldr	r0, [pc, #36]	; (80020fc <disconnectServos+0x7c>)
 80020d8:	f009 fffe 	bl	800c0d8 <iprintf>
	for(int i = 0; i < pCtrl->numServos; i++){
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3301      	adds	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dbd6      	blt.n	800209a <disconnectServos+0x1a>
		}
	}

	return pCtrl->status;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	781b      	ldrb	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	0800d6fc 	.word	0x0800d6fc
 80020fc:	0800d720 	.word	0x0800d720

08002100 <initESP>:
const char* STATUS_ARCHIDEKT = "Sending Deck to Archidekt\n";
const char* STATUS_SD_READ = "ESP Requesting SD Data\n";
const char* STATUS_SHUTDOWN = "Shutting Down\n";
const char* STATUS_UNKNOWN = "Unknown Action";

HAL_StatusTypeDef initESP(WiFiController* pCtrl){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	printf("Initialzing WiFi Controller...\n");
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <initESP+0x20>)
 800210a:	f00a f84b 	bl	800c1a4 <puts>
	signalBusy(pCtrl);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f82e 	bl	8002170 <signalBusy>
	return pCtrl->status;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	781b      	ldrb	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	0800d7e0 	.word	0x0800d7e0

08002124 <disconnectESP>:

HAL_StatusTypeDef disconnectESP(WiFiController* pCtrl){
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	printf("Disconnecting WiFi Controller...\n");
 800212c:	4807      	ldr	r0, [pc, #28]	; (800214c <disconnectESP+0x28>)
 800212e:	f00a f839 	bl	800c1a4 <puts>
	signalBusy(pCtrl);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f81c 	bl	8002170 <signalBusy>
	clearCMDBuffer(pCtrl);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f877 	bl	800222c <clearCMDBuffer>
	return pCtrl->status;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	781b      	ldrb	r3, [r3, #0]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	0800d800 	.word	0x0800d800

08002150 <signalReady>:

void signalReady(WiFiController* pCtrl){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->readyFlagPin, GPIO_PIN_SET);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6898      	ldr	r0, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	899b      	ldrh	r3, [r3, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	4619      	mov	r1, r3
 8002164:	f001 fd90 	bl	8003c88 <HAL_GPIO_WritePin>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <signalBusy>:

void signalBusy(WiFiController* pCtrl){
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->readyFlagPin, GPIO_PIN_RESET);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6898      	ldr	r0, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	899b      	ldrh	r3, [r3, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	4619      	mov	r1, r3
 8002184:	f001 fd80 	bl	8003c88 <HAL_GPIO_WritePin>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <getNextCMD>:

HAL_StatusTypeDef getNextCMD(WiFiController* pCtrl, char *pCMDBuffer){
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef cmdStatus = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
	printf("Waiting for next CMD...\n\r");
 800219e:	481e      	ldr	r0, [pc, #120]	; (8002218 <getNextCMD+0x88>)
 80021a0:	f009 ff9a 	bl	800c0d8 <iprintf>
	signalReady(pCtrl);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ffd3 	bl	8002150 <signalReady>
	HAL_Delay(ESP_READY_DELAY); // Wait for ESP to send the data
 80021aa:	2064      	movs	r0, #100	; 0x64
 80021ac:	f001 fa8c 	bl	80036c8 <HAL_Delay>
	cmdStatus = HAL_UART_Receive(pCtrl->pUARTHandle, (uint8_t*) pCMDBuffer, 8, ESP_CMD_TIMEOUT); // Waits 60s for a CMD, then yields control
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6858      	ldr	r0, [r3, #4]
 80021b4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80021b8:	2208      	movs	r2, #8
 80021ba:	6839      	ldr	r1, [r7, #0]
 80021bc:	f006 f97a 	bl	80084b4 <HAL_UART_Receive>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]
	switch(cmdStatus){
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d81e      	bhi.n	8002208 <getNextCMD+0x78>
 80021ca:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <getNextCMD+0x40>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021f3 	.word	0x080021f3
 80021d8:	080021eb 	.word	0x080021eb
 80021dc:	08002201 	.word	0x08002201
		case HAL_OK:
			printf("CMD: %s\n", pCMDBuffer);
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	480e      	ldr	r0, [pc, #56]	; (800221c <getNextCMD+0x8c>)
 80021e4:	f009 ff78 	bl	800c0d8 <iprintf>
			break;
 80021e8:	e00e      	b.n	8002208 <getNextCMD+0x78>
		case HAL_BUSY:
			printf("CMD Buffer (RX) Busy\n");
 80021ea:	480d      	ldr	r0, [pc, #52]	; (8002220 <getNextCMD+0x90>)
 80021ec:	f009 ffda 	bl	800c1a4 <puts>
			break;
 80021f0:	e00a      	b.n	8002208 <getNextCMD+0x78>
		case HAL_ERROR:
			printf("Error reading CMD from ESP\n");
 80021f2:	480c      	ldr	r0, [pc, #48]	; (8002224 <getNextCMD+0x94>)
 80021f4:	f009 ffd6 	bl	800c1a4 <puts>
			pCtrl->status = HAL_ERROR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
			break;
 80021fe:	e003      	b.n	8002208 <getNextCMD+0x78>
		case HAL_TIMEOUT:
			printf("Timed out waiting for CMD\n");
 8002200:	4809      	ldr	r0, [pc, #36]	; (8002228 <getNextCMD+0x98>)
 8002202:	f009 ffcf 	bl	800c1a4 <puts>
			break;
 8002206:	bf00      	nop
	}

	signalBusy(pCtrl);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ffb1 	bl	8002170 <signalBusy>
	return cmdStatus;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	0800d824 	.word	0x0800d824
 800221c:	0800d840 	.word	0x0800d840
 8002220:	0800d84c 	.word	0x0800d84c
 8002224:	0800d864 	.word	0x0800d864
 8002228:	0800d880 	.word	0x0800d880

0800222c <clearCMDBuffer>:

// Cleans out the ESP_RX buffer
// Note: Using this in the loop removes the ability to make a "Command Queue", so the buffer can only ever have one CMD at a time
void clearCMDBuffer(WiFiController* pCtrl){
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	uint8_t byteRead = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]
	while(status == HAL_OK){
 800223c:	e009      	b.n	8002252 <clearCMDBuffer+0x26>
		status = HAL_UART_Receive(pCtrl->pUARTHandle, &byteRead, 1, 0); //Should become HAL_TIMEOUT when there is no data left
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6858      	ldr	r0, [r3, #4]
 8002242:	f107 010e 	add.w	r1, r7, #14
 8002246:	2300      	movs	r3, #0
 8002248:	2201      	movs	r2, #1
 800224a:	f006 f933 	bl	80084b4 <HAL_UART_Receive>
 800224e:	4603      	mov	r3, r0
 8002250:	73fb      	strb	r3, [r7, #15]
	while(status == HAL_OK){
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f2      	beq.n	800223e <clearCMDBuffer+0x12>
	}
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <sendData>:

HAL_StatusTypeDef sendData(WiFiController* pCtrl, void* pDataBuffer, uint16_t size){
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	4613      	mov	r3, r2
 8002270:	80fb      	strh	r3, [r7, #6]
	printf("Sending %u bytes to ESP\n", size);
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	4619      	mov	r1, r3
 8002276:	480f      	ldr	r0, [pc, #60]	; (80022b4 <sendData+0x50>)
 8002278:	f009 ff2e 	bl	800c0d8 <iprintf>
	pCtrl->status = HAL_UART_Transmit(pCtrl->pUARTHandle, (const uint8_t*) pDataBuffer, size, HAL_MAX_DELAY);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6858      	ldr	r0, [r3, #4]
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	f006 f88a 	bl	80083a0 <HAL_UART_Transmit>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	701a      	strb	r2, [r3, #0]
	if(pCtrl->status != HAL_OK){
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <sendData+0x44>
		printf("FAILED Sending data to ESP\n");
 800229c:	4806      	ldr	r0, [pc, #24]	; (80022b8 <sendData+0x54>)
 800229e:	f009 ff81 	bl	800c1a4 <puts>
		printStatus(pCtrl);
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f87a 	bl	800239c <printStatus>
	}
	return pCtrl -> status;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	781b      	ldrb	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	0800d89c 	.word	0x0800d89c
 80022b8:	0800d8b8 	.word	0x0800d8b8

080022bc <initHelpers>:

UART_HandleTypeDef *pHUART;



void initHelpers(UART_HandleTypeDef* pUHandle){
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	pHUART = pUHandle;
 80022c4:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <initHelpers+0x1c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	2000051c 	.word	0x2000051c

080022dc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(pHUART, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <__io_putchar+0x38>)
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	1d39      	adds	r1, r7, #4
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
 80022ee:	2201      	movs	r2, #1
 80022f0:	f006 f856 	bl	80083a0 <HAL_UART_Transmit>
	if(ch == '\n'){
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b0a      	cmp	r3, #10
 80022f8:	d107      	bne.n	800230a <__io_putchar+0x2e>
		HAL_UART_Transmit(pHUART, (uint8_t *)"\r", 1, HAL_MAX_DELAY);
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <__io_putchar+0x38>)
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	2201      	movs	r2, #1
 8002304:	4904      	ldr	r1, [pc, #16]	; (8002318 <__io_putchar+0x3c>)
 8002306:	f006 f84b 	bl	80083a0 <HAL_UART_Transmit>
	}
	return ch;
 800230a:	687b      	ldr	r3, [r7, #4]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	2000051c 	.word	0x2000051c
 8002318:	0800d8d4 	.word	0x0800d8d4

0800231c <checkBit>:

//Returns the value of the bit at index in num
//Ex: checkBit(0x05, 2) == 1
int checkBit(uint32_t num, int index){
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
	return (int) ((num >> index) & 0x01);
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	fa22 f303 	lsr.w	r3, r2, r3
 800232e:	f003 0301 	and.w	r3, r3, #1
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <stat2Str>:
			printf("Device found at Addr 0x%02X", i);
		}
	}
}

char* stat2Str(HAL_StatusTypeDef status){
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
	switch(status){
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d813      	bhi.n	8002378 <stat2Str+0x38>
 8002350:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <stat2Str+0x18>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	08002369 	.word	0x08002369
 800235c:	0800236d 	.word	0x0800236d
 8002360:	08002371 	.word	0x08002371
 8002364:	08002375 	.word	0x08002375
		case HAL_OK:
			return "HAL_OK\0";
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <stat2Str+0x48>)
 800236a:	e006      	b.n	800237a <stat2Str+0x3a>
		case HAL_ERROR:
			return "HAL_ERROR\0";
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <stat2Str+0x4c>)
 800236e:	e004      	b.n	800237a <stat2Str+0x3a>
		case HAL_BUSY:
			return "HAL_BUSY\0";
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <stat2Str+0x50>)
 8002372:	e002      	b.n	800237a <stat2Str+0x3a>
		case HAL_TIMEOUT:
			return "HAL_TIMEOUT\0";
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <stat2Str+0x54>)
 8002376:	e000      	b.n	800237a <stat2Str+0x3a>
		default:
			return "UNKNOWN STATUS\0";
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <stat2Str+0x58>)
	}
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	0800d8f4 	.word	0x0800d8f4
 800238c:	0800d8fc 	.word	0x0800d8fc
 8002390:	0800d908 	.word	0x0800d908
 8002394:	0800d914 	.word	0x0800d914
 8002398:	0800d924 	.word	0x0800d924

0800239c <printStatus>:
// Trying to introduce a little polymorphism-ease
typedef struct GenericController{
	HAL_StatusTypeDef status;
} GenericController;

void printStatus(void* pCtrl){
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = ((GenericController*) pCtrl)->status;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	73fb      	strb	r3, [r7, #15]
	printf("\t|^ Status : %s\n", stat2Str(status));
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ffc7 	bl	8002340 <stat2Str>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4619      	mov	r1, r3
 80023b6:	4803      	ldr	r0, [pc, #12]	; (80023c4 <printStatus+0x28>)
 80023b8:	f009 fe8e 	bl	800c0d8 <iprintf>
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	0800d934 	.word	0x0800d934

080023c8 <fullStatusReport>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void fullStatusReport(ArducamController* pArducam, WiFiController* pESP, ServoController* pServoController, SDController* pSDController){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
	if(!pArducam){ printf("Null Arducam Pointer!\n");} else {printf("Arducam Status : %s\n", stat2Str(pArducam->status));}
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d103      	bne.n	80023e4 <fullStatusReport+0x1c>
 80023dc:	4822      	ldr	r0, [pc, #136]	; (8002468 <fullStatusReport+0xa0>)
 80023de:	f009 fee1 	bl	800c1a4 <puts>
 80023e2:	e009      	b.n	80023f8 <fullStatusReport+0x30>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ffa9 	bl	8002340 <stat2Str>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4619      	mov	r1, r3
 80023f2:	481e      	ldr	r0, [pc, #120]	; (800246c <fullStatusReport+0xa4>)
 80023f4:	f009 fe70 	bl	800c0d8 <iprintf>
	if(!pESP){ printf("Null WiFiController Pointer!\n"); } else {printf("ESP Status : %s\n", stat2Str(pESP->status));}
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d103      	bne.n	8002406 <fullStatusReport+0x3e>
 80023fe:	481c      	ldr	r0, [pc, #112]	; (8002470 <fullStatusReport+0xa8>)
 8002400:	f009 fed0 	bl	800c1a4 <puts>
 8002404:	e009      	b.n	800241a <fullStatusReport+0x52>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff98 	bl	8002340 <stat2Str>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	4817      	ldr	r0, [pc, #92]	; (8002474 <fullStatusReport+0xac>)
 8002416:	f009 fe5f 	bl	800c0d8 <iprintf>
	if(!pServoController){ printf("Null ServoController Pointer!\n"); } else {printf("Servo Status : %s\n", stat2Str(pServoController->status));}
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d103      	bne.n	8002428 <fullStatusReport+0x60>
 8002420:	4815      	ldr	r0, [pc, #84]	; (8002478 <fullStatusReport+0xb0>)
 8002422:	f009 febf 	bl	800c1a4 <puts>
 8002426:	e009      	b.n	800243c <fullStatusReport+0x74>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff87 	bl	8002340 <stat2Str>
 8002432:	4603      	mov	r3, r0
 8002434:	4619      	mov	r1, r3
 8002436:	4811      	ldr	r0, [pc, #68]	; (800247c <fullStatusReport+0xb4>)
 8002438:	f009 fe4e 	bl	800c0d8 <iprintf>
	if(!pSDController){ printf("Null SDController Pointer!\n"); } else {printf("SD Status : %s\n", stat2Str(pSDController->status));}
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d103      	bne.n	800244a <fullStatusReport+0x82>
 8002442:	480f      	ldr	r0, [pc, #60]	; (8002480 <fullStatusReport+0xb8>)
 8002444:	f009 feae 	bl	800c1a4 <puts>
}
 8002448:	e009      	b.n	800245e <fullStatusReport+0x96>
	if(!pSDController){ printf("Null SDController Pointer!\n"); } else {printf("SD Status : %s\n", stat2Str(pSDController->status));}
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff76 	bl	8002340 <stat2Str>
 8002454:	4603      	mov	r3, r0
 8002456:	4619      	mov	r1, r3
 8002458:	480a      	ldr	r0, [pc, #40]	; (8002484 <fullStatusReport+0xbc>)
 800245a:	f009 fe3d 	bl	800c0d8 <iprintf>
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	0800d948 	.word	0x0800d948
 800246c:	0800d960 	.word	0x0800d960
 8002470:	0800d978 	.word	0x0800d978
 8002474:	0800d998 	.word	0x0800d998
 8002478:	0800d9ac 	.word	0x0800d9ac
 800247c:	0800d9cc 	.word	0x0800d9cc
 8002480:	0800d9e0 	.word	0x0800d9e0
 8002484:	0800d9fc 	.word	0x0800d9fc

08002488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800248e:	b08d      	sub	sp, #52	; 0x34
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002492:	f001 f89d 	bl	80035d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002496:	f000 fa1f 	bl	80028d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800249a:	f000 fc63 	bl	8002d64 <MX_GPIO_Init>
  MX_I2C1_Init();
 800249e:	f000 fa6d 	bl	800297c <MX_I2C1_Init>
  MX_SPI1_Init();
 80024a2:	f000 faff 	bl	8002aa4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80024a6:	f000 fc2d 	bl	8002d04 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80024aa:	f000 fbfb 	bl	8002ca4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80024ae:	f006 fd99 	bl	8008fe4 <MX_FATFS_Init>
  MX_SPI2_Init();
 80024b2:	f000 fb35 	bl	8002b20 <MX_SPI2_Init>
  MX_I2C2_Init();
 80024b6:	f000 faa1 	bl	80029fc <MX_I2C2_Init>
  MX_TIM2_Init();
 80024ba:	f000 fb6f 	bl	8002b9c <MX_TIM2_Init>
  MX_RNG_Init();
 80024be:	f000 fadd 	bl	8002a7c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  //Initialize Helper Functions
  initHelpers(&huart2);
 80024c2:	48be      	ldr	r0, [pc, #760]	; (80027bc <main+0x334>)
 80024c4:	f7ff fefa 	bl	80022bc <initHelpers>

  //Initialize the peripheral controllers and their components
  Servo leftServo = {.name = "LEFT_SERVO\0", .pTIMHandle = &htim2, .channel = TIM_CHANNEL_1};
 80024c8:	4abd      	ldr	r2, [pc, #756]	; (80027c0 <main+0x338>)
 80024ca:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80024ce:	f103 0320 	add.w	r3, r3, #32
 80024d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80024d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  Servo rightServo = {.name = "RIGHT_SERVO\0", .pTIMHandle = &htim2, .channel = TIM_CHANNEL_2};
 80024d8:	4aba      	ldr	r2, [pc, #744]	; (80027c4 <main+0x33c>)
 80024da:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80024de:	f103 0314 	add.w	r3, r3, #20
 80024e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80024e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  ServoController servoController = {.pRNGHandle = &hrng};
 80024e8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80024ec:	f103 030c 	add.w	r3, r3, #12
 80024f0:	2248      	movs	r2, #72	; 0x48
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f009 ff35 	bl	800c364 <memset>
 80024fa:	4bb3      	ldr	r3, [pc, #716]	; (80027c8 <main+0x340>)
 80024fc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8002500:	f102 0210 	add.w	r2, r2, #16
 8002504:	6013      	str	r3, [r2, #0]
  initServoController(&servoController);
 8002506:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800250a:	f103 030c 	add.w	r3, r3, #12
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fbd0 	bl	8001cb4 <initServoController>
  addServo(&servoController, leftServo);
 8002514:	f507 5001 	add.w	r0, r7, #8256	; 0x2040
 8002518:	f100 000c 	add.w	r0, r0, #12
 800251c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002520:	f103 0320 	add.w	r3, r3, #32
 8002524:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002526:	f7ff fbe1 	bl	8001cec <addServo>
  addServo(&servoController, rightServo);
 800252a:	f507 5001 	add.w	r0, r7, #8256	; 0x2040
 800252e:	f100 000c 	add.w	r0, r0, #12
 8002532:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002536:	f103 0314 	add.w	r3, r3, #20
 800253a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800253c:	f7ff fbd6 	bl	8001cec <addServo>

  ArducamController arducam = {.status = HAL_OK, .pI2CHandle = &hi2c1, .pSPIHandle = &hspi1, .pCSPort = CAM_CS_GPIO_Port, .csPinNo = CAM_CS_Pin, .pFlashPort = CAM_FLASH_GPIO_Port, .flashPinNo = CAM_FLASH_Pin};
 8002540:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002544:	3b84      	subs	r3, #132	; 0x84
 8002546:	f242 0220 	movw	r2, #8224	; 0x2020
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f009 ff09 	bl	800c364 <memset>
 8002552:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002556:	461a      	mov	r2, r3
 8002558:	4b9c      	ldr	r3, [pc, #624]	; (80027cc <main+0x344>)
 800255a:	f842 3c80 	str.w	r3, [r2, #-128]
 800255e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002562:	461a      	mov	r2, r3
 8002564:	4b9a      	ldr	r3, [pc, #616]	; (80027d0 <main+0x348>)
 8002566:	f842 3c7c 	str.w	r3, [r2, #-124]
 800256a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800256e:	461a      	mov	r2, r3
 8002570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002574:	f842 3c78 	str.w	r3, [r2, #-120]
 8002578:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800257c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002580:	f823 2c74 	strh.w	r2, [r3, #-116]
 8002584:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002588:	461a      	mov	r2, r3
 800258a:	4b92      	ldr	r3, [pc, #584]	; (80027d4 <main+0x34c>)
 800258c:	f842 3c70 	str.w	r3, [r2, #-112]
 8002590:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002594:	2240      	movs	r2, #64	; 0x40
 8002596:	f823 2c6c 	strh.w	r2, [r3, #-108]
  initArducam(&arducam);
 800259a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800259e:	3b04      	subs	r3, #4
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fc39 	bl	8000e18 <initArducam>

  WiFiController esp = {.status = HAL_OK, .pUARTHandle = &huart1, .pGPIOPort = READY_FLAG_GPIO_Port, .readyFlagPin = READY_FLAG_Pin};
 80025a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025aa:	4a8b      	ldr	r2, [pc, #556]	; (80027d8 <main+0x350>)
 80025ac:	f1a3 0494 	sub.w	r4, r3, #148	; 0x94
 80025b0:	4613      	mov	r3, r2
 80025b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char pCMDBuffer[] = "CMDBUFFR";
 80025b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025bc:	4a87      	ldr	r2, [pc, #540]	; (80027dc <main+0x354>)
 80025be:	3ba0      	subs	r3, #160	; 0xa0
 80025c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80025c2:	c303      	stmia	r3!, {r0, r1}
 80025c4:	701a      	strb	r2, [r3, #0]
  initESP(&esp);
 80025c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025ca:	3b14      	subs	r3, #20
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fd97 	bl	8002100 <initESP>

  SDController sd = {.status = HAL_OK, .pSPIHandle = &hspi2, .pCSPort = SD_CS_GPIO_Port, .csPin = SD_CS_Pin};
 80025d2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025d6:	4a82      	ldr	r2, [pc, #520]	; (80027e0 <main+0x358>)
 80025d8:	f1a3 04b0 	sub.w	r4, r3, #176	; 0xb0
 80025dc:	4613      	mov	r3, r2
 80025de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char* filename = "image.jpg";
 80025e4:	4b7f      	ldr	r3, [pc, #508]	; (80027e4 <main+0x35c>)
 80025e6:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80025ea:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80025ee:	6013      	str	r3, [r2, #0]
  initSD(&sd);
 80025f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025f4:	3b30      	subs	r3, #48	; 0x30
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff f9e6 	bl	80019c8 <initSD>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  clearCMDBuffer(&esp); //Clear out any old commands that may have come in while Assistant wasn't looking
 80025fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002600:	3b14      	subs	r3, #20
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fe12 	bl	800222c <clearCMDBuffer>
  while (esp.status == HAL_OK) // Might add the other Controllers here if needed
 8002608:	e121      	b.n	800284e <main+0x3c6>
  {// Continuously look for commands on ESP_RX, as long as ESP is working

	if(getNextCMD(&esp, pCMDBuffer) == HAL_OK){
 800260a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800260e:	3a20      	subs	r2, #32
 8002610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002614:	3b14      	subs	r3, #20
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fdb9 	bl	8002190 <getNextCMD>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	f040 8108 	bne.w	8002836 <main+0x3ae>
		signalBusy(&esp);
 8002626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800262a:	3b14      	subs	r3, #20
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fd9f 	bl	8002170 <signalBusy>
		if(strcmp(pCMDBuffer, LIGHTS_ON) == 0){ //Turn the Flash On
 8002632:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002636:	3b20      	subs	r3, #32
 8002638:	496b      	ldr	r1, [pc, #428]	; (80027e8 <main+0x360>)
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd fdc8 	bl	80001d0 <strcmp>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <main+0x1d6>
			printf(STATUS_LIGHTS_ON);
 8002646:	4b69      	ldr	r3, [pc, #420]	; (80027ec <main+0x364>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f009 fd44 	bl	800c0d8 <iprintf>
			flashOn(&arducam);
 8002650:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002654:	3b04      	subs	r3, #4
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe ffcf 	bl	80015fa <flashOn>
 800265c:	e0eb      	b.n	8002836 <main+0x3ae>
		} else if (strcmp(pCMDBuffer, LIGHTS_OFF) == 0){ //Turn the Flash Off
 800265e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002662:	3b20      	subs	r3, #32
 8002664:	4962      	ldr	r1, [pc, #392]	; (80027f0 <main+0x368>)
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd fdb2 	bl	80001d0 <strcmp>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10b      	bne.n	800268a <main+0x202>
			printf(STATUS_LIGHTS_OFF);
 8002672:	4b60      	ldr	r3, [pc, #384]	; (80027f4 <main+0x36c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f009 fd2e 	bl	800c0d8 <iprintf>
			flashOff(&arducam);
 800267c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002680:	3b04      	subs	r3, #4
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe ffc9 	bl	800161a <flashOff>
 8002688:	e0d5      	b.n	8002836 <main+0x3ae>
		} else if (strcmp(pCMDBuffer, SHUFFLE) == 0){ //Begin Shuffle Sequence
 800268a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800268e:	3b20      	subs	r3, #32
 8002690:	4959      	ldr	r1, [pc, #356]	; (80027f8 <main+0x370>)
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd fd9c 	bl	80001d0 <strcmp>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d114      	bne.n	80026c8 <main+0x240>
			printf(STATUS_SHUFFLE);
 800269e:	4b57      	ldr	r3, [pc, #348]	; (80027fc <main+0x374>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f009 fd18 	bl	800c0d8 <iprintf>
			if(shuffle(&servoController, DECK_SIZE) == HAL_OK){
 80026a8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80026ac:	f103 030c 	add.w	r3, r3, #12
 80026b0:	2164      	movs	r1, #100	; 0x64
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fc0c 	bl	8001ed0 <shuffle>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 80bb 	bne.w	8002836 <main+0x3ae>
				printf("SUCCESS Shuffled Deck.\n");
 80026c0:	484f      	ldr	r0, [pc, #316]	; (8002800 <main+0x378>)
 80026c2:	f009 fd6f 	bl	800c1a4 <puts>
 80026c6:	e0b6      	b.n	8002836 <main+0x3ae>
			}
		} else if (strcmp(pCMDBuffer, SNAP) == 0){ //Take a Single Picture and Sends it to the ESP
 80026c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026cc:	3b20      	subs	r3, #32
 80026ce:	494d      	ldr	r1, [pc, #308]	; (8002804 <main+0x37c>)
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd fd7d 	bl	80001d0 <strcmp>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d145      	bne.n	8002768 <main+0x2e0>
			printf(STATUS_SNAP);
 80026dc:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <main+0x380>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f009 fcf9 	bl	800c0d8 <iprintf>
			if(singleCapture(&arducam) == HAL_OK){
 80026e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026ea:	3b04      	subs	r3, #4
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe fc21 	bl	8000f34 <singleCapture>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 809e 	bne.w	8002836 <main+0x3ae>
				if(writeFile(&sd, filename, arducam.pictureBuffer, arducam.pictureBufferSize) == HAL_OK){ //Saves JPG data to SD
 80026fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80026fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002702:	f8b3 3f9a 	ldrh.w	r3, [r3, #3994]	; 0xf9a
 8002706:	4619      	mov	r1, r3
 8002708:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800270c:	3b04      	subs	r3, #4
 800270e:	f103 021a 	add.w	r2, r3, #26
 8002712:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002716:	3830      	subs	r0, #48	; 0x30
 8002718:	460b      	mov	r3, r1
 800271a:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 800271e:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 8002722:	6809      	ldr	r1, [r1, #0]
 8002724:	f7ff fa60 	bl	8001be8 <writeFile>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 8083 	bne.w	8002836 <main+0x3ae>
					printf("SUCCESS Saved Single Snap\n");
 8002730:	4836      	ldr	r0, [pc, #216]	; (800280c <main+0x384>)
 8002732:	f009 fd37 	bl	800c1a4 <puts>
					picToBase64(&arducam);
 8002736:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800273a:	3b04      	subs	r3, #4
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fff7 	bl	8001730 <picToBase64>
					sendData(&esp, arducam.base64Buffer, arducam.base64Size);
 8002742:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800274a:	f8b3 2f98 	ldrh.w	r2, [r3, #3992]	; 0xf98
 800274e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002752:	3b04      	subs	r3, #4
 8002754:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 8002758:	311a      	adds	r1, #26
 800275a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800275e:	3b14      	subs	r3, #20
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fd7f 	bl	8002264 <sendData>
 8002766:	e066      	b.n	8002836 <main+0x3ae>
				}
			}
		} else if (strcmp(pCMDBuffer, ARCHIDEKT) == 0){
 8002768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800276c:	3b20      	subs	r3, #32
 800276e:	4928      	ldr	r1, [pc, #160]	; (8002810 <main+0x388>)
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd fd2d 	bl	80001d0 <strcmp>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <main+0x300>
			// Send the Deck to Archidekt
			// Idea : Capture 100 photos, send each to ESP to go to curl for Image to Text API, then Receive Text, (display it?), send out to Archidekt
			// Might be best to split into a "SCAN" cmd that scans a single card and prints the card name (at least for testing) and an "Archidekt" CMD
			printf(STATUS_ARCHIDEKT);
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <main+0x38c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f009 fca9 	bl	800c0d8 <iprintf>
 8002786:	e056      	b.n	8002836 <main+0x3ae>
		} else if (strcmp(pCMDBuffer, SD_READ) == 0){ // Sends 1KB of the active SD file to ESP repeatedly
 8002788:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800278c:	3b20      	subs	r3, #32
 800278e:	4922      	ldr	r1, [pc, #136]	; (8002818 <main+0x390>)
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fd1d 	bl	80001d0 <strcmp>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d04c      	beq.n	8002836 <main+0x3ae>
				readFile(&sd, filename, fileData, transmissionSize);
				sendData(&esp32, fileData, transmissionSize);
				signalReady(&esp32);

			}*/
		} else if (strcmp(pCMDBuffer, SHUTDOWN) == 0){
 800279c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027a0:	3b20      	subs	r3, #32
 80027a2:	491e      	ldr	r1, [pc, #120]	; (800281c <main+0x394>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fd13 	bl	80001d0 <strcmp>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d139      	bne.n	8002824 <main+0x39c>
			//Stop waiting for commands and exit the loop
			printf(STATUS_SHUTDOWN);
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <main+0x398>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f009 fc8f 	bl	800c0d8 <iprintf>
			break;
 80027ba:	e04f      	b.n	800285c <main+0x3d4>
 80027bc:	20000774 	.word	0x20000774
 80027c0:	0800da80 	.word	0x0800da80
 80027c4:	0800da9c 	.word	0x0800da9c
 80027c8:	200005c8 	.word	0x200005c8
 80027cc:	20000520 	.word	0x20000520
 80027d0:	200005d8 	.word	0x200005d8
 80027d4:	48000800 	.word	0x48000800
 80027d8:	0800daa8 	.word	0x0800daa8
 80027dc:	0800dab8 	.word	0x0800dab8
 80027e0:	0800dac4 	.word	0x0800dac4
 80027e4:	0800da0c 	.word	0x0800da0c
 80027e8:	0800dd54 	.word	0x0800dd54
 80027ec:	20000000 	.word	0x20000000
 80027f0:	0800dd60 	.word	0x0800dd60
 80027f4:	20000004 	.word	0x20000004
 80027f8:	0800dd6c 	.word	0x0800dd6c
 80027fc:	20000008 	.word	0x20000008
 8002800:	0800da18 	.word	0x0800da18
 8002804:	0800dd78 	.word	0x0800dd78
 8002808:	2000000c 	.word	0x2000000c
 800280c:	0800da30 	.word	0x0800da30
 8002810:	0800dd84 	.word	0x0800dd84
 8002814:	20000010 	.word	0x20000010
 8002818:	0800dd90 	.word	0x0800dd90
 800281c:	0800dd9c 	.word	0x0800dd9c
 8002820:	20000014 	.word	0x20000014
		} else { //Some strange command
			printf("%s: '%s'\n", STATUS_UNKNOWN, pCMDBuffer);
 8002824:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <main+0x440>)
 8002826:	6819      	ldr	r1, [r3, #0]
 8002828:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800282c:	3b20      	subs	r3, #32
 800282e:	461a      	mov	r2, r3
 8002830:	4826      	ldr	r0, [pc, #152]	; (80028cc <main+0x444>)
 8002832:	f009 fc51 	bl	800c0d8 <iprintf>
		}
	}

	clearCMDBuffer(&esp); // Flush again just to be sure the buffer is clear for the next command
 8002836:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800283a:	3b14      	subs	r3, #20
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fcf5 	bl	800222c <clearCMDBuffer>
	signalReady(&esp);
 8002842:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002846:	3b14      	subs	r3, #20
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fc81 	bl	8002150 <signalReady>
  while (esp.status == HAL_OK) // Might add the other Controllers here if needed
 800284e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002852:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f43f aed7 	beq.w	800260a <main+0x182>
  }

  	printf("Exited Loop.\n");
 800285c:	481c      	ldr	r0, [pc, #112]	; (80028d0 <main+0x448>)
 800285e:	f009 fca1 	bl	800c1a4 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	fullStatusReport(&arducam, &esp, &servoController, &sd); // Prints the statuses of every peripheral
 8002862:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002866:	3b30      	subs	r3, #48	; 0x30
 8002868:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800286c:	f102 020c 	add.w	r2, r2, #12
 8002870:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002874:	3914      	subs	r1, #20
 8002876:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800287a:	3804      	subs	r0, #4
 800287c:	f7ff fda4 	bl	80023c8 <fullStatusReport>

  	// Clean up step
  	disconnectSD(&sd);
 8002880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002884:	3b30      	subs	r3, #48	; 0x30
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f8c8 	bl	8001a1c <disconnectSD>
  	disconnectArducam(&arducam);
 800288c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002890:	3b04      	subs	r3, #4
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fb3e 	bl	8000f14 <disconnectArducam>
  	disconnectServos(&servoController);
 8002898:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800289c:	f103 030c 	add.w	r3, r3, #12
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fbed 	bl	8002080 <disconnectServos>
  	disconnectESP(&esp);
 80028a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028aa:	3b14      	subs	r3, #20
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fc39 	bl	8002124 <disconnectESP>

	printf("Goodbye!\n");
 80028b2:	4808      	ldr	r0, [pc, #32]	; (80028d4 <main+0x44c>)
 80028b4:	f009 fc76 	bl	800c1a4 <puts>
 80028b8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 80028c0:	3734      	adds	r7, #52	; 0x34
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd90      	pop	{r4, r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000018 	.word	0x20000018
 80028cc:	0800da4c 	.word	0x0800da4c
 80028d0:	0800da58 	.word	0x0800da58
 80028d4:	0800da68 	.word	0x0800da68

080028d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b096      	sub	sp, #88	; 0x58
 80028dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028de:	f107 0314 	add.w	r3, r7, #20
 80028e2:	2244      	movs	r2, #68	; 0x44
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f009 fd3c 	bl	800c364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ec:	463b      	mov	r3, r7
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]
 80028f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80028fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028fe:	f001 ff4d 	bl	800479c <HAL_PWREx_ControlVoltageScaling>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002908:	f000 fabc 	bl	8002e84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800290c:	2302      	movs	r3, #2
 800290e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002914:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002916:	2310      	movs	r3, #16
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800291a:	2302      	movs	r3, #2
 800291c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800291e:	2302      	movs	r3, #2
 8002920:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002922:	2301      	movs	r3, #1
 8002924:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002926:	2308      	movs	r3, #8
 8002928:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800292a:	2307      	movs	r3, #7
 800292c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800292e:	2302      	movs	r3, #2
 8002930:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002932:	2302      	movs	r3, #2
 8002934:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4618      	mov	r0, r3
 800293c:	f001 ff84 	bl	8004848 <HAL_RCC_OscConfig>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002946:	f000 fa9d 	bl	8002e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800294a:	230f      	movs	r3, #15
 800294c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800294e:	2303      	movs	r3, #3
 8002950:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800295a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800295e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002960:	463b      	mov	r3, r7
 8002962:	2103      	movs	r1, #3
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fb4b 	bl	8005000 <HAL_RCC_ClockConfig>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002970:	f000 fa88 	bl	8002e84 <Error_Handler>
  }
}
 8002974:	bf00      	nop
 8002976:	3758      	adds	r7, #88	; 0x58
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <MX_I2C1_Init+0x74>)
 8002982:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <MX_I2C1_Init+0x78>)
 8002984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <MX_I2C1_Init+0x74>)
 8002988:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <MX_I2C1_Init+0x7c>)
 800298a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <MX_I2C1_Init+0x74>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <MX_I2C1_Init+0x74>)
 8002994:	2201      	movs	r2, #1
 8002996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002998:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <MX_I2C1_Init+0x74>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029b6:	480e      	ldr	r0, [pc, #56]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029b8:	f001 f97e 	bl	8003cb8 <HAL_I2C_Init>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029c2:	f000 fa5f 	bl	8002e84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029c6:	2100      	movs	r1, #0
 80029c8:	4809      	ldr	r0, [pc, #36]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029ca:	f001 fe41 	bl	8004650 <HAL_I2CEx_ConfigAnalogFilter>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029d4:	f000 fa56 	bl	8002e84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029d8:	2100      	movs	r1, #0
 80029da:	4805      	ldr	r0, [pc, #20]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029dc:	f001 fe83 	bl	80046e6 <HAL_I2CEx_ConfigDigitalFilter>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029e6:	f000 fa4d 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000520 	.word	0x20000520
 80029f4:	40005400 	.word	0x40005400
 80029f8:	10707dbc 	.word	0x10707dbc

080029fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <MX_I2C2_Init+0x78>)
 8002a04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <MX_I2C2_Init+0x7c>)
 8002a0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002a0c:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a36:	480e      	ldr	r0, [pc, #56]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a38:	f001 f93e 	bl	8003cb8 <HAL_I2C_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002a42:	f000 fa1f 	bl	8002e84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a46:	2100      	movs	r1, #0
 8002a48:	4809      	ldr	r0, [pc, #36]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a4a:	f001 fe01 	bl	8004650 <HAL_I2CEx_ConfigAnalogFilter>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002a54:	f000 fa16 	bl	8002e84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4805      	ldr	r0, [pc, #20]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a5c:	f001 fe43 	bl	80046e6 <HAL_I2CEx_ConfigDigitalFilter>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002a66:	f000 fa0d 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000574 	.word	0x20000574
 8002a74:	40005800 	.word	0x40005800
 8002a78:	10707dbc 	.word	0x10707dbc

08002a7c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <MX_RNG_Init+0x20>)
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <MX_RNG_Init+0x24>)
 8002a84:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002a86:	4805      	ldr	r0, [pc, #20]	; (8002a9c <MX_RNG_Init+0x20>)
 8002a88:	f003 f99a 	bl	8005dc0 <HAL_RNG_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002a92:	f000 f9f7 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200005c8 	.word	0x200005c8
 8002aa0:	50060800 	.word	0x50060800

08002aa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <MX_SPI1_Init+0x78>)
 8002aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002abe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ac2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002af2:	2207      	movs	r2, #7
 8002af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002afe:	2208      	movs	r2, #8
 8002b00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b02:	4805      	ldr	r0, [pc, #20]	; (8002b18 <MX_SPI1_Init+0x74>)
 8002b04:	f003 fa95 	bl	8006032 <HAL_SPI_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b0e:	f000 f9b9 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200005d8 	.word	0x200005d8
 8002b1c:	40013000 	.word	0x40013000

08002b20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b26:	4a1c      	ldr	r2, [pc, #112]	; (8002b98 <MX_SPI2_Init+0x78>)
 8002b28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b3e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b46:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b52:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b56:	2220      	movs	r2, #32
 8002b58:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b66:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b6e:	2207      	movs	r2, #7
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b7e:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_SPI2_Init+0x74>)
 8002b80:	f003 fa57 	bl	8006032 <HAL_SPI_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002b8a:	f000 f97b 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	2000063c 	.word	0x2000063c
 8002b98:	40003800 	.word	0x40003800

08002b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08e      	sub	sp, #56	; 0x38
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	609a      	str	r2, [r3, #8]
 8002bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb0:	f107 031c 	add.w	r3, r7, #28
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bbc:	463b      	mov	r3, r7
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
 8002bc8:	611a      	str	r2, [r3, #16]
 8002bca:	615a      	str	r2, [r3, #20]
 8002bcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bce:	4b34      	ldr	r3, [pc, #208]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002bd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1279;
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002bd8:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8002bdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bde:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002be4:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002be6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bec:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bf8:	4829      	ldr	r0, [pc, #164]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002bfa:	f004 f947 	bl	8006e8c <HAL_TIM_Base_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002c04:	f000 f93e 	bl	8002e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c12:	4619      	mov	r1, r3
 8002c14:	4822      	ldr	r0, [pc, #136]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002c16:	f004 fda3 	bl	8007760 <HAL_TIM_ConfigClockSource>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002c20:	f000 f930 	bl	8002e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c24:	481e      	ldr	r0, [pc, #120]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002c26:	f004 f988 	bl	8006f3a <HAL_TIM_PWM_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002c30:	f000 f928 	bl	8002e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c3c:	f107 031c 	add.w	r3, r7, #28
 8002c40:	4619      	mov	r1, r3
 8002c42:	4817      	ldr	r0, [pc, #92]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002c44:	f005 fab8 	bl	80081b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002c4e:	f000 f919 	bl	8002e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c52:	2360      	movs	r3, #96	; 0x60
 8002c54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8002c56:	234b      	movs	r3, #75	; 0x4b
 8002c58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c62:	463b      	mov	r3, r7
 8002c64:	2200      	movs	r2, #0
 8002c66:	4619      	mov	r1, r3
 8002c68:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002c6a:	f004 fc65 	bl	8007538 <HAL_TIM_PWM_ConfigChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002c74:	f000 f906 	bl	8002e84 <Error_Handler>
  }
  sConfigOC.Pulse = 5;
 8002c78:	2305      	movs	r3, #5
 8002c7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4807      	ldr	r0, [pc, #28]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002c84:	f004 fc58 	bl	8007538 <HAL_TIM_PWM_ConfigChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8002c8e:	f000 f8f9 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c92:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <MX_TIM2_Init+0x104>)
 8002c94:	f000 faa8 	bl	80031e8 <HAL_TIM_MspPostInit>

}
 8002c98:	bf00      	nop
 8002c9a:	3738      	adds	r7, #56	; 0x38
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	200006a0 	.word	0x200006a0

08002ca4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <MX_USART1_UART_Init+0x58>)
 8002caa:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <MX_USART1_UART_Init+0x5c>)
 8002cac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cca:	220c      	movs	r2, #12
 8002ccc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_USART1_UART_Init+0x58>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_USART1_UART_Init+0x58>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_USART1_UART_Init+0x58>)
 8002ce8:	f005 fb0c 	bl	8008304 <HAL_UART_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002cf2:	f000 f8c7 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200006ec 	.word	0x200006ec
 8002d00:	40013800 	.word	0x40013800

08002d04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <MX_USART2_UART_Init+0x58>)
 8002d0a:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <MX_USART2_UART_Init+0x5c>)
 8002d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d0e:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <MX_USART2_UART_Init+0x58>)
 8002d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <MX_USART2_UART_Init+0x58>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <MX_USART2_UART_Init+0x58>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <MX_USART2_UART_Init+0x58>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <MX_USART2_UART_Init+0x58>)
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <MX_USART2_UART_Init+0x58>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <MX_USART2_UART_Init+0x58>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <MX_USART2_UART_Init+0x58>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <MX_USART2_UART_Init+0x58>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d46:	4805      	ldr	r0, [pc, #20]	; (8002d5c <MX_USART2_UART_Init+0x58>)
 8002d48:	f005 fadc 	bl	8008304 <HAL_UART_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002d52:	f000 f897 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000774 	.word	0x20000774
 8002d60:	40004400 	.word	0x40004400

08002d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	60da      	str	r2, [r3, #12]
 8002d78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7a:	4b3f      	ldr	r3, [pc, #252]	; (8002e78 <MX_GPIO_Init+0x114>)
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	4a3e      	ldr	r2, [pc, #248]	; (8002e78 <MX_GPIO_Init+0x114>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d86:	4b3c      	ldr	r3, [pc, #240]	; (8002e78 <MX_GPIO_Init+0x114>)
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d92:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <MX_GPIO_Init+0x114>)
 8002d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d96:	4a38      	ldr	r2, [pc, #224]	; (8002e78 <MX_GPIO_Init+0x114>)
 8002d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d9e:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <MX_GPIO_Init+0x114>)
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002daa:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <MX_GPIO_Init+0x114>)
 8002dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dae:	4a32      	ldr	r2, [pc, #200]	; (8002e78 <MX_GPIO_Init+0x114>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002db6:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <MX_GPIO_Init+0x114>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <MX_GPIO_Init+0x114>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc6:	4a2c      	ldr	r2, [pc, #176]	; (8002e78 <MX_GPIO_Init+0x114>)
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dce:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <MX_GPIO_Init+0x114>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002dda:	2201      	movs	r2, #1
 8002ddc:	2102      	movs	r1, #2
 8002dde:	4827      	ldr	r0, [pc, #156]	; (8002e7c <MX_GPIO_Init+0x118>)
 8002de0:	f000 ff52 	bl	8003c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAM_FLASH_Pin|READY_FLAG_Pin, GPIO_PIN_RESET);
 8002de4:	2200      	movs	r2, #0
 8002de6:	21c0      	movs	r1, #192	; 0xc0
 8002de8:	4825      	ldr	r0, [pc, #148]	; (8002e80 <MX_GPIO_Init+0x11c>)
 8002dea:	f000 ff4d 	bl	8003c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_CS_GPIO_Port, CAM_CS_Pin, GPIO_PIN_SET);
 8002dee:	2201      	movs	r2, #1
 8002df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df8:	f000 ff46 	bl	8003c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4619      	mov	r1, r3
 8002e12:	481b      	ldr	r0, [pc, #108]	; (8002e80 <MX_GPIO_Init+0x11c>)
 8002e14:	f000 fd8e 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4813      	ldr	r0, [pc, #76]	; (8002e7c <MX_GPIO_Init+0x118>)
 8002e30:	f000 fd80 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_FLASH_Pin READY_FLAG_Pin */
  GPIO_InitStruct.Pin = CAM_FLASH_Pin|READY_FLAG_Pin;
 8002e34:	23c0      	movs	r3, #192	; 0xc0
 8002e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	2300      	movs	r3, #0
 8002e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4619      	mov	r1, r3
 8002e4a:	480d      	ldr	r0, [pc, #52]	; (8002e80 <MX_GPIO_Init+0x11c>)
 8002e4c:	f000 fd72 	bl	8003934 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_CS_Pin */
  GPIO_InitStruct.Pin = CAM_CS_Pin;
 8002e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e56:	2301      	movs	r3, #1
 8002e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_CS_GPIO_Port, &GPIO_InitStruct);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	4619      	mov	r1, r3
 8002e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e6c:	f000 fd62 	bl	8003934 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e70:	bf00      	nop
 8002e72:	3728      	adds	r7, #40	; 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	48000400 	.word	0x48000400
 8002e80:	48000800 	.word	0x48000800

08002e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e88:	b672      	cpsid	i
}
 8002e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e8c:	e7fe      	b.n	8002e8c <Error_Handler+0x8>
	...

08002e90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <HAL_MspInit+0x44>)
 8002e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9a:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <HAL_MspInit+0x44>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_MspInit+0x44>)
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_MspInit+0x44>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4a08      	ldr	r2, [pc, #32]	; (8002ed4 <HAL_MspInit+0x44>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_MspInit+0x44>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000

08002ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b0ae      	sub	sp, #184	; 0xb8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ef0:	f107 031c 	add.w	r3, r7, #28
 8002ef4:	2288      	movs	r2, #136	; 0x88
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f009 fa33 	bl	800c364 <memset>
  if(hi2c->Instance==I2C1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a42      	ldr	r2, [pc, #264]	; (800300c <HAL_I2C_MspInit+0x134>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d13c      	bne.n	8002f82 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f08:	2340      	movs	r3, #64	; 0x40
 8002f0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f10:	f107 031c 	add.w	r3, r7, #28
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 fa97 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002f20:	f7ff ffb0 	bl	8002e84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f24:	4b3a      	ldr	r3, [pc, #232]	; (8003010 <HAL_I2C_MspInit+0x138>)
 8002f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f28:	4a39      	ldr	r2, [pc, #228]	; (8003010 <HAL_I2C_MspInit+0x138>)
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f30:	4b37      	ldr	r3, [pc, #220]	; (8003010 <HAL_I2C_MspInit+0x138>)
 8002f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f44:	2312      	movs	r3, #18
 8002f46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f50:	2303      	movs	r3, #3
 8002f52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f56:	2304      	movs	r3, #4
 8002f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f60:	4619      	mov	r1, r3
 8002f62:	482c      	ldr	r0, [pc, #176]	; (8003014 <HAL_I2C_MspInit+0x13c>)
 8002f64:	f000 fce6 	bl	8003934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f68:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_I2C_MspInit+0x138>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	4a28      	ldr	r2, [pc, #160]	; (8003010 <HAL_I2C_MspInit+0x138>)
 8002f6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f72:	6593      	str	r3, [r2, #88]	; 0x58
 8002f74:	4b26      	ldr	r3, [pc, #152]	; (8003010 <HAL_I2C_MspInit+0x138>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f80:	e040      	b.n	8003004 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a24      	ldr	r2, [pc, #144]	; (8003018 <HAL_I2C_MspInit+0x140>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d13b      	bne.n	8003004 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002f90:	2300      	movs	r3, #0
 8002f92:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f002 fa55 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8002fa4:	f7ff ff6e 	bl	8002e84 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_I2C_MspInit+0x138>)
 8002faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fac:	4a18      	ldr	r2, [pc, #96]	; (8003010 <HAL_I2C_MspInit+0x138>)
 8002fae:	f043 0302 	orr.w	r3, r3, #2
 8002fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb4:	4b16      	ldr	r3, [pc, #88]	; (8003010 <HAL_I2C_MspInit+0x138>)
 8002fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc8:	2312      	movs	r3, #18
 8002fca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fda:	2304      	movs	r3, #4
 8002fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	480b      	ldr	r0, [pc, #44]	; (8003014 <HAL_I2C_MspInit+0x13c>)
 8002fe8:	f000 fca4 	bl	8003934 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <HAL_I2C_MspInit+0x138>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	4a07      	ldr	r2, [pc, #28]	; (8003010 <HAL_I2C_MspInit+0x138>)
 8002ff2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_I2C_MspInit+0x138>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
}
 8003004:	bf00      	nop
 8003006:	37b8      	adds	r7, #184	; 0xb8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40005400 	.word	0x40005400
 8003010:	40021000 	.word	0x40021000
 8003014:	48000400 	.word	0x48000400
 8003018:	40005800 	.word	0x40005800

0800301c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b0a6      	sub	sp, #152	; 0x98
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003024:	f107 0310 	add.w	r3, r7, #16
 8003028:	2288      	movs	r2, #136	; 0x88
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f009 f999 	bl	800c364 <memset>
  if(hrng->Instance==RNG)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <HAL_RNG_MspInit+0x90>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d133      	bne.n	80030a4 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800303c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003040:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8003042:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800304a:	2302      	movs	r3, #2
 800304c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800304e:	2301      	movs	r3, #1
 8003050:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003052:	2308      	movs	r3, #8
 8003054:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003056:	2307      	movs	r3, #7
 8003058:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800305a:	2304      	movs	r3, #4
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800305e:	2302      	movs	r3, #2
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003062:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003068:	f107 0310 	add.w	r3, r7, #16
 800306c:	4618      	mov	r0, r3
 800306e:	f002 f9eb 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8003078:	f7ff ff04 	bl	8002e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <HAL_RNG_MspInit+0x94>)
 800307e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003080:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <HAL_RNG_MspInit+0x94>)
 8003082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RNG_MspInit+0x94>)
 800308a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	2050      	movs	r0, #80	; 0x50
 800309a:	f000 fc14 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 800309e:	2050      	movs	r0, #80	; 0x50
 80030a0:	f000 fc2d 	bl	80038fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80030a4:	bf00      	nop
 80030a6:	3798      	adds	r7, #152	; 0x98
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	50060800 	.word	0x50060800
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08c      	sub	sp, #48	; 0x30
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a2f      	ldr	r2, [pc, #188]	; (8003190 <HAL_SPI_MspInit+0xdc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d129      	bne.n	800312a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030d6:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <HAL_SPI_MspInit+0xe0>)
 80030d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030da:	4a2e      	ldr	r2, [pc, #184]	; (8003194 <HAL_SPI_MspInit+0xe0>)
 80030dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030e0:	6613      	str	r3, [r2, #96]	; 0x60
 80030e2:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <HAL_SPI_MspInit+0xe0>)
 80030e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	4b29      	ldr	r3, [pc, #164]	; (8003194 <HAL_SPI_MspInit+0xe0>)
 80030f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f2:	4a28      	ldr	r2, [pc, #160]	; (8003194 <HAL_SPI_MspInit+0xe0>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <HAL_SPI_MspInit+0xe0>)
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003106:	23e0      	movs	r3, #224	; 0xe0
 8003108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003112:	2303      	movs	r3, #3
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003116:	2305      	movs	r3, #5
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	f107 031c 	add.w	r3, r7, #28
 800311e:	4619      	mov	r1, r3
 8003120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003124:	f000 fc06 	bl	8003934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003128:	e02d      	b.n	8003186 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1a      	ldr	r2, [pc, #104]	; (8003198 <HAL_SPI_MspInit+0xe4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d128      	bne.n	8003186 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003134:	4b17      	ldr	r3, [pc, #92]	; (8003194 <HAL_SPI_MspInit+0xe0>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	4a16      	ldr	r2, [pc, #88]	; (8003194 <HAL_SPI_MspInit+0xe0>)
 800313a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800313e:	6593      	str	r3, [r2, #88]	; 0x58
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_SPI_MspInit+0xe0>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_SPI_MspInit+0xe0>)
 800314e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003150:	4a10      	ldr	r2, [pc, #64]	; (8003194 <HAL_SPI_MspInit+0xe0>)
 8003152:	f043 0302 	orr.w	r3, r3, #2
 8003156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <HAL_SPI_MspInit+0xe0>)
 800315a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003164:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003176:	2305      	movs	r3, #5
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	f107 031c 	add.w	r3, r7, #28
 800317e:	4619      	mov	r1, r3
 8003180:	4806      	ldr	r0, [pc, #24]	; (800319c <HAL_SPI_MspInit+0xe8>)
 8003182:	f000 fbd7 	bl	8003934 <HAL_GPIO_Init>
}
 8003186:	bf00      	nop
 8003188:	3730      	adds	r7, #48	; 0x30
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40013000 	.word	0x40013000
 8003194:	40021000 	.word	0x40021000
 8003198:	40003800 	.word	0x40003800
 800319c:	48000400 	.word	0x48000400

080031a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b0:	d113      	bne.n	80031da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <HAL_TIM_Base_MspInit+0x44>)
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b6:	4a0b      	ldr	r2, [pc, #44]	; (80031e4 <HAL_TIM_Base_MspInit+0x44>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6593      	str	r3, [r2, #88]	; 0x58
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_TIM_Base_MspInit+0x44>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	201c      	movs	r0, #28
 80031d0:	f000 fb79 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031d4:	201c      	movs	r0, #28
 80031d6:	f000 fb92 	bl	80038fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000

080031e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003208:	d11c      	bne.n	8003244 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <HAL_TIM_MspPostInit+0x64>)
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	4a0f      	ldr	r2, [pc, #60]	; (800324c <HAL_TIM_MspPostInit+0x64>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003216:	4b0d      	ldr	r3, [pc, #52]	; (800324c <HAL_TIM_MspPostInit+0x64>)
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_SERVO_PWM_Pin|RIGHT_SERVO_PWM_Pin;
 8003222:	2303      	movs	r3, #3
 8003224:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003232:	2301      	movs	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003236:	f107 030c 	add.w	r3, r7, #12
 800323a:	4619      	mov	r1, r3
 800323c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003240:	f000 fb78 	bl	8003934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003244:	bf00      	nop
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000

08003250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b0ae      	sub	sp, #184	; 0xb8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003268:	f107 031c 	add.w	r3, r7, #28
 800326c:	2288      	movs	r2, #136	; 0x88
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f009 f877 	bl	800c364 <memset>
  if(huart->Instance==USART1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a43      	ldr	r2, [pc, #268]	; (8003388 <HAL_UART_MspInit+0x138>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d13d      	bne.n	80032fc <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003280:	2301      	movs	r3, #1
 8003282:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003284:	2300      	movs	r3, #0
 8003286:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003288:	f107 031c 	add.w	r3, r7, #28
 800328c:	4618      	mov	r0, r3
 800328e:	f002 f8db 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003298:	f7ff fdf4 	bl	8002e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800329c:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_UART_MspInit+0x13c>)
 800329e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a0:	4a3a      	ldr	r2, [pc, #232]	; (800338c <HAL_UART_MspInit+0x13c>)
 80032a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a6:	6613      	str	r3, [r2, #96]	; 0x60
 80032a8:	4b38      	ldr	r3, [pc, #224]	; (800338c <HAL_UART_MspInit+0x13c>)
 80032aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b4:	4b35      	ldr	r3, [pc, #212]	; (800338c <HAL_UART_MspInit+0x13c>)
 80032b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b8:	4a34      	ldr	r2, [pc, #208]	; (800338c <HAL_UART_MspInit+0x13c>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032c0:	4b32      	ldr	r3, [pc, #200]	; (800338c <HAL_UART_MspInit+0x13c>)
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d4:	2302      	movs	r3, #2
 80032d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e0:	2303      	movs	r3, #3
 80032e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032e6:	2307      	movs	r3, #7
 80032e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80032f0:	4619      	mov	r1, r3
 80032f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032f6:	f000 fb1d 	bl	8003934 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032fa:	e040      	b.n	800337e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a23      	ldr	r2, [pc, #140]	; (8003390 <HAL_UART_MspInit+0x140>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d13b      	bne.n	800337e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003306:	2302      	movs	r3, #2
 8003308:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800330a:	2300      	movs	r3, #0
 800330c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800330e:	f107 031c 	add.w	r3, r7, #28
 8003312:	4618      	mov	r0, r3
 8003314:	f002 f898 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800331e:	f7ff fdb1 	bl	8002e84 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_UART_MspInit+0x13c>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	4a19      	ldr	r2, [pc, #100]	; (800338c <HAL_UART_MspInit+0x13c>)
 8003328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332c:	6593      	str	r3, [r2, #88]	; 0x58
 800332e:	4b17      	ldr	r3, [pc, #92]	; (800338c <HAL_UART_MspInit+0x13c>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_UART_MspInit+0x13c>)
 800333c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333e:	4a13      	ldr	r2, [pc, #76]	; (800338c <HAL_UART_MspInit+0x13c>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_UART_MspInit+0x13c>)
 8003348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003352:	230c      	movs	r3, #12
 8003354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003364:	2303      	movs	r3, #3
 8003366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800336a:	2307      	movs	r3, #7
 800336c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003370:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003374:	4619      	mov	r1, r3
 8003376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800337a:	f000 fadb 	bl	8003934 <HAL_GPIO_Init>
}
 800337e:	bf00      	nop
 8003380:	37b8      	adds	r7, #184	; 0xb8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40013800 	.word	0x40013800
 800338c:	40021000 	.word	0x40021000
 8003390:	40004400 	.word	0x40004400

08003394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003398:	e7fe      	b.n	8003398 <NMI_Handler+0x4>

0800339a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <HardFault_Handler+0x4>

080033a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <MemManage_Handler+0x4>

080033a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033aa:	e7fe      	b.n	80033aa <BusFault_Handler+0x4>

080033ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <UsageFault_Handler+0x4>

080033b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e0:	f000 f952 	bl	8003688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <TIM2_IRQHandler+0x10>)
 80033ee:	f003 ffa1 	bl	8007334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200006a0 	.word	0x200006a0

080033fc <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <RNG_IRQHandler+0x10>)
 8003402:	f002 fd8a 	bl	8005f1a <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200005c8 	.word	0x200005c8

08003410 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	e00a      	b.n	8003438 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003422:	f3af 8000 	nop.w
 8003426:	4601      	mov	r1, r0
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	60ba      	str	r2, [r7, #8]
 800342e:	b2ca      	uxtb	r2, r1
 8003430:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	3301      	adds	r3, #1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	dbf0      	blt.n	8003422 <_read+0x12>
  }

  return len;
 8003440:	687b      	ldr	r3, [r7, #4]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	e009      	b.n	8003470 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	60ba      	str	r2, [r7, #8]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe ff39 	bl	80022dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	3301      	adds	r3, #1
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	dbf1      	blt.n	800345c <_write+0x12>
  }
  return len;
 8003478:	687b      	ldr	r3, [r7, #4]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <_close>:

int _close(int file)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034aa:	605a      	str	r2, [r3, #4]
  return 0;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <_isatty>:

int _isatty(int file)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034c2:	2301      	movs	r3, #1
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <_sbrk+0x5c>)
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <_sbrk+0x60>)
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <_sbrk+0x64>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <_sbrk+0x64>)
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <_sbrk+0x68>)
 800350c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <_sbrk+0x64>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	429a      	cmp	r2, r3
 800351a:	d207      	bcs.n	800352c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800351c:	f008 ff70 	bl	800c400 <__errno>
 8003520:	4603      	mov	r3, r0
 8003522:	220c      	movs	r2, #12
 8003524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003526:	f04f 33ff 	mov.w	r3, #4294967295
 800352a:	e009      	b.n	8003540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <_sbrk+0x64>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <_sbrk+0x64>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	4a05      	ldr	r2, [pc, #20]	; (8003550 <_sbrk+0x64>)
 800353c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800353e:	68fb      	ldr	r3, [r7, #12]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20018000 	.word	0x20018000
 800354c:	00000400 	.word	0x00000400
 8003550:	200007fc 	.word	0x200007fc
 8003554:	20000998 	.word	0x20000998

08003558 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <SystemInit+0x20>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	4a05      	ldr	r2, [pc, #20]	; (8003578 <SystemInit+0x20>)
 8003564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 800357c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003580:	f7ff ffea 	bl	8003558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003584:	480c      	ldr	r0, [pc, #48]	; (80035b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003586:	490d      	ldr	r1, [pc, #52]	; (80035bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003588:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <LoopForever+0xe>)
  movs r3, #0
 800358a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800358c:	e002      	b.n	8003594 <LoopCopyDataInit>

0800358e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800358e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003592:	3304      	adds	r3, #4

08003594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003598:	d3f9      	bcc.n	800358e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800359c:	4c0a      	ldr	r4, [pc, #40]	; (80035c8 <LoopForever+0x16>)
  movs r3, #0
 800359e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035a0:	e001      	b.n	80035a6 <LoopFillZerobss>

080035a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035a4:	3204      	adds	r2, #4

080035a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a8:	d3fb      	bcc.n	80035a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035aa:	f008 ff2f 	bl	800c40c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035ae:	f7fe ff6b 	bl	8002488 <main>

080035b2 <LoopForever>:

LoopForever:
    b LoopForever
 80035b2:	e7fe      	b.n	80035b2 <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 80035b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80035b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035bc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80035c0:	0800deb4 	.word	0x0800deb4
  ldr r2, =_sbss
 80035c4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80035c8:	20000998 	.word	0x20000998

080035cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035cc:	e7fe      	b.n	80035cc <ADC1_2_IRQHandler>
	...

080035d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035da:	4b0c      	ldr	r3, [pc, #48]	; (800360c <HAL_Init+0x3c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a0b      	ldr	r2, [pc, #44]	; (800360c <HAL_Init+0x3c>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035e6:	2003      	movs	r0, #3
 80035e8:	f000 f962 	bl	80038b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035ec:	2000      	movs	r0, #0
 80035ee:	f000 f80f 	bl	8003610 <HAL_InitTick>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	71fb      	strb	r3, [r7, #7]
 80035fc:	e001      	b.n	8003602 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035fe:	f7ff fc47 	bl	8002e90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003602:	79fb      	ldrb	r3, [r7, #7]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40022000 	.word	0x40022000

08003610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <HAL_InitTick+0x6c>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d023      	beq.n	800366c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003624:	4b16      	ldr	r3, [pc, #88]	; (8003680 <HAL_InitTick+0x70>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4b14      	ldr	r3, [pc, #80]	; (800367c <HAL_InitTick+0x6c>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	4619      	mov	r1, r3
 800362e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003632:	fbb3 f3f1 	udiv	r3, r3, r1
 8003636:	fbb2 f3f3 	udiv	r3, r2, r3
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f96d 	bl	800391a <HAL_SYSTICK_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b0f      	cmp	r3, #15
 800364a:	d809      	bhi.n	8003660 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800364c:	2200      	movs	r2, #0
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	f04f 30ff 	mov.w	r0, #4294967295
 8003654:	f000 f937 	bl	80038c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003658:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <HAL_InitTick+0x74>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e007      	b.n	8003670 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
 8003664:	e004      	b.n	8003670 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
 800366a:	e001      	b.n	8003670 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000024 	.word	0x20000024
 8003680:	2000001c 	.word	0x2000001c
 8003684:	20000020 	.word	0x20000020

08003688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_IncTick+0x20>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_IncTick+0x24>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4413      	add	r3, r2
 8003698:	4a04      	ldr	r2, [pc, #16]	; (80036ac <HAL_IncTick+0x24>)
 800369a:	6013      	str	r3, [r2, #0]
}
 800369c:	bf00      	nop
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000024 	.word	0x20000024
 80036ac:	20000800 	.word	0x20000800

080036b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return uwTick;
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <HAL_GetTick+0x14>)
 80036b6:	681b      	ldr	r3, [r3, #0]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000800 	.word	0x20000800

080036c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d0:	f7ff ffee 	bl	80036b0 <HAL_GetTick>
 80036d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d005      	beq.n	80036ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_Delay+0x44>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ee:	bf00      	nop
 80036f0:	f7ff ffde 	bl	80036b0 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d8f7      	bhi.n	80036f0 <HAL_Delay+0x28>
  {
  }
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000024 	.word	0x20000024

08003710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800372c:	4013      	ands	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800373c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003742:	4a04      	ldr	r2, [pc, #16]	; (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	60d3      	str	r3, [r2, #12]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <__NVIC_GetPriorityGrouping+0x18>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	f003 0307 	and.w	r3, r3, #7
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	db0b      	blt.n	800379e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	4907      	ldr	r1, [pc, #28]	; (80037ac <__NVIC_EnableIRQ+0x38>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2001      	movs	r0, #1
 8003796:	fa00 f202 	lsl.w	r2, r0, r2
 800379a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000e100 	.word	0xe000e100

080037b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	6039      	str	r1, [r7, #0]
 80037ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db0a      	blt.n	80037da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	490c      	ldr	r1, [pc, #48]	; (80037fc <__NVIC_SetPriority+0x4c>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	0112      	lsls	r2, r2, #4
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	440b      	add	r3, r1
 80037d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d8:	e00a      	b.n	80037f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4908      	ldr	r1, [pc, #32]	; (8003800 <__NVIC_SetPriority+0x50>)
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	3b04      	subs	r3, #4
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	440b      	add	r3, r1
 80037ee:	761a      	strb	r2, [r3, #24]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000e100 	.word	0xe000e100
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f1c3 0307 	rsb	r3, r3, #7
 800381e:	2b04      	cmp	r3, #4
 8003820:	bf28      	it	cs
 8003822:	2304      	movcs	r3, #4
 8003824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3304      	adds	r3, #4
 800382a:	2b06      	cmp	r3, #6
 800382c:	d902      	bls.n	8003834 <NVIC_EncodePriority+0x30>
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3b03      	subs	r3, #3
 8003832:	e000      	b.n	8003836 <NVIC_EncodePriority+0x32>
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	401a      	ands	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800384c:	f04f 31ff 	mov.w	r1, #4294967295
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa01 f303 	lsl.w	r3, r1, r3
 8003856:	43d9      	mvns	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	4313      	orrs	r3, r2
         );
}
 800385e:	4618      	mov	r0, r3
 8003860:	3724      	adds	r7, #36	; 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3b01      	subs	r3, #1
 8003878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800387c:	d301      	bcc.n	8003882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800387e:	2301      	movs	r3, #1
 8003880:	e00f      	b.n	80038a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <SysTick_Config+0x40>)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800388a:	210f      	movs	r1, #15
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	f7ff ff8e 	bl	80037b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <SysTick_Config+0x40>)
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389a:	4b04      	ldr	r3, [pc, #16]	; (80038ac <SysTick_Config+0x40>)
 800389c:	2207      	movs	r2, #7
 800389e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	e000e010 	.word	0xe000e010

080038b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff29 	bl	8003710 <__NVIC_SetPriorityGrouping>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	4603      	mov	r3, r0
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038d8:	f7ff ff3e 	bl	8003758 <__NVIC_GetPriorityGrouping>
 80038dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	6978      	ldr	r0, [r7, #20]
 80038e4:	f7ff ff8e 	bl	8003804 <NVIC_EncodePriority>
 80038e8:	4602      	mov	r2, r0
 80038ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff5d 	bl	80037b0 <__NVIC_SetPriority>
}
 80038f6:	bf00      	nop
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff31 	bl	8003774 <__NVIC_EnableIRQ>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ffa2 	bl	800386c <SysTick_Config>
 8003928:	4603      	mov	r3, r0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003942:	e17f      	b.n	8003c44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2101      	movs	r1, #1
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	fa01 f303 	lsl.w	r3, r1, r3
 8003950:	4013      	ands	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8171 	beq.w	8003c3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b01      	cmp	r3, #1
 8003966:	d005      	beq.n	8003974 <HAL_GPIO_Init+0x40>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d130      	bne.n	80039d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	2203      	movs	r2, #3
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039aa:	2201      	movs	r2, #1
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4013      	ands	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	f003 0201 	and.w	r2, r3, #1
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d118      	bne.n	8003a14 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039e8:	2201      	movs	r2, #1
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	08db      	lsrs	r3, r3, #3
 80039fe:	f003 0201 	and.w	r2, r3, #1
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d017      	beq.n	8003a50 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d123      	bne.n	8003aa4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	08da      	lsrs	r2, r3, #3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3208      	adds	r2, #8
 8003a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	220f      	movs	r2, #15
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	08da      	lsrs	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3208      	adds	r2, #8
 8003a9e:	6939      	ldr	r1, [r7, #16]
 8003aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	2203      	movs	r2, #3
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 0203 	and.w	r2, r3, #3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80ac 	beq.w	8003c3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae6:	4b5f      	ldr	r3, [pc, #380]	; (8003c64 <HAL_GPIO_Init+0x330>)
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aea:	4a5e      	ldr	r2, [pc, #376]	; (8003c64 <HAL_GPIO_Init+0x330>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	6613      	str	r3, [r2, #96]	; 0x60
 8003af2:	4b5c      	ldr	r3, [pc, #368]	; (8003c64 <HAL_GPIO_Init+0x330>)
 8003af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003afe:	4a5a      	ldr	r2, [pc, #360]	; (8003c68 <HAL_GPIO_Init+0x334>)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	3302      	adds	r3, #2
 8003b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	220f      	movs	r2, #15
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b28:	d025      	beq.n	8003b76 <HAL_GPIO_Init+0x242>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a4f      	ldr	r2, [pc, #316]	; (8003c6c <HAL_GPIO_Init+0x338>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01f      	beq.n	8003b72 <HAL_GPIO_Init+0x23e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4e      	ldr	r2, [pc, #312]	; (8003c70 <HAL_GPIO_Init+0x33c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d019      	beq.n	8003b6e <HAL_GPIO_Init+0x23a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a4d      	ldr	r2, [pc, #308]	; (8003c74 <HAL_GPIO_Init+0x340>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_GPIO_Init+0x236>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a4c      	ldr	r2, [pc, #304]	; (8003c78 <HAL_GPIO_Init+0x344>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00d      	beq.n	8003b66 <HAL_GPIO_Init+0x232>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a4b      	ldr	r2, [pc, #300]	; (8003c7c <HAL_GPIO_Init+0x348>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d007      	beq.n	8003b62 <HAL_GPIO_Init+0x22e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <HAL_GPIO_Init+0x34c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_GPIO_Init+0x22a>
 8003b5a:	2306      	movs	r3, #6
 8003b5c:	e00c      	b.n	8003b78 <HAL_GPIO_Init+0x244>
 8003b5e:	2307      	movs	r3, #7
 8003b60:	e00a      	b.n	8003b78 <HAL_GPIO_Init+0x244>
 8003b62:	2305      	movs	r3, #5
 8003b64:	e008      	b.n	8003b78 <HAL_GPIO_Init+0x244>
 8003b66:	2304      	movs	r3, #4
 8003b68:	e006      	b.n	8003b78 <HAL_GPIO_Init+0x244>
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e004      	b.n	8003b78 <HAL_GPIO_Init+0x244>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e002      	b.n	8003b78 <HAL_GPIO_Init+0x244>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_GPIO_Init+0x244>
 8003b76:	2300      	movs	r3, #0
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	f002 0203 	and.w	r2, r2, #3
 8003b7e:	0092      	lsls	r2, r2, #2
 8003b80:	4093      	lsls	r3, r2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b88:	4937      	ldr	r1, [pc, #220]	; (8003c68 <HAL_GPIO_Init+0x334>)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	089b      	lsrs	r3, r3, #2
 8003b8e:	3302      	adds	r3, #2
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b96:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <HAL_GPIO_Init+0x350>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bba:	4a32      	ldr	r2, [pc, #200]	; (8003c84 <HAL_GPIO_Init+0x350>)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bc0:	4b30      	ldr	r3, [pc, #192]	; (8003c84 <HAL_GPIO_Init+0x350>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003be4:	4a27      	ldr	r2, [pc, #156]	; (8003c84 <HAL_GPIO_Init+0x350>)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bea:	4b26      	ldr	r3, [pc, #152]	; (8003c84 <HAL_GPIO_Init+0x350>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c0e:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <HAL_GPIO_Init+0x350>)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c14:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_GPIO_Init+0x350>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c38:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <HAL_GPIO_Init+0x350>)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	3301      	adds	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f47f ae78 	bne.w	8003944 <HAL_GPIO_Init+0x10>
  }
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	48000400 	.word	0x48000400
 8003c70:	48000800 	.word	0x48000800
 8003c74:	48000c00 	.word	0x48000c00
 8003c78:	48001000 	.word	0x48001000
 8003c7c:	48001400 	.word	0x48001400
 8003c80:	48001800 	.word	0x48001800
 8003c84:	40010400 	.word	0x40010400

08003c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
 8003c94:	4613      	mov	r3, r2
 8003c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c98:	787b      	ldrb	r3, [r7, #1]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c9e:	887a      	ldrh	r2, [r7, #2]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ca4:	e002      	b.n	8003cac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e08d      	b.n	8003de6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff f8fa 	bl	8002ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2224      	movs	r2, #36	; 0x24
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d107      	bne.n	8003d32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d2e:	609a      	str	r2, [r3, #8]
 8003d30:	e006      	b.n	8003d40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d108      	bne.n	8003d5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	e007      	b.n	8003d6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69d9      	ldr	r1, [r3, #28]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1a      	ldr	r2, [r3, #32]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	817b      	strh	r3, [r7, #10]
 8003e00:	4613      	mov	r3, r2
 8003e02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	f040 80fd 	bne.w	800400c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_I2C_Master_Transmit+0x30>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0f6      	b.n	800400e <HAL_I2C_Master_Transmit+0x21e>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e28:	f7ff fc42 	bl	80036b0 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2319      	movs	r3, #25
 8003e34:	2201      	movs	r2, #1
 8003e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fa1d 	bl	800427a <I2C_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0e1      	b.n	800400e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2221      	movs	r2, #33	; 0x21
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2210      	movs	r2, #16
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	893a      	ldrh	r2, [r7, #8]
 8003e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2bff      	cmp	r3, #255	; 0xff
 8003e7a:	d906      	bls.n	8003e8a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	22ff      	movs	r2, #255	; 0xff
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e007      	b.n	8003e9a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003e94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e98:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d024      	beq.n	8003eec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	8979      	ldrh	r1, [r7, #10]
 8003ede:	4b4e      	ldr	r3, [pc, #312]	; (8004018 <HAL_I2C_Master_Transmit+0x228>)
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fb81 	bl	80045ec <I2C_TransferConfig>
 8003eea:	e066      	b.n	8003fba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	8979      	ldrh	r1, [r7, #10]
 8003ef4:	4b48      	ldr	r3, [pc, #288]	; (8004018 <HAL_I2C_Master_Transmit+0x228>)
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fb76 	bl	80045ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f00:	e05b      	b.n	8003fba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fa06 	bl	8004318 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07b      	b.n	800400e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	781a      	ldrb	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d034      	beq.n	8003fba <HAL_I2C_Master_Transmit+0x1ca>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d130      	bne.n	8003fba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2180      	movs	r1, #128	; 0x80
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f989 	bl	800427a <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e04d      	b.n	800400e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2bff      	cmp	r3, #255	; 0xff
 8003f7a:	d90e      	bls.n	8003f9a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	22ff      	movs	r2, #255	; 0xff
 8003f80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	8979      	ldrh	r1, [r7, #10]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 fb2a 	bl	80045ec <I2C_TransferConfig>
 8003f98:	e00f      	b.n	8003fba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	8979      	ldrh	r1, [r7, #10]
 8003fac:	2300      	movs	r3, #0
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fb19 	bl	80045ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d19e      	bne.n	8003f02 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	6a39      	ldr	r1, [r7, #32]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f9ec 	bl	80043a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e01a      	b.n	800400e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b0c      	ldr	r3, [pc, #48]	; (800401c <HAL_I2C_Master_Transmit+0x22c>)
 8003fec:	400b      	ands	r3, r1
 8003fee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e000      	b.n	800400e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	80002000 	.word	0x80002000
 800401c:	fe00e800 	.word	0xfe00e800

08004020 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	; 0x28
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	460b      	mov	r3, r1
 800402e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b20      	cmp	r3, #32
 800403e:	f040 80f3 	bne.w	8004228 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004050:	d101      	bne.n	8004056 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004052:	2302      	movs	r3, #2
 8004054:	e0e9      	b.n	800422a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_I2C_IsDeviceReady+0x44>
 8004060:	2302      	movs	r3, #2
 8004062:	e0e2      	b.n	800422a <HAL_I2C_IsDeviceReady+0x20a>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2224      	movs	r2, #36	; 0x24
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d107      	bne.n	8004092 <HAL_I2C_IsDeviceReady+0x72>
 8004082:	897b      	ldrh	r3, [r7, #10]
 8004084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004088:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800408c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004090:	e006      	b.n	80040a0 <HAL_I2C_IsDeviceReady+0x80>
 8004092:	897b      	ldrh	r3, [r7, #10]
 8004094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800409c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80040a6:	f7ff fb03 	bl	80036b0 <HAL_GetTick>
 80040aa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	bf0c      	ite	eq
 80040ba:	2301      	moveq	r3, #1
 80040bc:	2300      	movne	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80040d8:	e034      	b.n	8004144 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d01a      	beq.n	8004118 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7ff fae5 	bl	80036b0 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <HAL_I2C_IsDeviceReady+0xd8>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10f      	bne.n	8004118 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004104:	f043 0220 	orr.w	r2, r3, #32
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e088      	b.n	800422a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b20      	cmp	r3, #32
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b10      	cmp	r3, #16
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004144:	7ffb      	ldrb	r3, [r7, #31]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d102      	bne.n	8004150 <HAL_I2C_IsDeviceReady+0x130>
 800414a:	7fbb      	ldrb	r3, [r7, #30]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0c4      	beq.n	80040da <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b10      	cmp	r3, #16
 800415c:	d01a      	beq.n	8004194 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2200      	movs	r2, #0
 8004166:	2120      	movs	r1, #32
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f886 	bl	800427a <I2C_WaitOnFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e058      	b.n	800422a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2220      	movs	r2, #32
 800417e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e04a      	b.n	800422a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	2120      	movs	r1, #32
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f86b 	bl	800427a <I2C_WaitOnFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e03d      	b.n	800422a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2210      	movs	r2, #16
 80041b4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2220      	movs	r2, #32
 80041bc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d118      	bne.n	80041f8 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041d4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2200      	movs	r2, #0
 80041de:	2120      	movs	r1, #32
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f84a 	bl	800427a <I2C_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e01c      	b.n	800422a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2220      	movs	r2, #32
 80041f6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	3301      	adds	r3, #1
 80041fc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	f63f af39 	bhi.w	800407a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b02      	cmp	r3, #2
 8004246:	d103      	bne.n	8004250 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d007      	beq.n	800426e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	619a      	str	r2, [r3, #24]
  }
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800428a:	e031      	b.n	80042f0 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d02d      	beq.n	80042f0 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004294:	f7ff fa0c 	bl	80036b0 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d302      	bcc.n	80042aa <I2C_WaitOnFlagUntilTimeout+0x30>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d122      	bne.n	80042f0 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699a      	ldr	r2, [r3, #24]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4013      	ands	r3, r2
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	bf0c      	ite	eq
 80042ba:	2301      	moveq	r3, #1
 80042bc:	2300      	movne	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d113      	bne.n	80042f0 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e00f      	b.n	8004310 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	429a      	cmp	r2, r3
 800430c:	d0be      	beq.n	800428c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004324:	e033      	b.n	800438e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f87e 	bl	800442c <I2C_IsErrorOccurred>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e031      	b.n	800439e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d025      	beq.n	800438e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7ff f9b5 	bl	80036b0 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11a      	bne.n	800438e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b02      	cmp	r3, #2
 8004364:	d013      	beq.n	800438e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f043 0220 	orr.w	r2, r3, #32
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e007      	b.n	800439e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b02      	cmp	r3, #2
 800439a:	d1c4      	bne.n	8004326 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043b2:	e02f      	b.n	8004414 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f837 	bl	800442c <I2C_IsErrorOccurred>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e02d      	b.n	8004424 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c8:	f7ff f972 	bl	80036b0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d11a      	bne.n	8004414 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d013      	beq.n	8004414 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f0:	f043 0220 	orr.w	r2, r3, #32
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e007      	b.n	8004424 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b20      	cmp	r3, #32
 8004420:	d1c8      	bne.n	80043b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d068      	beq.n	800452a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2210      	movs	r2, #16
 800445e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004460:	e049      	b.n	80044f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d045      	beq.n	80044f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7ff f921 	bl	80036b0 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <I2C_IsErrorOccurred+0x54>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d13a      	bne.n	80044f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004492:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800449e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a2:	d121      	bne.n	80044e8 <I2C_IsErrorOccurred+0xbc>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044aa:	d01d      	beq.n	80044e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d01a      	beq.n	80044e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044c2:	f7ff f8f5 	bl	80036b0 <HAL_GetTick>
 80044c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c8:	e00e      	b.n	80044e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044ca:	f7ff f8f1 	bl	80036b0 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b19      	cmp	r3, #25
 80044d6:	d907      	bls.n	80044e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f043 0320 	orr.w	r3, r3, #32
 80044de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80044e6:	e006      	b.n	80044f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d1e9      	bne.n	80044ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b20      	cmp	r3, #32
 8004502:	d003      	beq.n	800450c <I2C_IsErrorOccurred+0xe0>
 8004504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0aa      	beq.n	8004462 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800450c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004510:	2b00      	cmp	r3, #0
 8004512:	d103      	bne.n	800451c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2220      	movs	r2, #32
 800451a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	f043 0304 	orr.w	r3, r3, #4
 8004522:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800454c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	f043 0308 	orr.w	r3, r3, #8
 8004564:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800456e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00b      	beq.n	8004598 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f043 0302 	orr.w	r3, r3, #2
 8004586:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004590:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01c      	beq.n	80045da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fe46 	bl	8004232 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <I2C_IsErrorOccurred+0x1bc>)
 80045b2:	400b      	ands	r3, r1
 80045b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	431a      	orrs	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80045da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3728      	adds	r7, #40	; 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	fe00e800 	.word	0xfe00e800

080045ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	460b      	mov	r3, r1
 80045f8:	817b      	strh	r3, [r7, #10]
 80045fa:	4613      	mov	r3, r2
 80045fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045fe:	897b      	ldrh	r3, [r7, #10]
 8004600:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004604:	7a7b      	ldrb	r3, [r7, #9]
 8004606:	041b      	lsls	r3, r3, #16
 8004608:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800460c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	4313      	orrs	r3, r2
 8004616:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800461a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	0d5b      	lsrs	r3, r3, #21
 8004626:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <I2C_TransferConfig+0x60>)
 800462c:	430b      	orrs	r3, r1
 800462e:	43db      	mvns	r3, r3
 8004630:	ea02 0103 	and.w	r1, r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	03ff63ff 	.word	0x03ff63ff

08004650 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b20      	cmp	r3, #32
 8004664:	d138      	bne.n	80046d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004670:	2302      	movs	r3, #2
 8004672:	e032      	b.n	80046da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	; 0x24
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e000      	b.n	80046da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046d8:	2302      	movs	r3, #2
  }
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d139      	bne.n	8004770 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004706:	2302      	movs	r3, #2
 8004708:	e033      	b.n	8004772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2224      	movs	r2, #36	; 0x24
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004738:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <HAL_PWREx_GetVoltageRange+0x18>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40007000 	.word	0x40007000

0800479c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047aa:	d130      	bne.n	800480e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80047ac:	4b23      	ldr	r3, [pc, #140]	; (800483c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b8:	d038      	beq.n	800482c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047ba:	4b20      	ldr	r3, [pc, #128]	; (800483c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047c2:	4a1e      	ldr	r2, [pc, #120]	; (800483c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047ca:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2232      	movs	r2, #50	; 0x32
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	0c9b      	lsrs	r3, r3, #18
 80047dc:	3301      	adds	r3, #1
 80047de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047e0:	e002      	b.n	80047e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047e8:	4b14      	ldr	r3, [pc, #80]	; (800483c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f4:	d102      	bne.n	80047fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f2      	bne.n	80047e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047fc:	4b0f      	ldr	r3, [pc, #60]	; (800483c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004808:	d110      	bne.n	800482c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e00f      	b.n	800482e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481a:	d007      	beq.n	800482c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004824:	4a05      	ldr	r2, [pc, #20]	; (800483c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800482a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40007000 	.word	0x40007000
 8004840:	2000001c 	.word	0x2000001c
 8004844:	431bde83 	.word	0x431bde83

08004848 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e3ca      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800485a:	4b97      	ldr	r3, [pc, #604]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004864:	4b94      	ldr	r3, [pc, #592]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80e4 	beq.w	8004a44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_RCC_OscConfig+0x4a>
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b0c      	cmp	r3, #12
 8004886:	f040 808b 	bne.w	80049a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b01      	cmp	r3, #1
 800488e:	f040 8087 	bne.w	80049a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004892:	4b89      	ldr	r3, [pc, #548]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <HAL_RCC_OscConfig+0x62>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e3a2      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1a      	ldr	r2, [r3, #32]
 80048ae:	4b82      	ldr	r3, [pc, #520]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d004      	beq.n	80048c4 <HAL_RCC_OscConfig+0x7c>
 80048ba:	4b7f      	ldr	r3, [pc, #508]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c2:	e005      	b.n	80048d0 <HAL_RCC_OscConfig+0x88>
 80048c4:	4b7c      	ldr	r3, [pc, #496]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80048c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d223      	bcs.n	800491c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fd55 	bl	8005388 <RCC_SetFlashLatencyFromMSIRange>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e383      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048e8:	4b73      	ldr	r3, [pc, #460]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a72      	ldr	r2, [pc, #456]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80048ee:	f043 0308 	orr.w	r3, r3, #8
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	4b70      	ldr	r3, [pc, #448]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	496d      	ldr	r1, [pc, #436]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004902:	4313      	orrs	r3, r2
 8004904:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004906:	4b6c      	ldr	r3, [pc, #432]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	4968      	ldr	r1, [pc, #416]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004916:	4313      	orrs	r3, r2
 8004918:	604b      	str	r3, [r1, #4]
 800491a:	e025      	b.n	8004968 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800491c:	4b66      	ldr	r3, [pc, #408]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a65      	ldr	r2, [pc, #404]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004922:	f043 0308 	orr.w	r3, r3, #8
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	4b63      	ldr	r3, [pc, #396]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	4960      	ldr	r1, [pc, #384]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800493a:	4b5f      	ldr	r3, [pc, #380]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	495b      	ldr	r1, [pc, #364]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 800494a:	4313      	orrs	r3, r2
 800494c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fd15 	bl	8005388 <RCC_SetFlashLatencyFromMSIRange>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e343      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004968:	f000 fc4a 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	4b52      	ldr	r3, [pc, #328]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	091b      	lsrs	r3, r3, #4
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	4950      	ldr	r1, [pc, #320]	; (8004abc <HAL_RCC_OscConfig+0x274>)
 800497a:	5ccb      	ldrb	r3, [r1, r3]
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
 8004984:	4a4e      	ldr	r2, [pc, #312]	; (8004ac0 <HAL_RCC_OscConfig+0x278>)
 8004986:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004988:	4b4e      	ldr	r3, [pc, #312]	; (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f7fe fe3f 	bl	8003610 <HAL_InitTick>
 8004992:	4603      	mov	r3, r0
 8004994:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d052      	beq.n	8004a42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	e327      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d032      	beq.n	8004a0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049a8:	4b43      	ldr	r3, [pc, #268]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a42      	ldr	r2, [pc, #264]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049b4:	f7fe fe7c 	bl	80036b0 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049bc:	f7fe fe78 	bl	80036b0 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e310      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ce:	4b3a      	ldr	r3, [pc, #232]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049da:	4b37      	ldr	r3, [pc, #220]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a36      	ldr	r2, [pc, #216]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80049e0:	f043 0308 	orr.w	r3, r3, #8
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	4b34      	ldr	r3, [pc, #208]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	4931      	ldr	r1, [pc, #196]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049f8:	4b2f      	ldr	r3, [pc, #188]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	492c      	ldr	r1, [pc, #176]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	604b      	str	r3, [r1, #4]
 8004a0c:	e01a      	b.n	8004a44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a0e:	4b2a      	ldr	r3, [pc, #168]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a29      	ldr	r2, [pc, #164]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a1a:	f7fe fe49 	bl	80036b0 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a22:	f7fe fe45 	bl	80036b0 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e2dd      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a34:	4b20      	ldr	r3, [pc, #128]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f0      	bne.n	8004a22 <HAL_RCC_OscConfig+0x1da>
 8004a40:	e000      	b.n	8004a44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d074      	beq.n	8004b3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d005      	beq.n	8004a62 <HAL_RCC_OscConfig+0x21a>
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b0c      	cmp	r3, #12
 8004a5a:	d10e      	bne.n	8004a7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d10b      	bne.n	8004a7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d064      	beq.n	8004b38 <HAL_RCC_OscConfig+0x2f0>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d160      	bne.n	8004b38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e2ba      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a82:	d106      	bne.n	8004a92 <HAL_RCC_OscConfig+0x24a>
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a0b      	ldr	r2, [pc, #44]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	e026      	b.n	8004ae0 <HAL_RCC_OscConfig+0x298>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a9a:	d115      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x280>
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a05      	ldr	r2, [pc, #20]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004aa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a02      	ldr	r2, [pc, #8]	; (8004ab8 <HAL_RCC_OscConfig+0x270>)
 8004aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e014      	b.n	8004ae0 <HAL_RCC_OscConfig+0x298>
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	0800dda8 	.word	0x0800dda8
 8004ac0:	2000001c 	.word	0x2000001c
 8004ac4:	20000020 	.word	0x20000020
 8004ac8:	4ba0      	ldr	r3, [pc, #640]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a9f      	ldr	r2, [pc, #636]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	4b9d      	ldr	r3, [pc, #628]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a9c      	ldr	r2, [pc, #624]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d013      	beq.n	8004b10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fe fde2 	bl	80036b0 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af0:	f7fe fdde 	bl	80036b0 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	; 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e276      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b02:	4b92      	ldr	r3, [pc, #584]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x2a8>
 8004b0e:	e014      	b.n	8004b3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fe fdce 	bl	80036b0 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b18:	f7fe fdca 	bl	80036b0 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b64      	cmp	r3, #100	; 0x64
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e262      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b2a:	4b88      	ldr	r3, [pc, #544]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x2d0>
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d060      	beq.n	8004c08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_OscConfig+0x310>
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d119      	bne.n	8004b86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d116      	bne.n	8004b86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b58:	4b7c      	ldr	r3, [pc, #496]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_OscConfig+0x328>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e23f      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b70:	4b76      	ldr	r3, [pc, #472]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	061b      	lsls	r3, r3, #24
 8004b7e:	4973      	ldr	r1, [pc, #460]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b84:	e040      	b.n	8004c08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d023      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b8e:	4b6f      	ldr	r3, [pc, #444]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a6e      	ldr	r2, [pc, #440]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9a:	f7fe fd89 	bl	80036b0 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba2:	f7fe fd85 	bl	80036b0 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e21d      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb4:	4b65      	ldr	r3, [pc, #404]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f0      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc0:	4b62      	ldr	r3, [pc, #392]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	061b      	lsls	r3, r3, #24
 8004bce:	495f      	ldr	r1, [pc, #380]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	604b      	str	r3, [r1, #4]
 8004bd4:	e018      	b.n	8004c08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd6:	4b5d      	ldr	r3, [pc, #372]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a5c      	ldr	r2, [pc, #368]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be2:	f7fe fd65 	bl	80036b0 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bea:	f7fe fd61 	bl	80036b0 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e1f9      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bfc:	4b53      	ldr	r3, [pc, #332]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f0      	bne.n	8004bea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03c      	beq.n	8004c8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01c      	beq.n	8004c56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c1c:	4b4b      	ldr	r3, [pc, #300]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c22:	4a4a      	ldr	r2, [pc, #296]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fe fd40 	bl	80036b0 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c34:	f7fe fd3c 	bl	80036b0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e1d4      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c46:	4b41      	ldr	r3, [pc, #260]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ef      	beq.n	8004c34 <HAL_RCC_OscConfig+0x3ec>
 8004c54:	e01b      	b.n	8004c8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c56:	4b3d      	ldr	r3, [pc, #244]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5c:	4a3b      	ldr	r2, [pc, #236]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c66:	f7fe fd23 	bl	80036b0 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6e:	f7fe fd1f 	bl	80036b0 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e1b7      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c80:	4b32      	ldr	r3, [pc, #200]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1ef      	bne.n	8004c6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 80a6 	beq.w	8004de8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ca0:	4b2a      	ldr	r3, [pc, #168]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10d      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cac:	4b27      	ldr	r3, [pc, #156]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	4a26      	ldr	r2, [pc, #152]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8004cb8:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc8:	4b21      	ldr	r3, [pc, #132]	; (8004d50 <HAL_RCC_OscConfig+0x508>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d118      	bne.n	8004d06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd4:	4b1e      	ldr	r3, [pc, #120]	; (8004d50 <HAL_RCC_OscConfig+0x508>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1d      	ldr	r2, [pc, #116]	; (8004d50 <HAL_RCC_OscConfig+0x508>)
 8004cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce0:	f7fe fce6 	bl	80036b0 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce8:	f7fe fce2 	bl	80036b0 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e17a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cfa:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <HAL_RCC_OscConfig+0x508>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d108      	bne.n	8004d20 <HAL_RCC_OscConfig+0x4d8>
 8004d0e:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	4a0d      	ldr	r2, [pc, #52]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d1e:	e029      	b.n	8004d74 <HAL_RCC_OscConfig+0x52c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b05      	cmp	r3, #5
 8004d26:	d115      	bne.n	8004d54 <HAL_RCC_OscConfig+0x50c>
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	4a07      	ldr	r2, [pc, #28]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004d30:	f043 0304 	orr.w	r3, r3, #4
 8004d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	4a03      	ldr	r2, [pc, #12]	; (8004d4c <HAL_RCC_OscConfig+0x504>)
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d48:	e014      	b.n	8004d74 <HAL_RCC_OscConfig+0x52c>
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40007000 	.word	0x40007000
 8004d54:	4b9c      	ldr	r3, [pc, #624]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	4a9b      	ldr	r2, [pc, #620]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004d5c:	f023 0301 	bic.w	r3, r3, #1
 8004d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d64:	4b98      	ldr	r3, [pc, #608]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	4a97      	ldr	r2, [pc, #604]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004d6c:	f023 0304 	bic.w	r3, r3, #4
 8004d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d016      	beq.n	8004daa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fe fc98 	bl	80036b0 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fe fc94 	bl	80036b0 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e12a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d9a:	4b8b      	ldr	r3, [pc, #556]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0ed      	beq.n	8004d84 <HAL_RCC_OscConfig+0x53c>
 8004da8:	e015      	b.n	8004dd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004daa:	f7fe fc81 	bl	80036b0 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004db0:	e00a      	b.n	8004dc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db2:	f7fe fc7d 	bl	80036b0 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e113      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dc8:	4b7f      	ldr	r3, [pc, #508]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1ed      	bne.n	8004db2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd6:	7ffb      	ldrb	r3, [r7, #31]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d105      	bne.n	8004de8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ddc:	4b7a      	ldr	r3, [pc, #488]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de0:	4a79      	ldr	r2, [pc, #484]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80fe 	beq.w	8004fee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	f040 80d0 	bne.w	8004f9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dfc:	4b72      	ldr	r3, [pc, #456]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f003 0203 	and.w	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d130      	bne.n	8004e72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d127      	bne.n	8004e72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d11f      	bne.n	8004e72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e3c:	2a07      	cmp	r2, #7
 8004e3e:	bf14      	ite	ne
 8004e40:	2201      	movne	r2, #1
 8004e42:	2200      	moveq	r2, #0
 8004e44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d113      	bne.n	8004e72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	3b01      	subs	r3, #1
 8004e58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d109      	bne.n	8004e72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	085b      	lsrs	r3, r3, #1
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d06e      	beq.n	8004f50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b0c      	cmp	r3, #12
 8004e76:	d069      	beq.n	8004f4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e78:	4b53      	ldr	r3, [pc, #332]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e84:	4b50      	ldr	r3, [pc, #320]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0ad      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e94:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a4b      	ldr	r2, [pc, #300]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ea0:	f7fe fc06 	bl	80036b0 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea8:	f7fe fc02 	bl	80036b0 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e09a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eba:	4b43      	ldr	r3, [pc, #268]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ec6:	4b40      	ldr	r3, [pc, #256]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	4b40      	ldr	r3, [pc, #256]	; (8004fcc <HAL_RCC_OscConfig+0x784>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ed6:	3a01      	subs	r2, #1
 8004ed8:	0112      	lsls	r2, r2, #4
 8004eda:	4311      	orrs	r1, r2
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ee0:	0212      	lsls	r2, r2, #8
 8004ee2:	4311      	orrs	r1, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ee8:	0852      	lsrs	r2, r2, #1
 8004eea:	3a01      	subs	r2, #1
 8004eec:	0552      	lsls	r2, r2, #21
 8004eee:	4311      	orrs	r1, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ef4:	0852      	lsrs	r2, r2, #1
 8004ef6:	3a01      	subs	r2, #1
 8004ef8:	0652      	lsls	r2, r2, #25
 8004efa:	4311      	orrs	r1, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f00:	0912      	lsrs	r2, r2, #4
 8004f02:	0452      	lsls	r2, r2, #17
 8004f04:	430a      	orrs	r2, r1
 8004f06:	4930      	ldr	r1, [pc, #192]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f0c:	4b2e      	ldr	r3, [pc, #184]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a2d      	ldr	r2, [pc, #180]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f18:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a2a      	ldr	r2, [pc, #168]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f24:	f7fe fbc4 	bl	80036b0 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fe fbc0 	bl	80036b0 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e058      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3e:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f4a:	e050      	b.n	8004fee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e04f      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f50:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d148      	bne.n	8004fee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f68:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f74:	f7fe fb9c 	bl	80036b0 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fe fb98 	bl	80036b0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e030      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0x734>
 8004f9a:	e028      	b.n	8004fee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b0c      	cmp	r3, #12
 8004fa0:	d023      	beq.n	8004fea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa2:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a08      	ldr	r2, [pc, #32]	; (8004fc8 <HAL_RCC_OscConfig+0x780>)
 8004fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fae:	f7fe fb7f 	bl	80036b0 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fb4:	e00c      	b.n	8004fd0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb6:	f7fe fb7b 	bl	80036b0 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d905      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e013      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd0:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_RCC_OscConfig+0x7b0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1ec      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fdc:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <HAL_RCC_OscConfig+0x7b0>)
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	4905      	ldr	r1, [pc, #20]	; (8004ff8 <HAL_RCC_OscConfig+0x7b0>)
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_RCC_OscConfig+0x7b4>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	60cb      	str	r3, [r1, #12]
 8004fe8:	e001      	b.n	8004fee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3720      	adds	r7, #32
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	feeefffc 	.word	0xfeeefffc

08005000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e0e7      	b.n	80051e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005014:	4b75      	ldr	r3, [pc, #468]	; (80051ec <HAL_RCC_ClockConfig+0x1ec>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d910      	bls.n	8005044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005022:	4b72      	ldr	r3, [pc, #456]	; (80051ec <HAL_RCC_ClockConfig+0x1ec>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f023 0207 	bic.w	r2, r3, #7
 800502a:	4970      	ldr	r1, [pc, #448]	; (80051ec <HAL_RCC_ClockConfig+0x1ec>)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	4313      	orrs	r3, r2
 8005030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005032:	4b6e      	ldr	r3, [pc, #440]	; (80051ec <HAL_RCC_ClockConfig+0x1ec>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0cf      	b.n	80051e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d010      	beq.n	8005072 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	4b66      	ldr	r3, [pc, #408]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800505c:	429a      	cmp	r2, r3
 800505e:	d908      	bls.n	8005072 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005060:	4b63      	ldr	r3, [pc, #396]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4960      	ldr	r1, [pc, #384]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 800506e:	4313      	orrs	r3, r2
 8005070:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d04c      	beq.n	8005118 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b03      	cmp	r3, #3
 8005084:	d107      	bne.n	8005096 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005086:	4b5a      	ldr	r3, [pc, #360]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d121      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e0a6      	b.n	80051e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d107      	bne.n	80050ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800509e:	4b54      	ldr	r3, [pc, #336]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d115      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e09a      	b.n	80051e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d107      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050b6:	4b4e      	ldr	r3, [pc, #312]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e08e      	b.n	80051e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050c6:	4b4a      	ldr	r3, [pc, #296]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e086      	b.n	80051e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050d6:	4b46      	ldr	r3, [pc, #280]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f023 0203 	bic.w	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4943      	ldr	r1, [pc, #268]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e8:	f7fe fae2 	bl	80036b0 <HAL_GetTick>
 80050ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f0:	f7fe fade 	bl	80036b0 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e06e      	b.n	80051e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	4b3a      	ldr	r3, [pc, #232]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 020c 	and.w	r2, r3, #12
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	429a      	cmp	r2, r3
 8005116:	d1eb      	bne.n	80050f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d010      	beq.n	8005146 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005130:	429a      	cmp	r2, r3
 8005132:	d208      	bcs.n	8005146 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005134:	4b2e      	ldr	r3, [pc, #184]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	492b      	ldr	r1, [pc, #172]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005146:	4b29      	ldr	r3, [pc, #164]	; (80051ec <HAL_RCC_ClockConfig+0x1ec>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d210      	bcs.n	8005176 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005154:	4b25      	ldr	r3, [pc, #148]	; (80051ec <HAL_RCC_ClockConfig+0x1ec>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f023 0207 	bic.w	r2, r3, #7
 800515c:	4923      	ldr	r1, [pc, #140]	; (80051ec <HAL_RCC_ClockConfig+0x1ec>)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	4313      	orrs	r3, r2
 8005162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005164:	4b21      	ldr	r3, [pc, #132]	; (80051ec <HAL_RCC_ClockConfig+0x1ec>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d001      	beq.n	8005176 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e036      	b.n	80051e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005182:	4b1b      	ldr	r3, [pc, #108]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	4918      	ldr	r1, [pc, #96]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005190:	4313      	orrs	r3, r2
 8005192:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d009      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051a0:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4910      	ldr	r1, [pc, #64]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051b4:	f000 f824 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <HAL_RCC_ClockConfig+0x1f0>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	490b      	ldr	r1, [pc, #44]	; (80051f4 <HAL_RCC_ClockConfig+0x1f4>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
 80051d0:	4a09      	ldr	r2, [pc, #36]	; (80051f8 <HAL_RCC_ClockConfig+0x1f8>)
 80051d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051d4:	4b09      	ldr	r3, [pc, #36]	; (80051fc <HAL_RCC_ClockConfig+0x1fc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fe fa19 	bl	8003610 <HAL_InitTick>
 80051de:	4603      	mov	r3, r0
 80051e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80051e2:	7afb      	ldrb	r3, [r7, #11]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40022000 	.word	0x40022000
 80051f0:	40021000 	.word	0x40021000
 80051f4:	0800dda8 	.word	0x0800dda8
 80051f8:	2000001c 	.word	0x2000001c
 80051fc:	20000020 	.word	0x20000020

08005200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005200:	b480      	push	{r7}
 8005202:	b089      	sub	sp, #36	; 0x24
 8005204:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
 800520a:	2300      	movs	r3, #0
 800520c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800520e:	4b3e      	ldr	r3, [pc, #248]	; (8005308 <HAL_RCC_GetSysClockFreq+0x108>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005218:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <HAL_RCC_GetSysClockFreq+0x108>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d005      	beq.n	8005234 <HAL_RCC_GetSysClockFreq+0x34>
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b0c      	cmp	r3, #12
 800522c:	d121      	bne.n	8005272 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d11e      	bne.n	8005272 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005234:	4b34      	ldr	r3, [pc, #208]	; (8005308 <HAL_RCC_GetSysClockFreq+0x108>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d107      	bne.n	8005250 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005240:	4b31      	ldr	r3, [pc, #196]	; (8005308 <HAL_RCC_GetSysClockFreq+0x108>)
 8005242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005246:	0a1b      	lsrs	r3, r3, #8
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	e005      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005250:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <HAL_RCC_GetSysClockFreq+0x108>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800525c:	4a2b      	ldr	r2, [pc, #172]	; (800530c <HAL_RCC_GetSysClockFreq+0x10c>)
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005264:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10d      	bne.n	8005288 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005270:	e00a      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b04      	cmp	r3, #4
 8005276:	d102      	bne.n	800527e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005278:	4b25      	ldr	r3, [pc, #148]	; (8005310 <HAL_RCC_GetSysClockFreq+0x110>)
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	e004      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d101      	bne.n	8005288 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005284:	4b23      	ldr	r3, [pc, #140]	; (8005314 <HAL_RCC_GetSysClockFreq+0x114>)
 8005286:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b0c      	cmp	r3, #12
 800528c:	d134      	bne.n	80052f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800528e:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <HAL_RCC_GetSysClockFreq+0x108>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d003      	beq.n	80052a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d003      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0xac>
 80052a4:	e005      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <HAL_RCC_GetSysClockFreq+0x110>)
 80052a8:	617b      	str	r3, [r7, #20]
      break;
 80052aa:	e005      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052ac:	4b19      	ldr	r3, [pc, #100]	; (8005314 <HAL_RCC_GetSysClockFreq+0x114>)
 80052ae:	617b      	str	r3, [r7, #20]
      break;
 80052b0:	e002      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	617b      	str	r3, [r7, #20]
      break;
 80052b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052b8:	4b13      	ldr	r3, [pc, #76]	; (8005308 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	3301      	adds	r3, #1
 80052c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052c6:	4b10      	ldr	r3, [pc, #64]	; (8005308 <HAL_RCC_GetSysClockFreq+0x108>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	fb03 f202 	mul.w	r2, r3, r2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	0e5b      	lsrs	r3, r3, #25
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	3301      	adds	r3, #1
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052f8:	69bb      	ldr	r3, [r7, #24]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3724      	adds	r7, #36	; 0x24
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40021000 	.word	0x40021000
 800530c:	0800ddc0 	.word	0x0800ddc0
 8005310:	00f42400 	.word	0x00f42400
 8005314:	007a1200 	.word	0x007a1200

08005318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800531c:	4b03      	ldr	r3, [pc, #12]	; (800532c <HAL_RCC_GetHCLKFreq+0x14>)
 800531e:	681b      	ldr	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	2000001c 	.word	0x2000001c

08005330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005334:	f7ff fff0 	bl	8005318 <HAL_RCC_GetHCLKFreq>
 8005338:	4602      	mov	r2, r0
 800533a:	4b06      	ldr	r3, [pc, #24]	; (8005354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	0a1b      	lsrs	r3, r3, #8
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	4904      	ldr	r1, [pc, #16]	; (8005358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005346:	5ccb      	ldrb	r3, [r1, r3]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005350:	4618      	mov	r0, r3
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40021000 	.word	0x40021000
 8005358:	0800ddb8 	.word	0x0800ddb8

0800535c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005360:	f7ff ffda 	bl	8005318 <HAL_RCC_GetHCLKFreq>
 8005364:	4602      	mov	r2, r0
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	0adb      	lsrs	r3, r3, #11
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	4904      	ldr	r1, [pc, #16]	; (8005384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005372:	5ccb      	ldrb	r3, [r1, r3]
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40021000 	.word	0x40021000
 8005384:	0800ddb8 	.word	0x0800ddb8

08005388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005390:	2300      	movs	r3, #0
 8005392:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005394:	4b2a      	ldr	r3, [pc, #168]	; (8005440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053a0:	f7ff f9ee 	bl	8004780 <HAL_PWREx_GetVoltageRange>
 80053a4:	6178      	str	r0, [r7, #20]
 80053a6:	e014      	b.n	80053d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053a8:	4b25      	ldr	r3, [pc, #148]	; (8005440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ac:	4a24      	ldr	r2, [pc, #144]	; (8005440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b2:	6593      	str	r3, [r2, #88]	; 0x58
 80053b4:	4b22      	ldr	r3, [pc, #136]	; (8005440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053c0:	f7ff f9de 	bl	8004780 <HAL_PWREx_GetVoltageRange>
 80053c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053c6:	4b1e      	ldr	r3, [pc, #120]	; (8005440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	4a1d      	ldr	r2, [pc, #116]	; (8005440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053d8:	d10b      	bne.n	80053f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b80      	cmp	r3, #128	; 0x80
 80053de:	d919      	bls.n	8005414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2ba0      	cmp	r3, #160	; 0xa0
 80053e4:	d902      	bls.n	80053ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053e6:	2302      	movs	r3, #2
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	e013      	b.n	8005414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053ec:	2301      	movs	r3, #1
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	e010      	b.n	8005414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b80      	cmp	r3, #128	; 0x80
 80053f6:	d902      	bls.n	80053fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80053f8:	2303      	movs	r3, #3
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	e00a      	b.n	8005414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b80      	cmp	r3, #128	; 0x80
 8005402:	d102      	bne.n	800540a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005404:	2302      	movs	r3, #2
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	e004      	b.n	8005414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b70      	cmp	r3, #112	; 0x70
 800540e:	d101      	bne.n	8005414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005410:	2301      	movs	r3, #1
 8005412:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f023 0207 	bic.w	r2, r3, #7
 800541c:	4909      	ldr	r1, [pc, #36]	; (8005444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005424:	4b07      	ldr	r3, [pc, #28]	; (8005444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	429a      	cmp	r2, r3
 8005430:	d001      	beq.n	8005436 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40021000 	.word	0x40021000
 8005444:	40022000 	.word	0x40022000

08005448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005450:	2300      	movs	r3, #0
 8005452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005454:	2300      	movs	r3, #0
 8005456:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005460:	2b00      	cmp	r3, #0
 8005462:	d041      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005468:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800546c:	d02a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800546e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005472:	d824      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005474:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005478:	d008      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800547a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800547e:	d81e      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005488:	d010      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800548a:	e018      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800548c:	4b86      	ldr	r3, [pc, #536]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4a85      	ldr	r2, [pc, #532]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005496:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005498:	e015      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3304      	adds	r3, #4
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fabb 	bl	8005a1c <RCCEx_PLLSAI1_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054aa:	e00c      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3320      	adds	r3, #32
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fba6 	bl	8005c04 <RCCEx_PLLSAI2_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054bc:	e003      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	74fb      	strb	r3, [r7, #19]
      break;
 80054c2:	e000      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80054c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054c6:	7cfb      	ldrb	r3, [r7, #19]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10b      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054cc:	4b76      	ldr	r3, [pc, #472]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054da:	4973      	ldr	r1, [pc, #460]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054e2:	e001      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e4:	7cfb      	ldrb	r3, [r7, #19]
 80054e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d041      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054fc:	d02a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80054fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005502:	d824      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005508:	d008      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800550a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800550e:	d81e      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005518:	d010      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800551a:	e018      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800551c:	4b62      	ldr	r3, [pc, #392]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4a61      	ldr	r2, [pc, #388]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005526:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005528:	e015      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3304      	adds	r3, #4
 800552e:	2100      	movs	r1, #0
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fa73 	bl	8005a1c <RCCEx_PLLSAI1_Config>
 8005536:	4603      	mov	r3, r0
 8005538:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800553a:	e00c      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3320      	adds	r3, #32
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fb5e 	bl	8005c04 <RCCEx_PLLSAI2_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800554c:	e003      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	74fb      	strb	r3, [r7, #19]
      break;
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005556:	7cfb      	ldrb	r3, [r7, #19]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10b      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800555c:	4b52      	ldr	r3, [pc, #328]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800556a:	494f      	ldr	r1, [pc, #316]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005572:	e001      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005574:	7cfb      	ldrb	r3, [r7, #19]
 8005576:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80a0 	beq.w	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005586:	2300      	movs	r3, #0
 8005588:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800558a:	4b47      	ldr	r3, [pc, #284]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a0:	4b41      	ldr	r3, [pc, #260]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a4:	4a40      	ldr	r2, [pc, #256]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055aa:	6593      	str	r3, [r2, #88]	; 0x58
 80055ac:	4b3e      	ldr	r3, [pc, #248]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b8:	2301      	movs	r3, #1
 80055ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055bc:	4b3b      	ldr	r3, [pc, #236]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a3a      	ldr	r2, [pc, #232]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055c8:	f7fe f872 	bl	80036b0 <HAL_GetTick>
 80055cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055ce:	e009      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d0:	f7fe f86e 	bl	80036b0 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d902      	bls.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	74fb      	strb	r3, [r7, #19]
        break;
 80055e2:	e005      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055e4:	4b31      	ldr	r3, [pc, #196]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0ef      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d15c      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055f6:	4b2c      	ldr	r3, [pc, #176]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005600:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01f      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	429a      	cmp	r2, r3
 8005612:	d019      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005614:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005620:	4b21      	ldr	r3, [pc, #132]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005626:	4a20      	ldr	r2, [pc, #128]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005630:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005636:	4a1c      	ldr	r2, [pc, #112]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800563c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005640:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d016      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7fe f82d 	bl	80036b0 <HAL_GetTick>
 8005656:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005658:	e00b      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565a:	f7fe f829 	bl	80036b0 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	f241 3288 	movw	r2, #5000	; 0x1388
 8005668:	4293      	cmp	r3, r2
 800566a:	d902      	bls.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	74fb      	strb	r3, [r7, #19]
            break;
 8005670:	e006      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0ec      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10c      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005686:	4b08      	ldr	r3, [pc, #32]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005696:	4904      	ldr	r1, [pc, #16]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800569e:	e009      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	74bb      	strb	r3, [r7, #18]
 80056a4:	e006      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b0:	7cfb      	ldrb	r3, [r7, #19]
 80056b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056b4:	7c7b      	ldrb	r3, [r7, #17]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d105      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ba:	4b9e      	ldr	r3, [pc, #632]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	4a9d      	ldr	r2, [pc, #628]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056d2:	4b98      	ldr	r3, [pc, #608]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d8:	f023 0203 	bic.w	r2, r3, #3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	4994      	ldr	r1, [pc, #592]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056f4:	4b8f      	ldr	r3, [pc, #572]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fa:	f023 020c 	bic.w	r2, r3, #12
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005702:	498c      	ldr	r1, [pc, #560]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005716:	4b87      	ldr	r3, [pc, #540]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	4983      	ldr	r1, [pc, #524]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005738:	4b7e      	ldr	r3, [pc, #504]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	497b      	ldr	r1, [pc, #492]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800575a:	4b76      	ldr	r3, [pc, #472]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800575c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005768:	4972      	ldr	r1, [pc, #456]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576a:	4313      	orrs	r3, r2
 800576c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800577c:	4b6d      	ldr	r3, [pc, #436]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800577e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005782:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	496a      	ldr	r1, [pc, #424]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800579e:	4b65      	ldr	r3, [pc, #404]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ac:	4961      	ldr	r1, [pc, #388]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057c0:	4b5c      	ldr	r3, [pc, #368]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ce:	4959      	ldr	r1, [pc, #356]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057e2:	4b54      	ldr	r3, [pc, #336]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f0:	4950      	ldr	r1, [pc, #320]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005804:	4b4b      	ldr	r3, [pc, #300]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005812:	4948      	ldr	r1, [pc, #288]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005826:	4b43      	ldr	r3, [pc, #268]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005834:	493f      	ldr	r1, [pc, #252]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d028      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005848:	4b3a      	ldr	r3, [pc, #232]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800584a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005856:	4937      	ldr	r1, [pc, #220]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005858:	4313      	orrs	r3, r2
 800585a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005866:	d106      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005868:	4b32      	ldr	r3, [pc, #200]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	4a31      	ldr	r2, [pc, #196]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800586e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005872:	60d3      	str	r3, [r2, #12]
 8005874:	e011      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800587a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800587e:	d10c      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3304      	adds	r3, #4
 8005884:	2101      	movs	r1, #1
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f8c8 	bl	8005a1c <RCCEx_PLLSAI1_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005890:	7cfb      	ldrb	r3, [r7, #19]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005896:	7cfb      	ldrb	r3, [r7, #19]
 8005898:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d028      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058a6:	4b23      	ldr	r3, [pc, #140]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b4:	491f      	ldr	r1, [pc, #124]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058c4:	d106      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c6:	4b1b      	ldr	r3, [pc, #108]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058d0:	60d3      	str	r3, [r2, #12]
 80058d2:	e011      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3304      	adds	r3, #4
 80058e2:	2101      	movs	r1, #1
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f899 	bl	8005a1c <RCCEx_PLLSAI1_Config>
 80058ea:	4603      	mov	r3, r0
 80058ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058ee:	7cfb      	ldrb	r3, [r7, #19]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80058f4:	7cfb      	ldrb	r3, [r7, #19]
 80058f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d02b      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005904:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005912:	4908      	ldr	r1, [pc, #32]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800591e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005922:	d109      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005924:	4b03      	ldr	r3, [pc, #12]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	4a02      	ldr	r2, [pc, #8]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800592a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800592e:	60d3      	str	r3, [r2, #12]
 8005930:	e014      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005940:	d10c      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3304      	adds	r3, #4
 8005946:	2101      	movs	r1, #1
 8005948:	4618      	mov	r0, r3
 800594a:	f000 f867 	bl	8005a1c <RCCEx_PLLSAI1_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005952:	7cfb      	ldrb	r3, [r7, #19]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005958:	7cfb      	ldrb	r3, [r7, #19]
 800595a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d02f      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005968:	4b2b      	ldr	r3, [pc, #172]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005976:	4928      	ldr	r1, [pc, #160]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005986:	d10d      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	2102      	movs	r1, #2
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f844 	bl	8005a1c <RCCEx_PLLSAI1_Config>
 8005994:	4603      	mov	r3, r0
 8005996:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005998:	7cfb      	ldrb	r3, [r7, #19]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d014      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800599e:	7cfb      	ldrb	r3, [r7, #19]
 80059a0:	74bb      	strb	r3, [r7, #18]
 80059a2:	e011      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ac:	d10c      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3320      	adds	r3, #32
 80059b2:	2102      	movs	r1, #2
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f925 	bl	8005c04 <RCCEx_PLLSAI2_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059be:	7cfb      	ldrb	r3, [r7, #19]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80059c4:	7cfb      	ldrb	r3, [r7, #19]
 80059c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059d4:	4b10      	ldr	r3, [pc, #64]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e2:	490d      	ldr	r1, [pc, #52]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059f6:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a06:	4904      	ldr	r1, [pc, #16]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40021000 	.word	0x40021000

08005a1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a2a:	4b75      	ldr	r3, [pc, #468]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d018      	beq.n	8005a68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a36:	4b72      	ldr	r3, [pc, #456]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0203 	and.w	r2, r3, #3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d10d      	bne.n	8005a62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
       ||
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a4e:	4b6c      	ldr	r3, [pc, #432]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	091b      	lsrs	r3, r3, #4
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d047      	beq.n	8005af2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	73fb      	strb	r3, [r7, #15]
 8005a66:	e044      	b.n	8005af2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d018      	beq.n	8005aa2 <RCCEx_PLLSAI1_Config+0x86>
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d825      	bhi.n	8005ac0 <RCCEx_PLLSAI1_Config+0xa4>
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d002      	beq.n	8005a7e <RCCEx_PLLSAI1_Config+0x62>
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d009      	beq.n	8005a90 <RCCEx_PLLSAI1_Config+0x74>
 8005a7c:	e020      	b.n	8005ac0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a7e:	4b60      	ldr	r3, [pc, #384]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d11d      	bne.n	8005ac6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a8e:	e01a      	b.n	8005ac6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a90:	4b5b      	ldr	r3, [pc, #364]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d116      	bne.n	8005aca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aa0:	e013      	b.n	8005aca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005aa2:	4b57      	ldr	r3, [pc, #348]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10f      	bne.n	8005ace <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005aae:	4b54      	ldr	r3, [pc, #336]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d109      	bne.n	8005ace <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005abe:	e006      	b.n	8005ace <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac4:	e004      	b.n	8005ad0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ac6:	bf00      	nop
 8005ac8:	e002      	b.n	8005ad0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005aca:	bf00      	nop
 8005acc:	e000      	b.n	8005ad0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ace:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10d      	bne.n	8005af2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ad6:	4b4a      	ldr	r3, [pc, #296]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6819      	ldr	r1, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	430b      	orrs	r3, r1
 8005aec:	4944      	ldr	r1, [pc, #272]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d17d      	bne.n	8005bf4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005af8:	4b41      	ldr	r3, [pc, #260]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a40      	ldr	r2, [pc, #256]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005afe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b04:	f7fd fdd4 	bl	80036b0 <HAL_GetTick>
 8005b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b0a:	e009      	b.n	8005b20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b0c:	f7fd fdd0 	bl	80036b0 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d902      	bls.n	8005b20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b1e:	e005      	b.n	8005b2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b20:	4b37      	ldr	r3, [pc, #220]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1ef      	bne.n	8005b0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d160      	bne.n	8005bf4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d111      	bne.n	8005b5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b38:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6892      	ldr	r2, [r2, #8]
 8005b48:	0211      	lsls	r1, r2, #8
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68d2      	ldr	r2, [r2, #12]
 8005b4e:	0912      	lsrs	r2, r2, #4
 8005b50:	0452      	lsls	r2, r2, #17
 8005b52:	430a      	orrs	r2, r1
 8005b54:	492a      	ldr	r1, [pc, #168]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	610b      	str	r3, [r1, #16]
 8005b5a:	e027      	b.n	8005bac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d112      	bne.n	8005b88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b62:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6892      	ldr	r2, [r2, #8]
 8005b72:	0211      	lsls	r1, r2, #8
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6912      	ldr	r2, [r2, #16]
 8005b78:	0852      	lsrs	r2, r2, #1
 8005b7a:	3a01      	subs	r2, #1
 8005b7c:	0552      	lsls	r2, r2, #21
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	491f      	ldr	r1, [pc, #124]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	610b      	str	r3, [r1, #16]
 8005b86:	e011      	b.n	8005bac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b88:	4b1d      	ldr	r3, [pc, #116]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6892      	ldr	r2, [r2, #8]
 8005b98:	0211      	lsls	r1, r2, #8
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6952      	ldr	r2, [r2, #20]
 8005b9e:	0852      	lsrs	r2, r2, #1
 8005ba0:	3a01      	subs	r2, #1
 8005ba2:	0652      	lsls	r2, r2, #25
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	4916      	ldr	r1, [pc, #88]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bac:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a13      	ldr	r2, [pc, #76]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb8:	f7fd fd7a 	bl	80036b0 <HAL_GetTick>
 8005bbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bbe:	e009      	b.n	8005bd4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bc0:	f7fd fd76 	bl	80036b0 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d902      	bls.n	8005bd4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	73fb      	strb	r3, [r7, #15]
          break;
 8005bd2:	e005      	b.n	8005be0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0ef      	beq.n	8005bc0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	4904      	ldr	r1, [pc, #16]	; (8005c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40021000 	.word	0x40021000

08005c04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c12:	4b6a      	ldr	r3, [pc, #424]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d018      	beq.n	8005c50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c1e:	4b67      	ldr	r3, [pc, #412]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f003 0203 	and.w	r2, r3, #3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d10d      	bne.n	8005c4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
       ||
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c36:	4b61      	ldr	r3, [pc, #388]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	091b      	lsrs	r3, r3, #4
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
       ||
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d047      	beq.n	8005cda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	73fb      	strb	r3, [r7, #15]
 8005c4e:	e044      	b.n	8005cda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d018      	beq.n	8005c8a <RCCEx_PLLSAI2_Config+0x86>
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d825      	bhi.n	8005ca8 <RCCEx_PLLSAI2_Config+0xa4>
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d002      	beq.n	8005c66 <RCCEx_PLLSAI2_Config+0x62>
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d009      	beq.n	8005c78 <RCCEx_PLLSAI2_Config+0x74>
 8005c64:	e020      	b.n	8005ca8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c66:	4b55      	ldr	r3, [pc, #340]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d11d      	bne.n	8005cae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c76:	e01a      	b.n	8005cae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c78:	4b50      	ldr	r3, [pc, #320]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d116      	bne.n	8005cb2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c88:	e013      	b.n	8005cb2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c8a:	4b4c      	ldr	r3, [pc, #304]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10f      	bne.n	8005cb6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c96:	4b49      	ldr	r3, [pc, #292]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ca6:	e006      	b.n	8005cb6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cac:	e004      	b.n	8005cb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e002      	b.n	8005cb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e000      	b.n	8005cb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005cb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10d      	bne.n	8005cda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005cbe:	4b3f      	ldr	r3, [pc, #252]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6819      	ldr	r1, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	4939      	ldr	r1, [pc, #228]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d167      	bne.n	8005db0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ce0:	4b36      	ldr	r3, [pc, #216]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a35      	ldr	r2, [pc, #212]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cec:	f7fd fce0 	bl	80036b0 <HAL_GetTick>
 8005cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cf2:	e009      	b.n	8005d08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cf4:	f7fd fcdc 	bl	80036b0 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d902      	bls.n	8005d08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	73fb      	strb	r3, [r7, #15]
        break;
 8005d06:	e005      	b.n	8005d14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d08:	4b2c      	ldr	r3, [pc, #176]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1ef      	bne.n	8005cf4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d14a      	bne.n	8005db0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d111      	bne.n	8005d44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d20:	4b26      	ldr	r3, [pc, #152]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6892      	ldr	r2, [r2, #8]
 8005d30:	0211      	lsls	r1, r2, #8
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	68d2      	ldr	r2, [r2, #12]
 8005d36:	0912      	lsrs	r2, r2, #4
 8005d38:	0452      	lsls	r2, r2, #17
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	491f      	ldr	r1, [pc, #124]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	614b      	str	r3, [r1, #20]
 8005d42:	e011      	b.n	8005d68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d44:	4b1d      	ldr	r3, [pc, #116]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6892      	ldr	r2, [r2, #8]
 8005d54:	0211      	lsls	r1, r2, #8
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6912      	ldr	r2, [r2, #16]
 8005d5a:	0852      	lsrs	r2, r2, #1
 8005d5c:	3a01      	subs	r2, #1
 8005d5e:	0652      	lsls	r2, r2, #25
 8005d60:	430a      	orrs	r2, r1
 8005d62:	4916      	ldr	r1, [pc, #88]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d68:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d74:	f7fd fc9c 	bl	80036b0 <HAL_GetTick>
 8005d78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d7a:	e009      	b.n	8005d90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d7c:	f7fd fc98 	bl	80036b0 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d902      	bls.n	8005d90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	73fb      	strb	r3, [r7, #15]
          break;
 8005d8e:	e005      	b.n	8005d9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d90:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0ef      	beq.n	8005d7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005da2:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005da4:	695a      	ldr	r2, [r3, #20]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	4904      	ldr	r1, [pc, #16]	; (8005dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40021000 	.word	0x40021000

08005dc0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e049      	b.n	8005e66 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	795b      	ldrb	r3, [r3, #5]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d105      	bne.n	8005de8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fd f91a 	bl	800301c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0204 	orr.w	r2, r2, #4
 8005dfc:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e08:	2b40      	cmp	r3, #64	; 0x40
 8005e0a:	d104      	bne.n	8005e16 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2204      	movs	r2, #4
 8005e10:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e027      	b.n	8005e66 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005e16:	f7fd fc4b 	bl	80036b0 <HAL_GetTick>
 8005e1a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005e1c:	e015      	b.n	8005e4a <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005e1e:	f7fd fc47 	bl	80036b0 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d90e      	bls.n	8005e4a <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d107      	bne.n	8005e4a <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e00d      	b.n	8005e66 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d0e2      	beq.n	8005e1e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	791b      	ldrb	r3, [r3, #4]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e044      	b.n	8005f12 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	795b      	ldrb	r3, [r3, #5]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d133      	bne.n	8005f00 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e9e:	f7fd fc07 	bl	80036b0 <HAL_GetTick>
 8005ea2:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005ea4:	e018      	b.n	8005ed8 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005ea6:	f7fd fc03 	bl	80036b0 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d911      	bls.n	8005ed8 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e01c      	b.n	8005f12 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d1df      	bne.n	8005ea6 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	715a      	strb	r2, [r3, #5]
 8005efe:	e004      	b.n	8005f0a <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2204      	movs	r2, #4
 8005f04:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	711a      	strb	r2, [r3, #4]

  return status;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2210      	movs	r2, #16
 8005f3c:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	e01f      	b.n	8005f84 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d01a      	beq.n	8005f84 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d108      	bne.n	8005f6a <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f66:	605a      	str	r2, [r3, #4]
 8005f68:	e00c      	b.n	8005f84 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8005f70:	2301      	movs	r3, #1
 8005f72:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0208 	bic.w	r2, r2, #8
 8005f82:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d10b      	bne.n	8005fa2 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2204      	movs	r2, #4
 8005f8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f837 	bl	8006004 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8005f9e:	605a      	str	r2, [r3, #4]

    return;
 8005fa0:	e022      	b.n	8005fe8 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01d      	beq.n	8005fe8 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0208 	bic.w	r2, r2, #8
 8005fba:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	795b      	ldrb	r3, [r3, #5]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d00b      	beq.n	8005fe8 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f803 	bl	8005fee <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_RNG_GetState>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL state
  */
HAL_RNG_StateTypeDef HAL_RNG_GetState(const RNG_HandleTypeDef *hrng)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  return hrng->State;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	795b      	ldrb	r3, [r3, #5]
 8006024:	b2db      	uxtb	r3, r3
}
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e095      	b.n	8006170 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	d108      	bne.n	800605e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006054:	d009      	beq.n	800606a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	61da      	str	r2, [r3, #28]
 800605c:	e005      	b.n	800606a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7fd f815 	bl	80030b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060aa:	d902      	bls.n	80060b2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	e002      	b.n	80060b8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80060c0:	d007      	beq.n	80060d2 <HAL_SPI_Init+0xa0>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060ca:	d002      	beq.n	80060d2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	431a      	orrs	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006114:	ea42 0103 	orr.w	r1, r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	0c1b      	lsrs	r3, r3, #16
 800612e:	f003 0204 	and.w	r2, r3, #4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	f003 0310 	and.w	r3, r3, #16
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800614e:	ea42 0103 	orr.w	r1, r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_SPI_Transmit+0x22>
 8006196:	2302      	movs	r3, #2
 8006198:	e15f      	b.n	800645a <HAL_SPI_Transmit+0x2e2>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061a2:	f7fd fa85 	bl	80036b0 <HAL_GetTick>
 80061a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d002      	beq.n	80061be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061b8:	2302      	movs	r3, #2
 80061ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061bc:	e148      	b.n	8006450 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <HAL_SPI_Transmit+0x52>
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061ce:	e13f      	b.n	8006450 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2203      	movs	r2, #3
 80061d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	88fa      	ldrh	r2, [r7, #6]
 80061e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	88fa      	ldrh	r2, [r7, #6]
 80061ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621a:	d10f      	bne.n	800623c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800622a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800623a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	d007      	beq.n	800625a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006258:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006262:	d94f      	bls.n	8006304 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <HAL_SPI_Transmit+0xfa>
 800626c:	8afb      	ldrh	r3, [r7, #22]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d142      	bne.n	80062f8 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	881a      	ldrh	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	1c9a      	adds	r2, r3, #2
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006296:	e02f      	b.n	80062f8 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d112      	bne.n	80062cc <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	881a      	ldrh	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	1c9a      	adds	r2, r3, #2
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062ca:	e015      	b.n	80062f8 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062cc:	f7fd f9f0 	bl	80036b0 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d803      	bhi.n	80062e4 <HAL_SPI_Transmit+0x16c>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d102      	bne.n	80062ea <HAL_SPI_Transmit+0x172>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d106      	bne.n	80062f8 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80062f6:	e0ab      	b.n	8006450 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1ca      	bne.n	8006298 <HAL_SPI_Transmit+0x120>
 8006302:	e080      	b.n	8006406 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_SPI_Transmit+0x19a>
 800630c:	8afb      	ldrh	r3, [r7, #22]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d174      	bne.n	80063fc <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006316:	b29b      	uxth	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	d912      	bls.n	8006342 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	881a      	ldrh	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	1c9a      	adds	r2, r3, #2
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006336:	b29b      	uxth	r3, r3
 8006338:	3b02      	subs	r3, #2
 800633a:	b29a      	uxth	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006340:	e05c      	b.n	80063fc <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	330c      	adds	r3, #12
 800634c:	7812      	ldrb	r2, [r2, #0]
 800634e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006368:	e048      	b.n	80063fc <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b02      	cmp	r3, #2
 8006376:	d12b      	bne.n	80063d0 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b01      	cmp	r3, #1
 8006380:	d912      	bls.n	80063a8 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	881a      	ldrh	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	1c9a      	adds	r2, r3, #2
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800639c:	b29b      	uxth	r3, r3
 800639e:	3b02      	subs	r3, #2
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063a6:	e029      	b.n	80063fc <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	330c      	adds	r3, #12
 80063b2:	7812      	ldrb	r2, [r2, #0]
 80063b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ce:	e015      	b.n	80063fc <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063d0:	f7fd f96e 	bl	80036b0 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d803      	bhi.n	80063e8 <HAL_SPI_Transmit+0x270>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e6:	d102      	bne.n	80063ee <HAL_SPI_Transmit+0x276>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80063fa:	e029      	b.n	8006450 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1b1      	bne.n	800636a <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fcf8 	bl	8006e00 <SPI_EndRxTxTransaction>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006424:	2300      	movs	r3, #0
 8006426:	613b      	str	r3, [r7, #16]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	613b      	str	r3, [r7, #16]
 8006438:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	77fb      	strb	r3, [r7, #31]
 8006446:	e003      	b.n	8006450 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006458:	7ffb      	ldrb	r3, [r7, #31]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3720      	adds	r7, #32
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b088      	sub	sp, #32
 8006466:	af02      	add	r7, sp, #8
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	603b      	str	r3, [r7, #0]
 800646e:	4613      	mov	r3, r2
 8006470:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b01      	cmp	r3, #1
 8006480:	d002      	beq.n	8006488 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006482:	2302      	movs	r3, #2
 8006484:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006486:	e11a      	b.n	80066be <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006490:	d112      	bne.n	80064b8 <HAL_SPI_Receive+0x56>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10e      	bne.n	80064b8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2204      	movs	r2, #4
 800649e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	68b9      	ldr	r1, [r7, #8]
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 f90e 	bl	80066d0 <HAL_SPI_TransmitReceive>
 80064b4:	4603      	mov	r3, r0
 80064b6:	e107      	b.n	80066c8 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <HAL_SPI_Receive+0x64>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e100      	b.n	80066c8 <HAL_SPI_Receive+0x266>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ce:	f7fd f8ef 	bl	80036b0 <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_SPI_Receive+0x7e>
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064e4:	e0eb      	b.n	80066be <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2204      	movs	r2, #4
 80064ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	88fa      	ldrh	r2, [r7, #6]
 80064fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	88fa      	ldrh	r2, [r7, #6]
 8006506:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006530:	d908      	bls.n	8006544 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	e007      	b.n	8006554 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006552:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800655c:	d10f      	bne.n	800657e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800656c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800657c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d007      	beq.n	800659c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800659a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065a4:	d86f      	bhi.n	8006686 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80065a6:	e034      	b.n	8006612 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d117      	bne.n	80065e6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f103 020c 	add.w	r2, r3, #12
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	7812      	ldrb	r2, [r2, #0]
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80065e4:	e015      	b.n	8006612 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065e6:	f7fd f863 	bl	80036b0 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d803      	bhi.n	80065fe <HAL_SPI_Receive+0x19c>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fc:	d102      	bne.n	8006604 <HAL_SPI_Receive+0x1a2>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d106      	bne.n	8006612 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006610:	e055      	b.n	80066be <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1c4      	bne.n	80065a8 <HAL_SPI_Receive+0x146>
 800661e:	e038      	b.n	8006692 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b01      	cmp	r3, #1
 800662c:	d115      	bne.n	800665a <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	b292      	uxth	r2, r2
 800663a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	1c9a      	adds	r2, r3, #2
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006658:	e015      	b.n	8006686 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800665a:	f7fd f829 	bl	80036b0 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d803      	bhi.n	8006672 <HAL_SPI_Receive+0x210>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d102      	bne.n	8006678 <HAL_SPI_Receive+0x216>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006684:	e01b      	b.n	80066be <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1c6      	bne.n	8006620 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fb5a 	bl	8006d50 <SPI_EndRxTransaction>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	75fb      	strb	r3, [r7, #23]
 80066b4:	e003      	b.n	80066be <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08a      	sub	sp, #40	; 0x28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066de:	2301      	movs	r3, #1
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_SPI_TransmitReceive+0x26>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e20a      	b.n	8006b0c <HAL_SPI_TransmitReceive+0x43c>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066fe:	f7fc ffd7 	bl	80036b0 <HAL_GetTick>
 8006702:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800670a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006712:	887b      	ldrh	r3, [r7, #2]
 8006714:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006716:	887b      	ldrh	r3, [r7, #2]
 8006718:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800671a:	7efb      	ldrb	r3, [r7, #27]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d00e      	beq.n	800673e <HAL_SPI_TransmitReceive+0x6e>
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006726:	d106      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d102      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x66>
 8006730:	7efb      	ldrb	r3, [r7, #27]
 8006732:	2b04      	cmp	r3, #4
 8006734:	d003      	beq.n	800673e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006736:	2302      	movs	r3, #2
 8006738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800673c:	e1e0      	b.n	8006b00 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_SPI_TransmitReceive+0x80>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <HAL_SPI_TransmitReceive+0x80>
 800674a:	887b      	ldrh	r3, [r7, #2]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006756:	e1d3      	b.n	8006b00 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b04      	cmp	r3, #4
 8006762:	d003      	beq.n	800676c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2205      	movs	r2, #5
 8006768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	887a      	ldrh	r2, [r7, #2]
 800677c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	887a      	ldrh	r2, [r7, #2]
 8006784:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	887a      	ldrh	r2, [r7, #2]
 8006792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	887a      	ldrh	r2, [r7, #2]
 8006798:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067ae:	d802      	bhi.n	80067b6 <HAL_SPI_TransmitReceive+0xe6>
 80067b0:	8a3b      	ldrh	r3, [r7, #16]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d908      	bls.n	80067c8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067c4:	605a      	str	r2, [r3, #4]
 80067c6:	e007      	b.n	80067d8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e2:	2b40      	cmp	r3, #64	; 0x40
 80067e4:	d007      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067fe:	f240 8081 	bls.w	8006904 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_SPI_TransmitReceive+0x140>
 800680a:	8a7b      	ldrh	r3, [r7, #18]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d16d      	bne.n	80068ec <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	881a      	ldrh	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	1c9a      	adds	r2, r3, #2
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006834:	e05a      	b.n	80068ec <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b02      	cmp	r3, #2
 8006842:	d11b      	bne.n	800687c <HAL_SPI_TransmitReceive+0x1ac>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d016      	beq.n	800687c <HAL_SPI_TransmitReceive+0x1ac>
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	2b01      	cmp	r3, #1
 8006852:	d113      	bne.n	800687c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	881a      	ldrh	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	1c9a      	adds	r2, r3, #2
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686e:	b29b      	uxth	r3, r3
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b01      	cmp	r3, #1
 8006888:	d11c      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x1f4>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d016      	beq.n	80068c4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	b292      	uxth	r2, r2
 80068a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	1c9a      	adds	r2, r3, #2
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068c0:	2301      	movs	r3, #1
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068c4:	f7fc fef4 	bl	80036b0 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d80b      	bhi.n	80068ec <HAL_SPI_TransmitReceive+0x21c>
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d007      	beq.n	80068ec <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80068ea:	e109      	b.n	8006b00 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d19f      	bne.n	8006836 <HAL_SPI_TransmitReceive+0x166>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d199      	bne.n	8006836 <HAL_SPI_TransmitReceive+0x166>
 8006902:	e0e3      	b.n	8006acc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_SPI_TransmitReceive+0x244>
 800690c:	8a7b      	ldrh	r3, [r7, #18]
 800690e:	2b01      	cmp	r3, #1
 8006910:	f040 80cf 	bne.w	8006ab2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006918:	b29b      	uxth	r3, r3
 800691a:	2b01      	cmp	r3, #1
 800691c:	d912      	bls.n	8006944 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	881a      	ldrh	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	1c9a      	adds	r2, r3, #2
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b02      	subs	r3, #2
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006942:	e0b6      	b.n	8006ab2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	7812      	ldrb	r2, [r2, #0]
 8006950:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800696a:	e0a2      	b.n	8006ab2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b02      	cmp	r3, #2
 8006978:	d134      	bne.n	80069e4 <HAL_SPI_TransmitReceive+0x314>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d02f      	beq.n	80069e4 <HAL_SPI_TransmitReceive+0x314>
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	2b01      	cmp	r3, #1
 8006988:	d12c      	bne.n	80069e4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b01      	cmp	r3, #1
 8006992:	d912      	bls.n	80069ba <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	881a      	ldrh	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	1c9a      	adds	r2, r3, #2
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b02      	subs	r3, #2
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069b8:	e012      	b.n	80069e0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	330c      	adds	r3, #12
 80069c4:	7812      	ldrb	r2, [r2, #0]
 80069c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d148      	bne.n	8006a84 <HAL_SPI_TransmitReceive+0x3b4>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d042      	beq.n	8006a84 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d923      	bls.n	8006a52 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	b292      	uxth	r2, r2
 8006a16:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	1c9a      	adds	r2, r3, #2
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b02      	subs	r3, #2
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d81f      	bhi.n	8006a80 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a4e:	605a      	str	r2, [r3, #4]
 8006a50:	e016      	b.n	8006a80 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f103 020c 	add.w	r2, r3, #12
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	7812      	ldrb	r2, [r2, #0]
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a80:	2301      	movs	r3, #1
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a84:	f7fc fe14 	bl	80036b0 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d803      	bhi.n	8006a9c <HAL_SPI_TransmitReceive+0x3cc>
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9a:	d102      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x3d2>
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d107      	bne.n	8006ab2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006ab0:	e026      	b.n	8006b00 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f47f af57 	bne.w	800696c <HAL_SPI_TransmitReceive+0x29c>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f47f af50 	bne.w	800696c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f995 	bl	8006e00 <SPI_EndRxTxTransaction>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af6:	e003      	b.n	8006b00 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3728      	adds	r7, #40	; 0x28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	4613      	mov	r3, r2
 8006b22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b24:	f7fc fdc4 	bl	80036b0 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	1a9b      	subs	r3, r3, r2
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	4413      	add	r3, r2
 8006b32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b34:	f7fc fdbc 	bl	80036b0 <HAL_GetTick>
 8006b38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b3a:	4b39      	ldr	r3, [pc, #228]	; (8006c20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	015b      	lsls	r3, r3, #5
 8006b40:	0d1b      	lsrs	r3, r3, #20
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	fb02 f303 	mul.w	r3, r2, r3
 8006b48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b4a:	e054      	b.n	8006bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b52:	d050      	beq.n	8006bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b54:	f7fc fdac 	bl	80036b0 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	69fa      	ldr	r2, [r7, #28]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d902      	bls.n	8006b6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d13d      	bne.n	8006be6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b82:	d111      	bne.n	8006ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b8c:	d004      	beq.n	8006b98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b96:	d107      	bne.n	8006ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb0:	d10f      	bne.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e017      	b.n	8006c16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	bf0c      	ite	eq
 8006c06:	2301      	moveq	r3, #1
 8006c08:	2300      	movne	r3, #0
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d19b      	bne.n	8006b4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3720      	adds	r7, #32
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	2000001c 	.word	0x2000001c

08006c24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08a      	sub	sp, #40	; 0x28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006c36:	f7fc fd3b 	bl	80036b0 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	1a9b      	subs	r3, r3, r2
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	4413      	add	r3, r2
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006c46:	f7fc fd33 	bl	80036b0 <HAL_GetTick>
 8006c4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	330c      	adds	r3, #12
 8006c52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c54:	4b3d      	ldr	r3, [pc, #244]	; (8006d4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	00da      	lsls	r2, r3, #3
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	0d1b      	lsrs	r3, r3, #20
 8006c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
 8006c6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c6c:	e060      	b.n	8006d30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c74:	d107      	bne.n	8006c86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d104      	bne.n	8006c86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8c:	d050      	beq.n	8006d30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c8e:	f7fc fd0f 	bl	80036b0 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d902      	bls.n	8006ca4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d13d      	bne.n	8006d20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cbc:	d111      	bne.n	8006ce2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc6:	d004      	beq.n	8006cd2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd0:	d107      	bne.n	8006ce2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ce0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cea:	d10f      	bne.n	8006d0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e010      	b.n	8006d42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689a      	ldr	r2, [r3, #8]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d196      	bne.n	8006c6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3728      	adds	r7, #40	; 0x28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	2000001c 	.word	0x2000001c

08006d50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d64:	d111      	bne.n	8006d8a <SPI_EndRxTransaction+0x3a>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6e:	d004      	beq.n	8006d7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d78:	d107      	bne.n	8006d8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d88:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2200      	movs	r2, #0
 8006d92:	2180      	movs	r1, #128	; 0x80
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7ff febd 	bl	8006b14 <SPI_WaitFlagStateUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d007      	beq.n	8006db0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da4:	f043 0220 	orr.w	r2, r3, #32
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e023      	b.n	8006df8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006db8:	d11d      	bne.n	8006df6 <SPI_EndRxTransaction+0xa6>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc2:	d004      	beq.n	8006dce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dcc:	d113      	bne.n	8006df6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff ff22 	bl	8006c24 <SPI_WaitFifoStateUntilTimeout>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d007      	beq.n	8006df6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dea:	f043 0220 	orr.w	r2, r3, #32
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e000      	b.n	8006df8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f7ff ff03 	bl	8006c24 <SPI_WaitFifoStateUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d007      	beq.n	8006e34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e28:	f043 0220 	orr.w	r2, r3, #32
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e027      	b.n	8006e84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2180      	movs	r1, #128	; 0x80
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff fe68 	bl	8006b14 <SPI_WaitFlagStateUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d007      	beq.n	8006e5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e4e:	f043 0220 	orr.w	r2, r3, #32
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e014      	b.n	8006e84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff fedc 	bl	8006c24 <SPI_WaitFifoStateUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d007      	beq.n	8006e82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e76:	f043 0220 	orr.w	r2, r3, #32
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e000      	b.n	8006e84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e049      	b.n	8006f32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fc f974 	bl	80031a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f000 fd44 	bl	8007958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e049      	b.n	8006fe0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d106      	bne.n	8006f66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f841 	bl	8006fe8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2202      	movs	r2, #2
 8006f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f000 fced 	bl	8007958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d109      	bne.n	8007020 <HAL_TIM_PWM_Start+0x24>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	bf14      	ite	ne
 8007018:	2301      	movne	r3, #1
 800701a:	2300      	moveq	r3, #0
 800701c:	b2db      	uxtb	r3, r3
 800701e:	e03c      	b.n	800709a <HAL_TIM_PWM_Start+0x9e>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b04      	cmp	r3, #4
 8007024:	d109      	bne.n	800703a <HAL_TIM_PWM_Start+0x3e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b01      	cmp	r3, #1
 8007030:	bf14      	ite	ne
 8007032:	2301      	movne	r3, #1
 8007034:	2300      	moveq	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	e02f      	b.n	800709a <HAL_TIM_PWM_Start+0x9e>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b08      	cmp	r3, #8
 800703e:	d109      	bne.n	8007054 <HAL_TIM_PWM_Start+0x58>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b01      	cmp	r3, #1
 800704a:	bf14      	ite	ne
 800704c:	2301      	movne	r3, #1
 800704e:	2300      	moveq	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	e022      	b.n	800709a <HAL_TIM_PWM_Start+0x9e>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b0c      	cmp	r3, #12
 8007058:	d109      	bne.n	800706e <HAL_TIM_PWM_Start+0x72>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b01      	cmp	r3, #1
 8007064:	bf14      	ite	ne
 8007066:	2301      	movne	r3, #1
 8007068:	2300      	moveq	r3, #0
 800706a:	b2db      	uxtb	r3, r3
 800706c:	e015      	b.n	800709a <HAL_TIM_PWM_Start+0x9e>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b10      	cmp	r3, #16
 8007072:	d109      	bne.n	8007088 <HAL_TIM_PWM_Start+0x8c>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b01      	cmp	r3, #1
 800707e:	bf14      	ite	ne
 8007080:	2301      	movne	r3, #1
 8007082:	2300      	moveq	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	e008      	b.n	800709a <HAL_TIM_PWM_Start+0x9e>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	bf14      	ite	ne
 8007094:	2301      	movne	r3, #1
 8007096:	2300      	moveq	r3, #0
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e09c      	b.n	80071dc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <HAL_TIM_PWM_Start+0xb6>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070b0:	e023      	b.n	80070fa <HAL_TIM_PWM_Start+0xfe>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d104      	bne.n	80070c2 <HAL_TIM_PWM_Start+0xc6>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070c0:	e01b      	b.n	80070fa <HAL_TIM_PWM_Start+0xfe>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d104      	bne.n	80070d2 <HAL_TIM_PWM_Start+0xd6>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070d0:	e013      	b.n	80070fa <HAL_TIM_PWM_Start+0xfe>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b0c      	cmp	r3, #12
 80070d6:	d104      	bne.n	80070e2 <HAL_TIM_PWM_Start+0xe6>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070e0:	e00b      	b.n	80070fa <HAL_TIM_PWM_Start+0xfe>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b10      	cmp	r3, #16
 80070e6:	d104      	bne.n	80070f2 <HAL_TIM_PWM_Start+0xf6>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070f0:	e003      	b.n	80070fa <HAL_TIM_PWM_Start+0xfe>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2202      	movs	r2, #2
 80070f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2201      	movs	r2, #1
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f832 	bl	800816c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a35      	ldr	r2, [pc, #212]	; (80071e4 <HAL_TIM_PWM_Start+0x1e8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d013      	beq.n	800713a <HAL_TIM_PWM_Start+0x13e>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a34      	ldr	r2, [pc, #208]	; (80071e8 <HAL_TIM_PWM_Start+0x1ec>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00e      	beq.n	800713a <HAL_TIM_PWM_Start+0x13e>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a32      	ldr	r2, [pc, #200]	; (80071ec <HAL_TIM_PWM_Start+0x1f0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d009      	beq.n	800713a <HAL_TIM_PWM_Start+0x13e>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a31      	ldr	r2, [pc, #196]	; (80071f0 <HAL_TIM_PWM_Start+0x1f4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d004      	beq.n	800713a <HAL_TIM_PWM_Start+0x13e>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a2f      	ldr	r2, [pc, #188]	; (80071f4 <HAL_TIM_PWM_Start+0x1f8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d101      	bne.n	800713e <HAL_TIM_PWM_Start+0x142>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <HAL_TIM_PWM_Start+0x144>
 800713e:	2300      	movs	r3, #0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007152:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <HAL_TIM_PWM_Start+0x1e8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d01d      	beq.n	800719a <HAL_TIM_PWM_Start+0x19e>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007166:	d018      	beq.n	800719a <HAL_TIM_PWM_Start+0x19e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a22      	ldr	r2, [pc, #136]	; (80071f8 <HAL_TIM_PWM_Start+0x1fc>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d013      	beq.n	800719a <HAL_TIM_PWM_Start+0x19e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a21      	ldr	r2, [pc, #132]	; (80071fc <HAL_TIM_PWM_Start+0x200>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00e      	beq.n	800719a <HAL_TIM_PWM_Start+0x19e>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <HAL_TIM_PWM_Start+0x204>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d009      	beq.n	800719a <HAL_TIM_PWM_Start+0x19e>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a17      	ldr	r2, [pc, #92]	; (80071e8 <HAL_TIM_PWM_Start+0x1ec>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d004      	beq.n	800719a <HAL_TIM_PWM_Start+0x19e>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a15      	ldr	r2, [pc, #84]	; (80071ec <HAL_TIM_PWM_Start+0x1f0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d115      	bne.n	80071c6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	4b18      	ldr	r3, [pc, #96]	; (8007204 <HAL_TIM_PWM_Start+0x208>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b06      	cmp	r3, #6
 80071aa:	d015      	beq.n	80071d8 <HAL_TIM_PWM_Start+0x1dc>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b2:	d011      	beq.n	80071d8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c4:	e008      	b.n	80071d8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 0201 	orr.w	r2, r2, #1
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	e000      	b.n	80071da <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	40012c00 	.word	0x40012c00
 80071e8:	40013400 	.word	0x40013400
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800
 80071f8:	40000400 	.word	0x40000400
 80071fc:	40000800 	.word	0x40000800
 8007200:	40000c00 	.word	0x40000c00
 8007204:	00010007 	.word	0x00010007

08007208 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2200      	movs	r2, #0
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f000 ffa6 	bl	800816c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a3e      	ldr	r2, [pc, #248]	; (8007320 <HAL_TIM_PWM_Stop+0x118>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d013      	beq.n	8007252 <HAL_TIM_PWM_Stop+0x4a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a3d      	ldr	r2, [pc, #244]	; (8007324 <HAL_TIM_PWM_Stop+0x11c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00e      	beq.n	8007252 <HAL_TIM_PWM_Stop+0x4a>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a3b      	ldr	r2, [pc, #236]	; (8007328 <HAL_TIM_PWM_Stop+0x120>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d009      	beq.n	8007252 <HAL_TIM_PWM_Stop+0x4a>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a3a      	ldr	r2, [pc, #232]	; (800732c <HAL_TIM_PWM_Stop+0x124>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d004      	beq.n	8007252 <HAL_TIM_PWM_Stop+0x4a>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a38      	ldr	r2, [pc, #224]	; (8007330 <HAL_TIM_PWM_Stop+0x128>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d101      	bne.n	8007256 <HAL_TIM_PWM_Stop+0x4e>
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <HAL_TIM_PWM_Stop+0x50>
 8007256:	2300      	movs	r3, #0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d017      	beq.n	800728c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	f241 1311 	movw	r3, #4369	; 0x1111
 8007266:	4013      	ands	r3, r2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10f      	bne.n	800728c <HAL_TIM_PWM_Stop+0x84>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6a1a      	ldr	r2, [r3, #32]
 8007272:	f240 4344 	movw	r3, #1092	; 0x444
 8007276:	4013      	ands	r3, r2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d107      	bne.n	800728c <HAL_TIM_PWM_Stop+0x84>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800728a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6a1a      	ldr	r2, [r3, #32]
 8007292:	f241 1311 	movw	r3, #4369	; 0x1111
 8007296:	4013      	ands	r3, r2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10f      	bne.n	80072bc <HAL_TIM_PWM_Stop+0xb4>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6a1a      	ldr	r2, [r3, #32]
 80072a2:	f240 4344 	movw	r3, #1092	; 0x444
 80072a6:	4013      	ands	r3, r2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d107      	bne.n	80072bc <HAL_TIM_PWM_Stop+0xb4>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0201 	bic.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d104      	bne.n	80072cc <HAL_TIM_PWM_Stop+0xc4>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072ca:	e023      	b.n	8007314 <HAL_TIM_PWM_Stop+0x10c>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d104      	bne.n	80072dc <HAL_TIM_PWM_Stop+0xd4>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072da:	e01b      	b.n	8007314 <HAL_TIM_PWM_Stop+0x10c>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d104      	bne.n	80072ec <HAL_TIM_PWM_Stop+0xe4>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072ea:	e013      	b.n	8007314 <HAL_TIM_PWM_Stop+0x10c>
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b0c      	cmp	r3, #12
 80072f0:	d104      	bne.n	80072fc <HAL_TIM_PWM_Stop+0xf4>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072fa:	e00b      	b.n	8007314 <HAL_TIM_PWM_Stop+0x10c>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b10      	cmp	r3, #16
 8007300:	d104      	bne.n	800730c <HAL_TIM_PWM_Stop+0x104>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800730a:	e003      	b.n	8007314 <HAL_TIM_PWM_Stop+0x10c>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	40012c00 	.word	0x40012c00
 8007324:	40013400 	.word	0x40013400
 8007328:	40014000 	.word	0x40014000
 800732c:	40014400 	.word	0x40014400
 8007330:	40014800 	.word	0x40014800

08007334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d020      	beq.n	8007398 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01b      	beq.n	8007398 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0202 	mvn.w	r2, #2
 8007368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 facb 	bl	800791a <HAL_TIM_IC_CaptureCallback>
 8007384:	e005      	b.n	8007392 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fabd 	bl	8007906 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 face 	bl	800792e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 0304 	and.w	r3, r3, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d020      	beq.n	80073e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01b      	beq.n	80073e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0204 	mvn.w	r2, #4
 80073b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2202      	movs	r2, #2
 80073ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 faa5 	bl	800791a <HAL_TIM_IC_CaptureCallback>
 80073d0:	e005      	b.n	80073de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa97 	bl	8007906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 faa8 	bl	800792e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d020      	beq.n	8007430 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01b      	beq.n	8007430 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0208 	mvn.w	r2, #8
 8007400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2204      	movs	r2, #4
 8007406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa7f 	bl	800791a <HAL_TIM_IC_CaptureCallback>
 800741c:	e005      	b.n	800742a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa71 	bl	8007906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fa82 	bl	800792e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f003 0310 	and.w	r3, r3, #16
 8007436:	2b00      	cmp	r3, #0
 8007438:	d020      	beq.n	800747c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f003 0310 	and.w	r3, r3, #16
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01b      	beq.n	800747c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0210 	mvn.w	r2, #16
 800744c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2208      	movs	r2, #8
 8007452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fa59 	bl	800791a <HAL_TIM_IC_CaptureCallback>
 8007468:	e005      	b.n	8007476 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa4b 	bl	8007906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fa5c 	bl	800792e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00c      	beq.n	80074a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	d007      	beq.n	80074a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0201 	mvn.w	r2, #1
 8007498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa29 	bl	80078f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00c      	beq.n	80074c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d007      	beq.n	80074c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 ff0c 	bl	80082dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00c      	beq.n	80074e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d007      	beq.n	80074e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 ff04 	bl	80082f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00c      	beq.n	800750c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d007      	beq.n	800750c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fa1b 	bl	8007942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f003 0320 	and.w	r3, r3, #32
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00c      	beq.n	8007530 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f003 0320 	and.w	r3, r3, #32
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f06f 0220 	mvn.w	r2, #32
 8007528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fecc 	bl	80082c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007530:	bf00      	nop
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007552:	2302      	movs	r3, #2
 8007554:	e0ff      	b.n	8007756 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b14      	cmp	r3, #20
 8007562:	f200 80f0 	bhi.w	8007746 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007566:	a201      	add	r2, pc, #4	; (adr r2, 800756c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	080075c1 	.word	0x080075c1
 8007570:	08007747 	.word	0x08007747
 8007574:	08007747 	.word	0x08007747
 8007578:	08007747 	.word	0x08007747
 800757c:	08007601 	.word	0x08007601
 8007580:	08007747 	.word	0x08007747
 8007584:	08007747 	.word	0x08007747
 8007588:	08007747 	.word	0x08007747
 800758c:	08007643 	.word	0x08007643
 8007590:	08007747 	.word	0x08007747
 8007594:	08007747 	.word	0x08007747
 8007598:	08007747 	.word	0x08007747
 800759c:	08007683 	.word	0x08007683
 80075a0:	08007747 	.word	0x08007747
 80075a4:	08007747 	.word	0x08007747
 80075a8:	08007747 	.word	0x08007747
 80075ac:	080076c5 	.word	0x080076c5
 80075b0:	08007747 	.word	0x08007747
 80075b4:	08007747 	.word	0x08007747
 80075b8:	08007747 	.word	0x08007747
 80075bc:	08007705 	.word	0x08007705
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68b9      	ldr	r1, [r7, #8]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fa60 	bl	8007a8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699a      	ldr	r2, [r3, #24]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0208 	orr.w	r2, r2, #8
 80075da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	699a      	ldr	r2, [r3, #24]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0204 	bic.w	r2, r2, #4
 80075ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6999      	ldr	r1, [r3, #24]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	691a      	ldr	r2, [r3, #16]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	619a      	str	r2, [r3, #24]
      break;
 80075fe:	e0a5      	b.n	800774c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fad0 	bl	8007bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699a      	ldr	r2, [r3, #24]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800761a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800762a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6999      	ldr	r1, [r3, #24]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	021a      	lsls	r2, r3, #8
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	619a      	str	r2, [r3, #24]
      break;
 8007640:	e084      	b.n	800774c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68b9      	ldr	r1, [r7, #8]
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fb39 	bl	8007cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69da      	ldr	r2, [r3, #28]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f042 0208 	orr.w	r2, r2, #8
 800765c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	69da      	ldr	r2, [r3, #28]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0204 	bic.w	r2, r2, #4
 800766c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	69d9      	ldr	r1, [r3, #28]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	691a      	ldr	r2, [r3, #16]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	61da      	str	r2, [r3, #28]
      break;
 8007680:	e064      	b.n	800774c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68b9      	ldr	r1, [r7, #8]
 8007688:	4618      	mov	r0, r3
 800768a:	f000 fba1 	bl	8007dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800769c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69da      	ldr	r2, [r3, #28]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69d9      	ldr	r1, [r3, #28]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	021a      	lsls	r2, r3, #8
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	61da      	str	r2, [r3, #28]
      break;
 80076c2:	e043      	b.n	800774c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 fbea 	bl	8007ea4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0208 	orr.w	r2, r2, #8
 80076de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0204 	bic.w	r2, r2, #4
 80076ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	691a      	ldr	r2, [r3, #16]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007702:	e023      	b.n	800774c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	4618      	mov	r0, r3
 800770c:	f000 fc2e 	bl	8007f6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800771e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800772e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	021a      	lsls	r2, r3, #8
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007744:	e002      	b.n	800774c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	75fb      	strb	r3, [r7, #23]
      break;
 800774a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop

08007760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007774:	2b01      	cmp	r3, #1
 8007776:	d101      	bne.n	800777c <HAL_TIM_ConfigClockSource+0x1c>
 8007778:	2302      	movs	r3, #2
 800777a:	e0b6      	b.n	80078ea <HAL_TIM_ConfigClockSource+0x18a>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800779a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800779e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b8:	d03e      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0xd8>
 80077ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077be:	f200 8087 	bhi.w	80078d0 <HAL_TIM_ConfigClockSource+0x170>
 80077c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c6:	f000 8086 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x176>
 80077ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ce:	d87f      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x170>
 80077d0:	2b70      	cmp	r3, #112	; 0x70
 80077d2:	d01a      	beq.n	800780a <HAL_TIM_ConfigClockSource+0xaa>
 80077d4:	2b70      	cmp	r3, #112	; 0x70
 80077d6:	d87b      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x170>
 80077d8:	2b60      	cmp	r3, #96	; 0x60
 80077da:	d050      	beq.n	800787e <HAL_TIM_ConfigClockSource+0x11e>
 80077dc:	2b60      	cmp	r3, #96	; 0x60
 80077de:	d877      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x170>
 80077e0:	2b50      	cmp	r3, #80	; 0x50
 80077e2:	d03c      	beq.n	800785e <HAL_TIM_ConfigClockSource+0xfe>
 80077e4:	2b50      	cmp	r3, #80	; 0x50
 80077e6:	d873      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x170>
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d058      	beq.n	800789e <HAL_TIM_ConfigClockSource+0x13e>
 80077ec:	2b40      	cmp	r3, #64	; 0x40
 80077ee:	d86f      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x170>
 80077f0:	2b30      	cmp	r3, #48	; 0x30
 80077f2:	d064      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x15e>
 80077f4:	2b30      	cmp	r3, #48	; 0x30
 80077f6:	d86b      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x170>
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d060      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x15e>
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d867      	bhi.n	80078d0 <HAL_TIM_ConfigClockSource+0x170>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d05c      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x15e>
 8007804:	2b10      	cmp	r3, #16
 8007806:	d05a      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x15e>
 8007808:	e062      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800781a:	f000 fc87 	bl	800812c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800782c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	609a      	str	r2, [r3, #8]
      break;
 8007836:	e04f      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007848:	f000 fc70 	bl	800812c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800785a:	609a      	str	r2, [r3, #8]
      break;
 800785c:	e03c      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800786a:	461a      	mov	r2, r3
 800786c:	f000 fbe4 	bl	8008038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2150      	movs	r1, #80	; 0x50
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fc3d 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 800787c:	e02c      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800788a:	461a      	mov	r2, r3
 800788c:	f000 fc03 	bl	8008096 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2160      	movs	r1, #96	; 0x60
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fc2d 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 800789c:	e01c      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078aa:	461a      	mov	r2, r3
 80078ac:	f000 fbc4 	bl	8008038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2140      	movs	r1, #64	; 0x40
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fc1d 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 80078bc:	e00c      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f000 fc14 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 80078ce:	e003      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73fb      	strb	r3, [r7, #15]
      break;
 80078d4:	e000      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80078d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
	...

08007958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a40      	ldr	r2, [pc, #256]	; (8007a6c <TIM_Base_SetConfig+0x114>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d013      	beq.n	8007998 <TIM_Base_SetConfig+0x40>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007976:	d00f      	beq.n	8007998 <TIM_Base_SetConfig+0x40>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a3d      	ldr	r2, [pc, #244]	; (8007a70 <TIM_Base_SetConfig+0x118>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00b      	beq.n	8007998 <TIM_Base_SetConfig+0x40>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a3c      	ldr	r2, [pc, #240]	; (8007a74 <TIM_Base_SetConfig+0x11c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d007      	beq.n	8007998 <TIM_Base_SetConfig+0x40>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a3b      	ldr	r2, [pc, #236]	; (8007a78 <TIM_Base_SetConfig+0x120>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d003      	beq.n	8007998 <TIM_Base_SetConfig+0x40>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a3a      	ldr	r2, [pc, #232]	; (8007a7c <TIM_Base_SetConfig+0x124>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d108      	bne.n	80079aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a2f      	ldr	r2, [pc, #188]	; (8007a6c <TIM_Base_SetConfig+0x114>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d01f      	beq.n	80079f2 <TIM_Base_SetConfig+0x9a>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b8:	d01b      	beq.n	80079f2 <TIM_Base_SetConfig+0x9a>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a2c      	ldr	r2, [pc, #176]	; (8007a70 <TIM_Base_SetConfig+0x118>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d017      	beq.n	80079f2 <TIM_Base_SetConfig+0x9a>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a2b      	ldr	r2, [pc, #172]	; (8007a74 <TIM_Base_SetConfig+0x11c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d013      	beq.n	80079f2 <TIM_Base_SetConfig+0x9a>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a2a      	ldr	r2, [pc, #168]	; (8007a78 <TIM_Base_SetConfig+0x120>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00f      	beq.n	80079f2 <TIM_Base_SetConfig+0x9a>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a29      	ldr	r2, [pc, #164]	; (8007a7c <TIM_Base_SetConfig+0x124>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d00b      	beq.n	80079f2 <TIM_Base_SetConfig+0x9a>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a28      	ldr	r2, [pc, #160]	; (8007a80 <TIM_Base_SetConfig+0x128>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d007      	beq.n	80079f2 <TIM_Base_SetConfig+0x9a>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a27      	ldr	r2, [pc, #156]	; (8007a84 <TIM_Base_SetConfig+0x12c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d003      	beq.n	80079f2 <TIM_Base_SetConfig+0x9a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a26      	ldr	r2, [pc, #152]	; (8007a88 <TIM_Base_SetConfig+0x130>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d108      	bne.n	8007a04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a10      	ldr	r2, [pc, #64]	; (8007a6c <TIM_Base_SetConfig+0x114>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00f      	beq.n	8007a50 <TIM_Base_SetConfig+0xf8>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a12      	ldr	r2, [pc, #72]	; (8007a7c <TIM_Base_SetConfig+0x124>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00b      	beq.n	8007a50 <TIM_Base_SetConfig+0xf8>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a11      	ldr	r2, [pc, #68]	; (8007a80 <TIM_Base_SetConfig+0x128>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d007      	beq.n	8007a50 <TIM_Base_SetConfig+0xf8>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a10      	ldr	r2, [pc, #64]	; (8007a84 <TIM_Base_SetConfig+0x12c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d003      	beq.n	8007a50 <TIM_Base_SetConfig+0xf8>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a0f      	ldr	r2, [pc, #60]	; (8007a88 <TIM_Base_SetConfig+0x130>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d103      	bne.n	8007a58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	691a      	ldr	r2, [r3, #16]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	615a      	str	r2, [r3, #20]
}
 8007a5e:	bf00      	nop
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	40012c00 	.word	0x40012c00
 8007a70:	40000400 	.word	0x40000400
 8007a74:	40000800 	.word	0x40000800
 8007a78:	40000c00 	.word	0x40000c00
 8007a7c:	40013400 	.word	0x40013400
 8007a80:	40014000 	.word	0x40014000
 8007a84:	40014400 	.word	0x40014400
 8007a88:	40014800 	.word	0x40014800

08007a8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	f023 0201 	bic.w	r2, r3, #1
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 0303 	bic.w	r3, r3, #3
 8007ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f023 0302 	bic.w	r3, r3, #2
 8007ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a2c      	ldr	r2, [pc, #176]	; (8007b98 <TIM_OC1_SetConfig+0x10c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00f      	beq.n	8007b0c <TIM_OC1_SetConfig+0x80>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a2b      	ldr	r2, [pc, #172]	; (8007b9c <TIM_OC1_SetConfig+0x110>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00b      	beq.n	8007b0c <TIM_OC1_SetConfig+0x80>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a2a      	ldr	r2, [pc, #168]	; (8007ba0 <TIM_OC1_SetConfig+0x114>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d007      	beq.n	8007b0c <TIM_OC1_SetConfig+0x80>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a29      	ldr	r2, [pc, #164]	; (8007ba4 <TIM_OC1_SetConfig+0x118>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d003      	beq.n	8007b0c <TIM_OC1_SetConfig+0x80>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a28      	ldr	r2, [pc, #160]	; (8007ba8 <TIM_OC1_SetConfig+0x11c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d10c      	bne.n	8007b26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f023 0308 	bic.w	r3, r3, #8
 8007b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f023 0304 	bic.w	r3, r3, #4
 8007b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a1b      	ldr	r2, [pc, #108]	; (8007b98 <TIM_OC1_SetConfig+0x10c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00f      	beq.n	8007b4e <TIM_OC1_SetConfig+0xc2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a1a      	ldr	r2, [pc, #104]	; (8007b9c <TIM_OC1_SetConfig+0x110>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00b      	beq.n	8007b4e <TIM_OC1_SetConfig+0xc2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a19      	ldr	r2, [pc, #100]	; (8007ba0 <TIM_OC1_SetConfig+0x114>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d007      	beq.n	8007b4e <TIM_OC1_SetConfig+0xc2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a18      	ldr	r2, [pc, #96]	; (8007ba4 <TIM_OC1_SetConfig+0x118>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d003      	beq.n	8007b4e <TIM_OC1_SetConfig+0xc2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a17      	ldr	r2, [pc, #92]	; (8007ba8 <TIM_OC1_SetConfig+0x11c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d111      	bne.n	8007b72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	621a      	str	r2, [r3, #32]
}
 8007b8c:	bf00      	nop
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	40012c00 	.word	0x40012c00
 8007b9c:	40013400 	.word	0x40013400
 8007ba0:	40014000 	.word	0x40014000
 8007ba4:	40014400 	.word	0x40014400
 8007ba8:	40014800 	.word	0x40014800

08007bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	f023 0210 	bic.w	r2, r3, #16
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	021b      	lsls	r3, r3, #8
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f023 0320 	bic.w	r3, r3, #32
 8007bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	011b      	lsls	r3, r3, #4
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a28      	ldr	r2, [pc, #160]	; (8007cac <TIM_OC2_SetConfig+0x100>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d003      	beq.n	8007c18 <TIM_OC2_SetConfig+0x6c>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a27      	ldr	r2, [pc, #156]	; (8007cb0 <TIM_OC2_SetConfig+0x104>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d10d      	bne.n	8007c34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a1d      	ldr	r2, [pc, #116]	; (8007cac <TIM_OC2_SetConfig+0x100>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d00f      	beq.n	8007c5c <TIM_OC2_SetConfig+0xb0>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a1c      	ldr	r2, [pc, #112]	; (8007cb0 <TIM_OC2_SetConfig+0x104>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00b      	beq.n	8007c5c <TIM_OC2_SetConfig+0xb0>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a1b      	ldr	r2, [pc, #108]	; (8007cb4 <TIM_OC2_SetConfig+0x108>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d007      	beq.n	8007c5c <TIM_OC2_SetConfig+0xb0>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a1a      	ldr	r2, [pc, #104]	; (8007cb8 <TIM_OC2_SetConfig+0x10c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d003      	beq.n	8007c5c <TIM_OC2_SetConfig+0xb0>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a19      	ldr	r2, [pc, #100]	; (8007cbc <TIM_OC2_SetConfig+0x110>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d113      	bne.n	8007c84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	621a      	str	r2, [r3, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40012c00 	.word	0x40012c00
 8007cb0:	40013400 	.word	0x40013400
 8007cb4:	40014000 	.word	0x40014000
 8007cb8:	40014400 	.word	0x40014400
 8007cbc:	40014800 	.word	0x40014800

08007cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0303 	bic.w	r3, r3, #3
 8007cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a27      	ldr	r2, [pc, #156]	; (8007dbc <TIM_OC3_SetConfig+0xfc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d003      	beq.n	8007d2a <TIM_OC3_SetConfig+0x6a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a26      	ldr	r2, [pc, #152]	; (8007dc0 <TIM_OC3_SetConfig+0x100>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d10d      	bne.n	8007d46 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a1c      	ldr	r2, [pc, #112]	; (8007dbc <TIM_OC3_SetConfig+0xfc>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d00f      	beq.n	8007d6e <TIM_OC3_SetConfig+0xae>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a1b      	ldr	r2, [pc, #108]	; (8007dc0 <TIM_OC3_SetConfig+0x100>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d00b      	beq.n	8007d6e <TIM_OC3_SetConfig+0xae>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a1a      	ldr	r2, [pc, #104]	; (8007dc4 <TIM_OC3_SetConfig+0x104>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d007      	beq.n	8007d6e <TIM_OC3_SetConfig+0xae>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a19      	ldr	r2, [pc, #100]	; (8007dc8 <TIM_OC3_SetConfig+0x108>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d003      	beq.n	8007d6e <TIM_OC3_SetConfig+0xae>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a18      	ldr	r2, [pc, #96]	; (8007dcc <TIM_OC3_SetConfig+0x10c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d113      	bne.n	8007d96 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	621a      	str	r2, [r3, #32]
}
 8007db0:	bf00      	nop
 8007db2:	371c      	adds	r7, #28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	40012c00 	.word	0x40012c00
 8007dc0:	40013400 	.word	0x40013400
 8007dc4:	40014000 	.word	0x40014000
 8007dc8:	40014400 	.word	0x40014400
 8007dcc:	40014800 	.word	0x40014800

08007dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	021b      	lsls	r3, r3, #8
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	031b      	lsls	r3, r3, #12
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a18      	ldr	r2, [pc, #96]	; (8007e90 <TIM_OC4_SetConfig+0xc0>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00f      	beq.n	8007e54 <TIM_OC4_SetConfig+0x84>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a17      	ldr	r2, [pc, #92]	; (8007e94 <TIM_OC4_SetConfig+0xc4>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00b      	beq.n	8007e54 <TIM_OC4_SetConfig+0x84>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a16      	ldr	r2, [pc, #88]	; (8007e98 <TIM_OC4_SetConfig+0xc8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d007      	beq.n	8007e54 <TIM_OC4_SetConfig+0x84>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a15      	ldr	r2, [pc, #84]	; (8007e9c <TIM_OC4_SetConfig+0xcc>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_OC4_SetConfig+0x84>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a14      	ldr	r2, [pc, #80]	; (8007ea0 <TIM_OC4_SetConfig+0xd0>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d109      	bne.n	8007e68 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	019b      	lsls	r3, r3, #6
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	40012c00 	.word	0x40012c00
 8007e94:	40013400 	.word	0x40013400
 8007e98:	40014000 	.word	0x40014000
 8007e9c:	40014400 	.word	0x40014400
 8007ea0:	40014800 	.word	0x40014800

08007ea4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ee8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	041b      	lsls	r3, r3, #16
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a17      	ldr	r2, [pc, #92]	; (8007f58 <TIM_OC5_SetConfig+0xb4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00f      	beq.n	8007f1e <TIM_OC5_SetConfig+0x7a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a16      	ldr	r2, [pc, #88]	; (8007f5c <TIM_OC5_SetConfig+0xb8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00b      	beq.n	8007f1e <TIM_OC5_SetConfig+0x7a>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a15      	ldr	r2, [pc, #84]	; (8007f60 <TIM_OC5_SetConfig+0xbc>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d007      	beq.n	8007f1e <TIM_OC5_SetConfig+0x7a>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a14      	ldr	r2, [pc, #80]	; (8007f64 <TIM_OC5_SetConfig+0xc0>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d003      	beq.n	8007f1e <TIM_OC5_SetConfig+0x7a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a13      	ldr	r2, [pc, #76]	; (8007f68 <TIM_OC5_SetConfig+0xc4>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d109      	bne.n	8007f32 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	021b      	lsls	r3, r3, #8
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	621a      	str	r2, [r3, #32]
}
 8007f4c:	bf00      	nop
 8007f4e:	371c      	adds	r7, #28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	40012c00 	.word	0x40012c00
 8007f5c:	40013400 	.word	0x40013400
 8007f60:	40014000 	.word	0x40014000
 8007f64:	40014400 	.word	0x40014400
 8007f68:	40014800 	.word	0x40014800

08007f6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	021b      	lsls	r3, r3, #8
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	051b      	lsls	r3, r3, #20
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a18      	ldr	r2, [pc, #96]	; (8008024 <TIM_OC6_SetConfig+0xb8>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d00f      	beq.n	8007fe8 <TIM_OC6_SetConfig+0x7c>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a17      	ldr	r2, [pc, #92]	; (8008028 <TIM_OC6_SetConfig+0xbc>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00b      	beq.n	8007fe8 <TIM_OC6_SetConfig+0x7c>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a16      	ldr	r2, [pc, #88]	; (800802c <TIM_OC6_SetConfig+0xc0>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d007      	beq.n	8007fe8 <TIM_OC6_SetConfig+0x7c>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a15      	ldr	r2, [pc, #84]	; (8008030 <TIM_OC6_SetConfig+0xc4>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d003      	beq.n	8007fe8 <TIM_OC6_SetConfig+0x7c>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a14      	ldr	r2, [pc, #80]	; (8008034 <TIM_OC6_SetConfig+0xc8>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d109      	bne.n	8007ffc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	029b      	lsls	r3, r3, #10
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	621a      	str	r2, [r3, #32]
}
 8008016:	bf00      	nop
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	40012c00 	.word	0x40012c00
 8008028:	40013400 	.word	0x40013400
 800802c:	40014000 	.word	0x40014000
 8008030:	40014400 	.word	0x40014400
 8008034:	40014800 	.word	0x40014800

08008038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	f023 0201 	bic.w	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f023 030a 	bic.w	r3, r3, #10
 8008074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4313      	orrs	r3, r2
 800807c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	621a      	str	r2, [r3, #32]
}
 800808a:	bf00      	nop
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008096:	b480      	push	{r7}
 8008098:	b087      	sub	sp, #28
 800809a:	af00      	add	r7, sp, #0
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	f023 0210 	bic.w	r2, r3, #16
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	031b      	lsls	r3, r3, #12
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4313      	orrs	r3, r2
 8008114:	f043 0307 	orr.w	r3, r3, #7
 8008118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	609a      	str	r2, [r3, #8]
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800812c:	b480      	push	{r7}
 800812e:	b087      	sub	sp, #28
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
 8008138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	021a      	lsls	r2, r3, #8
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	431a      	orrs	r2, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	4313      	orrs	r3, r2
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	609a      	str	r2, [r3, #8]
}
 8008160:	bf00      	nop
 8008162:	371c      	adds	r7, #28
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f003 031f 	and.w	r3, r3, #31
 800817e:	2201      	movs	r2, #1
 8008180:	fa02 f303 	lsl.w	r3, r2, r3
 8008184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a1a      	ldr	r2, [r3, #32]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	43db      	mvns	r3, r3
 800818e:	401a      	ands	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a1a      	ldr	r2, [r3, #32]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f003 031f 	and.w	r3, r3, #31
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	fa01 f303 	lsl.w	r3, r1, r3
 80081a4:	431a      	orrs	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	621a      	str	r2, [r3, #32]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
	...

080081b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e068      	b.n	80082a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a2e      	ldr	r2, [pc, #184]	; (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d004      	beq.n	8008204 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a2d      	ldr	r2, [pc, #180]	; (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d108      	bne.n	8008216 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800820a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	4313      	orrs	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800821c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4313      	orrs	r3, r2
 8008226:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a1e      	ldr	r2, [pc, #120]	; (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d01d      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008242:	d018      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a1b      	ldr	r2, [pc, #108]	; (80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d013      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a1a      	ldr	r2, [pc, #104]	; (80082bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d00e      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a18      	ldr	r2, [pc, #96]	; (80082c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d009      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a13      	ldr	r2, [pc, #76]	; (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d004      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a14      	ldr	r2, [pc, #80]	; (80082c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d10c      	bne.n	8008290 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800827c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	4313      	orrs	r3, r2
 8008286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	40012c00 	.word	0x40012c00
 80082b4:	40013400 	.word	0x40013400
 80082b8:	40000400 	.word	0x40000400
 80082bc:	40000800 	.word	0x40000800
 80082c0:	40000c00 	.word	0x40000c00
 80082c4:	40014000 	.word	0x40014000

080082c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e040      	b.n	8008398 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d106      	bne.n	800832c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7fa ff92 	bl	8003250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2224      	movs	r2, #36	; 0x24
 8008330:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0201 	bic.w	r2, r2, #1
 8008340:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fc34 	bl	8008bb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f979 	bl	8008648 <UART_SetConfig>
 8008356:	4603      	mov	r3, r0
 8008358:	2b01      	cmp	r3, #1
 800835a:	d101      	bne.n	8008360 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e01b      	b.n	8008398 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800836e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689a      	ldr	r2, [r3, #8]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800837e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f042 0201 	orr.w	r2, r2, #1
 800838e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fcb3 	bl	8008cfc <UART_CheckIdleState>
 8008396:	4603      	mov	r3, r0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b08a      	sub	sp, #40	; 0x28
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	4613      	mov	r3, r2
 80083ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	d178      	bne.n	80084aa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <HAL_UART_Transmit+0x24>
 80083be:	88fb      	ldrh	r3, [r7, #6]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e071      	b.n	80084ac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2221      	movs	r2, #33	; 0x21
 80083d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083d6:	f7fb f96b 	bl	80036b0 <HAL_GetTick>
 80083da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	88fa      	ldrh	r2, [r7, #6]
 80083e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	88fa      	ldrh	r2, [r7, #6]
 80083e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f4:	d108      	bne.n	8008408 <HAL_UART_Transmit+0x68>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d104      	bne.n	8008408 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80083fe:	2300      	movs	r3, #0
 8008400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	61bb      	str	r3, [r7, #24]
 8008406:	e003      	b.n	8008410 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800840c:	2300      	movs	r3, #0
 800840e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008410:	e030      	b.n	8008474 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2200      	movs	r2, #0
 800841a:	2180      	movs	r1, #128	; 0x80
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 fd15 	bl	8008e4c <UART_WaitOnFlagUntilTimeout>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d004      	beq.n	8008432 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2220      	movs	r2, #32
 800842c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e03c      	b.n	80084ac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10b      	bne.n	8008450 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	881a      	ldrh	r2, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008444:	b292      	uxth	r2, r2
 8008446:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	3302      	adds	r3, #2
 800844c:	61bb      	str	r3, [r7, #24]
 800844e:	e008      	b.n	8008462 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	781a      	ldrb	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	b292      	uxth	r2, r2
 800845a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	3301      	adds	r3, #1
 8008460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008468:	b29b      	uxth	r3, r3
 800846a:	3b01      	subs	r3, #1
 800846c:	b29a      	uxth	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800847a:	b29b      	uxth	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1c8      	bne.n	8008412 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2200      	movs	r2, #0
 8008488:	2140      	movs	r1, #64	; 0x40
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 fcde 	bl	8008e4c <UART_WaitOnFlagUntilTimeout>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2220      	movs	r2, #32
 800849a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e005      	b.n	80084ac <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2220      	movs	r2, #32
 80084a4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	e000      	b.n	80084ac <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80084aa:	2302      	movs	r3, #2
  }
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3720      	adds	r7, #32
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08a      	sub	sp, #40	; 0x28
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	f040 80b6 	bne.w	800863c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <HAL_UART_Receive+0x28>
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e0ae      	b.n	800863e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2222      	movs	r2, #34	; 0x22
 80084ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084f6:	f7fb f8db 	bl	80036b0 <HAL_GetTick>
 80084fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	88fa      	ldrh	r2, [r7, #6]
 8008500:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	88fa      	ldrh	r2, [r7, #6]
 8008508:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008514:	d10e      	bne.n	8008534 <HAL_UART_Receive+0x80>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d105      	bne.n	800852a <HAL_UART_Receive+0x76>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008524:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008528:	e02d      	b.n	8008586 <HAL_UART_Receive+0xd2>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	22ff      	movs	r2, #255	; 0xff
 800852e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008532:	e028      	b.n	8008586 <HAL_UART_Receive+0xd2>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10d      	bne.n	8008558 <HAL_UART_Receive+0xa4>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d104      	bne.n	800854e <HAL_UART_Receive+0x9a>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	22ff      	movs	r2, #255	; 0xff
 8008548:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800854c:	e01b      	b.n	8008586 <HAL_UART_Receive+0xd2>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	227f      	movs	r2, #127	; 0x7f
 8008552:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008556:	e016      	b.n	8008586 <HAL_UART_Receive+0xd2>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008560:	d10d      	bne.n	800857e <HAL_UART_Receive+0xca>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d104      	bne.n	8008574 <HAL_UART_Receive+0xc0>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	227f      	movs	r2, #127	; 0x7f
 800856e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008572:	e008      	b.n	8008586 <HAL_UART_Receive+0xd2>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	223f      	movs	r2, #63	; 0x3f
 8008578:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800857c:	e003      	b.n	8008586 <HAL_UART_Receive+0xd2>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800858c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008596:	d108      	bne.n	80085aa <HAL_UART_Receive+0xf6>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80085a0:	2300      	movs	r3, #0
 80085a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	61bb      	str	r3, [r7, #24]
 80085a8:	e003      	b.n	80085b2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80085b2:	e037      	b.n	8008624 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2200      	movs	r2, #0
 80085bc:	2120      	movs	r1, #32
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 fc44 	bl	8008e4c <UART_WaitOnFlagUntilTimeout>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e033      	b.n	800863e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10c      	bne.n	80085f6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	8a7b      	ldrh	r3, [r7, #18]
 80085e6:	4013      	ands	r3, r2
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	3302      	adds	r3, #2
 80085f2:	61bb      	str	r3, [r7, #24]
 80085f4:	e00d      	b.n	8008612 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	8a7b      	ldrh	r3, [r7, #18]
 8008602:	b2db      	uxtb	r3, r3
 8008604:	4013      	ands	r3, r2
 8008606:	b2da      	uxtb	r2, r3
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	3301      	adds	r3, #1
 8008610:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008618:	b29b      	uxth	r3, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	b29a      	uxth	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1c1      	bne.n	80085b4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2220      	movs	r2, #32
 8008634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	e000      	b.n	800863e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800863c:	2302      	movs	r3, #2
  }
}
 800863e:	4618      	mov	r0, r3
 8008640:	3720      	adds	r7, #32
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800864c:	b08a      	sub	sp, #40	; 0x28
 800864e:	af00      	add	r7, sp, #0
 8008650:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	431a      	orrs	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	431a      	orrs	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	4313      	orrs	r3, r2
 800866e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	4ba4      	ldr	r3, [pc, #656]	; (8008908 <UART_SetConfig+0x2c0>)
 8008678:	4013      	ands	r3, r2
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	6812      	ldr	r2, [r2, #0]
 800867e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008680:	430b      	orrs	r3, r1
 8008682:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a99      	ldr	r2, [pc, #612]	; (800890c <UART_SetConfig+0x2c4>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d004      	beq.n	80086b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b0:	4313      	orrs	r3, r2
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c4:	430a      	orrs	r2, r1
 80086c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a90      	ldr	r2, [pc, #576]	; (8008910 <UART_SetConfig+0x2c8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d126      	bne.n	8008720 <UART_SetConfig+0xd8>
 80086d2:	4b90      	ldr	r3, [pc, #576]	; (8008914 <UART_SetConfig+0x2cc>)
 80086d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d8:	f003 0303 	and.w	r3, r3, #3
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d81b      	bhi.n	8008718 <UART_SetConfig+0xd0>
 80086e0:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <UART_SetConfig+0xa0>)
 80086e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e6:	bf00      	nop
 80086e8:	080086f9 	.word	0x080086f9
 80086ec:	08008709 	.word	0x08008709
 80086f0:	08008701 	.word	0x08008701
 80086f4:	08008711 	.word	0x08008711
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086fe:	e116      	b.n	800892e <UART_SetConfig+0x2e6>
 8008700:	2302      	movs	r3, #2
 8008702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008706:	e112      	b.n	800892e <UART_SetConfig+0x2e6>
 8008708:	2304      	movs	r3, #4
 800870a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800870e:	e10e      	b.n	800892e <UART_SetConfig+0x2e6>
 8008710:	2308      	movs	r3, #8
 8008712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008716:	e10a      	b.n	800892e <UART_SetConfig+0x2e6>
 8008718:	2310      	movs	r3, #16
 800871a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800871e:	e106      	b.n	800892e <UART_SetConfig+0x2e6>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a7c      	ldr	r2, [pc, #496]	; (8008918 <UART_SetConfig+0x2d0>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d138      	bne.n	800879c <UART_SetConfig+0x154>
 800872a:	4b7a      	ldr	r3, [pc, #488]	; (8008914 <UART_SetConfig+0x2cc>)
 800872c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008730:	f003 030c 	and.w	r3, r3, #12
 8008734:	2b0c      	cmp	r3, #12
 8008736:	d82d      	bhi.n	8008794 <UART_SetConfig+0x14c>
 8008738:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <UART_SetConfig+0xf8>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	08008775 	.word	0x08008775
 8008744:	08008795 	.word	0x08008795
 8008748:	08008795 	.word	0x08008795
 800874c:	08008795 	.word	0x08008795
 8008750:	08008785 	.word	0x08008785
 8008754:	08008795 	.word	0x08008795
 8008758:	08008795 	.word	0x08008795
 800875c:	08008795 	.word	0x08008795
 8008760:	0800877d 	.word	0x0800877d
 8008764:	08008795 	.word	0x08008795
 8008768:	08008795 	.word	0x08008795
 800876c:	08008795 	.word	0x08008795
 8008770:	0800878d 	.word	0x0800878d
 8008774:	2300      	movs	r3, #0
 8008776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800877a:	e0d8      	b.n	800892e <UART_SetConfig+0x2e6>
 800877c:	2302      	movs	r3, #2
 800877e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008782:	e0d4      	b.n	800892e <UART_SetConfig+0x2e6>
 8008784:	2304      	movs	r3, #4
 8008786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800878a:	e0d0      	b.n	800892e <UART_SetConfig+0x2e6>
 800878c:	2308      	movs	r3, #8
 800878e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008792:	e0cc      	b.n	800892e <UART_SetConfig+0x2e6>
 8008794:	2310      	movs	r3, #16
 8008796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800879a:	e0c8      	b.n	800892e <UART_SetConfig+0x2e6>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a5e      	ldr	r2, [pc, #376]	; (800891c <UART_SetConfig+0x2d4>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d125      	bne.n	80087f2 <UART_SetConfig+0x1aa>
 80087a6:	4b5b      	ldr	r3, [pc, #364]	; (8008914 <UART_SetConfig+0x2cc>)
 80087a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80087b0:	2b30      	cmp	r3, #48	; 0x30
 80087b2:	d016      	beq.n	80087e2 <UART_SetConfig+0x19a>
 80087b4:	2b30      	cmp	r3, #48	; 0x30
 80087b6:	d818      	bhi.n	80087ea <UART_SetConfig+0x1a2>
 80087b8:	2b20      	cmp	r3, #32
 80087ba:	d00a      	beq.n	80087d2 <UART_SetConfig+0x18a>
 80087bc:	2b20      	cmp	r3, #32
 80087be:	d814      	bhi.n	80087ea <UART_SetConfig+0x1a2>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <UART_SetConfig+0x182>
 80087c4:	2b10      	cmp	r3, #16
 80087c6:	d008      	beq.n	80087da <UART_SetConfig+0x192>
 80087c8:	e00f      	b.n	80087ea <UART_SetConfig+0x1a2>
 80087ca:	2300      	movs	r3, #0
 80087cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087d0:	e0ad      	b.n	800892e <UART_SetConfig+0x2e6>
 80087d2:	2302      	movs	r3, #2
 80087d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087d8:	e0a9      	b.n	800892e <UART_SetConfig+0x2e6>
 80087da:	2304      	movs	r3, #4
 80087dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e0:	e0a5      	b.n	800892e <UART_SetConfig+0x2e6>
 80087e2:	2308      	movs	r3, #8
 80087e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e8:	e0a1      	b.n	800892e <UART_SetConfig+0x2e6>
 80087ea:	2310      	movs	r3, #16
 80087ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087f0:	e09d      	b.n	800892e <UART_SetConfig+0x2e6>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a4a      	ldr	r2, [pc, #296]	; (8008920 <UART_SetConfig+0x2d8>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d125      	bne.n	8008848 <UART_SetConfig+0x200>
 80087fc:	4b45      	ldr	r3, [pc, #276]	; (8008914 <UART_SetConfig+0x2cc>)
 80087fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008802:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008806:	2bc0      	cmp	r3, #192	; 0xc0
 8008808:	d016      	beq.n	8008838 <UART_SetConfig+0x1f0>
 800880a:	2bc0      	cmp	r3, #192	; 0xc0
 800880c:	d818      	bhi.n	8008840 <UART_SetConfig+0x1f8>
 800880e:	2b80      	cmp	r3, #128	; 0x80
 8008810:	d00a      	beq.n	8008828 <UART_SetConfig+0x1e0>
 8008812:	2b80      	cmp	r3, #128	; 0x80
 8008814:	d814      	bhi.n	8008840 <UART_SetConfig+0x1f8>
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <UART_SetConfig+0x1d8>
 800881a:	2b40      	cmp	r3, #64	; 0x40
 800881c:	d008      	beq.n	8008830 <UART_SetConfig+0x1e8>
 800881e:	e00f      	b.n	8008840 <UART_SetConfig+0x1f8>
 8008820:	2300      	movs	r3, #0
 8008822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008826:	e082      	b.n	800892e <UART_SetConfig+0x2e6>
 8008828:	2302      	movs	r3, #2
 800882a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800882e:	e07e      	b.n	800892e <UART_SetConfig+0x2e6>
 8008830:	2304      	movs	r3, #4
 8008832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008836:	e07a      	b.n	800892e <UART_SetConfig+0x2e6>
 8008838:	2308      	movs	r3, #8
 800883a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800883e:	e076      	b.n	800892e <UART_SetConfig+0x2e6>
 8008840:	2310      	movs	r3, #16
 8008842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008846:	e072      	b.n	800892e <UART_SetConfig+0x2e6>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a35      	ldr	r2, [pc, #212]	; (8008924 <UART_SetConfig+0x2dc>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d12a      	bne.n	80088a8 <UART_SetConfig+0x260>
 8008852:	4b30      	ldr	r3, [pc, #192]	; (8008914 <UART_SetConfig+0x2cc>)
 8008854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800885c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008860:	d01a      	beq.n	8008898 <UART_SetConfig+0x250>
 8008862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008866:	d81b      	bhi.n	80088a0 <UART_SetConfig+0x258>
 8008868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800886c:	d00c      	beq.n	8008888 <UART_SetConfig+0x240>
 800886e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008872:	d815      	bhi.n	80088a0 <UART_SetConfig+0x258>
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <UART_SetConfig+0x238>
 8008878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800887c:	d008      	beq.n	8008890 <UART_SetConfig+0x248>
 800887e:	e00f      	b.n	80088a0 <UART_SetConfig+0x258>
 8008880:	2300      	movs	r3, #0
 8008882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008886:	e052      	b.n	800892e <UART_SetConfig+0x2e6>
 8008888:	2302      	movs	r3, #2
 800888a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800888e:	e04e      	b.n	800892e <UART_SetConfig+0x2e6>
 8008890:	2304      	movs	r3, #4
 8008892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008896:	e04a      	b.n	800892e <UART_SetConfig+0x2e6>
 8008898:	2308      	movs	r3, #8
 800889a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800889e:	e046      	b.n	800892e <UART_SetConfig+0x2e6>
 80088a0:	2310      	movs	r3, #16
 80088a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a6:	e042      	b.n	800892e <UART_SetConfig+0x2e6>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a17      	ldr	r2, [pc, #92]	; (800890c <UART_SetConfig+0x2c4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d13a      	bne.n	8008928 <UART_SetConfig+0x2e0>
 80088b2:	4b18      	ldr	r3, [pc, #96]	; (8008914 <UART_SetConfig+0x2cc>)
 80088b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088c0:	d01a      	beq.n	80088f8 <UART_SetConfig+0x2b0>
 80088c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088c6:	d81b      	bhi.n	8008900 <UART_SetConfig+0x2b8>
 80088c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088cc:	d00c      	beq.n	80088e8 <UART_SetConfig+0x2a0>
 80088ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088d2:	d815      	bhi.n	8008900 <UART_SetConfig+0x2b8>
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <UART_SetConfig+0x298>
 80088d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088dc:	d008      	beq.n	80088f0 <UART_SetConfig+0x2a8>
 80088de:	e00f      	b.n	8008900 <UART_SetConfig+0x2b8>
 80088e0:	2300      	movs	r3, #0
 80088e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088e6:	e022      	b.n	800892e <UART_SetConfig+0x2e6>
 80088e8:	2302      	movs	r3, #2
 80088ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ee:	e01e      	b.n	800892e <UART_SetConfig+0x2e6>
 80088f0:	2304      	movs	r3, #4
 80088f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088f6:	e01a      	b.n	800892e <UART_SetConfig+0x2e6>
 80088f8:	2308      	movs	r3, #8
 80088fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088fe:	e016      	b.n	800892e <UART_SetConfig+0x2e6>
 8008900:	2310      	movs	r3, #16
 8008902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008906:	e012      	b.n	800892e <UART_SetConfig+0x2e6>
 8008908:	efff69f3 	.word	0xefff69f3
 800890c:	40008000 	.word	0x40008000
 8008910:	40013800 	.word	0x40013800
 8008914:	40021000 	.word	0x40021000
 8008918:	40004400 	.word	0x40004400
 800891c:	40004800 	.word	0x40004800
 8008920:	40004c00 	.word	0x40004c00
 8008924:	40005000 	.word	0x40005000
 8008928:	2310      	movs	r3, #16
 800892a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a9f      	ldr	r2, [pc, #636]	; (8008bb0 <UART_SetConfig+0x568>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d17a      	bne.n	8008a2e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008938:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800893c:	2b08      	cmp	r3, #8
 800893e:	d824      	bhi.n	800898a <UART_SetConfig+0x342>
 8008940:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <UART_SetConfig+0x300>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	0800896d 	.word	0x0800896d
 800894c:	0800898b 	.word	0x0800898b
 8008950:	08008975 	.word	0x08008975
 8008954:	0800898b 	.word	0x0800898b
 8008958:	0800897b 	.word	0x0800897b
 800895c:	0800898b 	.word	0x0800898b
 8008960:	0800898b 	.word	0x0800898b
 8008964:	0800898b 	.word	0x0800898b
 8008968:	08008983 	.word	0x08008983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800896c:	f7fc fce0 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 8008970:	61f8      	str	r0, [r7, #28]
        break;
 8008972:	e010      	b.n	8008996 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008974:	4b8f      	ldr	r3, [pc, #572]	; (8008bb4 <UART_SetConfig+0x56c>)
 8008976:	61fb      	str	r3, [r7, #28]
        break;
 8008978:	e00d      	b.n	8008996 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800897a:	f7fc fc41 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 800897e:	61f8      	str	r0, [r7, #28]
        break;
 8008980:	e009      	b.n	8008996 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008986:	61fb      	str	r3, [r7, #28]
        break;
 8008988:	e005      	b.n	8008996 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008994:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 80fb 	beq.w	8008b94 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	4613      	mov	r3, r2
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	4413      	add	r3, r2
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d305      	bcc.n	80089ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089b4:	69fa      	ldr	r2, [r7, #28]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d903      	bls.n	80089c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80089c0:	e0e8      	b.n	8008b94 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	2200      	movs	r2, #0
 80089c6:	461c      	mov	r4, r3
 80089c8:	4615      	mov	r5, r2
 80089ca:	f04f 0200 	mov.w	r2, #0
 80089ce:	f04f 0300 	mov.w	r3, #0
 80089d2:	022b      	lsls	r3, r5, #8
 80089d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80089d8:	0222      	lsls	r2, r4, #8
 80089da:	68f9      	ldr	r1, [r7, #12]
 80089dc:	6849      	ldr	r1, [r1, #4]
 80089de:	0849      	lsrs	r1, r1, #1
 80089e0:	2000      	movs	r0, #0
 80089e2:	4688      	mov	r8, r1
 80089e4:	4681      	mov	r9, r0
 80089e6:	eb12 0a08 	adds.w	sl, r2, r8
 80089ea:	eb43 0b09 	adc.w	fp, r3, r9
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	603b      	str	r3, [r7, #0]
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089fc:	4650      	mov	r0, sl
 80089fe:	4659      	mov	r1, fp
 8008a00:	f7f8 f88c 	bl	8000b1c <__aeabi_uldivmod>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4613      	mov	r3, r2
 8008a0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a12:	d308      	bcc.n	8008a26 <UART_SetConfig+0x3de>
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a1a:	d204      	bcs.n	8008a26 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	60da      	str	r2, [r3, #12]
 8008a24:	e0b6      	b.n	8008b94 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a2c:	e0b2      	b.n	8008b94 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a36:	d15e      	bne.n	8008af6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d828      	bhi.n	8008a92 <UART_SetConfig+0x44a>
 8008a40:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <UART_SetConfig+0x400>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a6d 	.word	0x08008a6d
 8008a4c:	08008a75 	.word	0x08008a75
 8008a50:	08008a7d 	.word	0x08008a7d
 8008a54:	08008a93 	.word	0x08008a93
 8008a58:	08008a83 	.word	0x08008a83
 8008a5c:	08008a93 	.word	0x08008a93
 8008a60:	08008a93 	.word	0x08008a93
 8008a64:	08008a93 	.word	0x08008a93
 8008a68:	08008a8b 	.word	0x08008a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a6c:	f7fc fc60 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 8008a70:	61f8      	str	r0, [r7, #28]
        break;
 8008a72:	e014      	b.n	8008a9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a74:	f7fc fc72 	bl	800535c <HAL_RCC_GetPCLK2Freq>
 8008a78:	61f8      	str	r0, [r7, #28]
        break;
 8008a7a:	e010      	b.n	8008a9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a7c:	4b4d      	ldr	r3, [pc, #308]	; (8008bb4 <UART_SetConfig+0x56c>)
 8008a7e:	61fb      	str	r3, [r7, #28]
        break;
 8008a80:	e00d      	b.n	8008a9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a82:	f7fc fbbd 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 8008a86:	61f8      	str	r0, [r7, #28]
        break;
 8008a88:	e009      	b.n	8008a9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a8e:	61fb      	str	r3, [r7, #28]
        break;
 8008a90:	e005      	b.n	8008a9e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d077      	beq.n	8008b94 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	005a      	lsls	r2, r3, #1
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	085b      	lsrs	r3, r3, #1
 8008aae:	441a      	add	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	2b0f      	cmp	r3, #15
 8008abe:	d916      	bls.n	8008aee <UART_SetConfig+0x4a6>
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac6:	d212      	bcs.n	8008aee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f023 030f 	bic.w	r3, r3, #15
 8008ad0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	085b      	lsrs	r3, r3, #1
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	8afb      	ldrh	r3, [r7, #22]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	8afa      	ldrh	r2, [r7, #22]
 8008aea:	60da      	str	r2, [r3, #12]
 8008aec:	e052      	b.n	8008b94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008af4:	e04e      	b.n	8008b94 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	d827      	bhi.n	8008b4e <UART_SetConfig+0x506>
 8008afe:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <UART_SetConfig+0x4bc>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008b29 	.word	0x08008b29
 8008b08:	08008b31 	.word	0x08008b31
 8008b0c:	08008b39 	.word	0x08008b39
 8008b10:	08008b4f 	.word	0x08008b4f
 8008b14:	08008b3f 	.word	0x08008b3f
 8008b18:	08008b4f 	.word	0x08008b4f
 8008b1c:	08008b4f 	.word	0x08008b4f
 8008b20:	08008b4f 	.word	0x08008b4f
 8008b24:	08008b47 	.word	0x08008b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b28:	f7fc fc02 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 8008b2c:	61f8      	str	r0, [r7, #28]
        break;
 8008b2e:	e014      	b.n	8008b5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b30:	f7fc fc14 	bl	800535c <HAL_RCC_GetPCLK2Freq>
 8008b34:	61f8      	str	r0, [r7, #28]
        break;
 8008b36:	e010      	b.n	8008b5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b38:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <UART_SetConfig+0x56c>)
 8008b3a:	61fb      	str	r3, [r7, #28]
        break;
 8008b3c:	e00d      	b.n	8008b5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b3e:	f7fc fb5f 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 8008b42:	61f8      	str	r0, [r7, #28]
        break;
 8008b44:	e009      	b.n	8008b5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b4a:	61fb      	str	r3, [r7, #28]
        break;
 8008b4c:	e005      	b.n	8008b5a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b58:	bf00      	nop
    }

    if (pclk != 0U)
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d019      	beq.n	8008b94 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	085a      	lsrs	r2, r3, #1
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	441a      	add	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	2b0f      	cmp	r3, #15
 8008b78:	d909      	bls.n	8008b8e <UART_SetConfig+0x546>
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b80:	d205      	bcs.n	8008b8e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60da      	str	r2, [r3, #12]
 8008b8c:	e002      	b.n	8008b94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008ba0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3728      	adds	r7, #40	; 0x28
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bae:	bf00      	nop
 8008bb0:	40008000 	.word	0x40008000
 8008bb4:	00f42400 	.word	0x00f42400

08008bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	f003 0308 	and.w	r3, r3, #8
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	f003 0304 	and.w	r3, r3, #4
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	f003 0310 	and.w	r3, r3, #16
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00a      	beq.n	8008c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6e:	f003 0320 	and.w	r3, r3, #32
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00a      	beq.n	8008c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d01a      	beq.n	8008cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cb6:	d10a      	bne.n	8008cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00a      	beq.n	8008cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	430a      	orrs	r2, r1
 8008cee:	605a      	str	r2, [r3, #4]
  }
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b098      	sub	sp, #96	; 0x60
 8008d00:	af02      	add	r7, sp, #8
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d0c:	f7fa fcd0 	bl	80036b0 <HAL_GetTick>
 8008d10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0308 	and.w	r3, r3, #8
 8008d1c:	2b08      	cmp	r3, #8
 8008d1e:	d12e      	bne.n	8008d7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f88c 	bl	8008e4c <UART_WaitOnFlagUntilTimeout>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d021      	beq.n	8008d7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	461a      	mov	r2, r3
 8008d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d58:	647b      	str	r3, [r7, #68]	; 0x44
 8008d5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e6      	bne.n	8008d3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e062      	b.n	8008e44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d149      	bne.n	8008e20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d94:	2200      	movs	r2, #0
 8008d96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f856 	bl	8008e4c <UART_WaitOnFlagUntilTimeout>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d03c      	beq.n	8008e20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	e853 3f00 	ldrex	r3, [r3]
 8008db2:	623b      	str	r3, [r7, #32]
   return(result);
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8008dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dcc:	e841 2300 	strex	r3, r2, [r1]
 8008dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1e6      	bne.n	8008da6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3308      	adds	r3, #8
 8008dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	e853 3f00 	ldrex	r3, [r3]
 8008de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f023 0301 	bic.w	r3, r3, #1
 8008dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3308      	adds	r3, #8
 8008df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008df8:	61fa      	str	r2, [r7, #28]
 8008dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfc:	69b9      	ldr	r1, [r7, #24]
 8008dfe:	69fa      	ldr	r2, [r7, #28]
 8008e00:	e841 2300 	strex	r3, r2, [r1]
 8008e04:	617b      	str	r3, [r7, #20]
   return(result);
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e5      	bne.n	8008dd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2220      	movs	r2, #32
 8008e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e011      	b.n	8008e44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2220      	movs	r2, #32
 8008e24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3758      	adds	r7, #88	; 0x58
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	603b      	str	r3, [r7, #0]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e5c:	e049      	b.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e64:	d045      	beq.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e66:	f7fa fc23 	bl	80036b0 <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d302      	bcc.n	8008e7c <UART_WaitOnFlagUntilTimeout+0x30>
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e048      	b.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0304 	and.w	r3, r3, #4
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d031      	beq.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	f003 0308 	and.w	r3, r3, #8
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d110      	bne.n	8008ebe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f838 	bl	8008f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2208      	movs	r2, #8
 8008eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e029      	b.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ecc:	d111      	bne.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 f81e 	bl	8008f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e00f      	b.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69da      	ldr	r2, [r3, #28]
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	4013      	ands	r3, r2
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	bf0c      	ite	eq
 8008f02:	2301      	moveq	r3, #1
 8008f04:	2300      	movne	r3, #0
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	461a      	mov	r2, r3
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d0a6      	beq.n	8008e5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b095      	sub	sp, #84	; 0x54
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2a:	e853 3f00 	ldrex	r3, [r3]
 8008f2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f40:	643b      	str	r3, [r7, #64]	; 0x40
 8008f42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f48:	e841 2300 	strex	r3, r2, [r1]
 8008f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e6      	bne.n	8008f22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3308      	adds	r3, #8
 8008f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	6a3b      	ldr	r3, [r7, #32]
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	f023 0301 	bic.w	r3, r3, #1
 8008f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3308      	adds	r3, #8
 8008f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e5      	bne.n	8008f54 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d118      	bne.n	8008fc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f023 0310 	bic.w	r3, r3, #16
 8008fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fae:	61bb      	str	r3, [r7, #24]
 8008fb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	6979      	ldr	r1, [r7, #20]
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	613b      	str	r3, [r7, #16]
   return(result);
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e6      	bne.n	8008f90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008fd6:	bf00      	nop
 8008fd8:	3754      	adds	r7, #84	; 0x54
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
	...

08008fe4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008fe8:	4904      	ldr	r1, [pc, #16]	; (8008ffc <MX_FATFS_Init+0x18>)
 8008fea:	4805      	ldr	r0, [pc, #20]	; (8009000 <MX_FATFS_Init+0x1c>)
 8008fec:	f002 ffa2 	bl	800bf34 <FATFS_LinkDriver>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	4b03      	ldr	r3, [pc, #12]	; (8009004 <MX_FATFS_Init+0x20>)
 8008ff6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008ff8:	bf00      	nop
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	20000808 	.word	0x20000808
 8009000:	20000028 	.word	0x20000028
 8009004:	20000804 	.word	0x20000804

08009008 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009008:	b480      	push	{r7}
 800900a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800900c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800900e:	4618      	mov	r0, r3
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8009022:	79fb      	ldrb	r3, [r7, #7]
 8009024:	4618      	mov	r0, r3
 8009026:	f000 f9d3 	bl	80093d0 <USER_SPI_initialize>
 800902a:	4603      	mov	r3, r0
    //Stat = STA_NOINIT;
    //return Stat;
  /* USER CODE END INIT */
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fab1 	bl	80095a8 <USER_SPI_status>
 8009046:	4603      	mov	r3, r0
	//Stat = STA_NOINIT;
    //return Stat;
  /* USER CODE END STATUS */
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	60b9      	str	r1, [r7, #8]
 8009058:	607a      	str	r2, [r7, #4]
 800905a:	603b      	str	r3, [r7, #0]
 800905c:	4603      	mov	r3, r0
 800905e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8009060:	7bf8      	ldrb	r0, [r7, #15]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	68b9      	ldr	r1, [r7, #8]
 8009068:	f000 fab4 	bl	80095d4 <USER_SPI_read>
 800906c:	4603      	mov	r3, r0
    //return RES_OK;
  /* USER CODE END READ */
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	603b      	str	r3, [r7, #0]
 8009082:	4603      	mov	r3, r0
 8009084:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8009086:	7bf8      	ldrb	r0, [r7, #15]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	68b9      	ldr	r1, [r7, #8]
 800908e:	f000 fb07 	bl	80096a0 <USER_SPI_write>
 8009092:	4603      	mov	r3, r0
    //return RES_OK;
  /* USER CODE END WRITE */
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	4603      	mov	r3, r0
 80090a4:	603a      	str	r2, [r7, #0]
 80090a6:	71fb      	strb	r3, [r7, #7]
 80090a8:	460b      	mov	r3, r1
 80090aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80090ac:	79b9      	ldrb	r1, [r7, #6]
 80090ae:	79fb      	ldrb	r3, [r7, #7]
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fb70 	bl	8009798 <USER_SPI_ioctl>
 80090b8:	4603      	mov	r3, r0
    //DRESULT res = RES_ERROR;
    //return res;
  /* USER CODE END IOCTL */
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80090cc:	f7fa faf0 	bl	80036b0 <HAL_GetTick>
 80090d0:	4603      	mov	r3, r0
 80090d2:	4a04      	ldr	r2, [pc, #16]	; (80090e4 <SPI_Timer_On+0x20>)
 80090d4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80090d6:	4a04      	ldr	r2, [pc, #16]	; (80090e8 <SPI_Timer_On+0x24>)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6013      	str	r3, [r2, #0]
}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20000810 	.word	0x20000810
 80090e8:	20000814 	.word	0x20000814

080090ec <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80090ec:	b580      	push	{r7, lr}
 80090ee:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80090f0:	f7fa fade 	bl	80036b0 <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	4b06      	ldr	r3, [pc, #24]	; (8009110 <SPI_Timer_Status+0x24>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	1ad2      	subs	r2, r2, r3
 80090fc:	4b05      	ldr	r3, [pc, #20]	; (8009114 <SPI_Timer_Status+0x28>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	429a      	cmp	r2, r3
 8009102:	bf34      	ite	cc
 8009104:	2301      	movcc	r3, #1
 8009106:	2300      	movcs	r3, #0
 8009108:	b2db      	uxtb	r3, r3
}
 800910a:	4618      	mov	r0, r3
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20000810 	.word	0x20000810
 8009114:	20000814 	.word	0x20000814

08009118 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af02      	add	r7, sp, #8
 800911e:	4603      	mov	r3, r0
 8009120:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009122:	f107 020f 	add.w	r2, r7, #15
 8009126:	1df9      	adds	r1, r7, #7
 8009128:	2332      	movs	r3, #50	; 0x32
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	2301      	movs	r3, #1
 800912e:	4804      	ldr	r0, [pc, #16]	; (8009140 <xchg_spi+0x28>)
 8009130:	f7fd face 	bl	80066d0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	2000063c 	.word	0x2000063c

08009144 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009144:	b590      	push	{r4, r7, lr}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800914e:	2300      	movs	r3, #0
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	e00a      	b.n	800916a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	18d4      	adds	r4, r2, r3
 800915a:	20ff      	movs	r0, #255	; 0xff
 800915c:	f7ff ffdc 	bl	8009118 <xchg_spi>
 8009160:	4603      	mov	r3, r0
 8009162:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	3301      	adds	r3, #1
 8009168:	60fb      	str	r3, [r7, #12]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d3f0      	bcc.n	8009154 <rcvr_spi_multi+0x10>
	}
}
 8009172:	bf00      	nop
 8009174:	bf00      	nop
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	bd90      	pop	{r4, r7, pc}

0800917c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	b29a      	uxth	r2, r3
 800918a:	f04f 33ff 	mov.w	r3, #4294967295
 800918e:	6879      	ldr	r1, [r7, #4]
 8009190:	4803      	ldr	r0, [pc, #12]	; (80091a0 <xmit_spi_multi+0x24>)
 8009192:	f7fc fff1 	bl	8006178 <HAL_SPI_Transmit>
}
 8009196:	bf00      	nop
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	2000063c 	.word	0x2000063c

080091a4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80091ac:	f7fa fa80 	bl	80036b0 <HAL_GetTick>
 80091b0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80091b6:	20ff      	movs	r0, #255	; 0xff
 80091b8:	f7ff ffae 	bl	8009118 <xchg_spi>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	2bff      	cmp	r3, #255	; 0xff
 80091c4:	d007      	beq.n	80091d6 <wait_ready+0x32>
 80091c6:	f7fa fa73 	bl	80036b0 <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d8ef      	bhi.n	80091b6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
 80091d8:	2bff      	cmp	r3, #255	; 0xff
 80091da:	bf0c      	ite	eq
 80091dc:	2301      	moveq	r3, #1
 80091de:	2300      	movne	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80091f0:	2201      	movs	r2, #1
 80091f2:	2102      	movs	r1, #2
 80091f4:	4803      	ldr	r0, [pc, #12]	; (8009204 <despiselect+0x18>)
 80091f6:	f7fa fd47 	bl	8003c88 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80091fa:	20ff      	movs	r0, #255	; 0xff
 80091fc:	f7ff ff8c 	bl	8009118 <xchg_spi>

}
 8009200:	bf00      	nop
 8009202:	bd80      	pop	{r7, pc}
 8009204:	48000400 	.word	0x48000400

08009208 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800920c:	2200      	movs	r2, #0
 800920e:	2102      	movs	r1, #2
 8009210:	4809      	ldr	r0, [pc, #36]	; (8009238 <spiselect+0x30>)
 8009212:	f7fa fd39 	bl	8003c88 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009216:	20ff      	movs	r0, #255	; 0xff
 8009218:	f7ff ff7e 	bl	8009118 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800921c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009220:	f7ff ffc0 	bl	80091a4 <wait_ready>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <spiselect+0x26>
 800922a:	2301      	movs	r3, #1
 800922c:	e002      	b.n	8009234 <spiselect+0x2c>

	despiselect();
 800922e:	f7ff ffdd 	bl	80091ec <despiselect>
	return 0;	/* Timeout */
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	bd80      	pop	{r7, pc}
 8009238:	48000400 	.word	0x48000400

0800923c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009246:	20c8      	movs	r0, #200	; 0xc8
 8009248:	f7ff ff3c 	bl	80090c4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800924c:	20ff      	movs	r0, #255	; 0xff
 800924e:	f7ff ff63 	bl	8009118 <xchg_spi>
 8009252:	4603      	mov	r3, r0
 8009254:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	2bff      	cmp	r3, #255	; 0xff
 800925a:	d104      	bne.n	8009266 <rcvr_datablock+0x2a>
 800925c:	f7ff ff46 	bl	80090ec <SPI_Timer_Status>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1f2      	bne.n	800924c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	2bfe      	cmp	r3, #254	; 0xfe
 800926a:	d001      	beq.n	8009270 <rcvr_datablock+0x34>
 800926c:	2300      	movs	r3, #0
 800926e:	e00a      	b.n	8009286 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff ff66 	bl	8009144 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009278:	20ff      	movs	r0, #255	; 0xff
 800927a:	f7ff ff4d 	bl	8009118 <xchg_spi>
 800927e:	20ff      	movs	r0, #255	; 0xff
 8009280:	f7ff ff4a 	bl	8009118 <xchg_spi>

	return 1;						/* Function succeeded */
 8009284:	2301      	movs	r3, #1
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	460b      	mov	r3, r1
 8009298:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800929a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800929e:	f7ff ff81 	bl	80091a4 <wait_ready>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <xmit_datablock+0x1e>
 80092a8:	2300      	movs	r3, #0
 80092aa:	e01e      	b.n	80092ea <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80092ac:	78fb      	ldrb	r3, [r7, #3]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff ff32 	bl	8009118 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80092b4:	78fb      	ldrb	r3, [r7, #3]
 80092b6:	2bfd      	cmp	r3, #253	; 0xfd
 80092b8:	d016      	beq.n	80092e8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80092ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff ff5c 	bl	800917c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80092c4:	20ff      	movs	r0, #255	; 0xff
 80092c6:	f7ff ff27 	bl	8009118 <xchg_spi>
 80092ca:	20ff      	movs	r0, #255	; 0xff
 80092cc:	f7ff ff24 	bl	8009118 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80092d0:	20ff      	movs	r0, #255	; 0xff
 80092d2:	f7ff ff21 	bl	8009118 <xchg_spi>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	f003 031f 	and.w	r3, r3, #31
 80092e0:	2b05      	cmp	r3, #5
 80092e2:	d001      	beq.n	80092e8 <xmit_datablock+0x5a>
 80092e4:	2300      	movs	r3, #0
 80092e6:	e000      	b.n	80092ea <xmit_datablock+0x5c>
	}
	return 1;
 80092e8:	2301      	movs	r3, #1
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	4603      	mov	r3, r0
 80092fa:	6039      	str	r1, [r7, #0]
 80092fc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80092fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009302:	2b00      	cmp	r3, #0
 8009304:	da0e      	bge.n	8009324 <send_cmd+0x32>
		cmd &= 0x7F;
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800930c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800930e:	2100      	movs	r1, #0
 8009310:	2037      	movs	r0, #55	; 0x37
 8009312:	f7ff ffee 	bl	80092f2 <send_cmd>
 8009316:	4603      	mov	r3, r0
 8009318:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d901      	bls.n	8009324 <send_cmd+0x32>
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	e051      	b.n	80093c8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	2b0c      	cmp	r3, #12
 8009328:	d008      	beq.n	800933c <send_cmd+0x4a>
		despiselect();
 800932a:	f7ff ff5f 	bl	80091ec <despiselect>
		if (!spiselect()) return 0xFF;
 800932e:	f7ff ff6b 	bl	8009208 <spiselect>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <send_cmd+0x4a>
 8009338:	23ff      	movs	r3, #255	; 0xff
 800933a:	e045      	b.n	80093c8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009342:	b2db      	uxtb	r3, r3
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff fee7 	bl	8009118 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	0e1b      	lsrs	r3, r3, #24
 800934e:	b2db      	uxtb	r3, r3
 8009350:	4618      	mov	r0, r3
 8009352:	f7ff fee1 	bl	8009118 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	0c1b      	lsrs	r3, r3, #16
 800935a:	b2db      	uxtb	r3, r3
 800935c:	4618      	mov	r0, r3
 800935e:	f7ff fedb 	bl	8009118 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	0a1b      	lsrs	r3, r3, #8
 8009366:	b2db      	uxtb	r3, r3
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff fed5 	bl	8009118 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	4618      	mov	r0, r3
 8009374:	f7ff fed0 	bl	8009118 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009378:	2301      	movs	r3, #1
 800937a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <send_cmd+0x94>
 8009382:	2395      	movs	r3, #149	; 0x95
 8009384:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009386:	79fb      	ldrb	r3, [r7, #7]
 8009388:	2b08      	cmp	r3, #8
 800938a:	d101      	bne.n	8009390 <send_cmd+0x9e>
 800938c:	2387      	movs	r3, #135	; 0x87
 800938e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	4618      	mov	r0, r3
 8009394:	f7ff fec0 	bl	8009118 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009398:	79fb      	ldrb	r3, [r7, #7]
 800939a:	2b0c      	cmp	r3, #12
 800939c:	d102      	bne.n	80093a4 <send_cmd+0xb2>
 800939e:	20ff      	movs	r0, #255	; 0xff
 80093a0:	f7ff feba 	bl	8009118 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80093a4:	230a      	movs	r3, #10
 80093a6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80093a8:	20ff      	movs	r0, #255	; 0xff
 80093aa:	f7ff feb5 	bl	8009118 <xchg_spi>
 80093ae:	4603      	mov	r3, r0
 80093b0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80093b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	da05      	bge.n	80093c6 <send_cmd+0xd4>
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
 80093bc:	3b01      	subs	r3, #1
 80093be:	73fb      	strb	r3, [r7, #15]
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1f0      	bne.n	80093a8 <send_cmd+0xb6>

	return res;							/* Return received response */
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80093d0:	b590      	push	{r4, r7, lr}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80093da:	79fb      	ldrb	r3, [r7, #7]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <USER_SPI_initialize+0x14>
 80093e0:	2301      	movs	r3, #1
 80093e2:	e0d6      	b.n	8009592 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80093e4:	4b6d      	ldr	r3, [pc, #436]	; (800959c <USER_SPI_initialize+0x1cc>)
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <USER_SPI_initialize+0x2a>
 80093f2:	4b6a      	ldr	r3, [pc, #424]	; (800959c <USER_SPI_initialize+0x1cc>)
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	e0cb      	b.n	8009592 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80093fa:	4b69      	ldr	r3, [pc, #420]	; (80095a0 <USER_SPI_initialize+0x1d0>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009404:	4b66      	ldr	r3, [pc, #408]	; (80095a0 <USER_SPI_initialize+0x1d0>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800940c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800940e:	230a      	movs	r3, #10
 8009410:	73fb      	strb	r3, [r7, #15]
 8009412:	e005      	b.n	8009420 <USER_SPI_initialize+0x50>
 8009414:	20ff      	movs	r0, #255	; 0xff
 8009416:	f7ff fe7f 	bl	8009118 <xchg_spi>
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	3b01      	subs	r3, #1
 800941e:	73fb      	strb	r3, [r7, #15]
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1f6      	bne.n	8009414 <USER_SPI_initialize+0x44>

	ty = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800942a:	2100      	movs	r1, #0
 800942c:	2000      	movs	r0, #0
 800942e:	f7ff ff60 	bl	80092f2 <send_cmd>
 8009432:	4603      	mov	r3, r0
 8009434:	2b01      	cmp	r3, #1
 8009436:	f040 808b 	bne.w	8009550 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800943a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800943e:	f7ff fe41 	bl	80090c4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009442:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009446:	2008      	movs	r0, #8
 8009448:	f7ff ff53 	bl	80092f2 <send_cmd>
 800944c:	4603      	mov	r3, r0
 800944e:	2b01      	cmp	r3, #1
 8009450:	d151      	bne.n	80094f6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]
 8009456:	e00d      	b.n	8009474 <USER_SPI_initialize+0xa4>
 8009458:	7bfc      	ldrb	r4, [r7, #15]
 800945a:	20ff      	movs	r0, #255	; 0xff
 800945c:	f7ff fe5c 	bl	8009118 <xchg_spi>
 8009460:	4603      	mov	r3, r0
 8009462:	461a      	mov	r2, r3
 8009464:	f104 0310 	add.w	r3, r4, #16
 8009468:	443b      	add	r3, r7
 800946a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	3301      	adds	r3, #1
 8009472:	73fb      	strb	r3, [r7, #15]
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	2b03      	cmp	r3, #3
 8009478:	d9ee      	bls.n	8009458 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800947a:	7abb      	ldrb	r3, [r7, #10]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d167      	bne.n	8009550 <USER_SPI_initialize+0x180>
 8009480:	7afb      	ldrb	r3, [r7, #11]
 8009482:	2baa      	cmp	r3, #170	; 0xaa
 8009484:	d164      	bne.n	8009550 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8009486:	bf00      	nop
 8009488:	f7ff fe30 	bl	80090ec <SPI_Timer_Status>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d007      	beq.n	80094a2 <USER_SPI_initialize+0xd2>
 8009492:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009496:	20a9      	movs	r0, #169	; 0xa9
 8009498:	f7ff ff2b 	bl	80092f2 <send_cmd>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1f2      	bne.n	8009488 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80094a2:	f7ff fe23 	bl	80090ec <SPI_Timer_Status>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d051      	beq.n	8009550 <USER_SPI_initialize+0x180>
 80094ac:	2100      	movs	r1, #0
 80094ae:	203a      	movs	r0, #58	; 0x3a
 80094b0:	f7ff ff1f 	bl	80092f2 <send_cmd>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d14a      	bne.n	8009550 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]
 80094be:	e00d      	b.n	80094dc <USER_SPI_initialize+0x10c>
 80094c0:	7bfc      	ldrb	r4, [r7, #15]
 80094c2:	20ff      	movs	r0, #255	; 0xff
 80094c4:	f7ff fe28 	bl	8009118 <xchg_spi>
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	f104 0310 	add.w	r3, r4, #16
 80094d0:	443b      	add	r3, r7
 80094d2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80094d6:	7bfb      	ldrb	r3, [r7, #15]
 80094d8:	3301      	adds	r3, #1
 80094da:	73fb      	strb	r3, [r7, #15]
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d9ee      	bls.n	80094c0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80094e2:	7a3b      	ldrb	r3, [r7, #8]
 80094e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <USER_SPI_initialize+0x120>
 80094ec:	230c      	movs	r3, #12
 80094ee:	e000      	b.n	80094f2 <USER_SPI_initialize+0x122>
 80094f0:	2304      	movs	r3, #4
 80094f2:	737b      	strb	r3, [r7, #13]
 80094f4:	e02c      	b.n	8009550 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80094f6:	2100      	movs	r1, #0
 80094f8:	20a9      	movs	r0, #169	; 0xa9
 80094fa:	f7ff fefa 	bl	80092f2 <send_cmd>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b01      	cmp	r3, #1
 8009502:	d804      	bhi.n	800950e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009504:	2302      	movs	r3, #2
 8009506:	737b      	strb	r3, [r7, #13]
 8009508:	23a9      	movs	r3, #169	; 0xa9
 800950a:	73bb      	strb	r3, [r7, #14]
 800950c:	e003      	b.n	8009516 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800950e:	2301      	movs	r3, #1
 8009510:	737b      	strb	r3, [r7, #13]
 8009512:	2301      	movs	r3, #1
 8009514:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009516:	bf00      	nop
 8009518:	f7ff fde8 	bl	80090ec <SPI_Timer_Status>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d007      	beq.n	8009532 <USER_SPI_initialize+0x162>
 8009522:	7bbb      	ldrb	r3, [r7, #14]
 8009524:	2100      	movs	r1, #0
 8009526:	4618      	mov	r0, r3
 8009528:	f7ff fee3 	bl	80092f2 <send_cmd>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1f2      	bne.n	8009518 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8009532:	f7ff fddb 	bl	80090ec <SPI_Timer_Status>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d007      	beq.n	800954c <USER_SPI_initialize+0x17c>
 800953c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009540:	2010      	movs	r0, #16
 8009542:	f7ff fed6 	bl	80092f2 <send_cmd>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <USER_SPI_initialize+0x180>
				ty = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8009550:	4a14      	ldr	r2, [pc, #80]	; (80095a4 <USER_SPI_initialize+0x1d4>)
 8009552:	7b7b      	ldrb	r3, [r7, #13]
 8009554:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009556:	f7ff fe49 	bl	80091ec <despiselect>

	if (ty) {			/* OK */
 800955a:	7b7b      	ldrb	r3, [r7, #13]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d012      	beq.n	8009586 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8009560:	4b0f      	ldr	r3, [pc, #60]	; (80095a0 <USER_SPI_initialize+0x1d0>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800956a:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <USER_SPI_initialize+0x1d0>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0210 	orr.w	r2, r2, #16
 8009572:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009574:	4b09      	ldr	r3, [pc, #36]	; (800959c <USER_SPI_initialize+0x1cc>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	f023 0301 	bic.w	r3, r3, #1
 800957e:	b2da      	uxtb	r2, r3
 8009580:	4b06      	ldr	r3, [pc, #24]	; (800959c <USER_SPI_initialize+0x1cc>)
 8009582:	701a      	strb	r2, [r3, #0]
 8009584:	e002      	b.n	800958c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009586:	4b05      	ldr	r3, [pc, #20]	; (800959c <USER_SPI_initialize+0x1cc>)
 8009588:	2201      	movs	r2, #1
 800958a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800958c:	4b03      	ldr	r3, [pc, #12]	; (800959c <USER_SPI_initialize+0x1cc>)
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	b2db      	uxtb	r3, r3
}
 8009592:	4618      	mov	r0, r3
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	bd90      	pop	{r4, r7, pc}
 800959a:	bf00      	nop
 800959c:	2000003c 	.word	0x2000003c
 80095a0:	2000063c 	.word	0x2000063c
 80095a4:	2000080c 	.word	0x2000080c

080095a8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <USER_SPI_status+0x14>
 80095b8:	2301      	movs	r3, #1
 80095ba:	e002      	b.n	80095c2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80095bc:	4b04      	ldr	r3, [pc, #16]	; (80095d0 <USER_SPI_status+0x28>)
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	b2db      	uxtb	r3, r3
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	2000003c 	.word	0x2000003c

080095d4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60b9      	str	r1, [r7, #8]
 80095dc:	607a      	str	r2, [r7, #4]
 80095de:	603b      	str	r3, [r7, #0]
 80095e0:	4603      	mov	r3, r0
 80095e2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d102      	bne.n	80095f0 <USER_SPI_read+0x1c>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <USER_SPI_read+0x20>
 80095f0:	2304      	movs	r3, #4
 80095f2:	e04d      	b.n	8009690 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80095f4:	4b28      	ldr	r3, [pc, #160]	; (8009698 <USER_SPI_read+0xc4>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <USER_SPI_read+0x32>
 8009602:	2303      	movs	r3, #3
 8009604:	e044      	b.n	8009690 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009606:	4b25      	ldr	r3, [pc, #148]	; (800969c <USER_SPI_read+0xc8>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	f003 0308 	and.w	r3, r3, #8
 800960e:	2b00      	cmp	r3, #0
 8009610:	d102      	bne.n	8009618 <USER_SPI_read+0x44>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	025b      	lsls	r3, r3, #9
 8009616:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d111      	bne.n	8009642 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800961e:	6879      	ldr	r1, [r7, #4]
 8009620:	2011      	movs	r0, #17
 8009622:	f7ff fe66 	bl	80092f2 <send_cmd>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d129      	bne.n	8009680 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800962c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009630:	68b8      	ldr	r0, [r7, #8]
 8009632:	f7ff fe03 	bl	800923c <rcvr_datablock>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d021      	beq.n	8009680 <USER_SPI_read+0xac>
			count = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	603b      	str	r3, [r7, #0]
 8009640:	e01e      	b.n	8009680 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009642:	6879      	ldr	r1, [r7, #4]
 8009644:	2012      	movs	r0, #18
 8009646:	f7ff fe54 	bl	80092f2 <send_cmd>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d117      	bne.n	8009680 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009654:	68b8      	ldr	r0, [r7, #8]
 8009656:	f7ff fdf1 	bl	800923c <rcvr_datablock>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00a      	beq.n	8009676 <USER_SPI_read+0xa2>
				buff += 512;
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009666:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	3b01      	subs	r3, #1
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1ed      	bne.n	8009650 <USER_SPI_read+0x7c>
 8009674:	e000      	b.n	8009678 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009676:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009678:	2100      	movs	r1, #0
 800967a:	200c      	movs	r0, #12
 800967c:	f7ff fe39 	bl	80092f2 <send_cmd>
		}
	}
	despiselect();
 8009680:	f7ff fdb4 	bl	80091ec <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	bf14      	ite	ne
 800968a:	2301      	movne	r3, #1
 800968c:	2300      	moveq	r3, #0
 800968e:	b2db      	uxtb	r3, r3
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	2000003c 	.word	0x2000003c
 800969c:	2000080c 	.word	0x2000080c

080096a0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60b9      	str	r1, [r7, #8]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	4603      	mov	r3, r0
 80096ae:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d102      	bne.n	80096bc <USER_SPI_write+0x1c>
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <USER_SPI_write+0x20>
 80096bc:	2304      	movs	r3, #4
 80096be:	e063      	b.n	8009788 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80096c0:	4b33      	ldr	r3, [pc, #204]	; (8009790 <USER_SPI_write+0xf0>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <USER_SPI_write+0x32>
 80096ce:	2303      	movs	r3, #3
 80096d0:	e05a      	b.n	8009788 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80096d2:	4b2f      	ldr	r3, [pc, #188]	; (8009790 <USER_SPI_write+0xf0>)
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	f003 0304 	and.w	r3, r3, #4
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <USER_SPI_write+0x44>
 80096e0:	2302      	movs	r3, #2
 80096e2:	e051      	b.n	8009788 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80096e4:	4b2b      	ldr	r3, [pc, #172]	; (8009794 <USER_SPI_write+0xf4>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	f003 0308 	and.w	r3, r3, #8
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <USER_SPI_write+0x56>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	025b      	lsls	r3, r3, #9
 80096f4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d110      	bne.n	800971e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	2018      	movs	r0, #24
 8009700:	f7ff fdf7 	bl	80092f2 <send_cmd>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d136      	bne.n	8009778 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800970a:	21fe      	movs	r1, #254	; 0xfe
 800970c:	68b8      	ldr	r0, [r7, #8]
 800970e:	f7ff fdbe 	bl	800928e <xmit_datablock>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d02f      	beq.n	8009778 <USER_SPI_write+0xd8>
			count = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	e02c      	b.n	8009778 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800971e:	4b1d      	ldr	r3, [pc, #116]	; (8009794 <USER_SPI_write+0xf4>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	f003 0306 	and.w	r3, r3, #6
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <USER_SPI_write+0x92>
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	2097      	movs	r0, #151	; 0x97
 800972e:	f7ff fde0 	bl	80092f2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009732:	6879      	ldr	r1, [r7, #4]
 8009734:	2019      	movs	r0, #25
 8009736:	f7ff fddc 	bl	80092f2 <send_cmd>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d11b      	bne.n	8009778 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009740:	21fc      	movs	r1, #252	; 0xfc
 8009742:	68b8      	ldr	r0, [r7, #8]
 8009744:	f7ff fda3 	bl	800928e <xmit_datablock>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00a      	beq.n	8009764 <USER_SPI_write+0xc4>
				buff += 512;
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009754:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	3b01      	subs	r3, #1
 800975a:	603b      	str	r3, [r7, #0]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1ee      	bne.n	8009740 <USER_SPI_write+0xa0>
 8009762:	e000      	b.n	8009766 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009764:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009766:	21fd      	movs	r1, #253	; 0xfd
 8009768:	2000      	movs	r0, #0
 800976a:	f7ff fd90 	bl	800928e <xmit_datablock>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <USER_SPI_write+0xd8>
 8009774:	2301      	movs	r3, #1
 8009776:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009778:	f7ff fd38 	bl	80091ec <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	bf14      	ite	ne
 8009782:	2301      	movne	r3, #1
 8009784:	2300      	moveq	r3, #0
 8009786:	b2db      	uxtb	r3, r3
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	2000003c 	.word	0x2000003c
 8009794:	2000080c 	.word	0x2000080c

08009798 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08c      	sub	sp, #48	; 0x30
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	603a      	str	r2, [r7, #0]
 80097a2:	71fb      	strb	r3, [r7, #7]
 80097a4:	460b      	mov	r3, r1
 80097a6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80097a8:	79fb      	ldrb	r3, [r7, #7]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <USER_SPI_ioctl+0x1a>
 80097ae:	2304      	movs	r3, #4
 80097b0:	e15a      	b.n	8009a68 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80097b2:	4baf      	ldr	r3, [pc, #700]	; (8009a70 <USER_SPI_ioctl+0x2d8>)
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <USER_SPI_ioctl+0x2c>
 80097c0:	2303      	movs	r3, #3
 80097c2:	e151      	b.n	8009a68 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80097ca:	79bb      	ldrb	r3, [r7, #6]
 80097cc:	2b04      	cmp	r3, #4
 80097ce:	f200 8136 	bhi.w	8009a3e <USER_SPI_ioctl+0x2a6>
 80097d2:	a201      	add	r2, pc, #4	; (adr r2, 80097d8 <USER_SPI_ioctl+0x40>)
 80097d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d8:	080097ed 	.word	0x080097ed
 80097dc:	08009801 	.word	0x08009801
 80097e0:	08009a3f 	.word	0x08009a3f
 80097e4:	080098ad 	.word	0x080098ad
 80097e8:	080099a3 	.word	0x080099a3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80097ec:	f7ff fd0c 	bl	8009208 <spiselect>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f000 8127 	beq.w	8009a46 <USER_SPI_ioctl+0x2ae>
 80097f8:	2300      	movs	r3, #0
 80097fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80097fe:	e122      	b.n	8009a46 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009800:	2100      	movs	r1, #0
 8009802:	2009      	movs	r0, #9
 8009804:	f7ff fd75 	bl	80092f2 <send_cmd>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	f040 811d 	bne.w	8009a4a <USER_SPI_ioctl+0x2b2>
 8009810:	f107 030c 	add.w	r3, r7, #12
 8009814:	2110      	movs	r1, #16
 8009816:	4618      	mov	r0, r3
 8009818:	f7ff fd10 	bl	800923c <rcvr_datablock>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 8113 	beq.w	8009a4a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009824:	7b3b      	ldrb	r3, [r7, #12]
 8009826:	099b      	lsrs	r3, r3, #6
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b01      	cmp	r3, #1
 800982c:	d111      	bne.n	8009852 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800982e:	7d7b      	ldrb	r3, [r7, #21]
 8009830:	461a      	mov	r2, r3
 8009832:	7d3b      	ldrb	r3, [r7, #20]
 8009834:	021b      	lsls	r3, r3, #8
 8009836:	4413      	add	r3, r2
 8009838:	461a      	mov	r2, r3
 800983a:	7cfb      	ldrb	r3, [r7, #19]
 800983c:	041b      	lsls	r3, r3, #16
 800983e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009842:	4413      	add	r3, r2
 8009844:	3301      	adds	r3, #1
 8009846:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	029a      	lsls	r2, r3, #10
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	e028      	b.n	80098a4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009852:	7c7b      	ldrb	r3, [r7, #17]
 8009854:	f003 030f 	and.w	r3, r3, #15
 8009858:	b2da      	uxtb	r2, r3
 800985a:	7dbb      	ldrb	r3, [r7, #22]
 800985c:	09db      	lsrs	r3, r3, #7
 800985e:	b2db      	uxtb	r3, r3
 8009860:	4413      	add	r3, r2
 8009862:	b2da      	uxtb	r2, r3
 8009864:	7d7b      	ldrb	r3, [r7, #21]
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	b2db      	uxtb	r3, r3
 800986a:	f003 0306 	and.w	r3, r3, #6
 800986e:	b2db      	uxtb	r3, r3
 8009870:	4413      	add	r3, r2
 8009872:	b2db      	uxtb	r3, r3
 8009874:	3302      	adds	r3, #2
 8009876:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800987a:	7d3b      	ldrb	r3, [r7, #20]
 800987c:	099b      	lsrs	r3, r3, #6
 800987e:	b2db      	uxtb	r3, r3
 8009880:	461a      	mov	r2, r3
 8009882:	7cfb      	ldrb	r3, [r7, #19]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	441a      	add	r2, r3
 8009888:	7cbb      	ldrb	r3, [r7, #18]
 800988a:	029b      	lsls	r3, r3, #10
 800988c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009890:	4413      	add	r3, r2
 8009892:	3301      	adds	r3, #1
 8009894:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009896:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800989a:	3b09      	subs	r3, #9
 800989c:	69fa      	ldr	r2, [r7, #28]
 800989e:	409a      	lsls	r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80098aa:	e0ce      	b.n	8009a4a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80098ac:	4b71      	ldr	r3, [pc, #452]	; (8009a74 <USER_SPI_ioctl+0x2dc>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d031      	beq.n	800991c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80098b8:	2100      	movs	r1, #0
 80098ba:	208d      	movs	r0, #141	; 0x8d
 80098bc:	f7ff fd19 	bl	80092f2 <send_cmd>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f040 80c3 	bne.w	8009a4e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80098c8:	20ff      	movs	r0, #255	; 0xff
 80098ca:	f7ff fc25 	bl	8009118 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80098ce:	f107 030c 	add.w	r3, r7, #12
 80098d2:	2110      	movs	r1, #16
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff fcb1 	bl	800923c <rcvr_datablock>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 80b6 	beq.w	8009a4e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80098e2:	2330      	movs	r3, #48	; 0x30
 80098e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80098e8:	e007      	b.n	80098fa <USER_SPI_ioctl+0x162>
 80098ea:	20ff      	movs	r0, #255	; 0xff
 80098ec:	f7ff fc14 	bl	8009118 <xchg_spi>
 80098f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80098f4:	3b01      	subs	r3, #1
 80098f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80098fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1f3      	bne.n	80098ea <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009902:	7dbb      	ldrb	r3, [r7, #22]
 8009904:	091b      	lsrs	r3, r3, #4
 8009906:	b2db      	uxtb	r3, r3
 8009908:	461a      	mov	r2, r3
 800990a:	2310      	movs	r3, #16
 800990c:	fa03 f202 	lsl.w	r2, r3, r2
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800991a:	e098      	b.n	8009a4e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800991c:	2100      	movs	r1, #0
 800991e:	2009      	movs	r0, #9
 8009920:	f7ff fce7 	bl	80092f2 <send_cmd>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	f040 8091 	bne.w	8009a4e <USER_SPI_ioctl+0x2b6>
 800992c:	f107 030c 	add.w	r3, r7, #12
 8009930:	2110      	movs	r1, #16
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff fc82 	bl	800923c <rcvr_datablock>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 8087 	beq.w	8009a4e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009940:	4b4c      	ldr	r3, [pc, #304]	; (8009a74 <USER_SPI_ioctl+0x2dc>)
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	f003 0302 	and.w	r3, r3, #2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d012      	beq.n	8009972 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800994c:	7dbb      	ldrb	r3, [r7, #22]
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009954:	7dfa      	ldrb	r2, [r7, #23]
 8009956:	09d2      	lsrs	r2, r2, #7
 8009958:	b2d2      	uxtb	r2, r2
 800995a:	4413      	add	r3, r2
 800995c:	1c5a      	adds	r2, r3, #1
 800995e:	7e7b      	ldrb	r3, [r7, #25]
 8009960:	099b      	lsrs	r3, r3, #6
 8009962:	b2db      	uxtb	r3, r3
 8009964:	3b01      	subs	r3, #1
 8009966:	fa02 f303 	lsl.w	r3, r2, r3
 800996a:	461a      	mov	r2, r3
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	e013      	b.n	800999a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009972:	7dbb      	ldrb	r3, [r7, #22]
 8009974:	109b      	asrs	r3, r3, #2
 8009976:	b29b      	uxth	r3, r3
 8009978:	f003 031f 	and.w	r3, r3, #31
 800997c:	3301      	adds	r3, #1
 800997e:	7dfa      	ldrb	r2, [r7, #23]
 8009980:	00d2      	lsls	r2, r2, #3
 8009982:	f002 0218 	and.w	r2, r2, #24
 8009986:	7df9      	ldrb	r1, [r7, #23]
 8009988:	0949      	lsrs	r1, r1, #5
 800998a:	b2c9      	uxtb	r1, r1
 800998c:	440a      	add	r2, r1
 800998e:	3201      	adds	r2, #1
 8009990:	fb02 f303 	mul.w	r3, r2, r3
 8009994:	461a      	mov	r2, r3
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80099a0:	e055      	b.n	8009a4e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80099a2:	4b34      	ldr	r3, [pc, #208]	; (8009a74 <USER_SPI_ioctl+0x2dc>)
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	f003 0306 	and.w	r3, r3, #6
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d051      	beq.n	8009a52 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80099ae:	f107 020c 	add.w	r2, r7, #12
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	210b      	movs	r1, #11
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7ff feee 	bl	8009798 <USER_SPI_ioctl>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d149      	bne.n	8009a56 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80099c2:	7b3b      	ldrb	r3, [r7, #12]
 80099c4:	099b      	lsrs	r3, r3, #6
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d104      	bne.n	80099d6 <USER_SPI_ioctl+0x23e>
 80099cc:	7dbb      	ldrb	r3, [r7, #22]
 80099ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d041      	beq.n	8009a5a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	623b      	str	r3, [r7, #32]
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	62bb      	str	r3, [r7, #40]	; 0x28
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80099e6:	4b23      	ldr	r3, [pc, #140]	; (8009a74 <USER_SPI_ioctl+0x2dc>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	f003 0308 	and.w	r3, r3, #8
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d105      	bne.n	80099fe <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80099f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f4:	025b      	lsls	r3, r3, #9
 80099f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	025b      	lsls	r3, r3, #9
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80099fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a00:	2020      	movs	r0, #32
 8009a02:	f7ff fc76 	bl	80092f2 <send_cmd>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d128      	bne.n	8009a5e <USER_SPI_ioctl+0x2c6>
 8009a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a0e:	2021      	movs	r0, #33	; 0x21
 8009a10:	f7ff fc6f 	bl	80092f2 <send_cmd>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d121      	bne.n	8009a5e <USER_SPI_ioctl+0x2c6>
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	2026      	movs	r0, #38	; 0x26
 8009a1e:	f7ff fc68 	bl	80092f2 <send_cmd>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d11a      	bne.n	8009a5e <USER_SPI_ioctl+0x2c6>
 8009a28:	f247 5030 	movw	r0, #30000	; 0x7530
 8009a2c:	f7ff fbba 	bl	80091a4 <wait_ready>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d013      	beq.n	8009a5e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009a36:	2300      	movs	r3, #0
 8009a38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009a3c:	e00f      	b.n	8009a5e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009a3e:	2304      	movs	r3, #4
 8009a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009a44:	e00c      	b.n	8009a60 <USER_SPI_ioctl+0x2c8>
		break;
 8009a46:	bf00      	nop
 8009a48:	e00a      	b.n	8009a60 <USER_SPI_ioctl+0x2c8>
		break;
 8009a4a:	bf00      	nop
 8009a4c:	e008      	b.n	8009a60 <USER_SPI_ioctl+0x2c8>
		break;
 8009a4e:	bf00      	nop
 8009a50:	e006      	b.n	8009a60 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009a52:	bf00      	nop
 8009a54:	e004      	b.n	8009a60 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009a56:	bf00      	nop
 8009a58:	e002      	b.n	8009a60 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009a5a:	bf00      	nop
 8009a5c:	e000      	b.n	8009a60 <USER_SPI_ioctl+0x2c8>
		break;
 8009a5e:	bf00      	nop
	}

	despiselect();
 8009a60:	f7ff fbc4 	bl	80091ec <despiselect>

	return res;
 8009a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3730      	adds	r7, #48	; 0x30
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	2000003c 	.word	0x2000003c
 8009a74:	2000080c 	.word	0x2000080c

08009a78 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009a82:	79fb      	ldrb	r3, [r7, #7]
 8009a84:	4a08      	ldr	r2, [pc, #32]	; (8009aa8 <disk_status+0x30>)
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	79fa      	ldrb	r2, [r7, #7]
 8009a90:	4905      	ldr	r1, [pc, #20]	; (8009aa8 <disk_status+0x30>)
 8009a92:	440a      	add	r2, r1
 8009a94:	7a12      	ldrb	r2, [r2, #8]
 8009a96:	4610      	mov	r0, r2
 8009a98:	4798      	blx	r3
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20000840 	.word	0x20000840

08009aac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	4a0d      	ldr	r2, [pc, #52]	; (8009af4 <disk_initialize+0x48>)
 8009abe:	5cd3      	ldrb	r3, [r2, r3]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d111      	bne.n	8009ae8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	4a0b      	ldr	r2, [pc, #44]	; (8009af4 <disk_initialize+0x48>)
 8009ac8:	2101      	movs	r1, #1
 8009aca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009acc:	79fb      	ldrb	r3, [r7, #7]
 8009ace:	4a09      	ldr	r2, [pc, #36]	; (8009af4 <disk_initialize+0x48>)
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	79fa      	ldrb	r2, [r7, #7]
 8009ada:	4906      	ldr	r1, [pc, #24]	; (8009af4 <disk_initialize+0x48>)
 8009adc:	440a      	add	r2, r1
 8009ade:	7a12      	ldrb	r2, [r2, #8]
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	4798      	blx	r3
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20000840 	.word	0x20000840

08009af8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009af8:	b590      	push	{r4, r7, lr}
 8009afa:	b087      	sub	sp, #28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60b9      	str	r1, [r7, #8]
 8009b00:	607a      	str	r2, [r7, #4]
 8009b02:	603b      	str	r3, [r7, #0]
 8009b04:	4603      	mov	r3, r0
 8009b06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	4a0a      	ldr	r2, [pc, #40]	; (8009b34 <disk_read+0x3c>)
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4413      	add	r3, r2
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	689c      	ldr	r4, [r3, #8]
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
 8009b16:	4a07      	ldr	r2, [pc, #28]	; (8009b34 <disk_read+0x3c>)
 8009b18:	4413      	add	r3, r2
 8009b1a:	7a18      	ldrb	r0, [r3, #8]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	68b9      	ldr	r1, [r7, #8]
 8009b22:	47a0      	blx	r4
 8009b24:	4603      	mov	r3, r0
 8009b26:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd90      	pop	{r4, r7, pc}
 8009b32:	bf00      	nop
 8009b34:	20000840 	.word	0x20000840

08009b38 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009b38:	b590      	push	{r4, r7, lr}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	607a      	str	r2, [r7, #4]
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
 8009b4a:	4a0a      	ldr	r2, [pc, #40]	; (8009b74 <disk_write+0x3c>)
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4413      	add	r3, r2
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	68dc      	ldr	r4, [r3, #12]
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	4a07      	ldr	r2, [pc, #28]	; (8009b74 <disk_write+0x3c>)
 8009b58:	4413      	add	r3, r2
 8009b5a:	7a18      	ldrb	r0, [r3, #8]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	68b9      	ldr	r1, [r7, #8]
 8009b62:	47a0      	blx	r4
 8009b64:	4603      	mov	r3, r0
 8009b66:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	371c      	adds	r7, #28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd90      	pop	{r4, r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000840 	.word	0x20000840

08009b78 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	603a      	str	r2, [r7, #0]
 8009b82:	71fb      	strb	r3, [r7, #7]
 8009b84:	460b      	mov	r3, r1
 8009b86:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b88:	79fb      	ldrb	r3, [r7, #7]
 8009b8a:	4a09      	ldr	r2, [pc, #36]	; (8009bb0 <disk_ioctl+0x38>)
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4413      	add	r3, r2
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	79fa      	ldrb	r2, [r7, #7]
 8009b96:	4906      	ldr	r1, [pc, #24]	; (8009bb0 <disk_ioctl+0x38>)
 8009b98:	440a      	add	r2, r1
 8009b9a:	7a10      	ldrb	r0, [r2, #8]
 8009b9c:	79b9      	ldrb	r1, [r7, #6]
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	4798      	blx	r3
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73fb      	strb	r3, [r7, #15]
  return res;
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	20000840 	.word	0x20000840

08009bb4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009bc4:	89fb      	ldrh	r3, [r7, #14]
 8009bc6:	021b      	lsls	r3, r3, #8
 8009bc8:	b21a      	sxth	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	b21b      	sxth	r3, r3
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	b21b      	sxth	r3, r3
 8009bd4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009bd6:	89fb      	ldrh	r3, [r7, #14]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3303      	adds	r3, #3
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	021b      	lsls	r3, r3, #8
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	3202      	adds	r2, #2
 8009bfc:	7812      	ldrb	r2, [r2, #0]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	021b      	lsls	r3, r3, #8
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	3201      	adds	r2, #1
 8009c0a:	7812      	ldrb	r2, [r2, #0]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	7812      	ldrb	r2, [r2, #0]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3714      	adds	r7, #20
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	460b      	mov	r3, r1
 8009c34:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	1c5a      	adds	r2, r3, #1
 8009c3a:	607a      	str	r2, [r7, #4]
 8009c3c:	887a      	ldrh	r2, [r7, #2]
 8009c3e:	b2d2      	uxtb	r2, r2
 8009c40:	701a      	strb	r2, [r3, #0]
 8009c42:	887b      	ldrh	r3, [r7, #2]
 8009c44:	0a1b      	lsrs	r3, r3, #8
 8009c46:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	607a      	str	r2, [r7, #4]
 8009c4e:	887a      	ldrh	r2, [r7, #2]
 8009c50:	b2d2      	uxtb	r2, r2
 8009c52:	701a      	strb	r2, [r3, #0]
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	607a      	str	r2, [r7, #4]
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	b2d2      	uxtb	r2, r2
 8009c74:	701a      	strb	r2, [r3, #0]
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	0a1b      	lsrs	r3, r3, #8
 8009c7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	607a      	str	r2, [r7, #4]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	b2d2      	uxtb	r2, r2
 8009c86:	701a      	strb	r2, [r3, #0]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	0a1b      	lsrs	r3, r3, #8
 8009c8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	1c5a      	adds	r2, r3, #1
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	b2d2      	uxtb	r2, r2
 8009c98:	701a      	strb	r2, [r3, #0]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	0a1b      	lsrs	r3, r3, #8
 8009c9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	1c5a      	adds	r2, r3, #1
 8009ca4:	607a      	str	r2, [r7, #4]
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	b2d2      	uxtb	r2, r2
 8009caa:	701a      	strb	r2, [r3, #0]
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00d      	beq.n	8009cee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	1c53      	adds	r3, r2, #1
 8009cd6:	613b      	str	r3, [r7, #16]
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	1c59      	adds	r1, r3, #1
 8009cdc:	6179      	str	r1, [r7, #20]
 8009cde:	7812      	ldrb	r2, [r2, #0]
 8009ce0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	607b      	str	r3, [r7, #4]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1f1      	bne.n	8009cd2 <mem_cpy+0x1a>
	}
}
 8009cee:	bf00      	nop
 8009cf0:	371c      	adds	r7, #28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009cfa:	b480      	push	{r7}
 8009cfc:	b087      	sub	sp, #28
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	60f8      	str	r0, [r7, #12]
 8009d02:	60b9      	str	r1, [r7, #8]
 8009d04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	1c5a      	adds	r2, r3, #1
 8009d0e:	617a      	str	r2, [r7, #20]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	b2d2      	uxtb	r2, r2
 8009d14:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	607b      	str	r3, [r7, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1f3      	bne.n	8009d0a <mem_set+0x10>
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	371c      	adds	r7, #28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009d30:	b480      	push	{r7}
 8009d32:	b089      	sub	sp, #36	; 0x24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	61fb      	str	r3, [r7, #28]
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009d44:	2300      	movs	r3, #0
 8009d46:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	1c5a      	adds	r2, r3, #1
 8009d4c:	61fa      	str	r2, [r7, #28]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	4619      	mov	r1, r3
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	1c5a      	adds	r2, r3, #1
 8009d56:	61ba      	str	r2, [r7, #24]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	1acb      	subs	r3, r1, r3
 8009d5c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	3b01      	subs	r3, #1
 8009d62:	607b      	str	r3, [r7, #4]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d002      	beq.n	8009d70 <mem_cmp+0x40>
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d0eb      	beq.n	8009d48 <mem_cmp+0x18>

	return r;
 8009d70:	697b      	ldr	r3, [r7, #20]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3724      	adds	r7, #36	; 0x24
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009d7e:	b480      	push	{r7}
 8009d80:	b083      	sub	sp, #12
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009d88:	e002      	b.n	8009d90 <chk_chr+0x12>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	607b      	str	r3, [r7, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d005      	beq.n	8009da4 <chk_chr+0x26>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d1f2      	bne.n	8009d8a <chk_chr+0xc>
	return *str;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	781b      	ldrb	r3, [r3, #0]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60bb      	str	r3, [r7, #8]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	e029      	b.n	8009e1c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009dc8:	4a27      	ldr	r2, [pc, #156]	; (8009e68 <chk_lock+0xb4>)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	011b      	lsls	r3, r3, #4
 8009dce:	4413      	add	r3, r2
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d01d      	beq.n	8009e12 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009dd6:	4a24      	ldr	r2, [pc, #144]	; (8009e68 <chk_lock+0xb4>)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	011b      	lsls	r3, r3, #4
 8009ddc:	4413      	add	r3, r2
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d116      	bne.n	8009e16 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009de8:	4a1f      	ldr	r2, [pc, #124]	; (8009e68 <chk_lock+0xb4>)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	011b      	lsls	r3, r3, #4
 8009dee:	4413      	add	r3, r2
 8009df0:	3304      	adds	r3, #4
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d10c      	bne.n	8009e16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009dfc:	4a1a      	ldr	r2, [pc, #104]	; (8009e68 <chk_lock+0xb4>)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	011b      	lsls	r3, r3, #4
 8009e02:	4413      	add	r3, r2
 8009e04:	3308      	adds	r3, #8
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d102      	bne.n	8009e16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e10:	e007      	b.n	8009e22 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009e12:	2301      	movs	r3, #1
 8009e14:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d9d2      	bls.n	8009dc8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d109      	bne.n	8009e3c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d102      	bne.n	8009e34 <chk_lock+0x80>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d101      	bne.n	8009e38 <chk_lock+0x84>
 8009e34:	2300      	movs	r3, #0
 8009e36:	e010      	b.n	8009e5a <chk_lock+0xa6>
 8009e38:	2312      	movs	r3, #18
 8009e3a:	e00e      	b.n	8009e5a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d108      	bne.n	8009e54 <chk_lock+0xa0>
 8009e42:	4a09      	ldr	r2, [pc, #36]	; (8009e68 <chk_lock+0xb4>)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	011b      	lsls	r3, r3, #4
 8009e48:	4413      	add	r3, r2
 8009e4a:	330c      	adds	r3, #12
 8009e4c:	881b      	ldrh	r3, [r3, #0]
 8009e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e52:	d101      	bne.n	8009e58 <chk_lock+0xa4>
 8009e54:	2310      	movs	r3, #16
 8009e56:	e000      	b.n	8009e5a <chk_lock+0xa6>
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	20000820 	.word	0x20000820

08009e6c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e72:	2300      	movs	r3, #0
 8009e74:	607b      	str	r3, [r7, #4]
 8009e76:	e002      	b.n	8009e7e <enq_lock+0x12>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	607b      	str	r3, [r7, #4]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d806      	bhi.n	8009e92 <enq_lock+0x26>
 8009e84:	4a09      	ldr	r2, [pc, #36]	; (8009eac <enq_lock+0x40>)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	011b      	lsls	r3, r3, #4
 8009e8a:	4413      	add	r3, r2
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1f2      	bne.n	8009e78 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	bf14      	ite	ne
 8009e98:	2301      	movne	r3, #1
 8009e9a:	2300      	moveq	r3, #0
 8009e9c:	b2db      	uxtb	r3, r3
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	20000820 	.word	0x20000820

08009eb0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60fb      	str	r3, [r7, #12]
 8009ebe:	e01f      	b.n	8009f00 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009ec0:	4a41      	ldr	r2, [pc, #260]	; (8009fc8 <inc_lock+0x118>)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	011b      	lsls	r3, r3, #4
 8009ec6:	4413      	add	r3, r2
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d113      	bne.n	8009efa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009ed2:	4a3d      	ldr	r2, [pc, #244]	; (8009fc8 <inc_lock+0x118>)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	011b      	lsls	r3, r3, #4
 8009ed8:	4413      	add	r3, r2
 8009eda:	3304      	adds	r3, #4
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d109      	bne.n	8009efa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009ee6:	4a38      	ldr	r2, [pc, #224]	; (8009fc8 <inc_lock+0x118>)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	011b      	lsls	r3, r3, #4
 8009eec:	4413      	add	r3, r2
 8009eee:	3308      	adds	r3, #8
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d006      	beq.n	8009f08 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3301      	adds	r3, #1
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d9dc      	bls.n	8009ec0 <inc_lock+0x10>
 8009f06:	e000      	b.n	8009f0a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009f08:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d132      	bne.n	8009f76 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f10:	2300      	movs	r3, #0
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	e002      	b.n	8009f1c <inc_lock+0x6c>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d806      	bhi.n	8009f30 <inc_lock+0x80>
 8009f22:	4a29      	ldr	r2, [pc, #164]	; (8009fc8 <inc_lock+0x118>)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	011b      	lsls	r3, r3, #4
 8009f28:	4413      	add	r3, r2
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1f2      	bne.n	8009f16 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d101      	bne.n	8009f3a <inc_lock+0x8a>
 8009f36:	2300      	movs	r3, #0
 8009f38:	e040      	b.n	8009fbc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	4922      	ldr	r1, [pc, #136]	; (8009fc8 <inc_lock+0x118>)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	011b      	lsls	r3, r3, #4
 8009f44:	440b      	add	r3, r1
 8009f46:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	689a      	ldr	r2, [r3, #8]
 8009f4c:	491e      	ldr	r1, [pc, #120]	; (8009fc8 <inc_lock+0x118>)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	011b      	lsls	r3, r3, #4
 8009f52:	440b      	add	r3, r1
 8009f54:	3304      	adds	r3, #4
 8009f56:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	695a      	ldr	r2, [r3, #20]
 8009f5c:	491a      	ldr	r1, [pc, #104]	; (8009fc8 <inc_lock+0x118>)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	011b      	lsls	r3, r3, #4
 8009f62:	440b      	add	r3, r1
 8009f64:	3308      	adds	r3, #8
 8009f66:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009f68:	4a17      	ldr	r2, [pc, #92]	; (8009fc8 <inc_lock+0x118>)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	011b      	lsls	r3, r3, #4
 8009f6e:	4413      	add	r3, r2
 8009f70:	330c      	adds	r3, #12
 8009f72:	2200      	movs	r2, #0
 8009f74:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d009      	beq.n	8009f90 <inc_lock+0xe0>
 8009f7c:	4a12      	ldr	r2, [pc, #72]	; (8009fc8 <inc_lock+0x118>)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	011b      	lsls	r3, r3, #4
 8009f82:	4413      	add	r3, r2
 8009f84:	330c      	adds	r3, #12
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <inc_lock+0xe0>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	e015      	b.n	8009fbc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d108      	bne.n	8009fa8 <inc_lock+0xf8>
 8009f96:	4a0c      	ldr	r2, [pc, #48]	; (8009fc8 <inc_lock+0x118>)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	011b      	lsls	r3, r3, #4
 8009f9c:	4413      	add	r3, r2
 8009f9e:	330c      	adds	r3, #12
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	e001      	b.n	8009fac <inc_lock+0xfc>
 8009fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fac:	4906      	ldr	r1, [pc, #24]	; (8009fc8 <inc_lock+0x118>)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	011b      	lsls	r3, r3, #4
 8009fb2:	440b      	add	r3, r1
 8009fb4:	330c      	adds	r3, #12
 8009fb6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3301      	adds	r3, #1
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	20000820 	.word	0x20000820

08009fcc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	607b      	str	r3, [r7, #4]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d825      	bhi.n	800a02c <dec_lock+0x60>
		n = Files[i].ctr;
 8009fe0:	4a17      	ldr	r2, [pc, #92]	; (800a040 <dec_lock+0x74>)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	011b      	lsls	r3, r3, #4
 8009fe6:	4413      	add	r3, r2
 8009fe8:	330c      	adds	r3, #12
 8009fea:	881b      	ldrh	r3, [r3, #0]
 8009fec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009fee:	89fb      	ldrh	r3, [r7, #14]
 8009ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ff4:	d101      	bne.n	8009ffa <dec_lock+0x2e>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009ffa:	89fb      	ldrh	r3, [r7, #14]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <dec_lock+0x3a>
 800a000:	89fb      	ldrh	r3, [r7, #14]
 800a002:	3b01      	subs	r3, #1
 800a004:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a006:	4a0e      	ldr	r2, [pc, #56]	; (800a040 <dec_lock+0x74>)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	011b      	lsls	r3, r3, #4
 800a00c:	4413      	add	r3, r2
 800a00e:	330c      	adds	r3, #12
 800a010:	89fa      	ldrh	r2, [r7, #14]
 800a012:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a014:	89fb      	ldrh	r3, [r7, #14]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d105      	bne.n	800a026 <dec_lock+0x5a>
 800a01a:	4a09      	ldr	r2, [pc, #36]	; (800a040 <dec_lock+0x74>)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	011b      	lsls	r3, r3, #4
 800a020:	4413      	add	r3, r2
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	737b      	strb	r3, [r7, #13]
 800a02a:	e001      	b.n	800a030 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a02c:	2302      	movs	r3, #2
 800a02e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a030:	7b7b      	ldrb	r3, [r7, #13]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3714      	adds	r7, #20
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	20000820 	.word	0x20000820

0800a044 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a04c:	2300      	movs	r3, #0
 800a04e:	60fb      	str	r3, [r7, #12]
 800a050:	e010      	b.n	800a074 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a052:	4a0d      	ldr	r2, [pc, #52]	; (800a088 <clear_lock+0x44>)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	011b      	lsls	r3, r3, #4
 800a058:	4413      	add	r3, r2
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d105      	bne.n	800a06e <clear_lock+0x2a>
 800a062:	4a09      	ldr	r2, [pc, #36]	; (800a088 <clear_lock+0x44>)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	011b      	lsls	r3, r3, #4
 800a068:	4413      	add	r3, r2
 800a06a:	2200      	movs	r2, #0
 800a06c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3301      	adds	r3, #1
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d9eb      	bls.n	800a052 <clear_lock+0xe>
	}
}
 800a07a:	bf00      	nop
 800a07c:	bf00      	nop
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	20000820 	.word	0x20000820

0800a08c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	78db      	ldrb	r3, [r3, #3]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d034      	beq.n	800a10a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	7858      	ldrb	r0, [r3, #1]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	f7ff fd40 	bl	8009b38 <disk_write>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	73fb      	strb	r3, [r7, #15]
 800a0c2:	e022      	b.n	800a10a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	1ad2      	subs	r2, r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d217      	bcs.n	800a10a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	789b      	ldrb	r3, [r3, #2]
 800a0de:	613b      	str	r3, [r7, #16]
 800a0e0:	e010      	b.n	800a104 <sync_window+0x78>
					wsect += fs->fsize;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	7858      	ldrb	r0, [r3, #1]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	f7ff fd1d 	bl	8009b38 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	3b01      	subs	r3, #1
 800a102:	613b      	str	r3, [r7, #16]
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d8eb      	bhi.n	800a0e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d01b      	beq.n	800a164 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff ffad 	bl	800a08c <sync_window>
 800a132:	4603      	mov	r3, r0
 800a134:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d113      	bne.n	800a164 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	7858      	ldrb	r0, [r3, #1]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a146:	2301      	movs	r3, #1
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	f7ff fcd5 	bl	8009af8 <disk_read>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d004      	beq.n	800a15e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a154:	f04f 33ff 	mov.w	r3, #4294967295
 800a158:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a164:	7bfb      	ldrb	r3, [r7, #15]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7ff ff87 	bl	800a08c <sync_window>
 800a17e:	4603      	mov	r3, r0
 800a180:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a182:	7bfb      	ldrb	r3, [r7, #15]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d158      	bne.n	800a23a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	2b03      	cmp	r3, #3
 800a18e:	d148      	bne.n	800a222 <sync_fs+0xb2>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	791b      	ldrb	r3, [r3, #4]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d144      	bne.n	800a222 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	3330      	adds	r3, #48	; 0x30
 800a19c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff fda9 	bl	8009cfa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3330      	adds	r3, #48	; 0x30
 800a1ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1b0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fd38 	bl	8009c2a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	3330      	adds	r3, #48	; 0x30
 800a1be:	4921      	ldr	r1, [pc, #132]	; (800a244 <sync_fs+0xd4>)
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7ff fd4d 	bl	8009c60 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	3330      	adds	r3, #48	; 0x30
 800a1ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a1ce:	491e      	ldr	r1, [pc, #120]	; (800a248 <sync_fs+0xd8>)
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff fd45 	bl	8009c60 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	3330      	adds	r3, #48	; 0x30
 800a1da:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	f7ff fd3b 	bl	8009c60 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3330      	adds	r3, #48	; 0x30
 800a1ee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	f7ff fd31 	bl	8009c60 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	1c5a      	adds	r2, r3, #1
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	7858      	ldrb	r0, [r3, #1]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a216:	2301      	movs	r3, #1
 800a218:	f7ff fc8e 	bl	8009b38 <disk_write>
			fs->fsi_flag = 0;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	2200      	movs	r2, #0
 800a228:	2100      	movs	r1, #0
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff fca4 	bl	8009b78 <disk_ioctl>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <sync_fs+0xca>
 800a236:	2301      	movs	r3, #1
 800a238:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	41615252 	.word	0x41615252
 800a248:	61417272 	.word	0x61417272

0800a24c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	3b02      	subs	r3, #2
 800a25a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	3b02      	subs	r3, #2
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	429a      	cmp	r2, r3
 800a266:	d301      	bcc.n	800a26c <clust2sect+0x20>
 800a268:	2300      	movs	r3, #0
 800a26a:	e008      	b.n	800a27e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	895b      	ldrh	r3, [r3, #10]
 800a270:	461a      	mov	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	fb03 f202 	mul.w	r2, r3, r2
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27c:	4413      	add	r3, r2
}
 800a27e:	4618      	mov	r0, r3
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b086      	sub	sp, #24
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d904      	bls.n	800a2aa <get_fat+0x20>
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d302      	bcc.n	800a2b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	617b      	str	r3, [r7, #20]
 800a2ae:	e08f      	b.n	800a3d0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d062      	beq.n	800a384 <get_fat+0xfa>
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	dc7c      	bgt.n	800a3bc <get_fat+0x132>
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d002      	beq.n	800a2cc <get_fat+0x42>
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d042      	beq.n	800a350 <get_fat+0xc6>
 800a2ca:	e077      	b.n	800a3bc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	085b      	lsrs	r3, r3, #1
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	6a1a      	ldr	r2, [r3, #32]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	0a5b      	lsrs	r3, r3, #9
 800a2e2:	4413      	add	r3, r2
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6938      	ldr	r0, [r7, #16]
 800a2e8:	f7ff ff14 	bl	800a114 <move_window>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d167      	bne.n	800a3c2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	1c5a      	adds	r2, r3, #1
 800a2f6:	60fa      	str	r2, [r7, #12]
 800a2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	4413      	add	r3, r2
 800a300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a304:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	6a1a      	ldr	r2, [r3, #32]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	0a5b      	lsrs	r3, r3, #9
 800a30e:	4413      	add	r3, r2
 800a310:	4619      	mov	r1, r3
 800a312:	6938      	ldr	r0, [r7, #16]
 800a314:	f7ff fefe 	bl	800a114 <move_window>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d153      	bne.n	800a3c6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	4413      	add	r3, r2
 800a328:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	461a      	mov	r2, r3
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	4313      	orrs	r3, r2
 800a334:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	f003 0301 	and.w	r3, r3, #1
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <get_fat+0xbc>
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	091b      	lsrs	r3, r3, #4
 800a344:	e002      	b.n	800a34c <get_fat+0xc2>
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a34c:	617b      	str	r3, [r7, #20]
			break;
 800a34e:	e03f      	b.n	800a3d0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	6a1a      	ldr	r2, [r3, #32]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	0a1b      	lsrs	r3, r3, #8
 800a358:	4413      	add	r3, r2
 800a35a:	4619      	mov	r1, r3
 800a35c:	6938      	ldr	r0, [r7, #16]
 800a35e:	f7ff fed9 	bl	800a114 <move_window>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d130      	bne.n	800a3ca <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a376:	4413      	add	r3, r2
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff fc1b 	bl	8009bb4 <ld_word>
 800a37e:	4603      	mov	r3, r0
 800a380:	617b      	str	r3, [r7, #20]
			break;
 800a382:	e025      	b.n	800a3d0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	6a1a      	ldr	r2, [r3, #32]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	09db      	lsrs	r3, r3, #7
 800a38c:	4413      	add	r3, r2
 800a38e:	4619      	mov	r1, r3
 800a390:	6938      	ldr	r0, [r7, #16]
 800a392:	f7ff febf 	bl	800a114 <move_window>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d118      	bne.n	800a3ce <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a3aa:	4413      	add	r3, r2
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff fc19 	bl	8009be4 <ld_dword>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a3b8:	617b      	str	r3, [r7, #20]
			break;
 800a3ba:	e009      	b.n	800a3d0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a3bc:	2301      	movs	r3, #1
 800a3be:	617b      	str	r3, [r7, #20]
 800a3c0:	e006      	b.n	800a3d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3c2:	bf00      	nop
 800a3c4:	e004      	b.n	800a3d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3c6:	bf00      	nop
 800a3c8:	e002      	b.n	800a3d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3ca:	bf00      	nop
 800a3cc:	e000      	b.n	800a3d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a3ce:	bf00      	nop
		}
	}

	return val;
 800a3d0:	697b      	ldr	r3, [r7, #20]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3718      	adds	r7, #24
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a3da:	b590      	push	{r4, r7, lr}
 800a3dc:	b089      	sub	sp, #36	; 0x24
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	f240 80d9 	bls.w	800a5a4 <put_fat+0x1ca>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	f080 80d3 	bcs.w	800a5a4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	2b03      	cmp	r3, #3
 800a404:	f000 8096 	beq.w	800a534 <put_fat+0x15a>
 800a408:	2b03      	cmp	r3, #3
 800a40a:	f300 80cb 	bgt.w	800a5a4 <put_fat+0x1ca>
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d002      	beq.n	800a418 <put_fat+0x3e>
 800a412:	2b02      	cmp	r3, #2
 800a414:	d06e      	beq.n	800a4f4 <put_fat+0x11a>
 800a416:	e0c5      	b.n	800a5a4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	61bb      	str	r3, [r7, #24]
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	085b      	lsrs	r3, r3, #1
 800a420:	69ba      	ldr	r2, [r7, #24]
 800a422:	4413      	add	r3, r2
 800a424:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6a1a      	ldr	r2, [r3, #32]
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	0a5b      	lsrs	r3, r3, #9
 800a42e:	4413      	add	r3, r2
 800a430:	4619      	mov	r1, r3
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f7ff fe6e 	bl	800a114 <move_window>
 800a438:	4603      	mov	r3, r0
 800a43a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a43c:	7ffb      	ldrb	r3, [r7, #31]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f040 80a9 	bne.w	800a596 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	1c59      	adds	r1, r3, #1
 800a44e:	61b9      	str	r1, [r7, #24]
 800a450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a454:	4413      	add	r3, r2
 800a456:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00d      	beq.n	800a47e <put_fat+0xa4>
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	b25b      	sxtb	r3, r3
 800a468:	f003 030f 	and.w	r3, r3, #15
 800a46c:	b25a      	sxtb	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	011b      	lsls	r3, r3, #4
 800a474:	b25b      	sxtb	r3, r3
 800a476:	4313      	orrs	r3, r2
 800a478:	b25b      	sxtb	r3, r3
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	e001      	b.n	800a482 <put_fat+0xa8>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	b2db      	uxtb	r3, r3
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2201      	movs	r2, #1
 800a48a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6a1a      	ldr	r2, [r3, #32]
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	0a5b      	lsrs	r3, r3, #9
 800a494:	4413      	add	r3, r2
 800a496:	4619      	mov	r1, r3
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f7ff fe3b 	bl	800a114 <move_window>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4a2:	7ffb      	ldrb	r3, [r7, #31]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d178      	bne.n	800a59a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4b4:	4413      	add	r3, r2
 800a4b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <put_fat+0xf0>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	091b      	lsrs	r3, r3, #4
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	e00e      	b.n	800a4e8 <put_fat+0x10e>
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	b25b      	sxtb	r3, r3
 800a4d0:	f023 030f 	bic.w	r3, r3, #15
 800a4d4:	b25a      	sxtb	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	0a1b      	lsrs	r3, r3, #8
 800a4da:	b25b      	sxtb	r3, r3
 800a4dc:	f003 030f 	and.w	r3, r3, #15
 800a4e0:	b25b      	sxtb	r3, r3
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	b25b      	sxtb	r3, r3
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	70da      	strb	r2, [r3, #3]
			break;
 800a4f2:	e057      	b.n	800a5a4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6a1a      	ldr	r2, [r3, #32]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	0a1b      	lsrs	r3, r3, #8
 800a4fc:	4413      	add	r3, r2
 800a4fe:	4619      	mov	r1, r3
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff fe07 	bl	800a114 <move_window>
 800a506:	4603      	mov	r3, r0
 800a508:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a50a:	7ffb      	ldrb	r3, [r7, #31]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d146      	bne.n	800a59e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a51e:	4413      	add	r3, r2
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	b292      	uxth	r2, r2
 800a524:	4611      	mov	r1, r2
 800a526:	4618      	mov	r0, r3
 800a528:	f7ff fb7f 	bl	8009c2a <st_word>
			fs->wflag = 1;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2201      	movs	r2, #1
 800a530:	70da      	strb	r2, [r3, #3]
			break;
 800a532:	e037      	b.n	800a5a4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6a1a      	ldr	r2, [r3, #32]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	09db      	lsrs	r3, r3, #7
 800a53c:	4413      	add	r3, r2
 800a53e:	4619      	mov	r1, r3
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f7ff fde7 	bl	800a114 <move_window>
 800a546:	4603      	mov	r3, r0
 800a548:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a54a:	7ffb      	ldrb	r3, [r7, #31]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d128      	bne.n	800a5a2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a564:	4413      	add	r3, r2
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff fb3c 	bl	8009be4 <ld_dword>
 800a56c:	4603      	mov	r3, r0
 800a56e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a572:	4323      	orrs	r3, r4
 800a574:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a584:	4413      	add	r3, r2
 800a586:	6879      	ldr	r1, [r7, #4]
 800a588:	4618      	mov	r0, r3
 800a58a:	f7ff fb69 	bl	8009c60 <st_dword>
			fs->wflag = 1;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2201      	movs	r2, #1
 800a592:	70da      	strb	r2, [r3, #3]
			break;
 800a594:	e006      	b.n	800a5a4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a596:	bf00      	nop
 800a598:	e004      	b.n	800a5a4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a59a:	bf00      	nop
 800a59c:	e002      	b.n	800a5a4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a59e:	bf00      	nop
 800a5a0:	e000      	b.n	800a5a4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a5a2:	bf00      	nop
		}
	}
	return res;
 800a5a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3724      	adds	r7, #36	; 0x24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd90      	pop	{r4, r7, pc}

0800a5ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b088      	sub	sp, #32
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d904      	bls.n	800a5d4 <remove_chain+0x26>
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d301      	bcc.n	800a5d8 <remove_chain+0x2a>
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	e04b      	b.n	800a670 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00c      	beq.n	800a5f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a5de:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e2:	6879      	ldr	r1, [r7, #4]
 800a5e4:	69b8      	ldr	r0, [r7, #24]
 800a5e6:	f7ff fef8 	bl	800a3da <put_fat>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a5ee:	7ffb      	ldrb	r3, [r7, #31]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <remove_chain+0x4a>
 800a5f4:	7ffb      	ldrb	r3, [r7, #31]
 800a5f6:	e03b      	b.n	800a670 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a5f8:	68b9      	ldr	r1, [r7, #8]
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f7ff fe45 	bl	800a28a <get_fat>
 800a600:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d031      	beq.n	800a66c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d101      	bne.n	800a612 <remove_chain+0x64>
 800a60e:	2302      	movs	r3, #2
 800a610:	e02e      	b.n	800a670 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a618:	d101      	bne.n	800a61e <remove_chain+0x70>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e028      	b.n	800a670 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a61e:	2200      	movs	r2, #0
 800a620:	68b9      	ldr	r1, [r7, #8]
 800a622:	69b8      	ldr	r0, [r7, #24]
 800a624:	f7ff fed9 	bl	800a3da <put_fat>
 800a628:	4603      	mov	r3, r0
 800a62a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a62c:	7ffb      	ldrb	r3, [r7, #31]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d001      	beq.n	800a636 <remove_chain+0x88>
 800a632:	7ffb      	ldrb	r3, [r7, #31]
 800a634:	e01c      	b.n	800a670 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	691a      	ldr	r2, [r3, #16]
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	3b02      	subs	r3, #2
 800a640:	429a      	cmp	r2, r3
 800a642:	d20b      	bcs.n	800a65c <remove_chain+0xae>
			fs->free_clst++;
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	1c5a      	adds	r2, r3, #1
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	791b      	ldrb	r3, [r3, #4]
 800a652:	f043 0301 	orr.w	r3, r3, #1
 800a656:	b2da      	uxtb	r2, r3
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	695b      	ldr	r3, [r3, #20]
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	429a      	cmp	r2, r3
 800a668:	d3c6      	bcc.n	800a5f8 <remove_chain+0x4a>
 800a66a:	e000      	b.n	800a66e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a66c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3720      	adds	r7, #32
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b088      	sub	sp, #32
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10d      	bne.n	800a6aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d004      	beq.n	800a6a4 <create_chain+0x2c>
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	69ba      	ldr	r2, [r7, #24]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d31b      	bcc.n	800a6dc <create_chain+0x64>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	61bb      	str	r3, [r7, #24]
 800a6a8:	e018      	b.n	800a6dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7ff fdec 	bl	800a28a <get_fat>
 800a6b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d801      	bhi.n	800a6be <create_chain+0x46>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e070      	b.n	800a7a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c4:	d101      	bne.n	800a6ca <create_chain+0x52>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	e06a      	b.n	800a7a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d201      	bcs.n	800a6d8 <create_chain+0x60>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	e063      	b.n	800a7a0 <create_chain+0x128>
		scl = clst;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	69fa      	ldr	r2, [r7, #28]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d307      	bcc.n	800a700 <create_chain+0x88>
				ncl = 2;
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a6f4:	69fa      	ldr	r2, [r7, #28]
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d901      	bls.n	800a700 <create_chain+0x88>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	e04f      	b.n	800a7a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a700:	69f9      	ldr	r1, [r7, #28]
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff fdc1 	bl	800a28a <get_fat>
 800a708:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00e      	beq.n	800a72e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d003      	beq.n	800a71e <create_chain+0xa6>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71c:	d101      	bne.n	800a722 <create_chain+0xaa>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	e03e      	b.n	800a7a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a722:	69fa      	ldr	r2, [r7, #28]
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	429a      	cmp	r2, r3
 800a728:	d1da      	bne.n	800a6e0 <create_chain+0x68>
 800a72a:	2300      	movs	r3, #0
 800a72c:	e038      	b.n	800a7a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a72e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a730:	f04f 32ff 	mov.w	r2, #4294967295
 800a734:	69f9      	ldr	r1, [r7, #28]
 800a736:	6938      	ldr	r0, [r7, #16]
 800a738:	f7ff fe4f 	bl	800a3da <put_fat>
 800a73c:	4603      	mov	r3, r0
 800a73e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a740:	7dfb      	ldrb	r3, [r7, #23]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d109      	bne.n	800a75a <create_chain+0xe2>
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d006      	beq.n	800a75a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a74c:	69fa      	ldr	r2, [r7, #28]
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6938      	ldr	r0, [r7, #16]
 800a752:	f7ff fe42 	bl	800a3da <put_fat>
 800a756:	4603      	mov	r3, r0
 800a758:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d116      	bne.n	800a78e <create_chain+0x116>
		fs->last_clst = ncl;
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	69fa      	ldr	r2, [r7, #28]
 800a764:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	691a      	ldr	r2, [r3, #16]
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	3b02      	subs	r3, #2
 800a770:	429a      	cmp	r2, r3
 800a772:	d804      	bhi.n	800a77e <create_chain+0x106>
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	1e5a      	subs	r2, r3, #1
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	791b      	ldrb	r3, [r3, #4]
 800a782:	f043 0301 	orr.w	r3, r3, #1
 800a786:	b2da      	uxtb	r2, r3
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	711a      	strb	r2, [r3, #4]
 800a78c:	e007      	b.n	800a79e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a78e:	7dfb      	ldrb	r3, [r7, #23]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d102      	bne.n	800a79a <create_chain+0x122>
 800a794:	f04f 33ff 	mov.w	r3, #4294967295
 800a798:	e000      	b.n	800a79c <create_chain+0x124>
 800a79a:	2301      	movs	r3, #1
 800a79c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a79e:	69fb      	ldr	r3, [r7, #28]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3720      	adds	r7, #32
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	3304      	adds	r3, #4
 800a7be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	0a5b      	lsrs	r3, r3, #9
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	8952      	ldrh	r2, [r2, #10]
 800a7c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	1d1a      	adds	r2, r3, #4
 800a7d2:	613a      	str	r2, [r7, #16]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d101      	bne.n	800a7e2 <clmt_clust+0x3a>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	e010      	b.n	800a804 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d307      	bcc.n	800a7fa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	617b      	str	r3, [r7, #20]
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a7f8:	e7e9      	b.n	800a7ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a7fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	4413      	add	r3, r2
}
 800a804:	4618      	mov	r0, r3
 800a806:	371c      	adds	r7, #28
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a826:	d204      	bcs.n	800a832 <dir_sdi+0x22>
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f003 031f 	and.w	r3, r3, #31
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d001      	beq.n	800a836 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a832:	2302      	movs	r3, #2
 800a834:	e063      	b.n	800a8fe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d106      	bne.n	800a856 <dir_sdi+0x46>
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d902      	bls.n	800a856 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a854:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10c      	bne.n	800a876 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	095b      	lsrs	r3, r3, #5
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	8912      	ldrh	r2, [r2, #8]
 800a864:	4293      	cmp	r3, r2
 800a866:	d301      	bcc.n	800a86c <dir_sdi+0x5c>
 800a868:	2302      	movs	r3, #2
 800a86a:	e048      	b.n	800a8fe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	61da      	str	r2, [r3, #28]
 800a874:	e029      	b.n	800a8ca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	895b      	ldrh	r3, [r3, #10]
 800a87a:	025b      	lsls	r3, r3, #9
 800a87c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a87e:	e019      	b.n	800a8b4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6979      	ldr	r1, [r7, #20]
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff fd00 	bl	800a28a <get_fat>
 800a88a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a892:	d101      	bne.n	800a898 <dir_sdi+0x88>
 800a894:	2301      	movs	r3, #1
 800a896:	e032      	b.n	800a8fe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d904      	bls.n	800a8a8 <dir_sdi+0x98>
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	695b      	ldr	r3, [r3, #20]
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d301      	bcc.n	800a8ac <dir_sdi+0x9c>
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	e028      	b.n	800a8fe <dir_sdi+0xee>
			ofs -= csz;
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d2e1      	bcs.n	800a880 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a8bc:	6979      	ldr	r1, [r7, #20]
 800a8be:	6938      	ldr	r0, [r7, #16]
 800a8c0:	f7ff fcc4 	bl	800a24c <clust2sect>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	697a      	ldr	r2, [r7, #20]
 800a8ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d101      	bne.n	800a8dc <dir_sdi+0xcc>
 800a8d8:	2302      	movs	r3, #2
 800a8da:	e010      	b.n	800a8fe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	69da      	ldr	r2, [r3, #28]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	0a5b      	lsrs	r3, r3, #9
 800a8e4:	441a      	add	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f6:	441a      	add	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b086      	sub	sp, #24
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	3320      	adds	r3, #32
 800a91c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d003      	beq.n	800a92e <dir_next+0x28>
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a92c:	d301      	bcc.n	800a932 <dir_next+0x2c>
 800a92e:	2304      	movs	r3, #4
 800a930:	e0aa      	b.n	800aa88 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f040 8098 	bne.w	800aa6e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	1c5a      	adds	r2, r3, #1
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10b      	bne.n	800a968 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	095b      	lsrs	r3, r3, #5
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	8912      	ldrh	r2, [r2, #8]
 800a958:	4293      	cmp	r3, r2
 800a95a:	f0c0 8088 	bcc.w	800aa6e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	61da      	str	r2, [r3, #28]
 800a964:	2304      	movs	r3, #4
 800a966:	e08f      	b.n	800aa88 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	0a5b      	lsrs	r3, r3, #9
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	8952      	ldrh	r2, [r2, #10]
 800a970:	3a01      	subs	r2, #1
 800a972:	4013      	ands	r3, r2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d17a      	bne.n	800aa6e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f7ff fc82 	bl	800a28a <get_fat>
 800a986:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d801      	bhi.n	800a992 <dir_next+0x8c>
 800a98e:	2302      	movs	r3, #2
 800a990:	e07a      	b.n	800aa88 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a998:	d101      	bne.n	800a99e <dir_next+0x98>
 800a99a:	2301      	movs	r3, #1
 800a99c:	e074      	b.n	800aa88 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d358      	bcc.n	800aa5a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d104      	bne.n	800a9b8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	61da      	str	r2, [r3, #28]
 800a9b4:	2304      	movs	r3, #4
 800a9b6:	e067      	b.n	800aa88 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	f7ff fe59 	bl	800a678 <create_chain>
 800a9c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <dir_next+0xcc>
 800a9ce:	2307      	movs	r3, #7
 800a9d0:	e05a      	b.n	800aa88 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d101      	bne.n	800a9dc <dir_next+0xd6>
 800a9d8:	2302      	movs	r3, #2
 800a9da:	e055      	b.n	800aa88 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e2:	d101      	bne.n	800a9e8 <dir_next+0xe2>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e04f      	b.n	800aa88 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7ff fb4f 	bl	800a08c <sync_window>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <dir_next+0xf2>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e047      	b.n	800aa88 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	3330      	adds	r3, #48	; 0x30
 800a9fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa00:	2100      	movs	r1, #0
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7ff f979 	bl	8009cfa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa08:	2300      	movs	r3, #0
 800aa0a:	613b      	str	r3, [r7, #16]
 800aa0c:	6979      	ldr	r1, [r7, #20]
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f7ff fc1c 	bl	800a24c <clust2sect>
 800aa14:	4602      	mov	r2, r0
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa1a:	e012      	b.n	800aa42 <dir_next+0x13c>
						fs->wflag = 1;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f7ff fb32 	bl	800a08c <sync_window>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <dir_next+0x12c>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e02a      	b.n	800aa88 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	3301      	adds	r3, #1
 800aa36:	613b      	str	r3, [r7, #16]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3c:	1c5a      	adds	r2, r3, #1
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	895b      	ldrh	r3, [r3, #10]
 800aa46:	461a      	mov	r2, r3
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d3e6      	bcc.n	800aa1c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	1ad2      	subs	r2, r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aa60:	6979      	ldr	r1, [r7, #20]
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f7ff fbf2 	bl	800a24c <clust2sect>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa80:	441a      	add	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff feb4 	bl	800a810 <dir_sdi>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aaac:	7dfb      	ldrb	r3, [r7, #23]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d12b      	bne.n	800ab0a <dir_alloc+0x7a>
		n = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	4619      	mov	r1, r3
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f7ff fb29 	bl	800a114 <move_window>
 800aac2:	4603      	mov	r3, r0
 800aac4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d11d      	bne.n	800ab08 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a1b      	ldr	r3, [r3, #32]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	2be5      	cmp	r3, #229	; 0xe5
 800aad4:	d004      	beq.n	800aae0 <dir_alloc+0x50>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a1b      	ldr	r3, [r3, #32]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d107      	bne.n	800aaf0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	3301      	adds	r3, #1
 800aae4:	613b      	str	r3, [r7, #16]
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d102      	bne.n	800aaf4 <dir_alloc+0x64>
 800aaee:	e00c      	b.n	800ab0a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7ff ff05 	bl	800a906 <dir_next>
 800aafc:	4603      	mov	r3, r0
 800aafe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ab00:	7dfb      	ldrb	r3, [r7, #23]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d0d7      	beq.n	800aab6 <dir_alloc+0x26>
 800ab06:	e000      	b.n	800ab0a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ab08:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ab0a:	7dfb      	ldrb	r3, [r7, #23]
 800ab0c:	2b04      	cmp	r3, #4
 800ab0e:	d101      	bne.n	800ab14 <dir_alloc+0x84>
 800ab10:	2307      	movs	r3, #7
 800ab12:	75fb      	strb	r3, [r7, #23]
	return res;
 800ab14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3718      	adds	r7, #24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	331a      	adds	r3, #26
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7ff f841 	bl	8009bb4 <ld_word>
 800ab32:	4603      	mov	r3, r0
 800ab34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	2b03      	cmp	r3, #3
 800ab3c:	d109      	bne.n	800ab52 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	3314      	adds	r3, #20
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7ff f836 	bl	8009bb4 <ld_word>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	041b      	lsls	r3, r3, #16
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ab52:	68fb      	ldr	r3, [r7, #12]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	331a      	adds	r3, #26
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	b292      	uxth	r2, r2
 800ab70:	4611      	mov	r1, r2
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7ff f859 	bl	8009c2a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	2b03      	cmp	r3, #3
 800ab7e:	d109      	bne.n	800ab94 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	f103 0214 	add.w	r2, r3, #20
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	0c1b      	lsrs	r3, r3, #16
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	f7ff f84b 	bl	8009c2a <st_word>
	}
}
 800ab94:	bf00      	nop
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b086      	sub	sp, #24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800abaa:	2100      	movs	r1, #0
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f7ff fe2f 	bl	800a810 <dir_sdi>
 800abb2:	4603      	mov	r3, r0
 800abb4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d001      	beq.n	800abc0 <dir_find+0x24>
 800abbc:	7dfb      	ldrb	r3, [r7, #23]
 800abbe:	e03e      	b.n	800ac3e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	69db      	ldr	r3, [r3, #28]
 800abc4:	4619      	mov	r1, r3
 800abc6:	6938      	ldr	r0, [r7, #16]
 800abc8:	f7ff faa4 	bl	800a114 <move_window>
 800abcc:	4603      	mov	r3, r0
 800abce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d12f      	bne.n	800ac36 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a1b      	ldr	r3, [r3, #32]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800abde:	7bfb      	ldrb	r3, [r7, #15]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d102      	bne.n	800abea <dir_find+0x4e>
 800abe4:	2304      	movs	r3, #4
 800abe6:	75fb      	strb	r3, [r7, #23]
 800abe8:	e028      	b.n	800ac3c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	330b      	adds	r3, #11
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a1b      	ldr	r3, [r3, #32]
 800ac00:	330b      	adds	r3, #11
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	f003 0308 	and.w	r3, r3, #8
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10a      	bne.n	800ac22 <dir_find+0x86>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a18      	ldr	r0, [r3, #32]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3324      	adds	r3, #36	; 0x24
 800ac14:	220b      	movs	r2, #11
 800ac16:	4619      	mov	r1, r3
 800ac18:	f7ff f88a 	bl	8009d30 <mem_cmp>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00b      	beq.n	800ac3a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ac22:	2100      	movs	r1, #0
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff fe6e 	bl	800a906 <dir_next>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ac2e:	7dfb      	ldrb	r3, [r7, #23]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d0c5      	beq.n	800abc0 <dir_find+0x24>
 800ac34:	e002      	b.n	800ac3c <dir_find+0xa0>
		if (res != FR_OK) break;
 800ac36:	bf00      	nop
 800ac38:	e000      	b.n	800ac3c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ac3a:	bf00      	nop

	return res;
 800ac3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3718      	adds	r7, #24
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b084      	sub	sp, #16
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ac54:	2101      	movs	r1, #1
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7ff ff1a 	bl	800aa90 <dir_alloc>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ac60:	7bfb      	ldrb	r3, [r7, #15]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d11c      	bne.n	800aca0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	69db      	ldr	r3, [r3, #28]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	68b8      	ldr	r0, [r7, #8]
 800ac6e:	f7ff fa51 	bl	800a114 <move_window>
 800ac72:	4603      	mov	r3, r0
 800ac74:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d111      	bne.n	800aca0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a1b      	ldr	r3, [r3, #32]
 800ac80:	2220      	movs	r2, #32
 800ac82:	2100      	movs	r1, #0
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7ff f838 	bl	8009cfa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a18      	ldr	r0, [r3, #32]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	3324      	adds	r3, #36	; 0x24
 800ac92:	220b      	movs	r2, #11
 800ac94:	4619      	mov	r1, r3
 800ac96:	f7ff f80f 	bl	8009cb8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b088      	sub	sp, #32
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	3324      	adds	r3, #36	; 0x24
 800acc0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800acc2:	220b      	movs	r2, #11
 800acc4:	2120      	movs	r1, #32
 800acc6:	68b8      	ldr	r0, [r7, #8]
 800acc8:	f7ff f817 	bl	8009cfa <mem_set>
	si = i = 0; ni = 8;
 800accc:	2300      	movs	r3, #0
 800acce:	613b      	str	r3, [r7, #16]
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	61fb      	str	r3, [r7, #28]
 800acd4:	2308      	movs	r3, #8
 800acd6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	1c5a      	adds	r2, r3, #1
 800acdc:	61fa      	str	r2, [r7, #28]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	4413      	add	r3, r2
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ace6:	7efb      	ldrb	r3, [r7, #27]
 800ace8:	2b20      	cmp	r3, #32
 800acea:	d94e      	bls.n	800ad8a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800acec:	7efb      	ldrb	r3, [r7, #27]
 800acee:	2b2f      	cmp	r3, #47	; 0x2f
 800acf0:	d006      	beq.n	800ad00 <create_name+0x54>
 800acf2:	7efb      	ldrb	r3, [r7, #27]
 800acf4:	2b5c      	cmp	r3, #92	; 0x5c
 800acf6:	d110      	bne.n	800ad1a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800acf8:	e002      	b.n	800ad00 <create_name+0x54>
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	3301      	adds	r3, #1
 800acfe:	61fb      	str	r3, [r7, #28]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	4413      	add	r3, r2
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	2b2f      	cmp	r3, #47	; 0x2f
 800ad0a:	d0f6      	beq.n	800acfa <create_name+0x4e>
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	4413      	add	r3, r2
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	2b5c      	cmp	r3, #92	; 0x5c
 800ad16:	d0f0      	beq.n	800acfa <create_name+0x4e>
			break;
 800ad18:	e038      	b.n	800ad8c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ad1a:	7efb      	ldrb	r3, [r7, #27]
 800ad1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad1e:	d003      	beq.n	800ad28 <create_name+0x7c>
 800ad20:	693a      	ldr	r2, [r7, #16]
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d30c      	bcc.n	800ad42 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2b0b      	cmp	r3, #11
 800ad2c:	d002      	beq.n	800ad34 <create_name+0x88>
 800ad2e:	7efb      	ldrb	r3, [r7, #27]
 800ad30:	2b2e      	cmp	r3, #46	; 0x2e
 800ad32:	d001      	beq.n	800ad38 <create_name+0x8c>
 800ad34:	2306      	movs	r3, #6
 800ad36:	e044      	b.n	800adc2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ad38:	2308      	movs	r3, #8
 800ad3a:	613b      	str	r3, [r7, #16]
 800ad3c:	230b      	movs	r3, #11
 800ad3e:	617b      	str	r3, [r7, #20]
			continue;
 800ad40:	e022      	b.n	800ad88 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ad42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	da04      	bge.n	800ad54 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ad4a:	7efb      	ldrb	r3, [r7, #27]
 800ad4c:	3b80      	subs	r3, #128	; 0x80
 800ad4e:	4a1f      	ldr	r2, [pc, #124]	; (800adcc <create_name+0x120>)
 800ad50:	5cd3      	ldrb	r3, [r2, r3]
 800ad52:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ad54:	7efb      	ldrb	r3, [r7, #27]
 800ad56:	4619      	mov	r1, r3
 800ad58:	481d      	ldr	r0, [pc, #116]	; (800add0 <create_name+0x124>)
 800ad5a:	f7ff f810 	bl	8009d7e <chk_chr>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <create_name+0xbc>
 800ad64:	2306      	movs	r3, #6
 800ad66:	e02c      	b.n	800adc2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ad68:	7efb      	ldrb	r3, [r7, #27]
 800ad6a:	2b60      	cmp	r3, #96	; 0x60
 800ad6c:	d905      	bls.n	800ad7a <create_name+0xce>
 800ad6e:	7efb      	ldrb	r3, [r7, #27]
 800ad70:	2b7a      	cmp	r3, #122	; 0x7a
 800ad72:	d802      	bhi.n	800ad7a <create_name+0xce>
 800ad74:	7efb      	ldrb	r3, [r7, #27]
 800ad76:	3b20      	subs	r3, #32
 800ad78:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	1c5a      	adds	r2, r3, #1
 800ad7e:	613a      	str	r2, [r7, #16]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	4413      	add	r3, r2
 800ad84:	7efa      	ldrb	r2, [r7, #27]
 800ad86:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ad88:	e7a6      	b.n	800acd8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ad8a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	441a      	add	r2, r3
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <create_name+0xf4>
 800ad9c:	2306      	movs	r3, #6
 800ad9e:	e010      	b.n	800adc2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2be5      	cmp	r3, #229	; 0xe5
 800ada6:	d102      	bne.n	800adae <create_name+0x102>
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	2205      	movs	r2, #5
 800adac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800adae:	7efb      	ldrb	r3, [r7, #27]
 800adb0:	2b20      	cmp	r3, #32
 800adb2:	d801      	bhi.n	800adb8 <create_name+0x10c>
 800adb4:	2204      	movs	r2, #4
 800adb6:	e000      	b.n	800adba <create_name+0x10e>
 800adb8:	2200      	movs	r2, #0
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	330b      	adds	r3, #11
 800adbe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800adc0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3720      	adds	r7, #32
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	0800ddf0 	.word	0x0800ddf0
 800add0:	0800dad4 	.word	0x0800dad4

0800add4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ade8:	e002      	b.n	800adf0 <follow_path+0x1c>
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	3301      	adds	r3, #1
 800adee:	603b      	str	r3, [r7, #0]
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2b2f      	cmp	r3, #47	; 0x2f
 800adf6:	d0f8      	beq.n	800adea <follow_path+0x16>
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	2b5c      	cmp	r3, #92	; 0x5c
 800adfe:	d0f4      	beq.n	800adea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2200      	movs	r2, #0
 800ae04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	2b1f      	cmp	r3, #31
 800ae0c:	d80a      	bhi.n	800ae24 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2280      	movs	r2, #128	; 0x80
 800ae12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ae16:	2100      	movs	r1, #0
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7ff fcf9 	bl	800a810 <dir_sdi>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75fb      	strb	r3, [r7, #23]
 800ae22:	e043      	b.n	800aeac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae24:	463b      	mov	r3, r7
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff ff3f 	bl	800acac <create_name>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d134      	bne.n	800aea2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7ff feaf 	bl	800ab9c <dir_find>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ae48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00a      	beq.n	800ae66 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ae50:	7dfb      	ldrb	r3, [r7, #23]
 800ae52:	2b04      	cmp	r3, #4
 800ae54:	d127      	bne.n	800aea6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ae56:	7afb      	ldrb	r3, [r7, #11]
 800ae58:	f003 0304 	and.w	r3, r3, #4
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d122      	bne.n	800aea6 <follow_path+0xd2>
 800ae60:	2305      	movs	r3, #5
 800ae62:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ae64:	e01f      	b.n	800aea6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae66:	7afb      	ldrb	r3, [r7, #11]
 800ae68:	f003 0304 	and.w	r3, r3, #4
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d11c      	bne.n	800aeaa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	799b      	ldrb	r3, [r3, #6]
 800ae74:	f003 0310 	and.w	r3, r3, #16
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d102      	bne.n	800ae82 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ae7c:	2305      	movs	r3, #5
 800ae7e:	75fb      	strb	r3, [r7, #23]
 800ae80:	e014      	b.n	800aeac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae90:	4413      	add	r3, r2
 800ae92:	4619      	mov	r1, r3
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f7ff fe42 	bl	800ab1e <ld_clust>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aea0:	e7c0      	b.n	800ae24 <follow_path+0x50>
			if (res != FR_OK) break;
 800aea2:	bf00      	nop
 800aea4:	e002      	b.n	800aeac <follow_path+0xd8>
				break;
 800aea6:	bf00      	nop
 800aea8:	e000      	b.n	800aeac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aeaa:	bf00      	nop
			}
		}
	}

	return res;
 800aeac:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3718      	adds	r7, #24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aeb6:	b480      	push	{r7}
 800aeb8:	b087      	sub	sp, #28
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800aebe:	f04f 33ff 	mov.w	r3, #4294967295
 800aec2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d031      	beq.n	800af30 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	617b      	str	r3, [r7, #20]
 800aed2:	e002      	b.n	800aeda <get_ldnumber+0x24>
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	3301      	adds	r3, #1
 800aed8:	617b      	str	r3, [r7, #20]
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2b20      	cmp	r3, #32
 800aee0:	d903      	bls.n	800aeea <get_ldnumber+0x34>
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	2b3a      	cmp	r3, #58	; 0x3a
 800aee8:	d1f4      	bne.n	800aed4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b3a      	cmp	r3, #58	; 0x3a
 800aef0:	d11c      	bne.n	800af2c <get_ldnumber+0x76>
			tp = *path;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	1c5a      	adds	r2, r3, #1
 800aefc:	60fa      	str	r2, [r7, #12]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	3b30      	subs	r3, #48	; 0x30
 800af02:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	2b09      	cmp	r3, #9
 800af08:	d80e      	bhi.n	800af28 <get_ldnumber+0x72>
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d10a      	bne.n	800af28 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d107      	bne.n	800af28 <get_ldnumber+0x72>
					vol = (int)i;
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	3301      	adds	r3, #1
 800af20:	617b      	str	r3, [r7, #20]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	e002      	b.n	800af32 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800af2c:	2300      	movs	r3, #0
 800af2e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800af30:	693b      	ldr	r3, [r7, #16]
}
 800af32:	4618      	mov	r0, r3
 800af34:	371c      	adds	r7, #28
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
	...

0800af40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	70da      	strb	r2, [r3, #3]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f04f 32ff 	mov.w	r2, #4294967295
 800af56:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7ff f8da 	bl	800a114 <move_window>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <check_fs+0x2a>
 800af66:	2304      	movs	r3, #4
 800af68:	e038      	b.n	800afdc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3330      	adds	r3, #48	; 0x30
 800af6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af72:	4618      	mov	r0, r3
 800af74:	f7fe fe1e 	bl	8009bb4 <ld_word>
 800af78:	4603      	mov	r3, r0
 800af7a:	461a      	mov	r2, r3
 800af7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800af80:	429a      	cmp	r2, r3
 800af82:	d001      	beq.n	800af88 <check_fs+0x48>
 800af84:	2303      	movs	r3, #3
 800af86:	e029      	b.n	800afdc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af8e:	2be9      	cmp	r3, #233	; 0xe9
 800af90:	d009      	beq.n	800afa6 <check_fs+0x66>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af98:	2beb      	cmp	r3, #235	; 0xeb
 800af9a:	d11e      	bne.n	800afda <check_fs+0x9a>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800afa2:	2b90      	cmp	r3, #144	; 0x90
 800afa4:	d119      	bne.n	800afda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	3330      	adds	r3, #48	; 0x30
 800afaa:	3336      	adds	r3, #54	; 0x36
 800afac:	4618      	mov	r0, r3
 800afae:	f7fe fe19 	bl	8009be4 <ld_dword>
 800afb2:	4603      	mov	r3, r0
 800afb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800afb8:	4a0a      	ldr	r2, [pc, #40]	; (800afe4 <check_fs+0xa4>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d101      	bne.n	800afc2 <check_fs+0x82>
 800afbe:	2300      	movs	r3, #0
 800afc0:	e00c      	b.n	800afdc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3330      	adds	r3, #48	; 0x30
 800afc6:	3352      	adds	r3, #82	; 0x52
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fe fe0b 	bl	8009be4 <ld_dword>
 800afce:	4603      	mov	r3, r0
 800afd0:	4a05      	ldr	r2, [pc, #20]	; (800afe8 <check_fs+0xa8>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d101      	bne.n	800afda <check_fs+0x9a>
 800afd6:	2300      	movs	r3, #0
 800afd8:	e000      	b.n	800afdc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800afda:	2302      	movs	r3, #2
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	00544146 	.word	0x00544146
 800afe8:	33544146 	.word	0x33544146

0800afec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b096      	sub	sp, #88	; 0x58
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	4613      	mov	r3, r2
 800aff8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2200      	movs	r2, #0
 800affe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7ff ff58 	bl	800aeb6 <get_ldnumber>
 800b006:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	da01      	bge.n	800b012 <find_volume+0x26>
 800b00e:	230b      	movs	r3, #11
 800b010:	e22d      	b.n	800b46e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b012:	4aa1      	ldr	r2, [pc, #644]	; (800b298 <find_volume+0x2ac>)
 800b014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b01a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <find_volume+0x3a>
 800b022:	230c      	movs	r3, #12
 800b024:	e223      	b.n	800b46e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b02a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b02c:	79fb      	ldrb	r3, [r7, #7]
 800b02e:	f023 0301 	bic.w	r3, r3, #1
 800b032:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d01a      	beq.n	800b072 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	785b      	ldrb	r3, [r3, #1]
 800b040:	4618      	mov	r0, r3
 800b042:	f7fe fd19 	bl	8009a78 <disk_status>
 800b046:	4603      	mov	r3, r0
 800b048:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b04c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b050:	f003 0301 	and.w	r3, r3, #1
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10c      	bne.n	800b072 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b058:	79fb      	ldrb	r3, [r7, #7]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d007      	beq.n	800b06e <find_volume+0x82>
 800b05e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b062:	f003 0304 	and.w	r3, r3, #4
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b06a:	230a      	movs	r3, #10
 800b06c:	e1ff      	b.n	800b46e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b06e:	2300      	movs	r3, #0
 800b070:	e1fd      	b.n	800b46e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b074:	2200      	movs	r2, #0
 800b076:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b07a:	b2da      	uxtb	r2, r3
 800b07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	785b      	ldrb	r3, [r3, #1]
 800b084:	4618      	mov	r0, r3
 800b086:	f7fe fd11 	bl	8009aac <disk_initialize>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b090:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b09c:	2303      	movs	r3, #3
 800b09e:	e1e6      	b.n	800b46e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b0a0:	79fb      	ldrb	r3, [r7, #7]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d007      	beq.n	800b0b6 <find_volume+0xca>
 800b0a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0aa:	f003 0304 	and.w	r3, r3, #4
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b0b2:	230a      	movs	r3, #10
 800b0b4:	e1db      	b.n	800b46e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b0ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0be:	f7ff ff3f 	bl	800af40 <check_fs>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b0c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d149      	bne.n	800b164 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	643b      	str	r3, [r7, #64]	; 0x40
 800b0d4:	e01e      	b.n	800b114 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0de:	011b      	lsls	r3, r3, #4
 800b0e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b0e4:	4413      	add	r3, r2
 800b0e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d006      	beq.n	800b100 <find_volume+0x114>
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	3308      	adds	r3, #8
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fe fd74 	bl	8009be4 <ld_dword>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	e000      	b.n	800b102 <find_volume+0x116>
 800b100:	2200      	movs	r2, #0
 800b102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	3358      	adds	r3, #88	; 0x58
 800b108:	443b      	add	r3, r7
 800b10a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b110:	3301      	adds	r3, #1
 800b112:	643b      	str	r3, [r7, #64]	; 0x40
 800b114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b116:	2b03      	cmp	r3, #3
 800b118:	d9dd      	bls.n	800b0d6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b11a:	2300      	movs	r3, #0
 800b11c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <find_volume+0x13e>
 800b124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b126:	3b01      	subs	r3, #1
 800b128:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	3358      	adds	r3, #88	; 0x58
 800b130:	443b      	add	r3, r7
 800b132:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b136:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d005      	beq.n	800b14a <find_volume+0x15e>
 800b13e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b140:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b142:	f7ff fefd 	bl	800af40 <check_fs>
 800b146:	4603      	mov	r3, r0
 800b148:	e000      	b.n	800b14c <find_volume+0x160>
 800b14a:	2303      	movs	r3, #3
 800b14c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b150:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b154:	2b01      	cmp	r3, #1
 800b156:	d905      	bls.n	800b164 <find_volume+0x178>
 800b158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b15a:	3301      	adds	r3, #1
 800b15c:	643b      	str	r3, [r7, #64]	; 0x40
 800b15e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b160:	2b03      	cmp	r3, #3
 800b162:	d9e2      	bls.n	800b12a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b164:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b168:	2b04      	cmp	r3, #4
 800b16a:	d101      	bne.n	800b170 <find_volume+0x184>
 800b16c:	2301      	movs	r3, #1
 800b16e:	e17e      	b.n	800b46e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b174:	2b01      	cmp	r3, #1
 800b176:	d901      	bls.n	800b17c <find_volume+0x190>
 800b178:	230d      	movs	r3, #13
 800b17a:	e178      	b.n	800b46e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	3330      	adds	r3, #48	; 0x30
 800b180:	330b      	adds	r3, #11
 800b182:	4618      	mov	r0, r3
 800b184:	f7fe fd16 	bl	8009bb4 <ld_word>
 800b188:	4603      	mov	r3, r0
 800b18a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b18e:	d001      	beq.n	800b194 <find_volume+0x1a8>
 800b190:	230d      	movs	r3, #13
 800b192:	e16c      	b.n	800b46e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	3330      	adds	r3, #48	; 0x30
 800b198:	3316      	adds	r3, #22
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe fd0a 	bl	8009bb4 <ld_word>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d106      	bne.n	800b1b8 <find_volume+0x1cc>
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ac:	3330      	adds	r3, #48	; 0x30
 800b1ae:	3324      	adds	r3, #36	; 0x24
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fe fd17 	bl	8009be4 <ld_dword>
 800b1b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1bc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ca:	789b      	ldrb	r3, [r3, #2]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d005      	beq.n	800b1dc <find_volume+0x1f0>
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	789b      	ldrb	r3, [r3, #2]
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d001      	beq.n	800b1dc <find_volume+0x1f0>
 800b1d8:	230d      	movs	r3, #13
 800b1da:	e148      	b.n	800b46e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	789b      	ldrb	r3, [r3, #2]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e4:	fb02 f303 	mul.w	r3, r2, r3
 800b1e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	895b      	ldrh	r3, [r3, #10]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d008      	beq.n	800b210 <find_volume+0x224>
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b200:	895b      	ldrh	r3, [r3, #10]
 800b202:	461a      	mov	r2, r3
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	895b      	ldrh	r3, [r3, #10]
 800b208:	3b01      	subs	r3, #1
 800b20a:	4013      	ands	r3, r2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <find_volume+0x228>
 800b210:	230d      	movs	r3, #13
 800b212:	e12c      	b.n	800b46e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	3330      	adds	r3, #48	; 0x30
 800b218:	3311      	adds	r3, #17
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fe fcca 	bl	8009bb4 <ld_word>
 800b220:	4603      	mov	r3, r0
 800b222:	461a      	mov	r2, r3
 800b224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b226:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22a:	891b      	ldrh	r3, [r3, #8]
 800b22c:	f003 030f 	and.w	r3, r3, #15
 800b230:	b29b      	uxth	r3, r3
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <find_volume+0x24e>
 800b236:	230d      	movs	r3, #13
 800b238:	e119      	b.n	800b46e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	3330      	adds	r3, #48	; 0x30
 800b23e:	3313      	adds	r3, #19
 800b240:	4618      	mov	r0, r3
 800b242:	f7fe fcb7 	bl	8009bb4 <ld_word>
 800b246:	4603      	mov	r3, r0
 800b248:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d106      	bne.n	800b25e <find_volume+0x272>
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	3330      	adds	r3, #48	; 0x30
 800b254:	3320      	adds	r3, #32
 800b256:	4618      	mov	r0, r3
 800b258:	f7fe fcc4 	bl	8009be4 <ld_dword>
 800b25c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b260:	3330      	adds	r3, #48	; 0x30
 800b262:	330e      	adds	r3, #14
 800b264:	4618      	mov	r0, r3
 800b266:	f7fe fca5 	bl	8009bb4 <ld_word>
 800b26a:	4603      	mov	r3, r0
 800b26c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b26e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <find_volume+0x28c>
 800b274:	230d      	movs	r3, #13
 800b276:	e0fa      	b.n	800b46e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b278:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27c:	4413      	add	r3, r2
 800b27e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b280:	8912      	ldrh	r2, [r2, #8]
 800b282:	0912      	lsrs	r2, r2, #4
 800b284:	b292      	uxth	r2, r2
 800b286:	4413      	add	r3, r2
 800b288:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b28a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28e:	429a      	cmp	r2, r3
 800b290:	d204      	bcs.n	800b29c <find_volume+0x2b0>
 800b292:	230d      	movs	r3, #13
 800b294:	e0eb      	b.n	800b46e <find_volume+0x482>
 800b296:	bf00      	nop
 800b298:	20000818 	.word	0x20000818
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b29c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2a4:	8952      	ldrh	r2, [r2, #10]
 800b2a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d101      	bne.n	800b2b6 <find_volume+0x2ca>
 800b2b2:	230d      	movs	r3, #13
 800b2b4:	e0db      	b.n	800b46e <find_volume+0x482>
		fmt = FS_FAT32;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d802      	bhi.n	800b2cc <find_volume+0x2e0>
 800b2c6:	2302      	movs	r3, #2
 800b2c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d802      	bhi.n	800b2dc <find_volume+0x2f0>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2de:	1c9a      	adds	r2, r3, #2
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2e8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b2ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2ee:	441a      	add	r2, r3
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b2f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f8:	441a      	add	r2, r3
 800b2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b2fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b302:	2b03      	cmp	r3, #3
 800b304:	d11e      	bne.n	800b344 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b308:	3330      	adds	r3, #48	; 0x30
 800b30a:	332a      	adds	r3, #42	; 0x2a
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fe fc51 	bl	8009bb4 <ld_word>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <find_volume+0x330>
 800b318:	230d      	movs	r3, #13
 800b31a:	e0a8      	b.n	800b46e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	891b      	ldrh	r3, [r3, #8]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <find_volume+0x33c>
 800b324:	230d      	movs	r3, #13
 800b326:	e0a2      	b.n	800b46e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	3330      	adds	r3, #48	; 0x30
 800b32c:	332c      	adds	r3, #44	; 0x2c
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fe fc58 	bl	8009be4 <ld_dword>
 800b334:	4602      	mov	r2, r0
 800b336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b338:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	647b      	str	r3, [r7, #68]	; 0x44
 800b342:	e01f      	b.n	800b384 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b346:	891b      	ldrh	r3, [r3, #8]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <find_volume+0x364>
 800b34c:	230d      	movs	r3, #13
 800b34e:	e08e      	b.n	800b46e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b352:	6a1a      	ldr	r2, [r3, #32]
 800b354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b356:	441a      	add	r2, r3
 800b358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b35c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b360:	2b02      	cmp	r3, #2
 800b362:	d103      	bne.n	800b36c <find_volume+0x380>
 800b364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b366:	695b      	ldr	r3, [r3, #20]
 800b368:	005b      	lsls	r3, r3, #1
 800b36a:	e00a      	b.n	800b382 <find_volume+0x396>
 800b36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36e:	695a      	ldr	r2, [r3, #20]
 800b370:	4613      	mov	r3, r2
 800b372:	005b      	lsls	r3, r3, #1
 800b374:	4413      	add	r3, r2
 800b376:	085a      	lsrs	r2, r3, #1
 800b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37a:	695b      	ldr	r3, [r3, #20]
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b382:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b386:	699a      	ldr	r2, [r3, #24]
 800b388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b38a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b38e:	0a5b      	lsrs	r3, r3, #9
 800b390:	429a      	cmp	r2, r3
 800b392:	d201      	bcs.n	800b398 <find_volume+0x3ac>
 800b394:	230d      	movs	r3, #13
 800b396:	e06a      	b.n	800b46e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39a:	f04f 32ff 	mov.w	r2, #4294967295
 800b39e:	611a      	str	r2, [r3, #16]
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a2:	691a      	ldr	r2, [r3, #16]
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3aa:	2280      	movs	r2, #128	; 0x80
 800b3ac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b3ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	d149      	bne.n	800b44a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b8:	3330      	adds	r3, #48	; 0x30
 800b3ba:	3330      	adds	r3, #48	; 0x30
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fe fbf9 	bl	8009bb4 <ld_word>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d140      	bne.n	800b44a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b3c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3d0:	f7fe fea0 	bl	800a114 <move_window>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d137      	bne.n	800b44a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3dc:	2200      	movs	r2, #0
 800b3de:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e2:	3330      	adds	r3, #48	; 0x30
 800b3e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7fe fbe3 	bl	8009bb4 <ld_word>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d127      	bne.n	800b44a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fc:	3330      	adds	r3, #48	; 0x30
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fe fbf0 	bl	8009be4 <ld_dword>
 800b404:	4603      	mov	r3, r0
 800b406:	4a1c      	ldr	r2, [pc, #112]	; (800b478 <find_volume+0x48c>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d11e      	bne.n	800b44a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	3330      	adds	r3, #48	; 0x30
 800b410:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe fbe5 	bl	8009be4 <ld_dword>
 800b41a:	4603      	mov	r3, r0
 800b41c:	4a17      	ldr	r2, [pc, #92]	; (800b47c <find_volume+0x490>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d113      	bne.n	800b44a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b424:	3330      	adds	r3, #48	; 0x30
 800b426:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fe fbda 	bl	8009be4 <ld_dword>
 800b430:	4602      	mov	r2, r0
 800b432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b434:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b438:	3330      	adds	r3, #48	; 0x30
 800b43a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fe fbd0 	bl	8009be4 <ld_dword>
 800b444:	4602      	mov	r2, r0
 800b446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b448:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b450:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b452:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <find_volume+0x494>)
 800b454:	881b      	ldrh	r3, [r3, #0]
 800b456:	3301      	adds	r3, #1
 800b458:	b29a      	uxth	r2, r3
 800b45a:	4b09      	ldr	r3, [pc, #36]	; (800b480 <find_volume+0x494>)
 800b45c:	801a      	strh	r2, [r3, #0]
 800b45e:	4b08      	ldr	r3, [pc, #32]	; (800b480 <find_volume+0x494>)
 800b460:	881a      	ldrh	r2, [r3, #0]
 800b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b464:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b466:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b468:	f7fe fdec 	bl	800a044 <clear_lock>
#endif
	return FR_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3758      	adds	r7, #88	; 0x58
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	41615252 	.word	0x41615252
 800b47c:	61417272 	.word	0x61417272
 800b480:	2000081c 	.word	0x2000081c

0800b484 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b48e:	2309      	movs	r3, #9
 800b490:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d01c      	beq.n	800b4d2 <validate+0x4e>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d018      	beq.n	800b4d2 <validate+0x4e>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d013      	beq.n	800b4d2 <validate+0x4e>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	889a      	ldrh	r2, [r3, #4]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	88db      	ldrh	r3, [r3, #6]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d10c      	bne.n	800b4d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	785b      	ldrb	r3, [r3, #1]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fe fada 	bl	8009a78 <disk_status>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	f003 0301 	and.w	r3, r3, #1
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <validate+0x4e>
			res = FR_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d102      	bne.n	800b4de <validate+0x5a>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	e000      	b.n	800b4e0 <validate+0x5c>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	6013      	str	r3, [r2, #0]
	return res;
 800b4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
	...

0800b4f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b088      	sub	sp, #32
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b502:	f107 0310 	add.w	r3, r7, #16
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff fcd5 	bl	800aeb6 <get_ldnumber>
 800b50c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	2b00      	cmp	r3, #0
 800b512:	da01      	bge.n	800b518 <f_mount+0x28>
 800b514:	230b      	movs	r3, #11
 800b516:	e02b      	b.n	800b570 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b518:	4a17      	ldr	r2, [pc, #92]	; (800b578 <f_mount+0x88>)
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b520:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d005      	beq.n	800b534 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b528:	69b8      	ldr	r0, [r7, #24]
 800b52a:	f7fe fd8b 	bl	800a044 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	2200      	movs	r2, #0
 800b532:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	490d      	ldr	r1, [pc, #52]	; (800b578 <f_mount+0x88>)
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <f_mount+0x66>
 800b550:	79fb      	ldrb	r3, [r7, #7]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d001      	beq.n	800b55a <f_mount+0x6a>
 800b556:	2300      	movs	r3, #0
 800b558:	e00a      	b.n	800b570 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b55a:	f107 010c 	add.w	r1, r7, #12
 800b55e:	f107 0308 	add.w	r3, r7, #8
 800b562:	2200      	movs	r2, #0
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff fd41 	bl	800afec <find_volume>
 800b56a:	4603      	mov	r3, r0
 800b56c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3720      	adds	r7, #32
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	20000818 	.word	0x20000818

0800b57c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b098      	sub	sp, #96	; 0x60
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	4613      	mov	r3, r2
 800b588:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d101      	bne.n	800b594 <f_open+0x18>
 800b590:	2309      	movs	r3, #9
 800b592:	e1ad      	b.n	800b8f0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b594:	79fb      	ldrb	r3, [r7, #7]
 800b596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b59a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b59c:	79fa      	ldrb	r2, [r7, #7]
 800b59e:	f107 0110 	add.w	r1, r7, #16
 800b5a2:	f107 0308 	add.w	r3, r7, #8
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7ff fd20 	bl	800afec <find_volume>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b5b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f040 8191 	bne.w	800b8de <f_open+0x362>
		dj.obj.fs = fs;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	f107 0314 	add.w	r3, r7, #20
 800b5c6:	4611      	mov	r1, r2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7ff fc03 	bl	800add4 <follow_path>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b5d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d11a      	bne.n	800b612 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b5dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b5e0:	b25b      	sxtb	r3, r3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	da03      	bge.n	800b5ee <f_open+0x72>
				res = FR_INVALID_NAME;
 800b5e6:	2306      	movs	r3, #6
 800b5e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5ec:	e011      	b.n	800b612 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5ee:	79fb      	ldrb	r3, [r7, #7]
 800b5f0:	f023 0301 	bic.w	r3, r3, #1
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	bf14      	ite	ne
 800b5f8:	2301      	movne	r3, #1
 800b5fa:	2300      	moveq	r3, #0
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	461a      	mov	r2, r3
 800b600:	f107 0314 	add.w	r3, r7, #20
 800b604:	4611      	mov	r1, r2
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe fbd4 	bl	8009db4 <chk_lock>
 800b60c:	4603      	mov	r3, r0
 800b60e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	f003 031c 	and.w	r3, r3, #28
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d07f      	beq.n	800b71c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b61c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b620:	2b00      	cmp	r3, #0
 800b622:	d017      	beq.n	800b654 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b624:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b628:	2b04      	cmp	r3, #4
 800b62a:	d10e      	bne.n	800b64a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b62c:	f7fe fc1e 	bl	8009e6c <enq_lock>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d006      	beq.n	800b644 <f_open+0xc8>
 800b636:	f107 0314 	add.w	r3, r7, #20
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7ff fb03 	bl	800ac46 <dir_register>
 800b640:	4603      	mov	r3, r0
 800b642:	e000      	b.n	800b646 <f_open+0xca>
 800b644:	2312      	movs	r3, #18
 800b646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b64a:	79fb      	ldrb	r3, [r7, #7]
 800b64c:	f043 0308 	orr.w	r3, r3, #8
 800b650:	71fb      	strb	r3, [r7, #7]
 800b652:	e010      	b.n	800b676 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b654:	7ebb      	ldrb	r3, [r7, #26]
 800b656:	f003 0311 	and.w	r3, r3, #17
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d003      	beq.n	800b666 <f_open+0xea>
					res = FR_DENIED;
 800b65e:	2307      	movs	r3, #7
 800b660:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b664:	e007      	b.n	800b676 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b666:	79fb      	ldrb	r3, [r7, #7]
 800b668:	f003 0304 	and.w	r3, r3, #4
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <f_open+0xfa>
 800b670:	2308      	movs	r3, #8
 800b672:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d168      	bne.n	800b750 <f_open+0x1d4>
 800b67e:	79fb      	ldrb	r3, [r7, #7]
 800b680:	f003 0308 	and.w	r3, r3, #8
 800b684:	2b00      	cmp	r3, #0
 800b686:	d063      	beq.n	800b750 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b688:	f7fd fcbe 	bl	8009008 <get_fattime>
 800b68c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b690:	330e      	adds	r3, #14
 800b692:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b694:	4618      	mov	r0, r3
 800b696:	f7fe fae3 	bl	8009c60 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69c:	3316      	adds	r3, #22
 800b69e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe fadd 	bl	8009c60 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a8:	330b      	adds	r3, #11
 800b6aa:	2220      	movs	r2, #32
 800b6ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7ff fa32 	bl	800ab1e <ld_clust>
 800b6ba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7ff fa4a 	bl	800ab5c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ca:	331c      	adds	r3, #28
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7fe fac6 	bl	8009c60 <st_dword>
					fs->wflag = 1;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d037      	beq.n	800b750 <f_open+0x1d4>
						dw = fs->winsect;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b6e6:	f107 0314 	add.w	r3, r7, #20
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe ff5d 	bl	800a5ae <remove_chain>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b6fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d126      	bne.n	800b750 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b706:	4618      	mov	r0, r3
 800b708:	f7fe fd04 	bl	800a114 <move_window>
 800b70c:	4603      	mov	r3, r0
 800b70e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b716:	3a01      	subs	r2, #1
 800b718:	60da      	str	r2, [r3, #12]
 800b71a:	e019      	b.n	800b750 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b71c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b720:	2b00      	cmp	r3, #0
 800b722:	d115      	bne.n	800b750 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b724:	7ebb      	ldrb	r3, [r7, #26]
 800b726:	f003 0310 	and.w	r3, r3, #16
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d003      	beq.n	800b736 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b72e:	2304      	movs	r3, #4
 800b730:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b734:	e00c      	b.n	800b750 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b736:	79fb      	ldrb	r3, [r7, #7]
 800b738:	f003 0302 	and.w	r3, r3, #2
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d007      	beq.n	800b750 <f_open+0x1d4>
 800b740:	7ebb      	ldrb	r3, [r7, #26]
 800b742:	f003 0301 	and.w	r3, r3, #1
 800b746:	2b00      	cmp	r3, #0
 800b748:	d002      	beq.n	800b750 <f_open+0x1d4>
						res = FR_DENIED;
 800b74a:	2307      	movs	r3, #7
 800b74c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b754:	2b00      	cmp	r3, #0
 800b756:	d128      	bne.n	800b7aa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b758:	79fb      	ldrb	r3, [r7, #7]
 800b75a:	f003 0308 	and.w	r3, r3, #8
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d003      	beq.n	800b76a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b762:	79fb      	ldrb	r3, [r7, #7]
 800b764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b768:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b778:	79fb      	ldrb	r3, [r7, #7]
 800b77a:	f023 0301 	bic.w	r3, r3, #1
 800b77e:	2b00      	cmp	r3, #0
 800b780:	bf14      	ite	ne
 800b782:	2301      	movne	r3, #1
 800b784:	2300      	moveq	r3, #0
 800b786:	b2db      	uxtb	r3, r3
 800b788:	461a      	mov	r2, r3
 800b78a:	f107 0314 	add.w	r3, r7, #20
 800b78e:	4611      	mov	r1, r2
 800b790:	4618      	mov	r0, r3
 800b792:	f7fe fb8d 	bl	8009eb0 <inc_lock>
 800b796:	4602      	mov	r2, r0
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d102      	bne.n	800b7aa <f_open+0x22e>
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b7aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f040 8095 	bne.w	800b8de <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7ff f9af 	bl	800ab1e <ld_clust>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c8:	331c      	adds	r3, #28
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fe fa0a 	bl	8009be4 <ld_dword>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	88da      	ldrh	r2, [r3, #6]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	79fa      	ldrb	r2, [r7, #7]
 800b7ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3330      	adds	r3, #48	; 0x30
 800b806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b80a:	2100      	movs	r1, #0
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7fe fa74 	bl	8009cfa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b812:	79fb      	ldrb	r3, [r7, #7]
 800b814:	f003 0320 	and.w	r3, r3, #32
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d060      	beq.n	800b8de <f_open+0x362>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d05c      	beq.n	800b8de <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	68da      	ldr	r2, [r3, #12]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	895b      	ldrh	r3, [r3, #10]
 800b830:	025b      	lsls	r3, r3, #9
 800b832:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	657b      	str	r3, [r7, #84]	; 0x54
 800b840:	e016      	b.n	800b870 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b846:	4618      	mov	r0, r3
 800b848:	f7fe fd1f 	bl	800a28a <get_fat>
 800b84c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b84e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b850:	2b01      	cmp	r3, #1
 800b852:	d802      	bhi.n	800b85a <f_open+0x2de>
 800b854:	2302      	movs	r3, #2
 800b856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b85a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b860:	d102      	bne.n	800b868 <f_open+0x2ec>
 800b862:	2301      	movs	r3, #1
 800b864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b86a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	657b      	str	r3, [r7, #84]	; 0x54
 800b870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b874:	2b00      	cmp	r3, #0
 800b876:	d103      	bne.n	800b880 <f_open+0x304>
 800b878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b87a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d8e0      	bhi.n	800b842 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b884:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d127      	bne.n	800b8de <f_open+0x362>
 800b88e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b894:	2b00      	cmp	r3, #0
 800b896:	d022      	beq.n	800b8de <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fe fcd5 	bl	800a24c <clust2sect>
 800b8a2:	6478      	str	r0, [r7, #68]	; 0x44
 800b8a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d103      	bne.n	800b8b2 <f_open+0x336>
						res = FR_INT_ERR;
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b8b0:	e015      	b.n	800b8de <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b8b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8b4:	0a5a      	lsrs	r2, r3, #9
 800b8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8b8:	441a      	add	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	7858      	ldrb	r0, [r3, #1]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6a1a      	ldr	r2, [r3, #32]
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	f7fe f913 	bl	8009af8 <disk_read>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <f_open+0x362>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b8de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <f_open+0x370>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b8ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3760      	adds	r7, #96	; 0x60
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b08c      	sub	sp, #48	; 0x30
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2200      	movs	r2, #0
 800b90e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f107 0210 	add.w	r2, r7, #16
 800b916:	4611      	mov	r1, r2
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff fdb3 	bl	800b484 <validate>
 800b91e:	4603      	mov	r3, r0
 800b920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d107      	bne.n	800b93c <f_write+0x44>
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	7d5b      	ldrb	r3, [r3, #21]
 800b930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b934:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d002      	beq.n	800b942 <f_write+0x4a>
 800b93c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b940:	e14b      	b.n	800bbda <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	7d1b      	ldrb	r3, [r3, #20]
 800b946:	f003 0302 	and.w	r3, r3, #2
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d101      	bne.n	800b952 <f_write+0x5a>
 800b94e:	2307      	movs	r3, #7
 800b950:	e143      	b.n	800bbda <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	699a      	ldr	r2, [r3, #24]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	441a      	add	r2, r3
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	699b      	ldr	r3, [r3, #24]
 800b95e:	429a      	cmp	r2, r3
 800b960:	f080 812d 	bcs.w	800bbbe <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	43db      	mvns	r3, r3
 800b96a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b96c:	e127      	b.n	800bbbe <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b976:	2b00      	cmp	r3, #0
 800b978:	f040 80e3 	bne.w	800bb42 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	0a5b      	lsrs	r3, r3, #9
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	8952      	ldrh	r2, [r2, #10]
 800b986:	3a01      	subs	r2, #1
 800b988:	4013      	ands	r3, r2
 800b98a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d143      	bne.n	800ba1a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10c      	bne.n	800b9b4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d11a      	bne.n	800b9dc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fe fe64 	bl	800a678 <create_chain>
 800b9b0:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9b2:	e013      	b.n	800b9dc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d007      	beq.n	800b9cc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f7fe fef0 	bl	800a7a8 <clmt_clust>
 800b9c8:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9ca:	e007      	b.n	800b9dc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	69db      	ldr	r3, [r3, #28]
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	f7fe fe4f 	bl	800a678 <create_chain>
 800b9da:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f000 80f2 	beq.w	800bbc8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d104      	bne.n	800b9f4 <f_write+0xfc>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	755a      	strb	r2, [r3, #21]
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	e0f2      	b.n	800bbda <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fa:	d104      	bne.n	800ba06 <f_write+0x10e>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	755a      	strb	r2, [r3, #21]
 800ba02:	2301      	movs	r3, #1
 800ba04:	e0e9      	b.n	800bbda <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba0a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d102      	bne.n	800ba1a <f_write+0x122>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba18:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	7d1b      	ldrb	r3, [r3, #20]
 800ba1e:	b25b      	sxtb	r3, r3
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	da18      	bge.n	800ba56 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	7858      	ldrb	r0, [r3, #1]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6a1a      	ldr	r2, [r3, #32]
 800ba32:	2301      	movs	r3, #1
 800ba34:	f7fe f880 	bl	8009b38 <disk_write>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d004      	beq.n	800ba48 <f_write+0x150>
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2201      	movs	r2, #1
 800ba42:	755a      	strb	r2, [r3, #21]
 800ba44:	2301      	movs	r3, #1
 800ba46:	e0c8      	b.n	800bbda <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	7d1b      	ldrb	r3, [r3, #20]
 800ba4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ba56:	693a      	ldr	r2, [r7, #16]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	69db      	ldr	r3, [r3, #28]
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4610      	mov	r0, r2
 800ba60:	f7fe fbf4 	bl	800a24c <clust2sect>
 800ba64:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d104      	bne.n	800ba76 <f_write+0x17e>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2202      	movs	r2, #2
 800ba70:	755a      	strb	r2, [r3, #21]
 800ba72:	2302      	movs	r3, #2
 800ba74:	e0b1      	b.n	800bbda <f_write+0x2e2>
			sect += csect;
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	0a5b      	lsrs	r3, r3, #9
 800ba82:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d03c      	beq.n	800bb04 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ba8a:	69ba      	ldr	r2, [r7, #24]
 800ba8c:	6a3b      	ldr	r3, [r7, #32]
 800ba8e:	4413      	add	r3, r2
 800ba90:	693a      	ldr	r2, [r7, #16]
 800ba92:	8952      	ldrh	r2, [r2, #10]
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d905      	bls.n	800baa4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	895b      	ldrh	r3, [r3, #10]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	7858      	ldrb	r0, [r3, #1]
 800baa8:	6a3b      	ldr	r3, [r7, #32]
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	69f9      	ldr	r1, [r7, #28]
 800baae:	f7fe f843 	bl	8009b38 <disk_write>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d004      	beq.n	800bac2 <f_write+0x1ca>
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2201      	movs	r2, #1
 800babc:	755a      	strb	r2, [r3, #21]
 800babe:	2301      	movs	r3, #1
 800bac0:	e08b      	b.n	800bbda <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6a1a      	ldr	r2, [r3, #32]
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	6a3a      	ldr	r2, [r7, #32]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d915      	bls.n	800bafc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6a1a      	ldr	r2, [r3, #32]
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	025b      	lsls	r3, r3, #9
 800bae0:	69fa      	ldr	r2, [r7, #28]
 800bae2:	4413      	add	r3, r2
 800bae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bae8:	4619      	mov	r1, r3
 800baea:	f7fe f8e5 	bl	8009cb8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	7d1b      	ldrb	r3, [r3, #20]
 800baf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bafc:	6a3b      	ldr	r3, [r7, #32]
 800bafe:	025b      	lsls	r3, r3, #9
 800bb00:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bb02:	e03f      	b.n	800bb84 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6a1b      	ldr	r3, [r3, #32]
 800bb08:	697a      	ldr	r2, [r7, #20]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d016      	beq.n	800bb3c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	699a      	ldr	r2, [r3, #24]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d210      	bcs.n	800bb3c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	7858      	ldrb	r0, [r3, #1]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb24:	2301      	movs	r3, #1
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	f7fd ffe6 	bl	8009af8 <disk_read>
 800bb2c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d004      	beq.n	800bb3c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2201      	movs	r2, #1
 800bb36:	755a      	strb	r2, [r3, #21]
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e04e      	b.n	800bbda <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	699b      	ldr	r3, [r3, #24]
 800bb46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb4a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bb4e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bb50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d901      	bls.n	800bb5c <f_write+0x264>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	699b      	ldr	r3, [r3, #24]
 800bb66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb6a:	4413      	add	r3, r2
 800bb6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb6e:	69f9      	ldr	r1, [r7, #28]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7fe f8a1 	bl	8009cb8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	7d1b      	ldrb	r3, [r3, #20]
 800bb7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bb84:	69fa      	ldr	r2, [r7, #28]
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	4413      	add	r3, r2
 800bb8a:	61fb      	str	r3, [r7, #28]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	699a      	ldr	r2, [r3, #24]
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	441a      	add	r2, r3
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	619a      	str	r2, [r3, #24]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	68da      	ldr	r2, [r3, #12]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	699b      	ldr	r3, [r3, #24]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	bf38      	it	cc
 800bba4:	461a      	movcc	r2, r3
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	60da      	str	r2, [r3, #12]
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb0:	441a      	add	r2, r3
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	601a      	str	r2, [r3, #0]
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f47f aed4 	bne.w	800b96e <f_write+0x76>
 800bbc6:	e000      	b.n	800bbca <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bbc8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	7d1b      	ldrb	r3, [r3, #20]
 800bbce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3730      	adds	r7, #48	; 0x30
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b086      	sub	sp, #24
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f107 0208 	add.w	r2, r7, #8
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7ff fc46 	bl	800b484 <validate>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bbfc:	7dfb      	ldrb	r3, [r7, #23]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d168      	bne.n	800bcd4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	7d1b      	ldrb	r3, [r3, #20]
 800bc06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d062      	beq.n	800bcd4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	7d1b      	ldrb	r3, [r3, #20]
 800bc12:	b25b      	sxtb	r3, r3
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	da15      	bge.n	800bc44 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	7858      	ldrb	r0, [r3, #1]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1a      	ldr	r2, [r3, #32]
 800bc26:	2301      	movs	r3, #1
 800bc28:	f7fd ff86 	bl	8009b38 <disk_write>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d001      	beq.n	800bc36 <f_sync+0x54>
 800bc32:	2301      	movs	r3, #1
 800bc34:	e04f      	b.n	800bcd6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	7d1b      	ldrb	r3, [r3, #20]
 800bc3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc3e:	b2da      	uxtb	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bc44:	f7fd f9e0 	bl	8009008 <get_fattime>
 800bc48:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	4619      	mov	r1, r3
 800bc52:	4610      	mov	r0, r2
 800bc54:	f7fe fa5e 	bl	800a114 <move_window>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bc5c:	7dfb      	ldrb	r3, [r7, #23]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d138      	bne.n	800bcd4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc66:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	330b      	adds	r3, #11
 800bc6c:	781a      	ldrb	r2, [r3, #0]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	330b      	adds	r3, #11
 800bc72:	f042 0220 	orr.w	r2, r2, #32
 800bc76:	b2d2      	uxtb	r2, r2
 800bc78:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6818      	ldr	r0, [r3, #0]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	461a      	mov	r2, r3
 800bc84:	68f9      	ldr	r1, [r7, #12]
 800bc86:	f7fe ff69 	bl	800ab5c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f103 021c 	add.w	r2, r3, #28
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	4619      	mov	r1, r3
 800bc96:	4610      	mov	r0, r2
 800bc98:	f7fd ffe2 	bl	8009c60 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	3316      	adds	r3, #22
 800bca0:	6939      	ldr	r1, [r7, #16]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fd ffdc 	bl	8009c60 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3312      	adds	r3, #18
 800bcac:	2100      	movs	r1, #0
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fd ffbb 	bl	8009c2a <st_word>
					fs->wflag = 1;
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7fe fa57 	bl	800a170 <sync_fs>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	7d1b      	ldrb	r3, [r3, #20]
 800bcca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcce:	b2da      	uxtb	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bcd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7ff ff7b 	bl	800bbe2 <f_sync>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d118      	bne.n	800bd28 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f107 0208 	add.w	r2, r7, #8
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7ff fbc0 	bl	800b484 <validate>
 800bd04:	4603      	mov	r3, r0
 800bd06:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd08:	7bfb      	ldrb	r3, [r7, #15]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10c      	bne.n	800bd28 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fe f95a 	bl	8009fcc <dec_lock>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d102      	bne.n	800bd28 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b092      	sub	sp, #72	; 0x48
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800bd3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bd42:	f107 030c 	add.w	r3, r7, #12
 800bd46:	2200      	movs	r2, #0
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff f94f 	bl	800afec <find_volume>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800bd54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f040 8099 	bne.w	800be90 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800bd5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd66:	691a      	ldr	r2, [r3, #16]
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	3b02      	subs	r3, #2
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d804      	bhi.n	800bd7c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	691a      	ldr	r2, [r3, #16]
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	601a      	str	r2, [r3, #0]
 800bd7a:	e089      	b.n	800be90 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800bd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d128      	bne.n	800bdda <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800bd88:	2302      	movs	r3, #2
 800bd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800bd90:	f107 0314 	add.w	r3, r7, #20
 800bd94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fe fa77 	bl	800a28a <get_fat>
 800bd9c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda4:	d103      	bne.n	800bdae <f_getfree+0x7c>
 800bda6:	2301      	movs	r3, #1
 800bda8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bdac:	e063      	b.n	800be76 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d103      	bne.n	800bdbc <f_getfree+0x8a>
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bdba:	e05c      	b.n	800be76 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800bdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d102      	bne.n	800bdc8 <f_getfree+0x96>
 800bdc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800bdc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdca:	3301      	adds	r3, #1
 800bdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd0:	695b      	ldr	r3, [r3, #20]
 800bdd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d3db      	bcc.n	800bd90 <f_getfree+0x5e>
 800bdd8:	e04d      	b.n	800be76 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde2:	6a1b      	ldr	r3, [r3, #32]
 800bde4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	637b      	str	r3, [r7, #52]	; 0x34
 800bdea:	2300      	movs	r3, #0
 800bdec:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800bdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d113      	bne.n	800be1c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800bdf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf8:	1c5a      	adds	r2, r3, #1
 800bdfa:	63ba      	str	r2, [r7, #56]	; 0x38
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	f7fe f989 	bl	800a114 <move_window>
 800be02:	4603      	mov	r3, r0
 800be04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800be08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d131      	bne.n	800be74 <f_getfree+0x142>
							p = fs->win;
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	3330      	adds	r3, #48	; 0x30
 800be14:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800be16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be1a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	2b02      	cmp	r3, #2
 800be22:	d10f      	bne.n	800be44 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800be24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be26:	f7fd fec5 	bl	8009bb4 <ld_word>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d102      	bne.n	800be36 <f_getfree+0x104>
 800be30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be32:	3301      	adds	r3, #1
 800be34:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	3302      	adds	r3, #2
 800be3a:	633b      	str	r3, [r7, #48]	; 0x30
 800be3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3e:	3b02      	subs	r3, #2
 800be40:	637b      	str	r3, [r7, #52]	; 0x34
 800be42:	e010      	b.n	800be66 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800be44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be46:	f7fd fecd 	bl	8009be4 <ld_dword>
 800be4a:	4603      	mov	r3, r0
 800be4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d102      	bne.n	800be5a <f_getfree+0x128>
 800be54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be56:	3301      	adds	r3, #1
 800be58:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	3304      	adds	r3, #4
 800be5e:	633b      	str	r3, [r7, #48]	; 0x30
 800be60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be62:	3b04      	subs	r3, #4
 800be64:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800be66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be68:	3b01      	subs	r3, #1
 800be6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d1bd      	bne.n	800bdee <f_getfree+0xbc>
 800be72:	e000      	b.n	800be76 <f_getfree+0x144>
							if (res != FR_OK) break;
 800be74:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be7a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be80:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	791a      	ldrb	r2, [r3, #4]
 800be86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be88:	f042 0201 	orr.w	r2, r2, #1
 800be8c:	b2d2      	uxtb	r2, r2
 800be8e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800be90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800be94:	4618      	mov	r0, r3
 800be96:	3748      	adds	r7, #72	; 0x48
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	4613      	mov	r3, r2
 800bea8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800beaa:	2301      	movs	r3, #1
 800beac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800beb2:	4b1f      	ldr	r3, [pc, #124]	; (800bf30 <FATFS_LinkDriverEx+0x94>)
 800beb4:	7a5b      	ldrb	r3, [r3, #9]
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d131      	bne.n	800bf20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bebc:	4b1c      	ldr	r3, [pc, #112]	; (800bf30 <FATFS_LinkDriverEx+0x94>)
 800bebe:	7a5b      	ldrb	r3, [r3, #9]
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	461a      	mov	r2, r3
 800bec4:	4b1a      	ldr	r3, [pc, #104]	; (800bf30 <FATFS_LinkDriverEx+0x94>)
 800bec6:	2100      	movs	r1, #0
 800bec8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800beca:	4b19      	ldr	r3, [pc, #100]	; (800bf30 <FATFS_LinkDriverEx+0x94>)
 800becc:	7a5b      	ldrb	r3, [r3, #9]
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	4a17      	ldr	r2, [pc, #92]	; (800bf30 <FATFS_LinkDriverEx+0x94>)
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800beda:	4b15      	ldr	r3, [pc, #84]	; (800bf30 <FATFS_LinkDriverEx+0x94>)
 800bedc:	7a5b      	ldrb	r3, [r3, #9]
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	461a      	mov	r2, r3
 800bee2:	4b13      	ldr	r3, [pc, #76]	; (800bf30 <FATFS_LinkDriverEx+0x94>)
 800bee4:	4413      	add	r3, r2
 800bee6:	79fa      	ldrb	r2, [r7, #7]
 800bee8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800beea:	4b11      	ldr	r3, [pc, #68]	; (800bf30 <FATFS_LinkDriverEx+0x94>)
 800beec:	7a5b      	ldrb	r3, [r3, #9]
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	b2d1      	uxtb	r1, r2
 800bef4:	4a0e      	ldr	r2, [pc, #56]	; (800bf30 <FATFS_LinkDriverEx+0x94>)
 800bef6:	7251      	strb	r1, [r2, #9]
 800bef8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800befa:	7dbb      	ldrb	r3, [r7, #22]
 800befc:	3330      	adds	r3, #48	; 0x30
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	3301      	adds	r3, #1
 800bf08:	223a      	movs	r2, #58	; 0x3a
 800bf0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	3302      	adds	r3, #2
 800bf10:	222f      	movs	r2, #47	; 0x2f
 800bf12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	3303      	adds	r3, #3
 800bf18:	2200      	movs	r2, #0
 800bf1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bf20:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	371c      	adds	r7, #28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	20000840 	.word	0x20000840

0800bf34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bf3e:	2200      	movs	r2, #0
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7ff ffaa 	bl	800be9c <FATFS_LinkDriverEx>
 800bf48:	4603      	mov	r3, r0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
	...

0800bf54 <std>:
 800bf54:	2300      	movs	r3, #0
 800bf56:	b510      	push	{r4, lr}
 800bf58:	4604      	mov	r4, r0
 800bf5a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf62:	6083      	str	r3, [r0, #8]
 800bf64:	8181      	strh	r1, [r0, #12]
 800bf66:	6643      	str	r3, [r0, #100]	; 0x64
 800bf68:	81c2      	strh	r2, [r0, #14]
 800bf6a:	6183      	str	r3, [r0, #24]
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	2208      	movs	r2, #8
 800bf70:	305c      	adds	r0, #92	; 0x5c
 800bf72:	f000 f9f7 	bl	800c364 <memset>
 800bf76:	4b0d      	ldr	r3, [pc, #52]	; (800bfac <std+0x58>)
 800bf78:	6263      	str	r3, [r4, #36]	; 0x24
 800bf7a:	4b0d      	ldr	r3, [pc, #52]	; (800bfb0 <std+0x5c>)
 800bf7c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf7e:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <std+0x60>)
 800bf80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf82:	4b0d      	ldr	r3, [pc, #52]	; (800bfb8 <std+0x64>)
 800bf84:	6323      	str	r3, [r4, #48]	; 0x30
 800bf86:	4b0d      	ldr	r3, [pc, #52]	; (800bfbc <std+0x68>)
 800bf88:	6224      	str	r4, [r4, #32]
 800bf8a:	429c      	cmp	r4, r3
 800bf8c:	d006      	beq.n	800bf9c <std+0x48>
 800bf8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bf92:	4294      	cmp	r4, r2
 800bf94:	d002      	beq.n	800bf9c <std+0x48>
 800bf96:	33d0      	adds	r3, #208	; 0xd0
 800bf98:	429c      	cmp	r4, r3
 800bf9a:	d105      	bne.n	800bfa8 <std+0x54>
 800bf9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfa4:	f000 ba56 	b.w	800c454 <__retarget_lock_init_recursive>
 800bfa8:	bd10      	pop	{r4, pc}
 800bfaa:	bf00      	nop
 800bfac:	0800c1b5 	.word	0x0800c1b5
 800bfb0:	0800c1d7 	.word	0x0800c1d7
 800bfb4:	0800c20f 	.word	0x0800c20f
 800bfb8:	0800c233 	.word	0x0800c233
 800bfbc:	2000084c 	.word	0x2000084c

0800bfc0 <stdio_exit_handler>:
 800bfc0:	4a02      	ldr	r2, [pc, #8]	; (800bfcc <stdio_exit_handler+0xc>)
 800bfc2:	4903      	ldr	r1, [pc, #12]	; (800bfd0 <stdio_exit_handler+0x10>)
 800bfc4:	4803      	ldr	r0, [pc, #12]	; (800bfd4 <stdio_exit_handler+0x14>)
 800bfc6:	f000 b869 	b.w	800c09c <_fwalk_sglue>
 800bfca:	bf00      	nop
 800bfcc:	20000040 	.word	0x20000040
 800bfd0:	0800cd01 	.word	0x0800cd01
 800bfd4:	2000004c 	.word	0x2000004c

0800bfd8 <cleanup_stdio>:
 800bfd8:	6841      	ldr	r1, [r0, #4]
 800bfda:	4b0c      	ldr	r3, [pc, #48]	; (800c00c <cleanup_stdio+0x34>)
 800bfdc:	4299      	cmp	r1, r3
 800bfde:	b510      	push	{r4, lr}
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	d001      	beq.n	800bfe8 <cleanup_stdio+0x10>
 800bfe4:	f000 fe8c 	bl	800cd00 <_fflush_r>
 800bfe8:	68a1      	ldr	r1, [r4, #8]
 800bfea:	4b09      	ldr	r3, [pc, #36]	; (800c010 <cleanup_stdio+0x38>)
 800bfec:	4299      	cmp	r1, r3
 800bfee:	d002      	beq.n	800bff6 <cleanup_stdio+0x1e>
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 fe85 	bl	800cd00 <_fflush_r>
 800bff6:	68e1      	ldr	r1, [r4, #12]
 800bff8:	4b06      	ldr	r3, [pc, #24]	; (800c014 <cleanup_stdio+0x3c>)
 800bffa:	4299      	cmp	r1, r3
 800bffc:	d004      	beq.n	800c008 <cleanup_stdio+0x30>
 800bffe:	4620      	mov	r0, r4
 800c000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c004:	f000 be7c 	b.w	800cd00 <_fflush_r>
 800c008:	bd10      	pop	{r4, pc}
 800c00a:	bf00      	nop
 800c00c:	2000084c 	.word	0x2000084c
 800c010:	200008b4 	.word	0x200008b4
 800c014:	2000091c 	.word	0x2000091c

0800c018 <global_stdio_init.part.0>:
 800c018:	b510      	push	{r4, lr}
 800c01a:	4b0b      	ldr	r3, [pc, #44]	; (800c048 <global_stdio_init.part.0+0x30>)
 800c01c:	4c0b      	ldr	r4, [pc, #44]	; (800c04c <global_stdio_init.part.0+0x34>)
 800c01e:	4a0c      	ldr	r2, [pc, #48]	; (800c050 <global_stdio_init.part.0+0x38>)
 800c020:	601a      	str	r2, [r3, #0]
 800c022:	4620      	mov	r0, r4
 800c024:	2200      	movs	r2, #0
 800c026:	2104      	movs	r1, #4
 800c028:	f7ff ff94 	bl	800bf54 <std>
 800c02c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c030:	2201      	movs	r2, #1
 800c032:	2109      	movs	r1, #9
 800c034:	f7ff ff8e 	bl	800bf54 <std>
 800c038:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c03c:	2202      	movs	r2, #2
 800c03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c042:	2112      	movs	r1, #18
 800c044:	f7ff bf86 	b.w	800bf54 <std>
 800c048:	20000984 	.word	0x20000984
 800c04c:	2000084c 	.word	0x2000084c
 800c050:	0800bfc1 	.word	0x0800bfc1

0800c054 <__sfp_lock_acquire>:
 800c054:	4801      	ldr	r0, [pc, #4]	; (800c05c <__sfp_lock_acquire+0x8>)
 800c056:	f000 b9fe 	b.w	800c456 <__retarget_lock_acquire_recursive>
 800c05a:	bf00      	nop
 800c05c:	2000098d 	.word	0x2000098d

0800c060 <__sfp_lock_release>:
 800c060:	4801      	ldr	r0, [pc, #4]	; (800c068 <__sfp_lock_release+0x8>)
 800c062:	f000 b9f9 	b.w	800c458 <__retarget_lock_release_recursive>
 800c066:	bf00      	nop
 800c068:	2000098d 	.word	0x2000098d

0800c06c <__sinit>:
 800c06c:	b510      	push	{r4, lr}
 800c06e:	4604      	mov	r4, r0
 800c070:	f7ff fff0 	bl	800c054 <__sfp_lock_acquire>
 800c074:	6a23      	ldr	r3, [r4, #32]
 800c076:	b11b      	cbz	r3, 800c080 <__sinit+0x14>
 800c078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c07c:	f7ff bff0 	b.w	800c060 <__sfp_lock_release>
 800c080:	4b04      	ldr	r3, [pc, #16]	; (800c094 <__sinit+0x28>)
 800c082:	6223      	str	r3, [r4, #32]
 800c084:	4b04      	ldr	r3, [pc, #16]	; (800c098 <__sinit+0x2c>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d1f5      	bne.n	800c078 <__sinit+0xc>
 800c08c:	f7ff ffc4 	bl	800c018 <global_stdio_init.part.0>
 800c090:	e7f2      	b.n	800c078 <__sinit+0xc>
 800c092:	bf00      	nop
 800c094:	0800bfd9 	.word	0x0800bfd9
 800c098:	20000984 	.word	0x20000984

0800c09c <_fwalk_sglue>:
 800c09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0a0:	4607      	mov	r7, r0
 800c0a2:	4688      	mov	r8, r1
 800c0a4:	4614      	mov	r4, r2
 800c0a6:	2600      	movs	r6, #0
 800c0a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0ac:	f1b9 0901 	subs.w	r9, r9, #1
 800c0b0:	d505      	bpl.n	800c0be <_fwalk_sglue+0x22>
 800c0b2:	6824      	ldr	r4, [r4, #0]
 800c0b4:	2c00      	cmp	r4, #0
 800c0b6:	d1f7      	bne.n	800c0a8 <_fwalk_sglue+0xc>
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0be:	89ab      	ldrh	r3, [r5, #12]
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d907      	bls.n	800c0d4 <_fwalk_sglue+0x38>
 800c0c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	d003      	beq.n	800c0d4 <_fwalk_sglue+0x38>
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	4638      	mov	r0, r7
 800c0d0:	47c0      	blx	r8
 800c0d2:	4306      	orrs	r6, r0
 800c0d4:	3568      	adds	r5, #104	; 0x68
 800c0d6:	e7e9      	b.n	800c0ac <_fwalk_sglue+0x10>

0800c0d8 <iprintf>:
 800c0d8:	b40f      	push	{r0, r1, r2, r3}
 800c0da:	b507      	push	{r0, r1, r2, lr}
 800c0dc:	4906      	ldr	r1, [pc, #24]	; (800c0f8 <iprintf+0x20>)
 800c0de:	ab04      	add	r3, sp, #16
 800c0e0:	6808      	ldr	r0, [r1, #0]
 800c0e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e6:	6881      	ldr	r1, [r0, #8]
 800c0e8:	9301      	str	r3, [sp, #4]
 800c0ea:	f000 fad9 	bl	800c6a0 <_vfiprintf_r>
 800c0ee:	b003      	add	sp, #12
 800c0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0f4:	b004      	add	sp, #16
 800c0f6:	4770      	bx	lr
 800c0f8:	20000098 	.word	0x20000098

0800c0fc <_puts_r>:
 800c0fc:	6a03      	ldr	r3, [r0, #32]
 800c0fe:	b570      	push	{r4, r5, r6, lr}
 800c100:	6884      	ldr	r4, [r0, #8]
 800c102:	4605      	mov	r5, r0
 800c104:	460e      	mov	r6, r1
 800c106:	b90b      	cbnz	r3, 800c10c <_puts_r+0x10>
 800c108:	f7ff ffb0 	bl	800c06c <__sinit>
 800c10c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c10e:	07db      	lsls	r3, r3, #31
 800c110:	d405      	bmi.n	800c11e <_puts_r+0x22>
 800c112:	89a3      	ldrh	r3, [r4, #12]
 800c114:	0598      	lsls	r0, r3, #22
 800c116:	d402      	bmi.n	800c11e <_puts_r+0x22>
 800c118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c11a:	f000 f99c 	bl	800c456 <__retarget_lock_acquire_recursive>
 800c11e:	89a3      	ldrh	r3, [r4, #12]
 800c120:	0719      	lsls	r1, r3, #28
 800c122:	d513      	bpl.n	800c14c <_puts_r+0x50>
 800c124:	6923      	ldr	r3, [r4, #16]
 800c126:	b18b      	cbz	r3, 800c14c <_puts_r+0x50>
 800c128:	3e01      	subs	r6, #1
 800c12a:	68a3      	ldr	r3, [r4, #8]
 800c12c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c130:	3b01      	subs	r3, #1
 800c132:	60a3      	str	r3, [r4, #8]
 800c134:	b9e9      	cbnz	r1, 800c172 <_puts_r+0x76>
 800c136:	2b00      	cmp	r3, #0
 800c138:	da2e      	bge.n	800c198 <_puts_r+0x9c>
 800c13a:	4622      	mov	r2, r4
 800c13c:	210a      	movs	r1, #10
 800c13e:	4628      	mov	r0, r5
 800c140:	f000 f87b 	bl	800c23a <__swbuf_r>
 800c144:	3001      	adds	r0, #1
 800c146:	d007      	beq.n	800c158 <_puts_r+0x5c>
 800c148:	250a      	movs	r5, #10
 800c14a:	e007      	b.n	800c15c <_puts_r+0x60>
 800c14c:	4621      	mov	r1, r4
 800c14e:	4628      	mov	r0, r5
 800c150:	f000 f8b0 	bl	800c2b4 <__swsetup_r>
 800c154:	2800      	cmp	r0, #0
 800c156:	d0e7      	beq.n	800c128 <_puts_r+0x2c>
 800c158:	f04f 35ff 	mov.w	r5, #4294967295
 800c15c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c15e:	07da      	lsls	r2, r3, #31
 800c160:	d405      	bmi.n	800c16e <_puts_r+0x72>
 800c162:	89a3      	ldrh	r3, [r4, #12]
 800c164:	059b      	lsls	r3, r3, #22
 800c166:	d402      	bmi.n	800c16e <_puts_r+0x72>
 800c168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c16a:	f000 f975 	bl	800c458 <__retarget_lock_release_recursive>
 800c16e:	4628      	mov	r0, r5
 800c170:	bd70      	pop	{r4, r5, r6, pc}
 800c172:	2b00      	cmp	r3, #0
 800c174:	da04      	bge.n	800c180 <_puts_r+0x84>
 800c176:	69a2      	ldr	r2, [r4, #24]
 800c178:	429a      	cmp	r2, r3
 800c17a:	dc06      	bgt.n	800c18a <_puts_r+0x8e>
 800c17c:	290a      	cmp	r1, #10
 800c17e:	d004      	beq.n	800c18a <_puts_r+0x8e>
 800c180:	6823      	ldr	r3, [r4, #0]
 800c182:	1c5a      	adds	r2, r3, #1
 800c184:	6022      	str	r2, [r4, #0]
 800c186:	7019      	strb	r1, [r3, #0]
 800c188:	e7cf      	b.n	800c12a <_puts_r+0x2e>
 800c18a:	4622      	mov	r2, r4
 800c18c:	4628      	mov	r0, r5
 800c18e:	f000 f854 	bl	800c23a <__swbuf_r>
 800c192:	3001      	adds	r0, #1
 800c194:	d1c9      	bne.n	800c12a <_puts_r+0x2e>
 800c196:	e7df      	b.n	800c158 <_puts_r+0x5c>
 800c198:	6823      	ldr	r3, [r4, #0]
 800c19a:	250a      	movs	r5, #10
 800c19c:	1c5a      	adds	r2, r3, #1
 800c19e:	6022      	str	r2, [r4, #0]
 800c1a0:	701d      	strb	r5, [r3, #0]
 800c1a2:	e7db      	b.n	800c15c <_puts_r+0x60>

0800c1a4 <puts>:
 800c1a4:	4b02      	ldr	r3, [pc, #8]	; (800c1b0 <puts+0xc>)
 800c1a6:	4601      	mov	r1, r0
 800c1a8:	6818      	ldr	r0, [r3, #0]
 800c1aa:	f7ff bfa7 	b.w	800c0fc <_puts_r>
 800c1ae:	bf00      	nop
 800c1b0:	20000098 	.word	0x20000098

0800c1b4 <__sread>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1bc:	f000 f8fc 	bl	800c3b8 <_read_r>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	bfab      	itete	ge
 800c1c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1c6:	89a3      	ldrhlt	r3, [r4, #12]
 800c1c8:	181b      	addge	r3, r3, r0
 800c1ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1ce:	bfac      	ite	ge
 800c1d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1d2:	81a3      	strhlt	r3, [r4, #12]
 800c1d4:	bd10      	pop	{r4, pc}

0800c1d6 <__swrite>:
 800c1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1da:	461f      	mov	r7, r3
 800c1dc:	898b      	ldrh	r3, [r1, #12]
 800c1de:	05db      	lsls	r3, r3, #23
 800c1e0:	4605      	mov	r5, r0
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	4616      	mov	r6, r2
 800c1e6:	d505      	bpl.n	800c1f4 <__swrite+0x1e>
 800c1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f000 f8d0 	bl	800c394 <_lseek_r>
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1fe:	81a3      	strh	r3, [r4, #12]
 800c200:	4632      	mov	r2, r6
 800c202:	463b      	mov	r3, r7
 800c204:	4628      	mov	r0, r5
 800c206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c20a:	f000 b8e7 	b.w	800c3dc <_write_r>

0800c20e <__sseek>:
 800c20e:	b510      	push	{r4, lr}
 800c210:	460c      	mov	r4, r1
 800c212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c216:	f000 f8bd 	bl	800c394 <_lseek_r>
 800c21a:	1c43      	adds	r3, r0, #1
 800c21c:	89a3      	ldrh	r3, [r4, #12]
 800c21e:	bf15      	itete	ne
 800c220:	6560      	strne	r0, [r4, #84]	; 0x54
 800c222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c22a:	81a3      	strheq	r3, [r4, #12]
 800c22c:	bf18      	it	ne
 800c22e:	81a3      	strhne	r3, [r4, #12]
 800c230:	bd10      	pop	{r4, pc}

0800c232 <__sclose>:
 800c232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c236:	f000 b89d 	b.w	800c374 <_close_r>

0800c23a <__swbuf_r>:
 800c23a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23c:	460e      	mov	r6, r1
 800c23e:	4614      	mov	r4, r2
 800c240:	4605      	mov	r5, r0
 800c242:	b118      	cbz	r0, 800c24c <__swbuf_r+0x12>
 800c244:	6a03      	ldr	r3, [r0, #32]
 800c246:	b90b      	cbnz	r3, 800c24c <__swbuf_r+0x12>
 800c248:	f7ff ff10 	bl	800c06c <__sinit>
 800c24c:	69a3      	ldr	r3, [r4, #24]
 800c24e:	60a3      	str	r3, [r4, #8]
 800c250:	89a3      	ldrh	r3, [r4, #12]
 800c252:	071a      	lsls	r2, r3, #28
 800c254:	d525      	bpl.n	800c2a2 <__swbuf_r+0x68>
 800c256:	6923      	ldr	r3, [r4, #16]
 800c258:	b31b      	cbz	r3, 800c2a2 <__swbuf_r+0x68>
 800c25a:	6823      	ldr	r3, [r4, #0]
 800c25c:	6922      	ldr	r2, [r4, #16]
 800c25e:	1a98      	subs	r0, r3, r2
 800c260:	6963      	ldr	r3, [r4, #20]
 800c262:	b2f6      	uxtb	r6, r6
 800c264:	4283      	cmp	r3, r0
 800c266:	4637      	mov	r7, r6
 800c268:	dc04      	bgt.n	800c274 <__swbuf_r+0x3a>
 800c26a:	4621      	mov	r1, r4
 800c26c:	4628      	mov	r0, r5
 800c26e:	f000 fd47 	bl	800cd00 <_fflush_r>
 800c272:	b9e0      	cbnz	r0, 800c2ae <__swbuf_r+0x74>
 800c274:	68a3      	ldr	r3, [r4, #8]
 800c276:	3b01      	subs	r3, #1
 800c278:	60a3      	str	r3, [r4, #8]
 800c27a:	6823      	ldr	r3, [r4, #0]
 800c27c:	1c5a      	adds	r2, r3, #1
 800c27e:	6022      	str	r2, [r4, #0]
 800c280:	701e      	strb	r6, [r3, #0]
 800c282:	6962      	ldr	r2, [r4, #20]
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	429a      	cmp	r2, r3
 800c288:	d004      	beq.n	800c294 <__swbuf_r+0x5a>
 800c28a:	89a3      	ldrh	r3, [r4, #12]
 800c28c:	07db      	lsls	r3, r3, #31
 800c28e:	d506      	bpl.n	800c29e <__swbuf_r+0x64>
 800c290:	2e0a      	cmp	r6, #10
 800c292:	d104      	bne.n	800c29e <__swbuf_r+0x64>
 800c294:	4621      	mov	r1, r4
 800c296:	4628      	mov	r0, r5
 800c298:	f000 fd32 	bl	800cd00 <_fflush_r>
 800c29c:	b938      	cbnz	r0, 800c2ae <__swbuf_r+0x74>
 800c29e:	4638      	mov	r0, r7
 800c2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	f000 f805 	bl	800c2b4 <__swsetup_r>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d0d5      	beq.n	800c25a <__swbuf_r+0x20>
 800c2ae:	f04f 37ff 	mov.w	r7, #4294967295
 800c2b2:	e7f4      	b.n	800c29e <__swbuf_r+0x64>

0800c2b4 <__swsetup_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4b2a      	ldr	r3, [pc, #168]	; (800c360 <__swsetup_r+0xac>)
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	6818      	ldr	r0, [r3, #0]
 800c2bc:	460c      	mov	r4, r1
 800c2be:	b118      	cbz	r0, 800c2c8 <__swsetup_r+0x14>
 800c2c0:	6a03      	ldr	r3, [r0, #32]
 800c2c2:	b90b      	cbnz	r3, 800c2c8 <__swsetup_r+0x14>
 800c2c4:	f7ff fed2 	bl	800c06c <__sinit>
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2ce:	0718      	lsls	r0, r3, #28
 800c2d0:	d422      	bmi.n	800c318 <__swsetup_r+0x64>
 800c2d2:	06d9      	lsls	r1, r3, #27
 800c2d4:	d407      	bmi.n	800c2e6 <__swsetup_r+0x32>
 800c2d6:	2309      	movs	r3, #9
 800c2d8:	602b      	str	r3, [r5, #0]
 800c2da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2de:	81a3      	strh	r3, [r4, #12]
 800c2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e4:	e034      	b.n	800c350 <__swsetup_r+0x9c>
 800c2e6:	0758      	lsls	r0, r3, #29
 800c2e8:	d512      	bpl.n	800c310 <__swsetup_r+0x5c>
 800c2ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2ec:	b141      	cbz	r1, 800c300 <__swsetup_r+0x4c>
 800c2ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2f2:	4299      	cmp	r1, r3
 800c2f4:	d002      	beq.n	800c2fc <__swsetup_r+0x48>
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f000 f8b0 	bl	800c45c <_free_r>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	6363      	str	r3, [r4, #52]	; 0x34
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c306:	81a3      	strh	r3, [r4, #12]
 800c308:	2300      	movs	r3, #0
 800c30a:	6063      	str	r3, [r4, #4]
 800c30c:	6923      	ldr	r3, [r4, #16]
 800c30e:	6023      	str	r3, [r4, #0]
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	f043 0308 	orr.w	r3, r3, #8
 800c316:	81a3      	strh	r3, [r4, #12]
 800c318:	6923      	ldr	r3, [r4, #16]
 800c31a:	b94b      	cbnz	r3, 800c330 <__swsetup_r+0x7c>
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c326:	d003      	beq.n	800c330 <__swsetup_r+0x7c>
 800c328:	4621      	mov	r1, r4
 800c32a:	4628      	mov	r0, r5
 800c32c:	f000 fd36 	bl	800cd9c <__smakebuf_r>
 800c330:	89a0      	ldrh	r0, [r4, #12]
 800c332:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c336:	f010 0301 	ands.w	r3, r0, #1
 800c33a:	d00a      	beq.n	800c352 <__swsetup_r+0x9e>
 800c33c:	2300      	movs	r3, #0
 800c33e:	60a3      	str	r3, [r4, #8]
 800c340:	6963      	ldr	r3, [r4, #20]
 800c342:	425b      	negs	r3, r3
 800c344:	61a3      	str	r3, [r4, #24]
 800c346:	6923      	ldr	r3, [r4, #16]
 800c348:	b943      	cbnz	r3, 800c35c <__swsetup_r+0xa8>
 800c34a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c34e:	d1c4      	bne.n	800c2da <__swsetup_r+0x26>
 800c350:	bd38      	pop	{r3, r4, r5, pc}
 800c352:	0781      	lsls	r1, r0, #30
 800c354:	bf58      	it	pl
 800c356:	6963      	ldrpl	r3, [r4, #20]
 800c358:	60a3      	str	r3, [r4, #8]
 800c35a:	e7f4      	b.n	800c346 <__swsetup_r+0x92>
 800c35c:	2000      	movs	r0, #0
 800c35e:	e7f7      	b.n	800c350 <__swsetup_r+0x9c>
 800c360:	20000098 	.word	0x20000098

0800c364 <memset>:
 800c364:	4402      	add	r2, r0
 800c366:	4603      	mov	r3, r0
 800c368:	4293      	cmp	r3, r2
 800c36a:	d100      	bne.n	800c36e <memset+0xa>
 800c36c:	4770      	bx	lr
 800c36e:	f803 1b01 	strb.w	r1, [r3], #1
 800c372:	e7f9      	b.n	800c368 <memset+0x4>

0800c374 <_close_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d06      	ldr	r5, [pc, #24]	; (800c390 <_close_r+0x1c>)
 800c378:	2300      	movs	r3, #0
 800c37a:	4604      	mov	r4, r0
 800c37c:	4608      	mov	r0, r1
 800c37e:	602b      	str	r3, [r5, #0]
 800c380:	f7f7 f87f 	bl	8003482 <_close>
 800c384:	1c43      	adds	r3, r0, #1
 800c386:	d102      	bne.n	800c38e <_close_r+0x1a>
 800c388:	682b      	ldr	r3, [r5, #0]
 800c38a:	b103      	cbz	r3, 800c38e <_close_r+0x1a>
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	bd38      	pop	{r3, r4, r5, pc}
 800c390:	20000988 	.word	0x20000988

0800c394 <_lseek_r>:
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	4d07      	ldr	r5, [pc, #28]	; (800c3b4 <_lseek_r+0x20>)
 800c398:	4604      	mov	r4, r0
 800c39a:	4608      	mov	r0, r1
 800c39c:	4611      	mov	r1, r2
 800c39e:	2200      	movs	r2, #0
 800c3a0:	602a      	str	r2, [r5, #0]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	f7f7 f894 	bl	80034d0 <_lseek>
 800c3a8:	1c43      	adds	r3, r0, #1
 800c3aa:	d102      	bne.n	800c3b2 <_lseek_r+0x1e>
 800c3ac:	682b      	ldr	r3, [r5, #0]
 800c3ae:	b103      	cbz	r3, 800c3b2 <_lseek_r+0x1e>
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	bd38      	pop	{r3, r4, r5, pc}
 800c3b4:	20000988 	.word	0x20000988

0800c3b8 <_read_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	4d07      	ldr	r5, [pc, #28]	; (800c3d8 <_read_r+0x20>)
 800c3bc:	4604      	mov	r4, r0
 800c3be:	4608      	mov	r0, r1
 800c3c0:	4611      	mov	r1, r2
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	602a      	str	r2, [r5, #0]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f7f7 f822 	bl	8003410 <_read>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d102      	bne.n	800c3d6 <_read_r+0x1e>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	b103      	cbz	r3, 800c3d6 <_read_r+0x1e>
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	bd38      	pop	{r3, r4, r5, pc}
 800c3d8:	20000988 	.word	0x20000988

0800c3dc <_write_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4d07      	ldr	r5, [pc, #28]	; (800c3fc <_write_r+0x20>)
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	4608      	mov	r0, r1
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	602a      	str	r2, [r5, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	f7f7 f82d 	bl	800344a <_write>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d102      	bne.n	800c3fa <_write_r+0x1e>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b103      	cbz	r3, 800c3fa <_write_r+0x1e>
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	20000988 	.word	0x20000988

0800c400 <__errno>:
 800c400:	4b01      	ldr	r3, [pc, #4]	; (800c408 <__errno+0x8>)
 800c402:	6818      	ldr	r0, [r3, #0]
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	20000098 	.word	0x20000098

0800c40c <__libc_init_array>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	4d0d      	ldr	r5, [pc, #52]	; (800c444 <__libc_init_array+0x38>)
 800c410:	4c0d      	ldr	r4, [pc, #52]	; (800c448 <__libc_init_array+0x3c>)
 800c412:	1b64      	subs	r4, r4, r5
 800c414:	10a4      	asrs	r4, r4, #2
 800c416:	2600      	movs	r6, #0
 800c418:	42a6      	cmp	r6, r4
 800c41a:	d109      	bne.n	800c430 <__libc_init_array+0x24>
 800c41c:	4d0b      	ldr	r5, [pc, #44]	; (800c44c <__libc_init_array+0x40>)
 800c41e:	4c0c      	ldr	r4, [pc, #48]	; (800c450 <__libc_init_array+0x44>)
 800c420:	f000 fd2a 	bl	800ce78 <_init>
 800c424:	1b64      	subs	r4, r4, r5
 800c426:	10a4      	asrs	r4, r4, #2
 800c428:	2600      	movs	r6, #0
 800c42a:	42a6      	cmp	r6, r4
 800c42c:	d105      	bne.n	800c43a <__libc_init_array+0x2e>
 800c42e:	bd70      	pop	{r4, r5, r6, pc}
 800c430:	f855 3b04 	ldr.w	r3, [r5], #4
 800c434:	4798      	blx	r3
 800c436:	3601      	adds	r6, #1
 800c438:	e7ee      	b.n	800c418 <__libc_init_array+0xc>
 800c43a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c43e:	4798      	blx	r3
 800c440:	3601      	adds	r6, #1
 800c442:	e7f2      	b.n	800c42a <__libc_init_array+0x1e>
 800c444:	0800deac 	.word	0x0800deac
 800c448:	0800deac 	.word	0x0800deac
 800c44c:	0800deac 	.word	0x0800deac
 800c450:	0800deb0 	.word	0x0800deb0

0800c454 <__retarget_lock_init_recursive>:
 800c454:	4770      	bx	lr

0800c456 <__retarget_lock_acquire_recursive>:
 800c456:	4770      	bx	lr

0800c458 <__retarget_lock_release_recursive>:
 800c458:	4770      	bx	lr
	...

0800c45c <_free_r>:
 800c45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c45e:	2900      	cmp	r1, #0
 800c460:	d044      	beq.n	800c4ec <_free_r+0x90>
 800c462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c466:	9001      	str	r0, [sp, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f1a1 0404 	sub.w	r4, r1, #4
 800c46e:	bfb8      	it	lt
 800c470:	18e4      	addlt	r4, r4, r3
 800c472:	f000 f8df 	bl	800c634 <__malloc_lock>
 800c476:	4a1e      	ldr	r2, [pc, #120]	; (800c4f0 <_free_r+0x94>)
 800c478:	9801      	ldr	r0, [sp, #4]
 800c47a:	6813      	ldr	r3, [r2, #0]
 800c47c:	b933      	cbnz	r3, 800c48c <_free_r+0x30>
 800c47e:	6063      	str	r3, [r4, #4]
 800c480:	6014      	str	r4, [r2, #0]
 800c482:	b003      	add	sp, #12
 800c484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c488:	f000 b8da 	b.w	800c640 <__malloc_unlock>
 800c48c:	42a3      	cmp	r3, r4
 800c48e:	d908      	bls.n	800c4a2 <_free_r+0x46>
 800c490:	6825      	ldr	r5, [r4, #0]
 800c492:	1961      	adds	r1, r4, r5
 800c494:	428b      	cmp	r3, r1
 800c496:	bf01      	itttt	eq
 800c498:	6819      	ldreq	r1, [r3, #0]
 800c49a:	685b      	ldreq	r3, [r3, #4]
 800c49c:	1949      	addeq	r1, r1, r5
 800c49e:	6021      	streq	r1, [r4, #0]
 800c4a0:	e7ed      	b.n	800c47e <_free_r+0x22>
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	b10b      	cbz	r3, 800c4ac <_free_r+0x50>
 800c4a8:	42a3      	cmp	r3, r4
 800c4aa:	d9fa      	bls.n	800c4a2 <_free_r+0x46>
 800c4ac:	6811      	ldr	r1, [r2, #0]
 800c4ae:	1855      	adds	r5, r2, r1
 800c4b0:	42a5      	cmp	r5, r4
 800c4b2:	d10b      	bne.n	800c4cc <_free_r+0x70>
 800c4b4:	6824      	ldr	r4, [r4, #0]
 800c4b6:	4421      	add	r1, r4
 800c4b8:	1854      	adds	r4, r2, r1
 800c4ba:	42a3      	cmp	r3, r4
 800c4bc:	6011      	str	r1, [r2, #0]
 800c4be:	d1e0      	bne.n	800c482 <_free_r+0x26>
 800c4c0:	681c      	ldr	r4, [r3, #0]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	6053      	str	r3, [r2, #4]
 800c4c6:	440c      	add	r4, r1
 800c4c8:	6014      	str	r4, [r2, #0]
 800c4ca:	e7da      	b.n	800c482 <_free_r+0x26>
 800c4cc:	d902      	bls.n	800c4d4 <_free_r+0x78>
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	6003      	str	r3, [r0, #0]
 800c4d2:	e7d6      	b.n	800c482 <_free_r+0x26>
 800c4d4:	6825      	ldr	r5, [r4, #0]
 800c4d6:	1961      	adds	r1, r4, r5
 800c4d8:	428b      	cmp	r3, r1
 800c4da:	bf04      	itt	eq
 800c4dc:	6819      	ldreq	r1, [r3, #0]
 800c4de:	685b      	ldreq	r3, [r3, #4]
 800c4e0:	6063      	str	r3, [r4, #4]
 800c4e2:	bf04      	itt	eq
 800c4e4:	1949      	addeq	r1, r1, r5
 800c4e6:	6021      	streq	r1, [r4, #0]
 800c4e8:	6054      	str	r4, [r2, #4]
 800c4ea:	e7ca      	b.n	800c482 <_free_r+0x26>
 800c4ec:	b003      	add	sp, #12
 800c4ee:	bd30      	pop	{r4, r5, pc}
 800c4f0:	20000990 	.word	0x20000990

0800c4f4 <sbrk_aligned>:
 800c4f4:	b570      	push	{r4, r5, r6, lr}
 800c4f6:	4e0e      	ldr	r6, [pc, #56]	; (800c530 <sbrk_aligned+0x3c>)
 800c4f8:	460c      	mov	r4, r1
 800c4fa:	6831      	ldr	r1, [r6, #0]
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	b911      	cbnz	r1, 800c506 <sbrk_aligned+0x12>
 800c500:	f000 fcaa 	bl	800ce58 <_sbrk_r>
 800c504:	6030      	str	r0, [r6, #0]
 800c506:	4621      	mov	r1, r4
 800c508:	4628      	mov	r0, r5
 800c50a:	f000 fca5 	bl	800ce58 <_sbrk_r>
 800c50e:	1c43      	adds	r3, r0, #1
 800c510:	d00a      	beq.n	800c528 <sbrk_aligned+0x34>
 800c512:	1cc4      	adds	r4, r0, #3
 800c514:	f024 0403 	bic.w	r4, r4, #3
 800c518:	42a0      	cmp	r0, r4
 800c51a:	d007      	beq.n	800c52c <sbrk_aligned+0x38>
 800c51c:	1a21      	subs	r1, r4, r0
 800c51e:	4628      	mov	r0, r5
 800c520:	f000 fc9a 	bl	800ce58 <_sbrk_r>
 800c524:	3001      	adds	r0, #1
 800c526:	d101      	bne.n	800c52c <sbrk_aligned+0x38>
 800c528:	f04f 34ff 	mov.w	r4, #4294967295
 800c52c:	4620      	mov	r0, r4
 800c52e:	bd70      	pop	{r4, r5, r6, pc}
 800c530:	20000994 	.word	0x20000994

0800c534 <_malloc_r>:
 800c534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c538:	1ccd      	adds	r5, r1, #3
 800c53a:	f025 0503 	bic.w	r5, r5, #3
 800c53e:	3508      	adds	r5, #8
 800c540:	2d0c      	cmp	r5, #12
 800c542:	bf38      	it	cc
 800c544:	250c      	movcc	r5, #12
 800c546:	2d00      	cmp	r5, #0
 800c548:	4607      	mov	r7, r0
 800c54a:	db01      	blt.n	800c550 <_malloc_r+0x1c>
 800c54c:	42a9      	cmp	r1, r5
 800c54e:	d905      	bls.n	800c55c <_malloc_r+0x28>
 800c550:	230c      	movs	r3, #12
 800c552:	603b      	str	r3, [r7, #0]
 800c554:	2600      	movs	r6, #0
 800c556:	4630      	mov	r0, r6
 800c558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c55c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c630 <_malloc_r+0xfc>
 800c560:	f000 f868 	bl	800c634 <__malloc_lock>
 800c564:	f8d8 3000 	ldr.w	r3, [r8]
 800c568:	461c      	mov	r4, r3
 800c56a:	bb5c      	cbnz	r4, 800c5c4 <_malloc_r+0x90>
 800c56c:	4629      	mov	r1, r5
 800c56e:	4638      	mov	r0, r7
 800c570:	f7ff ffc0 	bl	800c4f4 <sbrk_aligned>
 800c574:	1c43      	adds	r3, r0, #1
 800c576:	4604      	mov	r4, r0
 800c578:	d155      	bne.n	800c626 <_malloc_r+0xf2>
 800c57a:	f8d8 4000 	ldr.w	r4, [r8]
 800c57e:	4626      	mov	r6, r4
 800c580:	2e00      	cmp	r6, #0
 800c582:	d145      	bne.n	800c610 <_malloc_r+0xdc>
 800c584:	2c00      	cmp	r4, #0
 800c586:	d048      	beq.n	800c61a <_malloc_r+0xe6>
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	4631      	mov	r1, r6
 800c58c:	4638      	mov	r0, r7
 800c58e:	eb04 0903 	add.w	r9, r4, r3
 800c592:	f000 fc61 	bl	800ce58 <_sbrk_r>
 800c596:	4581      	cmp	r9, r0
 800c598:	d13f      	bne.n	800c61a <_malloc_r+0xe6>
 800c59a:	6821      	ldr	r1, [r4, #0]
 800c59c:	1a6d      	subs	r5, r5, r1
 800c59e:	4629      	mov	r1, r5
 800c5a0:	4638      	mov	r0, r7
 800c5a2:	f7ff ffa7 	bl	800c4f4 <sbrk_aligned>
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	d037      	beq.n	800c61a <_malloc_r+0xe6>
 800c5aa:	6823      	ldr	r3, [r4, #0]
 800c5ac:	442b      	add	r3, r5
 800c5ae:	6023      	str	r3, [r4, #0]
 800c5b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d038      	beq.n	800c62a <_malloc_r+0xf6>
 800c5b8:	685a      	ldr	r2, [r3, #4]
 800c5ba:	42a2      	cmp	r2, r4
 800c5bc:	d12b      	bne.n	800c616 <_malloc_r+0xe2>
 800c5be:	2200      	movs	r2, #0
 800c5c0:	605a      	str	r2, [r3, #4]
 800c5c2:	e00f      	b.n	800c5e4 <_malloc_r+0xb0>
 800c5c4:	6822      	ldr	r2, [r4, #0]
 800c5c6:	1b52      	subs	r2, r2, r5
 800c5c8:	d41f      	bmi.n	800c60a <_malloc_r+0xd6>
 800c5ca:	2a0b      	cmp	r2, #11
 800c5cc:	d917      	bls.n	800c5fe <_malloc_r+0xca>
 800c5ce:	1961      	adds	r1, r4, r5
 800c5d0:	42a3      	cmp	r3, r4
 800c5d2:	6025      	str	r5, [r4, #0]
 800c5d4:	bf18      	it	ne
 800c5d6:	6059      	strne	r1, [r3, #4]
 800c5d8:	6863      	ldr	r3, [r4, #4]
 800c5da:	bf08      	it	eq
 800c5dc:	f8c8 1000 	streq.w	r1, [r8]
 800c5e0:	5162      	str	r2, [r4, r5]
 800c5e2:	604b      	str	r3, [r1, #4]
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	f104 060b 	add.w	r6, r4, #11
 800c5ea:	f000 f829 	bl	800c640 <__malloc_unlock>
 800c5ee:	f026 0607 	bic.w	r6, r6, #7
 800c5f2:	1d23      	adds	r3, r4, #4
 800c5f4:	1af2      	subs	r2, r6, r3
 800c5f6:	d0ae      	beq.n	800c556 <_malloc_r+0x22>
 800c5f8:	1b9b      	subs	r3, r3, r6
 800c5fa:	50a3      	str	r3, [r4, r2]
 800c5fc:	e7ab      	b.n	800c556 <_malloc_r+0x22>
 800c5fe:	42a3      	cmp	r3, r4
 800c600:	6862      	ldr	r2, [r4, #4]
 800c602:	d1dd      	bne.n	800c5c0 <_malloc_r+0x8c>
 800c604:	f8c8 2000 	str.w	r2, [r8]
 800c608:	e7ec      	b.n	800c5e4 <_malloc_r+0xb0>
 800c60a:	4623      	mov	r3, r4
 800c60c:	6864      	ldr	r4, [r4, #4]
 800c60e:	e7ac      	b.n	800c56a <_malloc_r+0x36>
 800c610:	4634      	mov	r4, r6
 800c612:	6876      	ldr	r6, [r6, #4]
 800c614:	e7b4      	b.n	800c580 <_malloc_r+0x4c>
 800c616:	4613      	mov	r3, r2
 800c618:	e7cc      	b.n	800c5b4 <_malloc_r+0x80>
 800c61a:	230c      	movs	r3, #12
 800c61c:	603b      	str	r3, [r7, #0]
 800c61e:	4638      	mov	r0, r7
 800c620:	f000 f80e 	bl	800c640 <__malloc_unlock>
 800c624:	e797      	b.n	800c556 <_malloc_r+0x22>
 800c626:	6025      	str	r5, [r4, #0]
 800c628:	e7dc      	b.n	800c5e4 <_malloc_r+0xb0>
 800c62a:	605b      	str	r3, [r3, #4]
 800c62c:	deff      	udf	#255	; 0xff
 800c62e:	bf00      	nop
 800c630:	20000990 	.word	0x20000990

0800c634 <__malloc_lock>:
 800c634:	4801      	ldr	r0, [pc, #4]	; (800c63c <__malloc_lock+0x8>)
 800c636:	f7ff bf0e 	b.w	800c456 <__retarget_lock_acquire_recursive>
 800c63a:	bf00      	nop
 800c63c:	2000098c 	.word	0x2000098c

0800c640 <__malloc_unlock>:
 800c640:	4801      	ldr	r0, [pc, #4]	; (800c648 <__malloc_unlock+0x8>)
 800c642:	f7ff bf09 	b.w	800c458 <__retarget_lock_release_recursive>
 800c646:	bf00      	nop
 800c648:	2000098c 	.word	0x2000098c

0800c64c <__sfputc_r>:
 800c64c:	6893      	ldr	r3, [r2, #8]
 800c64e:	3b01      	subs	r3, #1
 800c650:	2b00      	cmp	r3, #0
 800c652:	b410      	push	{r4}
 800c654:	6093      	str	r3, [r2, #8]
 800c656:	da08      	bge.n	800c66a <__sfputc_r+0x1e>
 800c658:	6994      	ldr	r4, [r2, #24]
 800c65a:	42a3      	cmp	r3, r4
 800c65c:	db01      	blt.n	800c662 <__sfputc_r+0x16>
 800c65e:	290a      	cmp	r1, #10
 800c660:	d103      	bne.n	800c66a <__sfputc_r+0x1e>
 800c662:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c666:	f7ff bde8 	b.w	800c23a <__swbuf_r>
 800c66a:	6813      	ldr	r3, [r2, #0]
 800c66c:	1c58      	adds	r0, r3, #1
 800c66e:	6010      	str	r0, [r2, #0]
 800c670:	7019      	strb	r1, [r3, #0]
 800c672:	4608      	mov	r0, r1
 800c674:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <__sfputs_r>:
 800c67a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67c:	4606      	mov	r6, r0
 800c67e:	460f      	mov	r7, r1
 800c680:	4614      	mov	r4, r2
 800c682:	18d5      	adds	r5, r2, r3
 800c684:	42ac      	cmp	r4, r5
 800c686:	d101      	bne.n	800c68c <__sfputs_r+0x12>
 800c688:	2000      	movs	r0, #0
 800c68a:	e007      	b.n	800c69c <__sfputs_r+0x22>
 800c68c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c690:	463a      	mov	r2, r7
 800c692:	4630      	mov	r0, r6
 800c694:	f7ff ffda 	bl	800c64c <__sfputc_r>
 800c698:	1c43      	adds	r3, r0, #1
 800c69a:	d1f3      	bne.n	800c684 <__sfputs_r+0xa>
 800c69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6a0 <_vfiprintf_r>:
 800c6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a4:	460d      	mov	r5, r1
 800c6a6:	b09d      	sub	sp, #116	; 0x74
 800c6a8:	4614      	mov	r4, r2
 800c6aa:	4698      	mov	r8, r3
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	b118      	cbz	r0, 800c6b8 <_vfiprintf_r+0x18>
 800c6b0:	6a03      	ldr	r3, [r0, #32]
 800c6b2:	b90b      	cbnz	r3, 800c6b8 <_vfiprintf_r+0x18>
 800c6b4:	f7ff fcda 	bl	800c06c <__sinit>
 800c6b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ba:	07d9      	lsls	r1, r3, #31
 800c6bc:	d405      	bmi.n	800c6ca <_vfiprintf_r+0x2a>
 800c6be:	89ab      	ldrh	r3, [r5, #12]
 800c6c0:	059a      	lsls	r2, r3, #22
 800c6c2:	d402      	bmi.n	800c6ca <_vfiprintf_r+0x2a>
 800c6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6c6:	f7ff fec6 	bl	800c456 <__retarget_lock_acquire_recursive>
 800c6ca:	89ab      	ldrh	r3, [r5, #12]
 800c6cc:	071b      	lsls	r3, r3, #28
 800c6ce:	d501      	bpl.n	800c6d4 <_vfiprintf_r+0x34>
 800c6d0:	692b      	ldr	r3, [r5, #16]
 800c6d2:	b99b      	cbnz	r3, 800c6fc <_vfiprintf_r+0x5c>
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f7ff fdec 	bl	800c2b4 <__swsetup_r>
 800c6dc:	b170      	cbz	r0, 800c6fc <_vfiprintf_r+0x5c>
 800c6de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6e0:	07dc      	lsls	r4, r3, #31
 800c6e2:	d504      	bpl.n	800c6ee <_vfiprintf_r+0x4e>
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	b01d      	add	sp, #116	; 0x74
 800c6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ee:	89ab      	ldrh	r3, [r5, #12]
 800c6f0:	0598      	lsls	r0, r3, #22
 800c6f2:	d4f7      	bmi.n	800c6e4 <_vfiprintf_r+0x44>
 800c6f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6f6:	f7ff feaf 	bl	800c458 <__retarget_lock_release_recursive>
 800c6fa:	e7f3      	b.n	800c6e4 <_vfiprintf_r+0x44>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c700:	2320      	movs	r3, #32
 800c702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c706:	f8cd 800c 	str.w	r8, [sp, #12]
 800c70a:	2330      	movs	r3, #48	; 0x30
 800c70c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c8c0 <_vfiprintf_r+0x220>
 800c710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c714:	f04f 0901 	mov.w	r9, #1
 800c718:	4623      	mov	r3, r4
 800c71a:	469a      	mov	sl, r3
 800c71c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c720:	b10a      	cbz	r2, 800c726 <_vfiprintf_r+0x86>
 800c722:	2a25      	cmp	r2, #37	; 0x25
 800c724:	d1f9      	bne.n	800c71a <_vfiprintf_r+0x7a>
 800c726:	ebba 0b04 	subs.w	fp, sl, r4
 800c72a:	d00b      	beq.n	800c744 <_vfiprintf_r+0xa4>
 800c72c:	465b      	mov	r3, fp
 800c72e:	4622      	mov	r2, r4
 800c730:	4629      	mov	r1, r5
 800c732:	4630      	mov	r0, r6
 800c734:	f7ff ffa1 	bl	800c67a <__sfputs_r>
 800c738:	3001      	adds	r0, #1
 800c73a:	f000 80a9 	beq.w	800c890 <_vfiprintf_r+0x1f0>
 800c73e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c740:	445a      	add	r2, fp
 800c742:	9209      	str	r2, [sp, #36]	; 0x24
 800c744:	f89a 3000 	ldrb.w	r3, [sl]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f000 80a1 	beq.w	800c890 <_vfiprintf_r+0x1f0>
 800c74e:	2300      	movs	r3, #0
 800c750:	f04f 32ff 	mov.w	r2, #4294967295
 800c754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c758:	f10a 0a01 	add.w	sl, sl, #1
 800c75c:	9304      	str	r3, [sp, #16]
 800c75e:	9307      	str	r3, [sp, #28]
 800c760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c764:	931a      	str	r3, [sp, #104]	; 0x68
 800c766:	4654      	mov	r4, sl
 800c768:	2205      	movs	r2, #5
 800c76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c76e:	4854      	ldr	r0, [pc, #336]	; (800c8c0 <_vfiprintf_r+0x220>)
 800c770:	f7f3 fd3e 	bl	80001f0 <memchr>
 800c774:	9a04      	ldr	r2, [sp, #16]
 800c776:	b9d8      	cbnz	r0, 800c7b0 <_vfiprintf_r+0x110>
 800c778:	06d1      	lsls	r1, r2, #27
 800c77a:	bf44      	itt	mi
 800c77c:	2320      	movmi	r3, #32
 800c77e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c782:	0713      	lsls	r3, r2, #28
 800c784:	bf44      	itt	mi
 800c786:	232b      	movmi	r3, #43	; 0x2b
 800c788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c78c:	f89a 3000 	ldrb.w	r3, [sl]
 800c790:	2b2a      	cmp	r3, #42	; 0x2a
 800c792:	d015      	beq.n	800c7c0 <_vfiprintf_r+0x120>
 800c794:	9a07      	ldr	r2, [sp, #28]
 800c796:	4654      	mov	r4, sl
 800c798:	2000      	movs	r0, #0
 800c79a:	f04f 0c0a 	mov.w	ip, #10
 800c79e:	4621      	mov	r1, r4
 800c7a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7a4:	3b30      	subs	r3, #48	; 0x30
 800c7a6:	2b09      	cmp	r3, #9
 800c7a8:	d94d      	bls.n	800c846 <_vfiprintf_r+0x1a6>
 800c7aa:	b1b0      	cbz	r0, 800c7da <_vfiprintf_r+0x13a>
 800c7ac:	9207      	str	r2, [sp, #28]
 800c7ae:	e014      	b.n	800c7da <_vfiprintf_r+0x13a>
 800c7b0:	eba0 0308 	sub.w	r3, r0, r8
 800c7b4:	fa09 f303 	lsl.w	r3, r9, r3
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	9304      	str	r3, [sp, #16]
 800c7bc:	46a2      	mov	sl, r4
 800c7be:	e7d2      	b.n	800c766 <_vfiprintf_r+0xc6>
 800c7c0:	9b03      	ldr	r3, [sp, #12]
 800c7c2:	1d19      	adds	r1, r3, #4
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	9103      	str	r1, [sp, #12]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	bfbb      	ittet	lt
 800c7cc:	425b      	neglt	r3, r3
 800c7ce:	f042 0202 	orrlt.w	r2, r2, #2
 800c7d2:	9307      	strge	r3, [sp, #28]
 800c7d4:	9307      	strlt	r3, [sp, #28]
 800c7d6:	bfb8      	it	lt
 800c7d8:	9204      	strlt	r2, [sp, #16]
 800c7da:	7823      	ldrb	r3, [r4, #0]
 800c7dc:	2b2e      	cmp	r3, #46	; 0x2e
 800c7de:	d10c      	bne.n	800c7fa <_vfiprintf_r+0x15a>
 800c7e0:	7863      	ldrb	r3, [r4, #1]
 800c7e2:	2b2a      	cmp	r3, #42	; 0x2a
 800c7e4:	d134      	bne.n	800c850 <_vfiprintf_r+0x1b0>
 800c7e6:	9b03      	ldr	r3, [sp, #12]
 800c7e8:	1d1a      	adds	r2, r3, #4
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	9203      	str	r2, [sp, #12]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	bfb8      	it	lt
 800c7f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7f6:	3402      	adds	r4, #2
 800c7f8:	9305      	str	r3, [sp, #20]
 800c7fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c8d0 <_vfiprintf_r+0x230>
 800c7fe:	7821      	ldrb	r1, [r4, #0]
 800c800:	2203      	movs	r2, #3
 800c802:	4650      	mov	r0, sl
 800c804:	f7f3 fcf4 	bl	80001f0 <memchr>
 800c808:	b138      	cbz	r0, 800c81a <_vfiprintf_r+0x17a>
 800c80a:	9b04      	ldr	r3, [sp, #16]
 800c80c:	eba0 000a 	sub.w	r0, r0, sl
 800c810:	2240      	movs	r2, #64	; 0x40
 800c812:	4082      	lsls	r2, r0
 800c814:	4313      	orrs	r3, r2
 800c816:	3401      	adds	r4, #1
 800c818:	9304      	str	r3, [sp, #16]
 800c81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c81e:	4829      	ldr	r0, [pc, #164]	; (800c8c4 <_vfiprintf_r+0x224>)
 800c820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c824:	2206      	movs	r2, #6
 800c826:	f7f3 fce3 	bl	80001f0 <memchr>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d03f      	beq.n	800c8ae <_vfiprintf_r+0x20e>
 800c82e:	4b26      	ldr	r3, [pc, #152]	; (800c8c8 <_vfiprintf_r+0x228>)
 800c830:	bb1b      	cbnz	r3, 800c87a <_vfiprintf_r+0x1da>
 800c832:	9b03      	ldr	r3, [sp, #12]
 800c834:	3307      	adds	r3, #7
 800c836:	f023 0307 	bic.w	r3, r3, #7
 800c83a:	3308      	adds	r3, #8
 800c83c:	9303      	str	r3, [sp, #12]
 800c83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c840:	443b      	add	r3, r7
 800c842:	9309      	str	r3, [sp, #36]	; 0x24
 800c844:	e768      	b.n	800c718 <_vfiprintf_r+0x78>
 800c846:	fb0c 3202 	mla	r2, ip, r2, r3
 800c84a:	460c      	mov	r4, r1
 800c84c:	2001      	movs	r0, #1
 800c84e:	e7a6      	b.n	800c79e <_vfiprintf_r+0xfe>
 800c850:	2300      	movs	r3, #0
 800c852:	3401      	adds	r4, #1
 800c854:	9305      	str	r3, [sp, #20]
 800c856:	4619      	mov	r1, r3
 800c858:	f04f 0c0a 	mov.w	ip, #10
 800c85c:	4620      	mov	r0, r4
 800c85e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c862:	3a30      	subs	r2, #48	; 0x30
 800c864:	2a09      	cmp	r2, #9
 800c866:	d903      	bls.n	800c870 <_vfiprintf_r+0x1d0>
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d0c6      	beq.n	800c7fa <_vfiprintf_r+0x15a>
 800c86c:	9105      	str	r1, [sp, #20]
 800c86e:	e7c4      	b.n	800c7fa <_vfiprintf_r+0x15a>
 800c870:	fb0c 2101 	mla	r1, ip, r1, r2
 800c874:	4604      	mov	r4, r0
 800c876:	2301      	movs	r3, #1
 800c878:	e7f0      	b.n	800c85c <_vfiprintf_r+0x1bc>
 800c87a:	ab03      	add	r3, sp, #12
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	462a      	mov	r2, r5
 800c880:	4b12      	ldr	r3, [pc, #72]	; (800c8cc <_vfiprintf_r+0x22c>)
 800c882:	a904      	add	r1, sp, #16
 800c884:	4630      	mov	r0, r6
 800c886:	f3af 8000 	nop.w
 800c88a:	4607      	mov	r7, r0
 800c88c:	1c78      	adds	r0, r7, #1
 800c88e:	d1d6      	bne.n	800c83e <_vfiprintf_r+0x19e>
 800c890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c892:	07d9      	lsls	r1, r3, #31
 800c894:	d405      	bmi.n	800c8a2 <_vfiprintf_r+0x202>
 800c896:	89ab      	ldrh	r3, [r5, #12]
 800c898:	059a      	lsls	r2, r3, #22
 800c89a:	d402      	bmi.n	800c8a2 <_vfiprintf_r+0x202>
 800c89c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c89e:	f7ff fddb 	bl	800c458 <__retarget_lock_release_recursive>
 800c8a2:	89ab      	ldrh	r3, [r5, #12]
 800c8a4:	065b      	lsls	r3, r3, #25
 800c8a6:	f53f af1d 	bmi.w	800c6e4 <_vfiprintf_r+0x44>
 800c8aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8ac:	e71c      	b.n	800c6e8 <_vfiprintf_r+0x48>
 800c8ae:	ab03      	add	r3, sp, #12
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	462a      	mov	r2, r5
 800c8b4:	4b05      	ldr	r3, [pc, #20]	; (800c8cc <_vfiprintf_r+0x22c>)
 800c8b6:	a904      	add	r1, sp, #16
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	f000 f879 	bl	800c9b0 <_printf_i>
 800c8be:	e7e4      	b.n	800c88a <_vfiprintf_r+0x1ea>
 800c8c0:	0800de70 	.word	0x0800de70
 800c8c4:	0800de7a 	.word	0x0800de7a
 800c8c8:	00000000 	.word	0x00000000
 800c8cc:	0800c67b 	.word	0x0800c67b
 800c8d0:	0800de76 	.word	0x0800de76

0800c8d4 <_printf_common>:
 800c8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d8:	4616      	mov	r6, r2
 800c8da:	4699      	mov	r9, r3
 800c8dc:	688a      	ldr	r2, [r1, #8]
 800c8de:	690b      	ldr	r3, [r1, #16]
 800c8e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	bfb8      	it	lt
 800c8e8:	4613      	movlt	r3, r2
 800c8ea:	6033      	str	r3, [r6, #0]
 800c8ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8f0:	4607      	mov	r7, r0
 800c8f2:	460c      	mov	r4, r1
 800c8f4:	b10a      	cbz	r2, 800c8fa <_printf_common+0x26>
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	6033      	str	r3, [r6, #0]
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	0699      	lsls	r1, r3, #26
 800c8fe:	bf42      	ittt	mi
 800c900:	6833      	ldrmi	r3, [r6, #0]
 800c902:	3302      	addmi	r3, #2
 800c904:	6033      	strmi	r3, [r6, #0]
 800c906:	6825      	ldr	r5, [r4, #0]
 800c908:	f015 0506 	ands.w	r5, r5, #6
 800c90c:	d106      	bne.n	800c91c <_printf_common+0x48>
 800c90e:	f104 0a19 	add.w	sl, r4, #25
 800c912:	68e3      	ldr	r3, [r4, #12]
 800c914:	6832      	ldr	r2, [r6, #0]
 800c916:	1a9b      	subs	r3, r3, r2
 800c918:	42ab      	cmp	r3, r5
 800c91a:	dc26      	bgt.n	800c96a <_printf_common+0x96>
 800c91c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c920:	1e13      	subs	r3, r2, #0
 800c922:	6822      	ldr	r2, [r4, #0]
 800c924:	bf18      	it	ne
 800c926:	2301      	movne	r3, #1
 800c928:	0692      	lsls	r2, r2, #26
 800c92a:	d42b      	bmi.n	800c984 <_printf_common+0xb0>
 800c92c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c930:	4649      	mov	r1, r9
 800c932:	4638      	mov	r0, r7
 800c934:	47c0      	blx	r8
 800c936:	3001      	adds	r0, #1
 800c938:	d01e      	beq.n	800c978 <_printf_common+0xa4>
 800c93a:	6823      	ldr	r3, [r4, #0]
 800c93c:	6922      	ldr	r2, [r4, #16]
 800c93e:	f003 0306 	and.w	r3, r3, #6
 800c942:	2b04      	cmp	r3, #4
 800c944:	bf02      	ittt	eq
 800c946:	68e5      	ldreq	r5, [r4, #12]
 800c948:	6833      	ldreq	r3, [r6, #0]
 800c94a:	1aed      	subeq	r5, r5, r3
 800c94c:	68a3      	ldr	r3, [r4, #8]
 800c94e:	bf0c      	ite	eq
 800c950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c954:	2500      	movne	r5, #0
 800c956:	4293      	cmp	r3, r2
 800c958:	bfc4      	itt	gt
 800c95a:	1a9b      	subgt	r3, r3, r2
 800c95c:	18ed      	addgt	r5, r5, r3
 800c95e:	2600      	movs	r6, #0
 800c960:	341a      	adds	r4, #26
 800c962:	42b5      	cmp	r5, r6
 800c964:	d11a      	bne.n	800c99c <_printf_common+0xc8>
 800c966:	2000      	movs	r0, #0
 800c968:	e008      	b.n	800c97c <_printf_common+0xa8>
 800c96a:	2301      	movs	r3, #1
 800c96c:	4652      	mov	r2, sl
 800c96e:	4649      	mov	r1, r9
 800c970:	4638      	mov	r0, r7
 800c972:	47c0      	blx	r8
 800c974:	3001      	adds	r0, #1
 800c976:	d103      	bne.n	800c980 <_printf_common+0xac>
 800c978:	f04f 30ff 	mov.w	r0, #4294967295
 800c97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c980:	3501      	adds	r5, #1
 800c982:	e7c6      	b.n	800c912 <_printf_common+0x3e>
 800c984:	18e1      	adds	r1, r4, r3
 800c986:	1c5a      	adds	r2, r3, #1
 800c988:	2030      	movs	r0, #48	; 0x30
 800c98a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c98e:	4422      	add	r2, r4
 800c990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c998:	3302      	adds	r3, #2
 800c99a:	e7c7      	b.n	800c92c <_printf_common+0x58>
 800c99c:	2301      	movs	r3, #1
 800c99e:	4622      	mov	r2, r4
 800c9a0:	4649      	mov	r1, r9
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	47c0      	blx	r8
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	d0e6      	beq.n	800c978 <_printf_common+0xa4>
 800c9aa:	3601      	adds	r6, #1
 800c9ac:	e7d9      	b.n	800c962 <_printf_common+0x8e>
	...

0800c9b0 <_printf_i>:
 800c9b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b4:	7e0f      	ldrb	r7, [r1, #24]
 800c9b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9b8:	2f78      	cmp	r7, #120	; 0x78
 800c9ba:	4691      	mov	r9, r2
 800c9bc:	4680      	mov	r8, r0
 800c9be:	460c      	mov	r4, r1
 800c9c0:	469a      	mov	sl, r3
 800c9c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9c6:	d807      	bhi.n	800c9d8 <_printf_i+0x28>
 800c9c8:	2f62      	cmp	r7, #98	; 0x62
 800c9ca:	d80a      	bhi.n	800c9e2 <_printf_i+0x32>
 800c9cc:	2f00      	cmp	r7, #0
 800c9ce:	f000 80d4 	beq.w	800cb7a <_printf_i+0x1ca>
 800c9d2:	2f58      	cmp	r7, #88	; 0x58
 800c9d4:	f000 80c0 	beq.w	800cb58 <_printf_i+0x1a8>
 800c9d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9e0:	e03a      	b.n	800ca58 <_printf_i+0xa8>
 800c9e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9e6:	2b15      	cmp	r3, #21
 800c9e8:	d8f6      	bhi.n	800c9d8 <_printf_i+0x28>
 800c9ea:	a101      	add	r1, pc, #4	; (adr r1, 800c9f0 <_printf_i+0x40>)
 800c9ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9f0:	0800ca49 	.word	0x0800ca49
 800c9f4:	0800ca5d 	.word	0x0800ca5d
 800c9f8:	0800c9d9 	.word	0x0800c9d9
 800c9fc:	0800c9d9 	.word	0x0800c9d9
 800ca00:	0800c9d9 	.word	0x0800c9d9
 800ca04:	0800c9d9 	.word	0x0800c9d9
 800ca08:	0800ca5d 	.word	0x0800ca5d
 800ca0c:	0800c9d9 	.word	0x0800c9d9
 800ca10:	0800c9d9 	.word	0x0800c9d9
 800ca14:	0800c9d9 	.word	0x0800c9d9
 800ca18:	0800c9d9 	.word	0x0800c9d9
 800ca1c:	0800cb61 	.word	0x0800cb61
 800ca20:	0800ca89 	.word	0x0800ca89
 800ca24:	0800cb1b 	.word	0x0800cb1b
 800ca28:	0800c9d9 	.word	0x0800c9d9
 800ca2c:	0800c9d9 	.word	0x0800c9d9
 800ca30:	0800cb83 	.word	0x0800cb83
 800ca34:	0800c9d9 	.word	0x0800c9d9
 800ca38:	0800ca89 	.word	0x0800ca89
 800ca3c:	0800c9d9 	.word	0x0800c9d9
 800ca40:	0800c9d9 	.word	0x0800c9d9
 800ca44:	0800cb23 	.word	0x0800cb23
 800ca48:	682b      	ldr	r3, [r5, #0]
 800ca4a:	1d1a      	adds	r2, r3, #4
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	602a      	str	r2, [r5, #0]
 800ca50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e09f      	b.n	800cb9c <_printf_i+0x1ec>
 800ca5c:	6820      	ldr	r0, [r4, #0]
 800ca5e:	682b      	ldr	r3, [r5, #0]
 800ca60:	0607      	lsls	r7, r0, #24
 800ca62:	f103 0104 	add.w	r1, r3, #4
 800ca66:	6029      	str	r1, [r5, #0]
 800ca68:	d501      	bpl.n	800ca6e <_printf_i+0xbe>
 800ca6a:	681e      	ldr	r6, [r3, #0]
 800ca6c:	e003      	b.n	800ca76 <_printf_i+0xc6>
 800ca6e:	0646      	lsls	r6, r0, #25
 800ca70:	d5fb      	bpl.n	800ca6a <_printf_i+0xba>
 800ca72:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ca76:	2e00      	cmp	r6, #0
 800ca78:	da03      	bge.n	800ca82 <_printf_i+0xd2>
 800ca7a:	232d      	movs	r3, #45	; 0x2d
 800ca7c:	4276      	negs	r6, r6
 800ca7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca82:	485a      	ldr	r0, [pc, #360]	; (800cbec <_printf_i+0x23c>)
 800ca84:	230a      	movs	r3, #10
 800ca86:	e012      	b.n	800caae <_printf_i+0xfe>
 800ca88:	682b      	ldr	r3, [r5, #0]
 800ca8a:	6820      	ldr	r0, [r4, #0]
 800ca8c:	1d19      	adds	r1, r3, #4
 800ca8e:	6029      	str	r1, [r5, #0]
 800ca90:	0605      	lsls	r5, r0, #24
 800ca92:	d501      	bpl.n	800ca98 <_printf_i+0xe8>
 800ca94:	681e      	ldr	r6, [r3, #0]
 800ca96:	e002      	b.n	800ca9e <_printf_i+0xee>
 800ca98:	0641      	lsls	r1, r0, #25
 800ca9a:	d5fb      	bpl.n	800ca94 <_printf_i+0xe4>
 800ca9c:	881e      	ldrh	r6, [r3, #0]
 800ca9e:	4853      	ldr	r0, [pc, #332]	; (800cbec <_printf_i+0x23c>)
 800caa0:	2f6f      	cmp	r7, #111	; 0x6f
 800caa2:	bf0c      	ite	eq
 800caa4:	2308      	moveq	r3, #8
 800caa6:	230a      	movne	r3, #10
 800caa8:	2100      	movs	r1, #0
 800caaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800caae:	6865      	ldr	r5, [r4, #4]
 800cab0:	60a5      	str	r5, [r4, #8]
 800cab2:	2d00      	cmp	r5, #0
 800cab4:	bfa2      	ittt	ge
 800cab6:	6821      	ldrge	r1, [r4, #0]
 800cab8:	f021 0104 	bicge.w	r1, r1, #4
 800cabc:	6021      	strge	r1, [r4, #0]
 800cabe:	b90e      	cbnz	r6, 800cac4 <_printf_i+0x114>
 800cac0:	2d00      	cmp	r5, #0
 800cac2:	d04b      	beq.n	800cb5c <_printf_i+0x1ac>
 800cac4:	4615      	mov	r5, r2
 800cac6:	fbb6 f1f3 	udiv	r1, r6, r3
 800caca:	fb03 6711 	mls	r7, r3, r1, r6
 800cace:	5dc7      	ldrb	r7, [r0, r7]
 800cad0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cad4:	4637      	mov	r7, r6
 800cad6:	42bb      	cmp	r3, r7
 800cad8:	460e      	mov	r6, r1
 800cada:	d9f4      	bls.n	800cac6 <_printf_i+0x116>
 800cadc:	2b08      	cmp	r3, #8
 800cade:	d10b      	bne.n	800caf8 <_printf_i+0x148>
 800cae0:	6823      	ldr	r3, [r4, #0]
 800cae2:	07de      	lsls	r6, r3, #31
 800cae4:	d508      	bpl.n	800caf8 <_printf_i+0x148>
 800cae6:	6923      	ldr	r3, [r4, #16]
 800cae8:	6861      	ldr	r1, [r4, #4]
 800caea:	4299      	cmp	r1, r3
 800caec:	bfde      	ittt	le
 800caee:	2330      	movle	r3, #48	; 0x30
 800caf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800caf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800caf8:	1b52      	subs	r2, r2, r5
 800cafa:	6122      	str	r2, [r4, #16]
 800cafc:	f8cd a000 	str.w	sl, [sp]
 800cb00:	464b      	mov	r3, r9
 800cb02:	aa03      	add	r2, sp, #12
 800cb04:	4621      	mov	r1, r4
 800cb06:	4640      	mov	r0, r8
 800cb08:	f7ff fee4 	bl	800c8d4 <_printf_common>
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	d14a      	bne.n	800cba6 <_printf_i+0x1f6>
 800cb10:	f04f 30ff 	mov.w	r0, #4294967295
 800cb14:	b004      	add	sp, #16
 800cb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb1a:	6823      	ldr	r3, [r4, #0]
 800cb1c:	f043 0320 	orr.w	r3, r3, #32
 800cb20:	6023      	str	r3, [r4, #0]
 800cb22:	4833      	ldr	r0, [pc, #204]	; (800cbf0 <_printf_i+0x240>)
 800cb24:	2778      	movs	r7, #120	; 0x78
 800cb26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb2a:	6823      	ldr	r3, [r4, #0]
 800cb2c:	6829      	ldr	r1, [r5, #0]
 800cb2e:	061f      	lsls	r7, r3, #24
 800cb30:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb34:	d402      	bmi.n	800cb3c <_printf_i+0x18c>
 800cb36:	065f      	lsls	r7, r3, #25
 800cb38:	bf48      	it	mi
 800cb3a:	b2b6      	uxthmi	r6, r6
 800cb3c:	07df      	lsls	r7, r3, #31
 800cb3e:	bf48      	it	mi
 800cb40:	f043 0320 	orrmi.w	r3, r3, #32
 800cb44:	6029      	str	r1, [r5, #0]
 800cb46:	bf48      	it	mi
 800cb48:	6023      	strmi	r3, [r4, #0]
 800cb4a:	b91e      	cbnz	r6, 800cb54 <_printf_i+0x1a4>
 800cb4c:	6823      	ldr	r3, [r4, #0]
 800cb4e:	f023 0320 	bic.w	r3, r3, #32
 800cb52:	6023      	str	r3, [r4, #0]
 800cb54:	2310      	movs	r3, #16
 800cb56:	e7a7      	b.n	800caa8 <_printf_i+0xf8>
 800cb58:	4824      	ldr	r0, [pc, #144]	; (800cbec <_printf_i+0x23c>)
 800cb5a:	e7e4      	b.n	800cb26 <_printf_i+0x176>
 800cb5c:	4615      	mov	r5, r2
 800cb5e:	e7bd      	b.n	800cadc <_printf_i+0x12c>
 800cb60:	682b      	ldr	r3, [r5, #0]
 800cb62:	6826      	ldr	r6, [r4, #0]
 800cb64:	6961      	ldr	r1, [r4, #20]
 800cb66:	1d18      	adds	r0, r3, #4
 800cb68:	6028      	str	r0, [r5, #0]
 800cb6a:	0635      	lsls	r5, r6, #24
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	d501      	bpl.n	800cb74 <_printf_i+0x1c4>
 800cb70:	6019      	str	r1, [r3, #0]
 800cb72:	e002      	b.n	800cb7a <_printf_i+0x1ca>
 800cb74:	0670      	lsls	r0, r6, #25
 800cb76:	d5fb      	bpl.n	800cb70 <_printf_i+0x1c0>
 800cb78:	8019      	strh	r1, [r3, #0]
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	6123      	str	r3, [r4, #16]
 800cb7e:	4615      	mov	r5, r2
 800cb80:	e7bc      	b.n	800cafc <_printf_i+0x14c>
 800cb82:	682b      	ldr	r3, [r5, #0]
 800cb84:	1d1a      	adds	r2, r3, #4
 800cb86:	602a      	str	r2, [r5, #0]
 800cb88:	681d      	ldr	r5, [r3, #0]
 800cb8a:	6862      	ldr	r2, [r4, #4]
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	4628      	mov	r0, r5
 800cb90:	f7f3 fb2e 	bl	80001f0 <memchr>
 800cb94:	b108      	cbz	r0, 800cb9a <_printf_i+0x1ea>
 800cb96:	1b40      	subs	r0, r0, r5
 800cb98:	6060      	str	r0, [r4, #4]
 800cb9a:	6863      	ldr	r3, [r4, #4]
 800cb9c:	6123      	str	r3, [r4, #16]
 800cb9e:	2300      	movs	r3, #0
 800cba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cba4:	e7aa      	b.n	800cafc <_printf_i+0x14c>
 800cba6:	6923      	ldr	r3, [r4, #16]
 800cba8:	462a      	mov	r2, r5
 800cbaa:	4649      	mov	r1, r9
 800cbac:	4640      	mov	r0, r8
 800cbae:	47d0      	blx	sl
 800cbb0:	3001      	adds	r0, #1
 800cbb2:	d0ad      	beq.n	800cb10 <_printf_i+0x160>
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	079b      	lsls	r3, r3, #30
 800cbb8:	d413      	bmi.n	800cbe2 <_printf_i+0x232>
 800cbba:	68e0      	ldr	r0, [r4, #12]
 800cbbc:	9b03      	ldr	r3, [sp, #12]
 800cbbe:	4298      	cmp	r0, r3
 800cbc0:	bfb8      	it	lt
 800cbc2:	4618      	movlt	r0, r3
 800cbc4:	e7a6      	b.n	800cb14 <_printf_i+0x164>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	4632      	mov	r2, r6
 800cbca:	4649      	mov	r1, r9
 800cbcc:	4640      	mov	r0, r8
 800cbce:	47d0      	blx	sl
 800cbd0:	3001      	adds	r0, #1
 800cbd2:	d09d      	beq.n	800cb10 <_printf_i+0x160>
 800cbd4:	3501      	adds	r5, #1
 800cbd6:	68e3      	ldr	r3, [r4, #12]
 800cbd8:	9903      	ldr	r1, [sp, #12]
 800cbda:	1a5b      	subs	r3, r3, r1
 800cbdc:	42ab      	cmp	r3, r5
 800cbde:	dcf2      	bgt.n	800cbc6 <_printf_i+0x216>
 800cbe0:	e7eb      	b.n	800cbba <_printf_i+0x20a>
 800cbe2:	2500      	movs	r5, #0
 800cbe4:	f104 0619 	add.w	r6, r4, #25
 800cbe8:	e7f5      	b.n	800cbd6 <_printf_i+0x226>
 800cbea:	bf00      	nop
 800cbec:	0800de81 	.word	0x0800de81
 800cbf0:	0800de92 	.word	0x0800de92

0800cbf4 <__sflush_r>:
 800cbf4:	898a      	ldrh	r2, [r1, #12]
 800cbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbfa:	4605      	mov	r5, r0
 800cbfc:	0710      	lsls	r0, r2, #28
 800cbfe:	460c      	mov	r4, r1
 800cc00:	d458      	bmi.n	800ccb4 <__sflush_r+0xc0>
 800cc02:	684b      	ldr	r3, [r1, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	dc05      	bgt.n	800cc14 <__sflush_r+0x20>
 800cc08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	dc02      	bgt.n	800cc14 <__sflush_r+0x20>
 800cc0e:	2000      	movs	r0, #0
 800cc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc16:	2e00      	cmp	r6, #0
 800cc18:	d0f9      	beq.n	800cc0e <__sflush_r+0x1a>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc20:	682f      	ldr	r7, [r5, #0]
 800cc22:	6a21      	ldr	r1, [r4, #32]
 800cc24:	602b      	str	r3, [r5, #0]
 800cc26:	d032      	beq.n	800cc8e <__sflush_r+0x9a>
 800cc28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc2a:	89a3      	ldrh	r3, [r4, #12]
 800cc2c:	075a      	lsls	r2, r3, #29
 800cc2e:	d505      	bpl.n	800cc3c <__sflush_r+0x48>
 800cc30:	6863      	ldr	r3, [r4, #4]
 800cc32:	1ac0      	subs	r0, r0, r3
 800cc34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc36:	b10b      	cbz	r3, 800cc3c <__sflush_r+0x48>
 800cc38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc3a:	1ac0      	subs	r0, r0, r3
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	4602      	mov	r2, r0
 800cc40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc42:	6a21      	ldr	r1, [r4, #32]
 800cc44:	4628      	mov	r0, r5
 800cc46:	47b0      	blx	r6
 800cc48:	1c43      	adds	r3, r0, #1
 800cc4a:	89a3      	ldrh	r3, [r4, #12]
 800cc4c:	d106      	bne.n	800cc5c <__sflush_r+0x68>
 800cc4e:	6829      	ldr	r1, [r5, #0]
 800cc50:	291d      	cmp	r1, #29
 800cc52:	d82b      	bhi.n	800ccac <__sflush_r+0xb8>
 800cc54:	4a29      	ldr	r2, [pc, #164]	; (800ccfc <__sflush_r+0x108>)
 800cc56:	410a      	asrs	r2, r1
 800cc58:	07d6      	lsls	r6, r2, #31
 800cc5a:	d427      	bmi.n	800ccac <__sflush_r+0xb8>
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	6062      	str	r2, [r4, #4]
 800cc60:	04d9      	lsls	r1, r3, #19
 800cc62:	6922      	ldr	r2, [r4, #16]
 800cc64:	6022      	str	r2, [r4, #0]
 800cc66:	d504      	bpl.n	800cc72 <__sflush_r+0x7e>
 800cc68:	1c42      	adds	r2, r0, #1
 800cc6a:	d101      	bne.n	800cc70 <__sflush_r+0x7c>
 800cc6c:	682b      	ldr	r3, [r5, #0]
 800cc6e:	b903      	cbnz	r3, 800cc72 <__sflush_r+0x7e>
 800cc70:	6560      	str	r0, [r4, #84]	; 0x54
 800cc72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc74:	602f      	str	r7, [r5, #0]
 800cc76:	2900      	cmp	r1, #0
 800cc78:	d0c9      	beq.n	800cc0e <__sflush_r+0x1a>
 800cc7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc7e:	4299      	cmp	r1, r3
 800cc80:	d002      	beq.n	800cc88 <__sflush_r+0x94>
 800cc82:	4628      	mov	r0, r5
 800cc84:	f7ff fbea 	bl	800c45c <_free_r>
 800cc88:	2000      	movs	r0, #0
 800cc8a:	6360      	str	r0, [r4, #52]	; 0x34
 800cc8c:	e7c0      	b.n	800cc10 <__sflush_r+0x1c>
 800cc8e:	2301      	movs	r3, #1
 800cc90:	4628      	mov	r0, r5
 800cc92:	47b0      	blx	r6
 800cc94:	1c41      	adds	r1, r0, #1
 800cc96:	d1c8      	bne.n	800cc2a <__sflush_r+0x36>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d0c5      	beq.n	800cc2a <__sflush_r+0x36>
 800cc9e:	2b1d      	cmp	r3, #29
 800cca0:	d001      	beq.n	800cca6 <__sflush_r+0xb2>
 800cca2:	2b16      	cmp	r3, #22
 800cca4:	d101      	bne.n	800ccaa <__sflush_r+0xb6>
 800cca6:	602f      	str	r7, [r5, #0]
 800cca8:	e7b1      	b.n	800cc0e <__sflush_r+0x1a>
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb0:	81a3      	strh	r3, [r4, #12]
 800ccb2:	e7ad      	b.n	800cc10 <__sflush_r+0x1c>
 800ccb4:	690f      	ldr	r7, [r1, #16]
 800ccb6:	2f00      	cmp	r7, #0
 800ccb8:	d0a9      	beq.n	800cc0e <__sflush_r+0x1a>
 800ccba:	0793      	lsls	r3, r2, #30
 800ccbc:	680e      	ldr	r6, [r1, #0]
 800ccbe:	bf08      	it	eq
 800ccc0:	694b      	ldreq	r3, [r1, #20]
 800ccc2:	600f      	str	r7, [r1, #0]
 800ccc4:	bf18      	it	ne
 800ccc6:	2300      	movne	r3, #0
 800ccc8:	eba6 0807 	sub.w	r8, r6, r7
 800cccc:	608b      	str	r3, [r1, #8]
 800ccce:	f1b8 0f00 	cmp.w	r8, #0
 800ccd2:	dd9c      	ble.n	800cc0e <__sflush_r+0x1a>
 800ccd4:	6a21      	ldr	r1, [r4, #32]
 800ccd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccd8:	4643      	mov	r3, r8
 800ccda:	463a      	mov	r2, r7
 800ccdc:	4628      	mov	r0, r5
 800ccde:	47b0      	blx	r6
 800cce0:	2800      	cmp	r0, #0
 800cce2:	dc06      	bgt.n	800ccf2 <__sflush_r+0xfe>
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccea:	81a3      	strh	r3, [r4, #12]
 800ccec:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf0:	e78e      	b.n	800cc10 <__sflush_r+0x1c>
 800ccf2:	4407      	add	r7, r0
 800ccf4:	eba8 0800 	sub.w	r8, r8, r0
 800ccf8:	e7e9      	b.n	800ccce <__sflush_r+0xda>
 800ccfa:	bf00      	nop
 800ccfc:	dfbffffe 	.word	0xdfbffffe

0800cd00 <_fflush_r>:
 800cd00:	b538      	push	{r3, r4, r5, lr}
 800cd02:	690b      	ldr	r3, [r1, #16]
 800cd04:	4605      	mov	r5, r0
 800cd06:	460c      	mov	r4, r1
 800cd08:	b913      	cbnz	r3, 800cd10 <_fflush_r+0x10>
 800cd0a:	2500      	movs	r5, #0
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	bd38      	pop	{r3, r4, r5, pc}
 800cd10:	b118      	cbz	r0, 800cd1a <_fflush_r+0x1a>
 800cd12:	6a03      	ldr	r3, [r0, #32]
 800cd14:	b90b      	cbnz	r3, 800cd1a <_fflush_r+0x1a>
 800cd16:	f7ff f9a9 	bl	800c06c <__sinit>
 800cd1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d0f3      	beq.n	800cd0a <_fflush_r+0xa>
 800cd22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd24:	07d0      	lsls	r0, r2, #31
 800cd26:	d404      	bmi.n	800cd32 <_fflush_r+0x32>
 800cd28:	0599      	lsls	r1, r3, #22
 800cd2a:	d402      	bmi.n	800cd32 <_fflush_r+0x32>
 800cd2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd2e:	f7ff fb92 	bl	800c456 <__retarget_lock_acquire_recursive>
 800cd32:	4628      	mov	r0, r5
 800cd34:	4621      	mov	r1, r4
 800cd36:	f7ff ff5d 	bl	800cbf4 <__sflush_r>
 800cd3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd3c:	07da      	lsls	r2, r3, #31
 800cd3e:	4605      	mov	r5, r0
 800cd40:	d4e4      	bmi.n	800cd0c <_fflush_r+0xc>
 800cd42:	89a3      	ldrh	r3, [r4, #12]
 800cd44:	059b      	lsls	r3, r3, #22
 800cd46:	d4e1      	bmi.n	800cd0c <_fflush_r+0xc>
 800cd48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd4a:	f7ff fb85 	bl	800c458 <__retarget_lock_release_recursive>
 800cd4e:	e7dd      	b.n	800cd0c <_fflush_r+0xc>

0800cd50 <__swhatbuf_r>:
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	460c      	mov	r4, r1
 800cd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd58:	2900      	cmp	r1, #0
 800cd5a:	b096      	sub	sp, #88	; 0x58
 800cd5c:	4615      	mov	r5, r2
 800cd5e:	461e      	mov	r6, r3
 800cd60:	da0d      	bge.n	800cd7e <__swhatbuf_r+0x2e>
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cd68:	f04f 0100 	mov.w	r1, #0
 800cd6c:	bf0c      	ite	eq
 800cd6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cd72:	2340      	movne	r3, #64	; 0x40
 800cd74:	2000      	movs	r0, #0
 800cd76:	6031      	str	r1, [r6, #0]
 800cd78:	602b      	str	r3, [r5, #0]
 800cd7a:	b016      	add	sp, #88	; 0x58
 800cd7c:	bd70      	pop	{r4, r5, r6, pc}
 800cd7e:	466a      	mov	r2, sp
 800cd80:	f000 f848 	bl	800ce14 <_fstat_r>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	dbec      	blt.n	800cd62 <__swhatbuf_r+0x12>
 800cd88:	9901      	ldr	r1, [sp, #4]
 800cd8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cd8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cd92:	4259      	negs	r1, r3
 800cd94:	4159      	adcs	r1, r3
 800cd96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd9a:	e7eb      	b.n	800cd74 <__swhatbuf_r+0x24>

0800cd9c <__smakebuf_r>:
 800cd9c:	898b      	ldrh	r3, [r1, #12]
 800cd9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cda0:	079d      	lsls	r5, r3, #30
 800cda2:	4606      	mov	r6, r0
 800cda4:	460c      	mov	r4, r1
 800cda6:	d507      	bpl.n	800cdb8 <__smakebuf_r+0x1c>
 800cda8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdac:	6023      	str	r3, [r4, #0]
 800cdae:	6123      	str	r3, [r4, #16]
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	6163      	str	r3, [r4, #20]
 800cdb4:	b002      	add	sp, #8
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}
 800cdb8:	ab01      	add	r3, sp, #4
 800cdba:	466a      	mov	r2, sp
 800cdbc:	f7ff ffc8 	bl	800cd50 <__swhatbuf_r>
 800cdc0:	9900      	ldr	r1, [sp, #0]
 800cdc2:	4605      	mov	r5, r0
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	f7ff fbb5 	bl	800c534 <_malloc_r>
 800cdca:	b948      	cbnz	r0, 800cde0 <__smakebuf_r+0x44>
 800cdcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdd0:	059a      	lsls	r2, r3, #22
 800cdd2:	d4ef      	bmi.n	800cdb4 <__smakebuf_r+0x18>
 800cdd4:	f023 0303 	bic.w	r3, r3, #3
 800cdd8:	f043 0302 	orr.w	r3, r3, #2
 800cddc:	81a3      	strh	r3, [r4, #12]
 800cdde:	e7e3      	b.n	800cda8 <__smakebuf_r+0xc>
 800cde0:	89a3      	ldrh	r3, [r4, #12]
 800cde2:	6020      	str	r0, [r4, #0]
 800cde4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cde8:	81a3      	strh	r3, [r4, #12]
 800cdea:	9b00      	ldr	r3, [sp, #0]
 800cdec:	6163      	str	r3, [r4, #20]
 800cdee:	9b01      	ldr	r3, [sp, #4]
 800cdf0:	6120      	str	r0, [r4, #16]
 800cdf2:	b15b      	cbz	r3, 800ce0c <__smakebuf_r+0x70>
 800cdf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	f000 f81d 	bl	800ce38 <_isatty_r>
 800cdfe:	b128      	cbz	r0, 800ce0c <__smakebuf_r+0x70>
 800ce00:	89a3      	ldrh	r3, [r4, #12]
 800ce02:	f023 0303 	bic.w	r3, r3, #3
 800ce06:	f043 0301 	orr.w	r3, r3, #1
 800ce0a:	81a3      	strh	r3, [r4, #12]
 800ce0c:	89a3      	ldrh	r3, [r4, #12]
 800ce0e:	431d      	orrs	r5, r3
 800ce10:	81a5      	strh	r5, [r4, #12]
 800ce12:	e7cf      	b.n	800cdb4 <__smakebuf_r+0x18>

0800ce14 <_fstat_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4d07      	ldr	r5, [pc, #28]	; (800ce34 <_fstat_r+0x20>)
 800ce18:	2300      	movs	r3, #0
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	4608      	mov	r0, r1
 800ce1e:	4611      	mov	r1, r2
 800ce20:	602b      	str	r3, [r5, #0]
 800ce22:	f7f6 fb3a 	bl	800349a <_fstat>
 800ce26:	1c43      	adds	r3, r0, #1
 800ce28:	d102      	bne.n	800ce30 <_fstat_r+0x1c>
 800ce2a:	682b      	ldr	r3, [r5, #0]
 800ce2c:	b103      	cbz	r3, 800ce30 <_fstat_r+0x1c>
 800ce2e:	6023      	str	r3, [r4, #0]
 800ce30:	bd38      	pop	{r3, r4, r5, pc}
 800ce32:	bf00      	nop
 800ce34:	20000988 	.word	0x20000988

0800ce38 <_isatty_r>:
 800ce38:	b538      	push	{r3, r4, r5, lr}
 800ce3a:	4d06      	ldr	r5, [pc, #24]	; (800ce54 <_isatty_r+0x1c>)
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	4604      	mov	r4, r0
 800ce40:	4608      	mov	r0, r1
 800ce42:	602b      	str	r3, [r5, #0]
 800ce44:	f7f6 fb39 	bl	80034ba <_isatty>
 800ce48:	1c43      	adds	r3, r0, #1
 800ce4a:	d102      	bne.n	800ce52 <_isatty_r+0x1a>
 800ce4c:	682b      	ldr	r3, [r5, #0]
 800ce4e:	b103      	cbz	r3, 800ce52 <_isatty_r+0x1a>
 800ce50:	6023      	str	r3, [r4, #0]
 800ce52:	bd38      	pop	{r3, r4, r5, pc}
 800ce54:	20000988 	.word	0x20000988

0800ce58 <_sbrk_r>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	4d06      	ldr	r5, [pc, #24]	; (800ce74 <_sbrk_r+0x1c>)
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	4604      	mov	r4, r0
 800ce60:	4608      	mov	r0, r1
 800ce62:	602b      	str	r3, [r5, #0]
 800ce64:	f7f6 fb42 	bl	80034ec <_sbrk>
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	d102      	bne.n	800ce72 <_sbrk_r+0x1a>
 800ce6c:	682b      	ldr	r3, [r5, #0]
 800ce6e:	b103      	cbz	r3, 800ce72 <_sbrk_r+0x1a>
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	bd38      	pop	{r3, r4, r5, pc}
 800ce74:	20000988 	.word	0x20000988

0800ce78 <_init>:
 800ce78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7a:	bf00      	nop
 800ce7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce7e:	bc08      	pop	{r3}
 800ce80:	469e      	mov	lr, r3
 800ce82:	4770      	bx	lr

0800ce84 <_fini>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	bf00      	nop
 800ce88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8a:	bc08      	pop	{r3}
 800ce8c:	469e      	mov	lr, r3
 800ce8e:	4770      	bx	lr
