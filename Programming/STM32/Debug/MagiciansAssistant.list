
MagiciansAssistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  08006488  08006488  00016488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b68  08006b68  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b68  08006b68  00016b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b70  08006b70  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b74  08006b74  00016b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08006b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000009c  08006c14  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08006c14  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012260  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000274c  00000000  00000000  0003236f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00034ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c0b  00000000  00000000  00035a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ec5  00000000  00000000  00036663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e7c  00000000  00000000  0005e528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eed21  00000000  00000000  000723a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004838  00000000  00000000  001610c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00165900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006470 	.word	0x08006470

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08006470 	.word	0x08006470

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <initArducam>:
/* Notes:
 * The chip select signal should always be LOW during the SPI read or write bus cycle
 * I2C interfaces directly with the OV2640 sensor (the camera itself)
 * SPI interfaces with the Chip as a whole, to indirectly control the camera
 */
void initArducam(ArducamController* pCtrl, I2C_HandleTypeDef* pHI2C, SPI_HandleTypeDef* pHSPI, GPIO_TypeDef* pGPIOPort, uint16_t pinNo){
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
 8000578:	603b      	str	r3, [r7, #0]
	printf("Initializing ArduCam\n");
 800057a:	482f      	ldr	r0, [pc, #188]	; (8000638 <initArducam+0xcc>)
 800057c:	f005 f9ba 	bl	80058f4 <puts>
	pCtrl->pI2CHandle = pHI2C;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	601a      	str	r2, [r3, #0]
	pCtrl->pSPIHandle = pHSPI;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	605a      	str	r2, [r3, #4]
	pCtrl->status = HAL_OK;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2200      	movs	r2, #0
 8000590:	721a      	strb	r2, [r3, #8]
	pCtrl -> pGPIOPort = pGPIOPort;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	60da      	str	r2, [r3, #12]
	pCtrl -> pinNo = pinNo;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	8b3a      	ldrh	r2, [r7, #24]
 800059c:	821a      	strh	r2, [r3, #16]

	resetCPLD(pCtrl);
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f000 f9ac 	bl	80008fc <resetCPLD>
	if((pCtrl->status = HAL_I2C_IsDeviceReady(pHI2C, I2C_ADDR_WRITE, 1, HAL_MAX_DELAY)) != HAL_OK ||
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	2201      	movs	r2, #1
 80005aa:	2160      	movs	r1, #96	; 0x60
 80005ac:	68b8      	ldr	r0, [r7, #8]
 80005ae:	f001 fce7 	bl	8001f80 <HAL_I2C_IsDeviceReady>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	721a      	strb	r2, [r3, #8]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	7a1b      	ldrb	r3, [r3, #8]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d10d      	bne.n	80005de <initArducam+0x72>
			(pCtrl->status = HAL_I2C_IsDeviceReady(pHI2C, I2C_ADDR_READ, 1, HAL_MAX_DELAY != HAL_OK))){
 80005c2:	2301      	movs	r3, #1
 80005c4:	2201      	movs	r2, #1
 80005c6:	2161      	movs	r1, #97	; 0x61
 80005c8:	68b8      	ldr	r0, [r7, #8]
 80005ca:	f001 fcd9 	bl	8001f80 <HAL_I2C_IsDeviceReady>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	721a      	strb	r2, [r3, #8]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	7a1b      	ldrb	r3, [r3, #8]
	if((pCtrl->status = HAL_I2C_IsDeviceReady(pHI2C, I2C_ADDR_WRITE, 1, HAL_MAX_DELAY)) != HAL_OK ||
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d003      	beq.n	80005e6 <initArducam+0x7a>
		printf("Arducam I2C Error.\n");
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <initArducam+0xd0>)
 80005e0:	f005 f988 	bl	80058f4 <puts>
 80005e4:	e016      	b.n	8000614 <initArducam+0xa8>
	} else if(!isSPIWorking(pCtrl)){
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f000 f88a 	bl	8000700 <isSPIWorking>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d103      	bne.n	80005fa <initArducam+0x8e>
		printf("Arducam SPI Error.\n");
 80005f2:	4813      	ldr	r0, [pc, #76]	; (8000640 <initArducam+0xd4>)
 80005f4:	f005 f97e 	bl	80058f4 <puts>
 80005f8:	e00c      	b.n	8000614 <initArducam+0xa8>
	} else {
		printf("I2C Check Passed\n");
 80005fa:	4812      	ldr	r0, [pc, #72]	; (8000644 <initArducam+0xd8>)
 80005fc:	f005 f97a 	bl	80058f4 <puts>
		printf("SPI Check Passed\n");
 8000600:	4811      	ldr	r0, [pc, #68]	; (8000648 <initArducam+0xdc>)
 8000602:	f005 f977 	bl	80058f4 <puts>
		setDefaultSettings(pCtrl);
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	f000 f824 	bl	8000654 <setDefaultSettings>
		HAL_Delay(1000);
 800060c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000610:	f001 f836 	bl	8001680 <HAL_Delay>
		//clearFIFOFlag(pCtrl);

	}

	if(pCtrl->status != HAL_OK){
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	7a1b      	ldrb	r3, [r3, #8]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d003      	beq.n	8000624 <initArducam+0xb8>
		printf("Arducam Init Fail\n");
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <initArducam+0xe0>)
 800061e:	f005 f969 	bl	80058f4 <puts>
 8000622:	e002      	b.n	800062a <initArducam+0xbe>
	} else {
		printf("Arducam Init Success!\n");
 8000624:	480a      	ldr	r0, [pc, #40]	; (8000650 <initArducam+0xe4>)
 8000626:	f005 f965 	bl	80058f4 <puts>

	}

	printStatus(pCtrl);
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	f000 fa28 	bl	8000a80 <printStatus>
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08006488 	.word	0x08006488
 800063c:	080064a0 	.word	0x080064a0
 8000640:	080064b4 	.word	0x080064b4
 8000644:	080064c8 	.word	0x080064c8
 8000648:	080064dc 	.word	0x080064dc
 800064c:	080064f0 	.word	0x080064f0
 8000650:	08006504 	.word	0x08006504

08000654 <setDefaultSettings>:
	HAL_SPI_Receive(pCtrl->pSPIHandle, pBuffer, transmissionSize, HAL_MAX_DELAY);
	HAL_Delay(1000); // Just making sure all the data makes it through
	disable(pCtrl);
}

void setDefaultSettings(ArducamController* pCtrl){
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	printf("Configuring Default Settings\n");
 800065c:	4823      	ldr	r0, [pc, #140]	; (80006ec <setDefaultSettings+0x98>)
 800065e:	f005 f949 	bl	80058f4 <puts>
	uint8_t data = 0x01;
 8000662:	2301      	movs	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0xFF, &data, 1);
 8000666:	f107 020f 	add.w	r2, r7, #15
 800066a:	2301      	movs	r3, #1
 800066c:	21ff      	movs	r1, #255	; 0xff
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f000 f868 	bl	8000744 <i2cRegWrite>
	data = 0x80;
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0x12, &data, 1);
 8000678:	f107 020f 	add.w	r2, r7, #15
 800067c:	2301      	movs	r3, #1
 800067e:	2112      	movs	r1, #18
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 f85f 	bl	8000744 <i2cRegWrite>
	HAL_Delay(100);
 8000686:	2064      	movs	r0, #100	; 0x64
 8000688:	f000 fffa 	bl	8001680 <HAL_Delay>

	i2cWriteMultiple(pCtrl, OV2640_JPEG_INIT);
 800068c:	4918      	ldr	r1, [pc, #96]	; (80006f0 <setDefaultSettings+0x9c>)
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f88e 	bl	80007b0 <i2cWriteMultiple>
	i2cWriteMultiple(pCtrl, OV2640_YUV422);
 8000694:	4917      	ldr	r1, [pc, #92]	; (80006f4 <setDefaultSettings+0xa0>)
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f88a 	bl	80007b0 <i2cWriteMultiple>
	i2cWriteMultiple(pCtrl, OV2640_JPEG);
 800069c:	4916      	ldr	r1, [pc, #88]	; (80006f8 <setDefaultSettings+0xa4>)
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f886 	bl	80007b0 <i2cWriteMultiple>
	data = 0x01;
 80006a4:	2301      	movs	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0xFF, &data, 1);
 80006a8:	f107 020f 	add.w	r2, r7, #15
 80006ac:	2301      	movs	r3, #1
 80006ae:	21ff      	movs	r1, #255	; 0xff
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f847 	bl	8000744 <i2cRegWrite>
	data = 0x00;
 80006b6:	2300      	movs	r3, #0
 80006b8:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0x15, &data, 1);
 80006ba:	f107 020f 	add.w	r2, r7, #15
 80006be:	2301      	movs	r3, #1
 80006c0:	2115      	movs	r1, #21
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f83e 	bl	8000744 <i2cRegWrite>
	i2cWriteMultiple(pCtrl, OV2640_320x240_JPEG);
 80006c8:	490c      	ldr	r1, [pc, #48]	; (80006fc <setDefaultSettings+0xa8>)
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f870 	bl	80007b0 <i2cWriteMultiple>

	data = 0x02;
 80006d0:	2302      	movs	r3, #2
 80006d2:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, (uint8_t)0x03, &data, 1);
 80006d4:	f107 020f 	add.w	r2, r7, #15
 80006d8:	2301      	movs	r3, #1
 80006da:	2103      	movs	r1, #3
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f887 	bl	80007f0 <spiRegWrite>

}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	08006574 	.word	0x08006574
 80006f0:	080068f4 	.word	0x080068f4
 80006f4:	08006a74 	.word	0x08006a74
 80006f8:	08006a88 	.word	0x08006a88
 80006fc:	08006a9c 	.word	0x08006a9c

08000700 <isSPIWorking>:


int isSPIWorking(ArducamController *pCtrl){
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	uint8_t testVal = 0xAB;
 8000708:	23ab      	movs	r3, #171	; 0xab
 800070a:	73fb      	strb	r3, [r7, #15]
	uint8_t readVal = 0x00;
 800070c:	2300      	movs	r3, #0
 800070e:	73bb      	strb	r3, [r7, #14]
	spiRegWrite(pCtrl, 0x00, &testVal, 1);
 8000710:	f107 020f 	add.w	r2, r7, #15
 8000714:	2301      	movs	r3, #1
 8000716:	2100      	movs	r1, #0
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 f869 	bl	80007f0 <spiRegWrite>
	spiRegRead(pCtrl, 0x00, &readVal, 1);
 800071e:	f107 020e 	add.w	r2, r7, #14
 8000722:	2301      	movs	r3, #1
 8000724:	2100      	movs	r1, #0
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f8a2 	bl	8000870 <spiRegRead>

	return (readVal == testVal);
 800072c:	7bba      	ldrb	r2, [r7, #14]
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	429a      	cmp	r2, r3
 8000732:	bf0c      	ite	eq
 8000734:	2301      	moveq	r3, #1
 8000736:	2300      	movne	r3, #0
 8000738:	b2db      	uxtb	r3, r3

}
 800073a:	4618      	mov	r0, r3
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <i2cRegWrite>:
//TODO: Make it so that when Register Writes/Reads fail (status != 00), we print error data and throw an interrupt? or maybe just halt the function?
//
/*To Write over i2c:
* Request I2C_ADDR_WRITE -> Send Cam Register Address (left shift device addr's by 1) -> Send Data bytes
*/
void i2cRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t *pData, uint16_t size){
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af02      	add	r7, sp, #8
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	607a      	str	r2, [r7, #4]
 800074e:	461a      	mov	r2, r3
 8000750:	460b      	mov	r3, r1
 8000752:	72fb      	strb	r3, [r7, #11]
 8000754:	4613      	mov	r3, r2
 8000756:	813b      	strh	r3, [r7, #8]
	printf("(I2C) Writing 0x%04X to Reg 0x%02X\n", *pData, reg);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	7afb      	ldrb	r3, [r7, #11]
 8000760:	461a      	mov	r2, r3
 8000762:	4812      	ldr	r0, [pc, #72]	; (80007ac <i2cRegWrite+0x68>)
 8000764:	f005 f860 	bl	8005828 <iprintf>
	//printf("Before T1: %x\n", pCtrl->status);
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, &reg, (uint16_t) 1, CAM_TIMEOUT);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	f107 020b 	add.w	r2, r7, #11
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2301      	movs	r3, #1
 8000778:	2160      	movs	r1, #96	; 0x60
 800077a:	f001 fae9 	bl	8001d50 <HAL_I2C_Master_Transmit>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	721a      	strb	r2, [r3, #8]
	//printf("After T1: %x\n", pCtrl->status);
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, pData, (uint16_t) size, CAM_TIMEOUT);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	893b      	ldrh	r3, [r7, #8]
 800078c:	f04f 32ff 	mov.w	r2, #4294967295
 8000790:	9200      	str	r2, [sp, #0]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	2160      	movs	r1, #96	; 0x60
 8000796:	f001 fadb 	bl	8001d50 <HAL_I2C_Master_Transmit>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	721a      	strb	r2, [r3, #8]
	//printf("After T2: %x\n", pCtrl->status);
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	08006594 	.word	0x08006594

080007b0 <i2cWriteMultiple>:
	pCtrl->status = HAL_I2C_Master_Receive(pCtrl->pI2CHandle, I2C_ADDR_READ, pBuffer, size, CAM_TIMEOUT);
	//printf("After R1: %x\n", pCtrl->status);
	printf("(I2C) Read 0x%02X from 0x%02X\n", *pBuffer, reg);
}

void i2cWriteMultiple(ArducamController* pCtrl, const struct SensorReg *regList){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	struct SensorReg *current = (struct SensorReg *) regList;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	60fb      	str	r3, [r7, #12]

	while(current->addr != 0xFF || current->val != 0xFF){
 80007be:	e00a      	b.n	80007d6 <i2cWriteMultiple+0x26>
		i2cRegWrite(pCtrl, current->addr, &(current->val), 1);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	7819      	ldrb	r1, [r3, #0]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	2301      	movs	r3, #1
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffba 	bl	8000744 <i2cRegWrite>
		current++;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3302      	adds	r3, #2
 80007d4:	60fb      	str	r3, [r7, #12]
	while(current->addr != 0xFF || current->val != 0xFF){
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2bff      	cmp	r3, #255	; 0xff
 80007dc:	d1f0      	bne.n	80007c0 <i2cWriteMultiple+0x10>
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	785b      	ldrb	r3, [r3, #1]
 80007e2:	2bff      	cmp	r3, #255	; 0xff
 80007e4:	d1ec      	bne.n	80007c0 <i2cWriteMultiple+0x10>
	}

}
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <spiRegWrite>:

void spiRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t *pData, uint16_t size){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	461a      	mov	r2, r3
 80007fc:	460b      	mov	r3, r1
 80007fe:	72fb      	strb	r3, [r7, #11]
 8000800:	4613      	mov	r3, r2
 8000802:	813b      	strh	r3, [r7, #8]

	enable(pCtrl); // CS Pin Set LOW
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f000 f899 	bl	800093c <enable>
	HAL_Delay(CS_DELAY);
 800080a:	200a      	movs	r0, #10
 800080c:	f000 ff38 	bl	8001680 <HAL_Delay>
	uint8_t maskedAddr = reg | SPI_WRITE_MASK; // a 1 followed by Reg addr, to write to reg
 8000810:	7afb      	ldrb	r3, [r7, #11]
 8000812:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000816:	b2db      	uxtb	r3, r3
 8000818:	75fb      	strb	r3, [r7, #23]

	printf("(SPI) Writing 0x%02X to 0x%02X | cmd = 0x%02X\n", *pData, reg, maskedAddr);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	7afa      	ldrb	r2, [r7, #11]
 8000822:	7dfb      	ldrb	r3, [r7, #23]
 8000824:	4811      	ldr	r0, [pc, #68]	; (800086c <spiRegWrite+0x7c>)
 8000826:	f004 ffff 	bl	8005828 <iprintf>
	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, &maskedAddr, (uint16_t)1, CAM_TIMEOUT);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	6858      	ldr	r0, [r3, #4]
 800082e:	f107 0117 	add.w	r1, r7, #23
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	2201      	movs	r2, #1
 8000838:	f003 fb15 	bl	8003e66 <HAL_SPI_Transmit>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	721a      	strb	r2, [r3, #8]
	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, pData, size, CAM_TIMEOUT);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	6858      	ldr	r0, [r3, #4]
 8000848:	893a      	ldrh	r2, [r7, #8]
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f003 fb09 	bl	8003e66 <HAL_SPI_Transmit>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	721a      	strb	r2, [r3, #8]

	disable(pCtrl);
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f000 f87d 	bl	800095c <disable>
}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	080065d8 	.word	0x080065d8

08000870 <spiRegRead>:

void spiRegRead(ArducamController* pCtrl, uint8_t reg, uint8_t *pBuffer, uint16_t size){
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	461a      	mov	r2, r3
 800087c:	460b      	mov	r3, r1
 800087e:	72fb      	strb	r3, [r7, #11]
 8000880:	4613      	mov	r3, r2
 8000882:	813b      	strh	r3, [r7, #8]
	enable(pCtrl);
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f000 f859 	bl	800093c <enable>
	HAL_Delay(CS_DELAY);
 800088a:	200a      	movs	r0, #10
 800088c:	f000 fef8 	bl	8001680 <HAL_Delay>
	uint8_t maskedAddr = reg & SPI_READ_MASK; // a 0 followed by register to read
 8000890:	7afb      	ldrb	r3, [r7, #11]
 8000892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000896:	b2db      	uxtb	r3, r3
 8000898:	75fb      	strb	r3, [r7, #23]
	uint8_t dummyByte = 0x00;
 800089a:	2300      	movs	r3, #0
 800089c:	75bb      	strb	r3, [r7, #22]
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &maskedAddr, pBuffer, (uint16_t)1, CAM_TIMEOUT);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	6858      	ldr	r0, [r3, #4]
 80008a2:	f107 0117 	add.w	r1, r7, #23
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2301      	movs	r3, #1
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	f003 fc4e 	bl	8004150 <HAL_SPI_TransmitReceive>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	721a      	strb	r2, [r3, #8]
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &dummyByte, pBuffer, size, CAM_TIMEOUT);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	6858      	ldr	r0, [r3, #4]
 80008c0:	893b      	ldrh	r3, [r7, #8]
 80008c2:	f107 0116 	add.w	r1, r7, #22
 80008c6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ca:	9200      	str	r2, [sp, #0]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	f003 fc3f 	bl	8004150 <HAL_SPI_TransmitReceive>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	721a      	strb	r2, [r3, #8]
	disable(pCtrl);
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f000 f83e 	bl	800095c <disable>
	printf("(SPI) Read 0x%02X from 0x%02X\n", *pBuffer, reg);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	7afb      	ldrb	r3, [r7, #11]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4803      	ldr	r0, [pc, #12]	; (80008f8 <spiRegRead+0x88>)
 80008ec:	f004 ff9c 	bl	8005828 <iprintf>
}
 80008f0:	bf00      	nop
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	08006608 	.word	0x08006608

080008fc <resetCPLD>:




//Resets the CPLD
void resetCPLD(ArducamController* pCtrl){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0x80;
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, 0x07, &cmd, 1);
 8000908:	f107 020f 	add.w	r2, r7, #15
 800090c:	2301      	movs	r3, #1
 800090e:	2107      	movs	r1, #7
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ff6d 	bl	80007f0 <spiRegWrite>
	HAL_Delay(100);
 8000916:	2064      	movs	r0, #100	; 0x64
 8000918:	f000 feb2 	bl	8001680 <HAL_Delay>
	cmd = 0x00;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, 0x07, &cmd, 1);
 8000920:	f107 020f 	add.w	r2, r7, #15
 8000924:	2301      	movs	r3, #1
 8000926:	2107      	movs	r1, #7
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff ff61 	bl	80007f0 <spiRegWrite>
	HAL_Delay(100);
 800092e:	2064      	movs	r0, #100	; 0x64
 8000930:	f000 fea6 	bl	8001680 <HAL_Delay>
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <enable>:
	fifoLength = ((reg2 << 16) | (reg1 << 8) | reg0) & 0x007FFFFF;
	printf("FIFO Length : %lu\n", fifoLength);
	return fifoLength;
}

void enable(ArducamController* pCtrl){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->pinNo, GPIO_PIN_RESET);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68d8      	ldr	r0, [r3, #12]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	8a1b      	ldrh	r3, [r3, #16]
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	f001 f94a 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <disable>:

void disable(ArducamController* pCtrl){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->pinNo, GPIO_PIN_SET);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68d8      	ldr	r0, [r3, #12]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	8a1b      	ldrh	r3, [r3, #16]
 800096c:	2201      	movs	r2, #1
 800096e:	4619      	mov	r1, r3
 8000970:	f001 f93a 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <registerDump>:

//Prints all of the relevant registers in the Arducam
void registerDump(ArducamController* pCtrl){
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	uint8_t data;
	printf("Register Table:\n");
 8000984:	4834      	ldr	r0, [pc, #208]	; (8000a58 <registerDump+0xdc>)
 8000986:	f004 ffb5 	bl	80058f4 <puts>
	i2cRegRead(pCtrl, FIFO_BYTE1, &data, 1);
	printf("FIFO Byte 1: 0x%02X\n", data);
	i2cRegRead(pCtrl, FIFO_BYTE2, &data, 1);
	printf("FIFO Byte 2: 0x%02X\n", data);*/

	printf("(SPI Read)\n");
 800098a:	4834      	ldr	r0, [pc, #208]	; (8000a5c <registerDump+0xe0>)
 800098c:	f004 ffb2 	bl	80058f4 <puts>
	spiRegRead(pCtrl, TEST_REGISTER, &data, 1);
 8000990:	f107 020f 	add.w	r2, r7, #15
 8000994:	2301      	movs	r3, #1
 8000996:	2100      	movs	r1, #0
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff69 	bl	8000870 <spiRegRead>
	printf("Test Register: 0x%02X\n", data);
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	4619      	mov	r1, r3
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <registerDump+0xe4>)
 80009a4:	f004 ff40 	bl	8005828 <iprintf>
	spiRegRead(pCtrl, CAPTURE_CONTROL_REG, &data, 1);
 80009a8:	f107 020f 	add.w	r2, r7, #15
 80009ac:	2301      	movs	r3, #1
 80009ae:	2101      	movs	r1, #1
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff5d 	bl	8000870 <spiRegRead>
	printf("Capture Control Register: 0x%02X\n", data);
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	4619      	mov	r1, r3
 80009ba:	482a      	ldr	r0, [pc, #168]	; (8000a64 <registerDump+0xe8>)
 80009bc:	f004 ff34 	bl	8005828 <iprintf>
	spiRegRead(pCtrl, FIFO_CONTROL_REG, &data, 1);
 80009c0:	f107 020f 	add.w	r2, r7, #15
 80009c4:	2301      	movs	r3, #1
 80009c6:	2104      	movs	r1, #4
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff51 	bl	8000870 <spiRegRead>
	printf("FIFO Control Register: 0x%02X\n", data);
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	4619      	mov	r1, r3
 80009d2:	4825      	ldr	r0, [pc, #148]	; (8000a68 <registerDump+0xec>)
 80009d4:	f004 ff28 	bl	8005828 <iprintf>
	spiRegRead(pCtrl, CHIP_VERSION_REG, &data, 1);
 80009d8:	f107 020f 	add.w	r2, r7, #15
 80009dc:	2301      	movs	r3, #1
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff45 	bl	8000870 <spiRegRead>
	printf("Chip Version: 0x%02X\n", data);
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4820      	ldr	r0, [pc, #128]	; (8000a6c <registerDump+0xf0>)
 80009ec:	f004 ff1c 	bl	8005828 <iprintf>
	spiRegRead(pCtrl, FIFO_STATUS_REG, &data, 1);
 80009f0:	f107 020f 	add.w	r2, r7, #15
 80009f4:	2301      	movs	r3, #1
 80009f6:	2141      	movs	r1, #65	; 0x41
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff ff39 	bl	8000870 <spiRegRead>
	printf("FIFO Status Register: 0x%02X\n", data);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	4619      	mov	r1, r3
 8000a02:	481b      	ldr	r0, [pc, #108]	; (8000a70 <registerDump+0xf4>)
 8000a04:	f004 ff10 	bl	8005828 <iprintf>
	spiRegRead(pCtrl, FIFO_BYTE0, &data, 1);
 8000a08:	f107 020f 	add.w	r2, r7, #15
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	2142      	movs	r1, #66	; 0x42
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff2d 	bl	8000870 <spiRegRead>
	printf("FIFO Byte 0: 0x%02X\n", data);
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4816      	ldr	r0, [pc, #88]	; (8000a74 <registerDump+0xf8>)
 8000a1c:	f004 ff04 	bl	8005828 <iprintf>
	spiRegRead(pCtrl, FIFO_BYTE1, &data, 1);
 8000a20:	f107 020f 	add.w	r2, r7, #15
 8000a24:	2301      	movs	r3, #1
 8000a26:	2143      	movs	r1, #67	; 0x43
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff21 	bl	8000870 <spiRegRead>
	printf("FIFO Byte 1: 0x%02X\n", data);
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	4619      	mov	r1, r3
 8000a32:	4811      	ldr	r0, [pc, #68]	; (8000a78 <registerDump+0xfc>)
 8000a34:	f004 fef8 	bl	8005828 <iprintf>
	spiRegRead(pCtrl, FIFO_BYTE2, &data, 1);
 8000a38:	f107 020f 	add.w	r2, r7, #15
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	2144      	movs	r1, #68	; 0x44
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff15 	bl	8000870 <spiRegRead>
	printf("FIFO Byte 2: 0x%02X\n", data);
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <registerDump+0x100>)
 8000a4c:	f004 feec 	bl	8005828 <iprintf>

}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	080066a0 	.word	0x080066a0
 8000a5c:	080066b0 	.word	0x080066b0
 8000a60:	080066bc 	.word	0x080066bc
 8000a64:	080066d4 	.word	0x080066d4
 8000a68:	080066f8 	.word	0x080066f8
 8000a6c:	08006718 	.word	0x08006718
 8000a70:	08006730 	.word	0x08006730
 8000a74:	08006750 	.word	0x08006750
 8000a78:	08006768 	.word	0x08006768
 8000a7c:	08006780 	.word	0x08006780

08000a80 <printStatus>:

void printStatus(ArducamController* pCtrl){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	printf("**********Status Report**********\n");
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <printStatus+0x30>)
 8000a8a:	f004 ff33 	bl	80058f4 <puts>
	registerDump(pCtrl);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ff74 	bl	800097c <registerDump>
	printf("Arducam Status: %x\n", pCtrl->status);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7a1b      	ldrb	r3, [r3, #8]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <printStatus+0x34>)
 8000a9c:	f004 fec4 	bl	8005828 <iprintf>
	printf("*******************************\n");
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <printStatus+0x38>)
 8000aa2:	f004 ff27 	bl	80058f4 <puts>

}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	08006798 	.word	0x08006798
 8000ab4:	080067bc 	.word	0x080067bc
 8000ab8:	080067d0 	.word	0x080067d0

08000abc <initESP>:
const char* STATUS_SNAP = "Taking a Picture";
const char* STATUS_ARCHIDEKT = "Sending Deck to Archidekt";
const char* STATUS_SHUTDOWN = "Shutting Down";
const char* STATUS_UNKNOWN = "Unknown Action";

void initESP(WiFiController* pCtrl, UART_HandleTypeDef* pUARTHandle, GPIO_TypeDef* pGPIOPort, uint16_t readyFlagPin){
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	807b      	strh	r3, [r7, #2]
	pCtrl->pUARTHandle = pUARTHandle;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	68ba      	ldr	r2, [r7, #8]
 8000ace:	601a      	str	r2, [r3, #0]
	pCtrl->pGPIOPort = pGPIOPort;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	605a      	str	r2, [r3, #4]
	pCtrl->readyFlagPin = readyFlagPin;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	887a      	ldrh	r2, [r7, #2]
 8000ada:	811a      	strh	r2, [r3, #8]
	pCtrl->status = HAL_OK;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	729a      	strb	r2, [r3, #10]
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <signalReady>:

void signalReady(WiFiController* pCtrl){
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->readyFlagPin, GPIO_PIN_SET);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6858      	ldr	r0, [r3, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	891b      	ldrh	r3, [r3, #8]
 8000afe:	2201      	movs	r2, #1
 8000b00:	4619      	mov	r1, r3
 8000b02:	f001 f871 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <signalBusy>:

void signalBusy(WiFiController* pCtrl){
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->readyFlagPin, GPIO_PIN_RESET);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6858      	ldr	r0, [r3, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	891b      	ldrh	r3, [r3, #8]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4619      	mov	r1, r3
 8000b22:	f001 f861 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <getNextCMD>:

HAL_StatusTypeDef getNextCMD(WiFiController* pCtrl, char *pCMDBuffer){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	printf("Waiting for next CMD...\n");
 8000b3a:	480f      	ldr	r0, [pc, #60]	; (8000b78 <getNextCMD+0x48>)
 8000b3c:	f004 feda 	bl	80058f4 <puts>
	signalReady(pCtrl);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ffd4 	bl	8000aee <signalReady>
	pCtrl->status = HAL_UART_Receive(pCtrl->pUARTHandle, (uint8_t*)  pCMDBuffer, 8, HAL_MAX_DELAY); // might need to figure out how to decide how much data to read in
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	2208      	movs	r2, #8
 8000b50:	6839      	ldr	r1, [r7, #0]
 8000b52:	f003 ff5b 	bl	8004a0c <HAL_UART_Receive>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	729a      	strb	r2, [r3, #10]
	printf("CMD FROM ESP: %s\n", pCMDBuffer);
 8000b5e:	6839      	ldr	r1, [r7, #0]
 8000b60:	4806      	ldr	r0, [pc, #24]	; (8000b7c <getNextCMD+0x4c>)
 8000b62:	f004 fe61 	bl	8005828 <iprintf>
	signalBusy(pCtrl);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ffd1 	bl	8000b0e <signalBusy>
	return pCtrl->status;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7a9b      	ldrb	r3, [r3, #10]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	080068bc 	.word	0x080068bc
 8000b7c:	080068d4 	.word	0x080068d4

08000b80 <initHelpers>:
#include "helpers.h"

UART_HandleTypeDef *pHUART;
I2C_HandleTypeDef *pHI2C;

void initHelpers(UART_HandleTypeDef* pUHandle, I2C_HandleTypeDef *pIHandle){
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	pHUART = pUHandle;
 8000b8a:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <initHelpers+0x24>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6013      	str	r3, [r2, #0]
	pHI2C = pIHandle;
 8000b90:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <initHelpers+0x28>)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	6013      	str	r3, [r2, #0]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000b8 	.word	0x200000b8
 8000ba8:	200000bc 	.word	0x200000bc

08000bac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(pHUART, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <__io_putchar+0x24>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	1d39      	adds	r1, r7, #4
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f003 fe9a 	bl	80048f8 <HAL_UART_Transmit>
  return ch;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000b8 	.word	0x200000b8

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bda:	f000 fcd5 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bde:	f000 f8af 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be2:	f000 f9dd 	bl	8000fa0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000be6:	f000 f8fd 	bl	8000de4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bea:	f000 f93b 	bl	8000e64 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000bee:	f000 f9a7 	bl	8000f40 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000bf2:	f000 f975 	bl	8000ee0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Initialize Helper Functions
  initHelpers(&huart2, &hi2c1);
 8000bf6:	493f      	ldr	r1, [pc, #252]	; (8000cf4 <main+0x120>)
 8000bf8:	483f      	ldr	r0, [pc, #252]	; (8000cf8 <main+0x124>)
 8000bfa:	f7ff ffc1 	bl	8000b80 <initHelpers>

  //Set up buffers
  uint8_t *pictureBuffer = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  char pCMDBuffer[8];

  //Initialize the Peripheral Controllers
  ArducamController arducam;
  WiFiController esp32;
  initArducam(&arducam, &hi2c1, &hspi1, CAM_CS_GPIO_Port, CAM_CS_Pin);
 8000c02:	f107 0010 	add.w	r0, r7, #16
 8000c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c10:	4a3a      	ldr	r2, [pc, #232]	; (8000cfc <main+0x128>)
 8000c12:	4938      	ldr	r1, [pc, #224]	; (8000cf4 <main+0x120>)
 8000c14:	f7ff fcaa 	bl	800056c <initArducam>
  initESP(&esp32, &huart1, READY_FLAG_GPIO_Port, READY_FLAG_Pin);
 8000c18:	1d38      	adds	r0, r7, #4
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	4a38      	ldr	r2, [pc, #224]	; (8000d00 <main+0x12c>)
 8000c1e:	4939      	ldr	r1, [pc, #228]	; (8000d04 <main+0x130>)
 8000c20:	f7ff ff4c 	bl	8000abc <initESP>
  signalReady(&esp32);
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff61 	bl	8000aee <signalReady>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (getNextCMD(&esp32, pCMDBuffer) == HAL_OK)
 8000c2c:	e04c      	b.n	8000cc8 <main+0xf4>
  {
	  //TODO: Might need to make an LEDController module
		if(pCMDBuffer == LIGHTS_ON){
 8000c2e:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <main+0x134>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d105      	bne.n	8000c46 <main+0x72>
			printf(STATUS_LIGHTS_ON);
 8000c3a:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <main+0x138>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f004 fdf2 	bl	8005828 <iprintf>
 8000c44:	e040      	b.n	8000cc8 <main+0xf4>
		} else if (pCMDBuffer == LIGHTS_OFF){
 8000c46:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <main+0x13c>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d105      	bne.n	8000c5e <main+0x8a>
			printf(STATUS_LIGHTS_OFF);
 8000c52:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <main+0x140>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 fde6 	bl	8005828 <iprintf>
 8000c5c:	e034      	b.n	8000cc8 <main+0xf4>
		} else if (pCMDBuffer == SHUFFLE){
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <main+0x144>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d105      	bne.n	8000c76 <main+0xa2>
			printf(STATUS_SHUFFLE);
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <main+0x148>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 fdda 	bl	8005828 <iprintf>
 8000c74:	e028      	b.n	8000cc8 <main+0xf4>
		} else if (pCMDBuffer == SNAP){
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <main+0x14c>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d105      	bne.n	8000c8e <main+0xba>
			printf(STATUS_SNAP);
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <main+0x150>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f004 fdce 	bl	8005828 <iprintf>
 8000c8c:	e01c      	b.n	8000cc8 <main+0xf4>
		} else if (pCMDBuffer == ARCHIDEKT){
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <main+0x154>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d105      	bne.n	8000ca6 <main+0xd2>
			printf(STATUS_ARCHIDEKT);
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <main+0x158>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f004 fdc2 	bl	8005828 <iprintf>
 8000ca4:	e010      	b.n	8000cc8 <main+0xf4>
		} else if (pCMDBuffer == SHUTDOWN){
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <main+0x15c>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d105      	bne.n	8000cbe <main+0xea>
			printf(STATUS_SHUTDOWN);
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <main+0x160>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 fdb6 	bl	8005828 <iprintf>
			break;
 8000cbc:	e00e      	b.n	8000cdc <main+0x108>
		} else {
			printf(STATUS_UNKNOWN);
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <main+0x164>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f004 fdb0 	bl	8005828 <iprintf>
  while (getNextCMD(&esp32, pCMDBuffer) == HAL_OK)
 8000cc8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff2d 	bl	8000b30 <getNextCMD>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0a8      	beq.n	8000c2e <main+0x5a>

	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	  printf("Goodbye!\n");
 8000cdc:	4817      	ldr	r0, [pc, #92]	; (8000d3c <main+0x168>)
 8000cde:	f004 fe09 	bl	80058f4 <puts>
  	  free(pictureBuffer);
 8000ce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ce4:	f004 fc2a 	bl	800553c <free>
 8000ce8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3730      	adds	r7, #48	; 0x30
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000c0 	.word	0x200000c0
 8000cf8:	20000200 	.word	0x20000200
 8000cfc:	20000114 	.word	0x20000114
 8000d00:	48000400 	.word	0x48000400
 8000d04:	20000178 	.word	0x20000178
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000018 	.word	0x20000018
 8000d10:	20000004 	.word	0x20000004
 8000d14:	2000001c 	.word	0x2000001c
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000020 	.word	0x20000020
 8000d20:	2000000c 	.word	0x2000000c
 8000d24:	20000024 	.word	0x20000024
 8000d28:	20000010 	.word	0x20000010
 8000d2c:	20000028 	.word	0x20000028
 8000d30:	20000014 	.word	0x20000014
 8000d34:	2000002c 	.word	0x2000002c
 8000d38:	20000030 	.word	0x20000030
 8000d3c:	080068e8 	.word	0x080068e8

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b096      	sub	sp, #88	; 0x58
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	2244      	movs	r2, #68	; 0x44
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f004 feb0 	bl	8005ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d66:	f001 fcc9 	bl	80026fc <HAL_PWREx_ControlVoltageScaling>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d70:	f000 f994 	bl	800109c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d74:	2302      	movs	r3, #2
 8000d76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7e:	2310      	movs	r3, #16
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d82:	2302      	movs	r3, #2
 8000d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d86:	2302      	movs	r3, #2
 8000d88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 14;
 8000d8e:	230e      	movs	r3, #14
 8000d90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d92:	2307      	movs	r3, #7
 8000d94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fd00 	bl	80027a8 <HAL_RCC_OscConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dae:	f000 f975 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db2:	230f      	movs	r3, #15
 8000db4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db6:	2303      	movs	r3, #3
 8000db8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000dba:	23a0      	movs	r3, #160	; 0xa0
 8000dbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 f8c8 	bl	8002f60 <HAL_RCC_ClockConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dd6:	f000 f961 	bl	800109c <Error_Handler>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	3758      	adds	r7, #88	; 0x58
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <MX_I2C1_Init+0x78>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101926;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000df0:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <MX_I2C1_Init+0x7c>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1e:	480e      	ldr	r0, [pc, #56]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e20:	f000 fefa 	bl	8001c18 <HAL_I2C_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e2a:	f000 f937 	bl	800109c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e32:	f001 fbbd 	bl	80025b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e3c:	f000 f92e 	bl	800109c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e44:	f001 fbff 	bl	8002646 <HAL_I2CEx_ConfigDigitalFilter>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f925 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000c0 	.word	0x200000c0
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	00101926 	.word	0x00101926

08000e64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_SPI1_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ec4:	f002 ff2c 	bl	8003d20 <HAL_SPI_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 f8e5 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000114 	.word	0x20000114
 8000edc:	40013000 	.word	0x40013000

08000ee0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000ee6:	4a15      	ldr	r2, [pc, #84]	; (8000f3c <MX_USART1_UART_Init+0x5c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f24:	f003 fc9a 	bl	800485c <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f2e:	f000 f8b5 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000178 	.word	0x20000178
 8000f3c:	40013800 	.word	0x40013800

08000f40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <MX_USART2_UART_Init+0x5c>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f84:	f003 fc6a 	bl	800485c <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f8e:	f000 f885 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000200 	.word	0x20000200
 8000f9c:	40004400 	.word	0x40004400

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b36      	ldr	r3, [pc, #216]	; (8001090 <MX_GPIO_Init+0xf0>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a35      	ldr	r2, [pc, #212]	; (8001090 <MX_GPIO_Init+0xf0>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b33      	ldr	r3, [pc, #204]	; (8001090 <MX_GPIO_Init+0xf0>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	4b30      	ldr	r3, [pc, #192]	; (8001090 <MX_GPIO_Init+0xf0>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a2f      	ldr	r2, [pc, #188]	; (8001090 <MX_GPIO_Init+0xf0>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <MX_GPIO_Init+0xf0>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <MX_GPIO_Init+0xf0>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a29      	ldr	r2, [pc, #164]	; (8001090 <MX_GPIO_Init+0xf0>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <MX_GPIO_Init+0xf0>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <MX_GPIO_Init+0xf0>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <MX_GPIO_Init+0xf0>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_GPIO_Init+0xf0>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_CS_GPIO_Port, CAM_CS_Pin, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f000 fde2 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(READY_FLAG_GPIO_Port, READY_FLAG_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2120      	movs	r1, #32
 8001028:	481a      	ldr	r0, [pc, #104]	; (8001094 <MX_GPIO_Init+0xf4>)
 800102a:	f000 fddd 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800102e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001034:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4814      	ldr	r0, [pc, #80]	; (8001098 <MX_GPIO_Init+0xf8>)
 8001046:	f000 fc25 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_CS_Pin */
  GPIO_InitStruct.Pin = CAM_CS_Pin;
 800104a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_CS_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f000 fc15 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_FLAG_Pin */
  GPIO_InitStruct.Pin = READY_FLAG_Pin;
 800106a:	2320      	movs	r3, #32
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(READY_FLAG_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_GPIO_Init+0xf4>)
 8001082:	f000 fc07 	bl	8001894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
 8001094:	48000400 	.word	0x48000400
 8001098:	48000800 	.word	0x48000800

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_MspInit+0x44>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_MspInit+0x44>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_MspInit+0x44>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_MspInit+0x44>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_MspInit+0x44>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	6593      	str	r3, [r2, #88]	; 0x58
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_MspInit+0x44>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000

080010f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0ac      	sub	sp, #176	; 0xb0
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2288      	movs	r2, #136	; 0x88
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f004 fccf 	bl	8005ab4 <memset>
  if(hi2c->Instance==I2C1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a21      	ldr	r2, [pc, #132]	; (80011a0 <HAL_I2C_MspInit+0xb0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d13b      	bne.n	8001198 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001120:	2340      	movs	r3, #64	; 0x40
 8001122:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001124:	2300      	movs	r3, #0
 8001126:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4618      	mov	r0, r3
 800112e:	f002 f93b 	bl	80033a8 <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001138:	f7ff ffb0 	bl	800109c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_I2C_MspInit+0xb4>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <HAL_I2C_MspInit+0xb4>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_I2C_MspInit+0xb4>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001154:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115c:	2312      	movs	r3, #18
 800115e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116e:	2304      	movs	r3, #4
 8001170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <HAL_I2C_MspInit+0xb8>)
 800117c:	f000 fb8a 	bl	8001894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_I2C_MspInit+0xb4>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_I2C_MspInit+0xb4>)
 8001186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118a:	6593      	str	r3, [r2, #88]	; 0x58
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_I2C_MspInit+0xb4>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	37b0      	adds	r7, #176	; 0xb0
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000400 	.word	0x48000400

080011ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_SPI_MspInit+0x7c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d128      	bne.n	8001220 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_SPI_MspInit+0x80>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	4a16      	ldr	r2, [pc, #88]	; (800122c <HAL_SPI_MspInit+0x80>)
 80011d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011d8:	6613      	str	r3, [r2, #96]	; 0x60
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_SPI_MspInit+0x80>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_SPI_MspInit+0x80>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a10      	ldr	r2, [pc, #64]	; (800122c <HAL_SPI_MspInit+0x80>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_SPI_MspInit+0x80>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011fe:	23e0      	movs	r3, #224	; 0xe0
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800120e:	2305      	movs	r3, #5
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121c:	f000 fb3a 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40013000 	.word	0x40013000
 800122c:	40021000 	.word	0x40021000

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0ae      	sub	sp, #184	; 0xb8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	2288      	movs	r2, #136	; 0x88
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f004 fc2f 	bl	8005ab4 <memset>
  if(huart->Instance==USART1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a43      	ldr	r2, [pc, #268]	; (8001368 <HAL_UART_MspInit+0x138>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d13d      	bne.n	80012dc <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001260:	2301      	movs	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001264:	2300      	movs	r3, #0
 8001266:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4618      	mov	r0, r3
 800126e:	f002 f89b 	bl	80033a8 <HAL_RCCEx_PeriphCLKConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001278:	f7ff ff10 	bl	800109c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800127c:	4b3b      	ldr	r3, [pc, #236]	; (800136c <HAL_UART_MspInit+0x13c>)
 800127e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001280:	4a3a      	ldr	r2, [pc, #232]	; (800136c <HAL_UART_MspInit+0x13c>)
 8001282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001286:	6613      	str	r3, [r2, #96]	; 0x60
 8001288:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_UART_MspInit+0x13c>)
 800128a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <HAL_UART_MspInit+0x13c>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	4a34      	ldr	r2, [pc, #208]	; (800136c <HAL_UART_MspInit+0x13c>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a0:	4b32      	ldr	r3, [pc, #200]	; (800136c <HAL_UART_MspInit+0x13c>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012c6:	2307      	movs	r3, #7
 80012c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f000 fadd 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012da:	e040      	b.n	800135e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a23      	ldr	r2, [pc, #140]	; (8001370 <HAL_UART_MspInit+0x140>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d13b      	bne.n	800135e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 f858 	bl	80033a8 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80012fe:	f7ff fecd 	bl	800109c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <HAL_UART_MspInit+0x13c>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	4a19      	ldr	r2, [pc, #100]	; (800136c <HAL_UART_MspInit+0x13c>)
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	6593      	str	r3, [r2, #88]	; 0x58
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_UART_MspInit+0x13c>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <HAL_UART_MspInit+0x13c>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a13      	ldr	r2, [pc, #76]	; (800136c <HAL_UART_MspInit+0x13c>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_UART_MspInit+0x13c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001332:	230c      	movs	r3, #12
 8001334:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800134a:	2307      	movs	r3, #7
 800134c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f000 fa9b 	bl	8001894 <HAL_GPIO_Init>
}
 800135e:	bf00      	nop
 8001360:	37b8      	adds	r7, #184	; 0xb8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40013800 	.word	0x40013800
 800136c:	40021000 	.word	0x40021000
 8001370:	40004400 	.word	0x40004400

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f93e 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e00a      	b.n	80013f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013da:	f3af 8000 	nop.w
 80013de:	4601      	mov	r1, r0
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	b2ca      	uxtb	r2, r1
 80013e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf0      	blt.n	80013da <_read+0x12>
  }

  return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e009      	b.n	8001428 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fbc5 	bl	8000bac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	dbf1      	blt.n	8001414 <_write+0x12>
  }
  return len;
 8001430:	687b      	ldr	r3, [r7, #4]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_close>:

int _close(int file)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001462:	605a      	str	r2, [r3, #4]
  return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_isatty>:

int _isatty(int file)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <_sbrk+0x5c>)
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <_sbrk+0x60>)
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <_sbrk+0x64>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <_sbrk+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d4:	f004 fb4c 	bl	8005b70 <__errno>
 80014d8:	4603      	mov	r3, r0
 80014da:	220c      	movs	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	e009      	b.n	80014f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <_sbrk+0x64>)
 80014f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20018000 	.word	0x20018000
 8001504:	00000400 	.word	0x00000400
 8001508:	20000288 	.word	0x20000288
 800150c:	200003e0 	.word	0x200003e0

08001510 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <SystemInit+0x20>)
 8001516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <SystemInit+0x20>)
 800151c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800156c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001538:	f7ff ffea 	bl	8001510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <LoopForever+0x6>)
  ldr r1, =_edata
 800153e:	490d      	ldr	r1, [pc, #52]	; (8001574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <LoopForever+0xe>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001554:	4c0a      	ldr	r4, [pc, #40]	; (8001580 <LoopForever+0x16>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001562:	f004 fb0b 	bl	8005b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001566:	f7ff fb35 	bl	8000bd4 <main>

0800156a <LoopForever>:

LoopForever:
    b LoopForever
 800156a:	e7fe      	b.n	800156a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800156c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001578:	08006b78 	.word	0x08006b78
  ldr r2, =_sbss
 800157c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001580:	200003dc 	.word	0x200003dc

08001584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC1_2_IRQHandler>
	...

08001588 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_Init+0x3c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_Init+0x3c>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159e:	2003      	movs	r0, #3
 80015a0:	f000 f944 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 f80f 	bl	80015c8 <HAL_InitTick>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	71fb      	strb	r3, [r7, #7]
 80015b4:	e001      	b.n	80015ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015b6:	f7ff fd77 	bl	80010a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40022000 	.word	0x40022000

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_InitTick+0x6c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d023      	beq.n	8001624 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_InitTick+0x70>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_InitTick+0x6c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f941 	bl	800187a <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d809      	bhi.n	8001618 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f000 f919 	bl	8001842 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_InitTick+0x74>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e007      	b.n	8001628 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e004      	b.n	8001628 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	e001      	b.n	8001628 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000003c 	.word	0x2000003c
 8001638:	20000034 	.word	0x20000034
 800163c:	20000038 	.word	0x20000038

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	2000003c 	.word	0x2000003c
 8001664:	2000028c 	.word	0x2000028c

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2000028c 	.word	0x2000028c

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff ffee 	bl	8001668 <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_Delay+0x44>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffde 	bl	8001668 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000003c 	.word	0x2000003c

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff47 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff5c 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffb0 	bl	80017e8 <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a2:	e17f      	b.n	8001ba4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8171 	beq.w	8001b9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d005      	beq.n	80018d4 <HAL_GPIO_Init+0x40>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d130      	bne.n	8001936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190a:	2201      	movs	r2, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f003 0201 	and.w	r2, r3, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b03      	cmp	r3, #3
 8001940:	d118      	bne.n	8001974 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001948:	2201      	movs	r2, #1
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	f003 0201 	and.w	r2, r3, #1
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b03      	cmp	r3, #3
 800197e:	d017      	beq.n	80019b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d123      	bne.n	8001a04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	08da      	lsrs	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3208      	adds	r2, #8
 80019c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	220f      	movs	r2, #15
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	08da      	lsrs	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3208      	adds	r2, #8
 80019fe:	6939      	ldr	r1, [r7, #16]
 8001a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0203 	and.w	r2, r3, #3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80ac 	beq.w	8001b9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	4b5f      	ldr	r3, [pc, #380]	; (8001bc4 <HAL_GPIO_Init+0x330>)
 8001a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4a:	4a5e      	ldr	r2, [pc, #376]	; (8001bc4 <HAL_GPIO_Init+0x330>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6613      	str	r3, [r2, #96]	; 0x60
 8001a52:	4b5c      	ldr	r3, [pc, #368]	; (8001bc4 <HAL_GPIO_Init+0x330>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a5e:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a88:	d025      	beq.n	8001ad6 <HAL_GPIO_Init+0x242>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <HAL_GPIO_Init+0x338>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01f      	beq.n	8001ad2 <HAL_GPIO_Init+0x23e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <HAL_GPIO_Init+0x33c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d019      	beq.n	8001ace <HAL_GPIO_Init+0x23a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4d      	ldr	r2, [pc, #308]	; (8001bd4 <HAL_GPIO_Init+0x340>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0x236>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4c      	ldr	r2, [pc, #304]	; (8001bd8 <HAL_GPIO_Init+0x344>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_GPIO_Init+0x232>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4b      	ldr	r2, [pc, #300]	; (8001bdc <HAL_GPIO_Init+0x348>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d007      	beq.n	8001ac2 <HAL_GPIO_Init+0x22e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4a      	ldr	r2, [pc, #296]	; (8001be0 <HAL_GPIO_Init+0x34c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_GPIO_Init+0x22a>
 8001aba:	2306      	movs	r3, #6
 8001abc:	e00c      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001abe:	2307      	movs	r3, #7
 8001ac0:	e00a      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ae8:	4937      	ldr	r1, [pc, #220]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b1a:	4a32      	ldr	r2, [pc, #200]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b44:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b6e:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b98:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f ae78 	bne.w	80018a4 <HAL_GPIO_Init+0x10>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	48000400 	.word	0x48000400
 8001bd0:	48000800 	.word	0x48000800
 8001bd4:	48000c00 	.word	0x48000c00
 8001bd8:	48001000 	.word	0x48001000
 8001bdc:	48001400 	.word	0x48001400
 8001be0:	48001800 	.word	0x48001800
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e08d      	b.n	8001d46 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fa56 	bl	80010f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2224      	movs	r2, #36	; 0x24
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d107      	bne.n	8001c92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	e006      	b.n	8001ca0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d108      	bne.n	8001cba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	e007      	b.n	8001cca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69d9      	ldr	r1, [r3, #28]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2220      	movs	r2, #32
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	817b      	strh	r3, [r7, #10]
 8001d60:	4613      	mov	r3, r2
 8001d62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b20      	cmp	r3, #32
 8001d6e:	f040 80fd 	bne.w	8001f6c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_I2C_Master_Transmit+0x30>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e0f6      	b.n	8001f6e <HAL_I2C_Master_Transmit+0x21e>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d88:	f7ff fc6e 	bl	8001668 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2319      	movs	r3, #25
 8001d94:	2201      	movs	r2, #1
 8001d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fa1d 	bl	80021da <I2C_WaitOnFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0e1      	b.n	8001f6e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2221      	movs	r2, #33	; 0x21
 8001dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2210      	movs	r2, #16
 8001db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	893a      	ldrh	r2, [r7, #8]
 8001dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2bff      	cmp	r3, #255	; 0xff
 8001dda:	d906      	bls.n	8001dea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	22ff      	movs	r2, #255	; 0xff
 8001de0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001de2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e007      	b.n	8001dfa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001df4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001df8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d024      	beq.n	8001e4c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	781a      	ldrb	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	8979      	ldrh	r1, [r7, #10]
 8001e3e:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <HAL_I2C_Master_Transmit+0x228>)
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fb81 	bl	800254c <I2C_TransferConfig>
 8001e4a:	e066      	b.n	8001f1a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	8979      	ldrh	r1, [r7, #10]
 8001e54:	4b48      	ldr	r3, [pc, #288]	; (8001f78 <HAL_I2C_Master_Transmit+0x228>)
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 fb76 	bl	800254c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e60:	e05b      	b.n	8001f1a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	6a39      	ldr	r1, [r7, #32]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fa06 	bl	8002278 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e07b      	b.n	8001f6e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d034      	beq.n	8001f1a <HAL_I2C_Master_Transmit+0x1ca>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d130      	bne.n	8001f1a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f989 	bl	80021da <I2C_WaitOnFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e04d      	b.n	8001f6e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2bff      	cmp	r3, #255	; 0xff
 8001eda:	d90e      	bls.n	8001efa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	22ff      	movs	r2, #255	; 0xff
 8001ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	8979      	ldrh	r1, [r7, #10]
 8001eea:	2300      	movs	r3, #0
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 fb2a 	bl	800254c <I2C_TransferConfig>
 8001ef8:	e00f      	b.n	8001f1a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	8979      	ldrh	r1, [r7, #10]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fb19 	bl	800254c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d19e      	bne.n	8001e62 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	6a39      	ldr	r1, [r7, #32]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f9ec 	bl	8002306 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e01a      	b.n	8001f6e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6859      	ldr	r1, [r3, #4]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_I2C_Master_Transmit+0x22c>)
 8001f4c:	400b      	ands	r3, r1
 8001f4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	80002000 	.word	0x80002000
 8001f7c:	fe00e800 	.word	0xfe00e800

08001f80 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af02      	add	r7, sp, #8
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	f040 80f3 	bne.w	8002188 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb0:	d101      	bne.n	8001fb6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e0e9      	b.n	800218a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_I2C_IsDeviceReady+0x44>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e0e2      	b.n	800218a <HAL_I2C_IsDeviceReady+0x20a>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2224      	movs	r2, #36	; 0x24
 8001fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_I2C_IsDeviceReady+0x72>
 8001fe2:	897b      	ldrh	r3, [r7, #10]
 8001fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ff0:	e006      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x80>
 8001ff2:	897b      	ldrh	r3, [r7, #10]
 8001ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002006:	f7ff fb2f 	bl	8001668 <HAL_GetTick>
 800200a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b20      	cmp	r3, #32
 8002018:	bf0c      	ite	eq
 800201a:	2301      	moveq	r3, #1
 800201c:	2300      	movne	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b10      	cmp	r3, #16
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002038:	e034      	b.n	80020a4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d01a      	beq.n	8002078 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002042:	f7ff fb11 	bl	8001668 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d302      	bcc.n	8002058 <HAL_I2C_IsDeviceReady+0xd8>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10f      	bne.n	8002078 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e088      	b.n	800218a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b20      	cmp	r3, #32
 8002084:	bf0c      	ite	eq
 8002086:	2301      	moveq	r3, #1
 8002088:	2300      	movne	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b10      	cmp	r3, #16
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80020a4:	7ffb      	ldrb	r3, [r7, #31]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <HAL_I2C_IsDeviceReady+0x130>
 80020aa:	7fbb      	ldrb	r3, [r7, #30]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0c4      	beq.n	800203a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	d01a      	beq.n	80020f4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2200      	movs	r2, #0
 80020c6:	2120      	movs	r1, #32
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f886 	bl	80021da <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e058      	b.n	800218a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2220      	movs	r2, #32
 80020de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e04a      	b.n	800218a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2200      	movs	r2, #0
 80020fc:	2120      	movs	r1, #32
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f86b 	bl	80021da <I2C_WaitOnFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e03d      	b.n	800218a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2210      	movs	r2, #16
 8002114:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2220      	movs	r2, #32
 800211c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	d118      	bne.n	8002158 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002134:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	2120      	movs	r1, #32
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f84a 	bl	80021da <I2C_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e01c      	b.n	800218a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2220      	movs	r2, #32
 8002156:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	f63f af39 	bhi.w	8001fda <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	f043 0220 	orr.w	r2, r3, #32
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002188:	2302      	movs	r3, #2
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d103      	bne.n	80021b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d007      	beq.n	80021ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	619a      	str	r2, [r3, #24]
  }
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	4613      	mov	r3, r2
 80021e8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ea:	e031      	b.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f2:	d02d      	beq.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f4:	f7ff fa38 	bl	8001668 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d302      	bcc.n	800220a <I2C_WaitOnFlagUntilTimeout+0x30>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d122      	bne.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699a      	ldr	r2, [r3, #24]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4013      	ands	r3, r2
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	429a      	cmp	r2, r3
 8002218:	bf0c      	ite	eq
 800221a:	2301      	moveq	r3, #1
 800221c:	2300      	movne	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	429a      	cmp	r2, r3
 8002226:	d113      	bne.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	f043 0220 	orr.w	r2, r3, #32
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e00f      	b.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4013      	ands	r3, r2
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	429a      	cmp	r2, r3
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	429a      	cmp	r2, r3
 800226c:	d0be      	beq.n	80021ec <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002284:	e033      	b.n	80022ee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f87e 	bl	800238c <I2C_IsErrorOccurred>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e031      	b.n	80022fe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d025      	beq.n	80022ee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a2:	f7ff f9e1 	bl	8001668 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d11a      	bne.n	80022ee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d013      	beq.n	80022ee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e007      	b.n	80022fe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d1c4      	bne.n	8002286 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002312:	e02f      	b.n	8002374 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f837 	bl	800238c <I2C_IsErrorOccurred>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e02d      	b.n	8002384 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002328:	f7ff f99e 	bl	8001668 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	429a      	cmp	r2, r3
 8002336:	d302      	bcc.n	800233e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11a      	bne.n	8002374 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b20      	cmp	r3, #32
 800234a:	d013      	beq.n	8002374 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e007      	b.n	8002384 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b20      	cmp	r3, #32
 8002380:	d1c8      	bne.n	8002314 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d068      	beq.n	800248a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2210      	movs	r2, #16
 80023be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023c0:	e049      	b.n	8002456 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d045      	beq.n	8002456 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023ca:	f7ff f94d 	bl	8001668 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d302      	bcc.n	80023e0 <I2C_IsErrorOccurred+0x54>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d13a      	bne.n	8002456 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002402:	d121      	bne.n	8002448 <I2C_IsErrorOccurred+0xbc>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800240a:	d01d      	beq.n	8002448 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	2b20      	cmp	r3, #32
 8002410:	d01a      	beq.n	8002448 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002420:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002422:	f7ff f921 	bl	8001668 <HAL_GetTick>
 8002426:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002428:	e00e      	b.n	8002448 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800242a:	f7ff f91d 	bl	8001668 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b19      	cmp	r3, #25
 8002436:	d907      	bls.n	8002448 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	f043 0320 	orr.w	r3, r3, #32
 800243e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002446:	e006      	b.n	8002456 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b20      	cmp	r3, #32
 8002454:	d1e9      	bne.n	800242a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b20      	cmp	r3, #32
 8002462:	d003      	beq.n	800246c <I2C_IsErrorOccurred+0xe0>
 8002464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0aa      	beq.n	80023c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800246c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2220      	movs	r2, #32
 800247a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00b      	beq.n	80024b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00b      	beq.n	80024f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80024f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01c      	beq.n	800253a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f7ff fe46 	bl	8002192 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <I2C_IsErrorOccurred+0x1bc>)
 8002512:	400b      	ands	r3, r1
 8002514:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	431a      	orrs	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2220      	movs	r2, #32
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800253a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800253e:	4618      	mov	r0, r3
 8002540:	3728      	adds	r7, #40	; 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	fe00e800 	.word	0xfe00e800

0800254c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	817b      	strh	r3, [r7, #10]
 800255a:	4613      	mov	r3, r2
 800255c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800255e:	897b      	ldrh	r3, [r7, #10]
 8002560:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002564:	7a7b      	ldrb	r3, [r7, #9]
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800256c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	4313      	orrs	r3, r2
 8002576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800257a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	0d5b      	lsrs	r3, r3, #21
 8002586:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <I2C_TransferConfig+0x60>)
 800258c:	430b      	orrs	r3, r1
 800258e:	43db      	mvns	r3, r3
 8002590:	ea02 0103 	and.w	r1, r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	03ff63ff 	.word	0x03ff63ff

080025b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	d138      	bne.n	8002638 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e032      	b.n	800263a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002602:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
  }
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b20      	cmp	r3, #32
 800265a:	d139      	bne.n	80026d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002666:	2302      	movs	r3, #2
 8002668:	e033      	b.n	80026d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2224      	movs	r2, #36	; 0x24
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002698:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40007000 	.word	0x40007000

080026fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800270a:	d130      	bne.n	800276e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002718:	d038      	beq.n	800278c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002722:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002728:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800272a:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2232      	movs	r2, #50	; 0x32
 8002730:	fb02 f303 	mul.w	r3, r2, r3
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	0c9b      	lsrs	r3, r3, #18
 800273c:	3301      	adds	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002740:	e002      	b.n	8002748 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3b01      	subs	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002754:	d102      	bne.n	800275c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f2      	bne.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002768:	d110      	bne.n	800278c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e00f      	b.n	800278e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277a:	d007      	beq.n	800278c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002784:	4a05      	ldr	r2, [pc, #20]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800278a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40007000 	.word	0x40007000
 80027a0:	20000034 	.word	0x20000034
 80027a4:	431bde83 	.word	0x431bde83

080027a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e3ca      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ba:	4b97      	ldr	r3, [pc, #604]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c4:	4b94      	ldr	r3, [pc, #592]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80e4 	beq.w	80029a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <HAL_RCC_OscConfig+0x4a>
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	f040 808b 	bne.w	8002900 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	f040 8087 	bne.w	8002900 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027f2:	4b89      	ldr	r3, [pc, #548]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x62>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e3a2      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	4b82      	ldr	r3, [pc, #520]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d004      	beq.n	8002824 <HAL_RCC_OscConfig+0x7c>
 800281a:	4b7f      	ldr	r3, [pc, #508]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002822:	e005      	b.n	8002830 <HAL_RCC_OscConfig+0x88>
 8002824:	4b7c      	ldr	r3, [pc, #496]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002830:	4293      	cmp	r3, r2
 8002832:	d223      	bcs.n	800287c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fd55 	bl	80032e8 <RCC_SetFlashLatencyFromMSIRange>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e383      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002848:	4b73      	ldr	r3, [pc, #460]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a72      	ldr	r2, [pc, #456]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 800284e:	f043 0308 	orr.w	r3, r3, #8
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b70      	ldr	r3, [pc, #448]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	496d      	ldr	r1, [pc, #436]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002866:	4b6c      	ldr	r3, [pc, #432]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	4968      	ldr	r1, [pc, #416]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
 800287a:	e025      	b.n	80028c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800287c:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a65      	ldr	r2, [pc, #404]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002882:	f043 0308 	orr.w	r3, r3, #8
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b63      	ldr	r3, [pc, #396]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4960      	ldr	r1, [pc, #384]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800289a:	4b5f      	ldr	r3, [pc, #380]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	495b      	ldr	r1, [pc, #364]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fd15 	bl	80032e8 <RCC_SetFlashLatencyFromMSIRange>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e343      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028c8:	f000 fc4a 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b52      	ldr	r3, [pc, #328]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	4950      	ldr	r1, [pc, #320]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
 80028e4:	4a4e      	ldr	r2, [pc, #312]	; (8002a20 <HAL_RCC_OscConfig+0x278>)
 80028e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028e8:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fe6b 	bl	80015c8 <HAL_InitTick>
 80028f2:	4603      	mov	r3, r0
 80028f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d052      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	e327      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d032      	beq.n	800296e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002908:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a42      	ldr	r2, [pc, #264]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002914:	f7fe fea8 	bl	8001668 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800291c:	f7fe fea4 	bl	8001668 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e310      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800292e:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293a:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a36      	ldr	r2, [pc, #216]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b34      	ldr	r3, [pc, #208]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4931      	ldr	r1, [pc, #196]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002958:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	492c      	ldr	r1, [pc, #176]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
 800296c:	e01a      	b.n	80029a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800296e:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800297a:	f7fe fe75 	bl	8001668 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002982:	f7fe fe71 	bl	8001668 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e2dd      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002994:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f0      	bne.n	8002982 <HAL_RCC_OscConfig+0x1da>
 80029a0:	e000      	b.n	80029a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d074      	beq.n	8002a9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d005      	beq.n	80029c2 <HAL_RCC_OscConfig+0x21a>
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b0c      	cmp	r3, #12
 80029ba:	d10e      	bne.n	80029da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d10b      	bne.n	80029da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d064      	beq.n	8002a98 <HAL_RCC_OscConfig+0x2f0>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d160      	bne.n	8002a98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e2ba      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x24a>
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e026      	b.n	8002a40 <HAL_RCC_OscConfig+0x298>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fa:	d115      	bne.n	8002a28 <HAL_RCC_OscConfig+0x280>
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a02      	ldr	r2, [pc, #8]	; (8002a18 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	e014      	b.n	8002a40 <HAL_RCC_OscConfig+0x298>
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	08006aec 	.word	0x08006aec
 8002a20:	20000034 	.word	0x20000034
 8002a24:	20000038 	.word	0x20000038
 8002a28:	4ba0      	ldr	r3, [pc, #640]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a9f      	ldr	r2, [pc, #636]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b9d      	ldr	r3, [pc, #628]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a9c      	ldr	r2, [pc, #624]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fe0e 	bl	8001668 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a50:	f7fe fe0a 	bl	8001668 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e276      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a62:	4b92      	ldr	r3, [pc, #584]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x2a8>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe fdfa 	bl	8001668 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe fdf6 	bl	8001668 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e262      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a8a:	4b88      	ldr	r3, [pc, #544]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x2d0>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d060      	beq.n	8002b68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x310>
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d119      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d116      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab8:	4b7c      	ldr	r3, [pc, #496]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x328>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e23f      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b76      	ldr	r3, [pc, #472]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	4973      	ldr	r1, [pc, #460]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae4:	e040      	b.n	8002b68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d023      	beq.n	8002b36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aee:	4b6f      	ldr	r3, [pc, #444]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a6e      	ldr	r2, [pc, #440]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afa:	f7fe fdb5 	bl	8001668 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b02:	f7fe fdb1 	bl	8001668 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e21d      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b14:	4b65      	ldr	r3, [pc, #404]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b20:	4b62      	ldr	r3, [pc, #392]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	061b      	lsls	r3, r3, #24
 8002b2e:	495f      	ldr	r1, [pc, #380]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
 8002b34:	e018      	b.n	8002b68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b36:	4b5d      	ldr	r3, [pc, #372]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a5c      	ldr	r2, [pc, #368]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7fe fd91 	bl	8001668 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fd8d 	bl	8001668 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1f9      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b5c:	4b53      	ldr	r3, [pc, #332]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f0      	bne.n	8002b4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d03c      	beq.n	8002bee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01c      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7c:	4b4b      	ldr	r3, [pc, #300]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b82:	4a4a      	ldr	r2, [pc, #296]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fd6c 	bl	8001668 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b94:	f7fe fd68 	bl	8001668 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1d4      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ba6:	4b41      	ldr	r3, [pc, #260]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ef      	beq.n	8002b94 <HAL_RCC_OscConfig+0x3ec>
 8002bb4:	e01b      	b.n	8002bee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb6:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbc:	4a3b      	ldr	r2, [pc, #236]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fd4f 	bl	8001668 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bce:	f7fe fd4b 	bl	8001668 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1b7      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002be0:	4b32      	ldr	r3, [pc, #200]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1ef      	bne.n	8002bce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80a6 	beq.w	8002d48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10d      	bne.n	8002c28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	4a26      	ldr	r2, [pc, #152]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6593      	str	r3, [r2, #88]	; 0x58
 8002c18:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c24:	2301      	movs	r3, #1
 8002c26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c28:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <HAL_RCC_OscConfig+0x508>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d118      	bne.n	8002c66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_RCC_OscConfig+0x508>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <HAL_RCC_OscConfig+0x508>)
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c40:	f7fe fd12 	bl	8001668 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c48:	f7fe fd0e 	bl	8001668 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e17a      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_RCC_OscConfig+0x508>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d108      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4d8>
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	4a0d      	ldr	r2, [pc, #52]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c7e:	e029      	b.n	8002cd4 <HAL_RCC_OscConfig+0x52c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d115      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x50c>
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8e:	4a07      	ldr	r2, [pc, #28]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	4a03      	ldr	r2, [pc, #12]	; (8002cac <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca8:	e014      	b.n	8002cd4 <HAL_RCC_OscConfig+0x52c>
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	4b9c      	ldr	r3, [pc, #624]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	4a9b      	ldr	r2, [pc, #620]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc4:	4b98      	ldr	r3, [pc, #608]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	4a97      	ldr	r2, [pc, #604]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002ccc:	f023 0304 	bic.w	r3, r3, #4
 8002cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d016      	beq.n	8002d0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fcc4 	bl	8001668 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fcc0 	bl	8001668 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e12a      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfa:	4b8b      	ldr	r3, [pc, #556]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ed      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x53c>
 8002d08:	e015      	b.n	8002d36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fcad 	bl	8001668 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe fca9 	bl	8001668 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e113      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d28:	4b7f      	ldr	r3, [pc, #508]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1ed      	bne.n	8002d12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d36:	7ffb      	ldrb	r3, [r7, #31]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d105      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3c:	4b7a      	ldr	r3, [pc, #488]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	4a79      	ldr	r2, [pc, #484]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80fe 	beq.w	8002f4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	f040 80d0 	bne.w	8002efc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d5c:	4b72      	ldr	r3, [pc, #456]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0203 	and.w	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d130      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d127      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d11f      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d9c:	2a07      	cmp	r2, #7
 8002d9e:	bf14      	ite	ne
 8002da0:	2201      	movne	r2, #1
 8002da2:	2200      	moveq	r2, #0
 8002da4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d113      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	3b01      	subs	r3, #1
 8002db8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	085b      	lsrs	r3, r3, #1
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d06e      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d069      	beq.n	8002eac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dd8:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002de4:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0ad      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002df4:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a4b      	ldr	r2, [pc, #300]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e00:	f7fe fc32 	bl	8001668 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe fc2e 	bl	8001668 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e09a      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1a:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e26:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	4b40      	ldr	r3, [pc, #256]	; (8002f2c <HAL_RCC_OscConfig+0x784>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e36:	3a01      	subs	r2, #1
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	4311      	orrs	r1, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e40:	0212      	lsls	r2, r2, #8
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e48:	0852      	lsrs	r2, r2, #1
 8002e4a:	3a01      	subs	r2, #1
 8002e4c:	0552      	lsls	r2, r2, #21
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e54:	0852      	lsrs	r2, r2, #1
 8002e56:	3a01      	subs	r2, #1
 8002e58:	0652      	lsls	r2, r2, #25
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e60:	0912      	lsrs	r2, r2, #4
 8002e62:	0452      	lsls	r2, r2, #17
 8002e64:	430a      	orrs	r2, r1
 8002e66:	4930      	ldr	r1, [pc, #192]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e6c:	4b2e      	ldr	r3, [pc, #184]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a2d      	ldr	r2, [pc, #180]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e78:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a2a      	ldr	r2, [pc, #168]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e84:	f7fe fbf0 	bl	8001668 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe fbec 	bl	8001668 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e058      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9e:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eaa:	e050      	b.n	8002f4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e04f      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d148      	bne.n	8002f4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ed4:	f7fe fbc8 	bl	8001668 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe fbc4 	bl	8001668 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e030      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x734>
 8002efa:	e028      	b.n	8002f4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d023      	beq.n	8002f4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a08      	ldr	r2, [pc, #32]	; (8002f28 <HAL_RCC_OscConfig+0x780>)
 8002f08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fe fbab 	bl	8001668 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f14:	e00c      	b.n	8002f30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fe fba7 	bl	8001668 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d905      	bls.n	8002f30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e013      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_RCC_OscConfig+0x7b0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ec      	bne.n	8002f16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_RCC_OscConfig+0x7b0>)
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	4905      	ldr	r1, [pc, #20]	; (8002f58 <HAL_RCC_OscConfig+0x7b0>)
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_RCC_OscConfig+0x7b4>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	60cb      	str	r3, [r1, #12]
 8002f48:	e001      	b.n	8002f4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	feeefffc 	.word	0xfeeefffc

08002f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0e7      	b.n	8003144 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f74:	4b75      	ldr	r3, [pc, #468]	; (800314c <HAL_RCC_ClockConfig+0x1ec>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d910      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b72      	ldr	r3, [pc, #456]	; (800314c <HAL_RCC_ClockConfig+0x1ec>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 0207 	bic.w	r2, r3, #7
 8002f8a:	4970      	ldr	r1, [pc, #448]	; (800314c <HAL_RCC_ClockConfig+0x1ec>)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b6e      	ldr	r3, [pc, #440]	; (800314c <HAL_RCC_ClockConfig+0x1ec>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0cf      	b.n	8003144 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	4b66      	ldr	r3, [pc, #408]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d908      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc0:	4b63      	ldr	r3, [pc, #396]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4960      	ldr	r1, [pc, #384]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d04c      	beq.n	8003078 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe6:	4b5a      	ldr	r3, [pc, #360]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d121      	bne.n	8003036 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e0a6      	b.n	8003144 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffe:	4b54      	ldr	r3, [pc, #336]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d115      	bne.n	8003036 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e09a      	b.n	8003144 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003016:	4b4e      	ldr	r3, [pc, #312]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e08e      	b.n	8003144 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003026:	4b4a      	ldr	r3, [pc, #296]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e086      	b.n	8003144 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003036:	4b46      	ldr	r3, [pc, #280]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f023 0203 	bic.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4943      	ldr	r1, [pc, #268]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003048:	f7fe fb0e 	bl	8001668 <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	e00a      	b.n	8003066 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003050:	f7fe fb0a 	bl	8001668 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e06e      	b.n	8003144 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	4b3a      	ldr	r3, [pc, #232]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 020c 	and.w	r2, r3, #12
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	429a      	cmp	r2, r3
 8003076:	d1eb      	bne.n	8003050 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003090:	429a      	cmp	r2, r3
 8003092:	d208      	bcs.n	80030a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003094:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	492b      	ldr	r1, [pc, #172]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a6:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_RCC_ClockConfig+0x1ec>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d210      	bcs.n	80030d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b4:	4b25      	ldr	r3, [pc, #148]	; (800314c <HAL_RCC_ClockConfig+0x1ec>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f023 0207 	bic.w	r2, r3, #7
 80030bc:	4923      	ldr	r1, [pc, #140]	; (800314c <HAL_RCC_ClockConfig+0x1ec>)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c4:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_RCC_ClockConfig+0x1ec>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e036      	b.n	8003144 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	4918      	ldr	r1, [pc, #96]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4910      	ldr	r1, [pc, #64]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 8003110:	4313      	orrs	r3, r2
 8003112:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003114:	f000 f824 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_RCC_ClockConfig+0x1f0>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	490b      	ldr	r1, [pc, #44]	; (8003154 <HAL_RCC_ClockConfig+0x1f4>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
 8003130:	4a09      	ldr	r2, [pc, #36]	; (8003158 <HAL_RCC_ClockConfig+0x1f8>)
 8003132:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCC_ClockConfig+0x1fc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe fa45 	bl	80015c8 <HAL_InitTick>
 800313e:	4603      	mov	r3, r0
 8003140:	72fb      	strb	r3, [r7, #11]

  return status;
 8003142:	7afb      	ldrb	r3, [r7, #11]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40022000 	.word	0x40022000
 8003150:	40021000 	.word	0x40021000
 8003154:	08006aec 	.word	0x08006aec
 8003158:	20000034 	.word	0x20000034
 800315c:	20000038 	.word	0x20000038

08003160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316e:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <HAL_RCC_GetSysClockFreq+0x108>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003178:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <HAL_RCC_GetSysClockFreq+0x108>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x34>
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	2b0c      	cmp	r3, #12
 800318c:	d121      	bne.n	80031d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d11e      	bne.n	80031d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003194:	4b34      	ldr	r3, [pc, #208]	; (8003268 <HAL_RCC_GetSysClockFreq+0x108>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031a0:	4b31      	ldr	r3, [pc, #196]	; (8003268 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	e005      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031b0:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031bc:	4a2b      	ldr	r2, [pc, #172]	; (800326c <HAL_RCC_GetSysClockFreq+0x10c>)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d102      	bne.n	80031de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_RCC_GetSysClockFreq+0x110>)
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	e004      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031e4:	4b23      	ldr	r3, [pc, #140]	; (8003274 <HAL_RCC_GetSysClockFreq+0x114>)
 80031e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d134      	bne.n	8003258 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ee:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d003      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0xa6>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d003      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0xac>
 8003204:	e005      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003206:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_RCC_GetSysClockFreq+0x110>)
 8003208:	617b      	str	r3, [r7, #20]
      break;
 800320a:	e005      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_RCC_GetSysClockFreq+0x114>)
 800320e:	617b      	str	r3, [r7, #20]
      break;
 8003210:	e002      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	617b      	str	r3, [r7, #20]
      break;
 8003216:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003218:	4b13      	ldr	r3, [pc, #76]	; (8003268 <HAL_RCC_GetSysClockFreq+0x108>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	3301      	adds	r3, #1
 8003224:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_RCC_GetSysClockFreq+0x108>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	fb03 f202 	mul.w	r2, r3, r2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_RCC_GetSysClockFreq+0x108>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	0e5b      	lsrs	r3, r3, #25
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	3301      	adds	r3, #1
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	fbb2 f3f3 	udiv	r3, r2, r3
 8003256:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003258:	69bb      	ldr	r3, [r7, #24]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	08006b04 	.word	0x08006b04
 8003270:	00f42400 	.word	0x00f42400
 8003274:	007a1200 	.word	0x007a1200

08003278 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_RCC_GetHCLKFreq+0x14>)
 800327e:	681b      	ldr	r3, [r3, #0]
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000034 	.word	0x20000034

08003290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003294:	f7ff fff0 	bl	8003278 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4904      	ldr	r1, [pc, #16]	; (80032b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40021000 	.word	0x40021000
 80032b8:	08006afc 	.word	0x08006afc

080032bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032c0:	f7ff ffda 	bl	8003278 <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	0adb      	lsrs	r3, r3, #11
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4904      	ldr	r1, [pc, #16]	; (80032e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	08006afc 	.word	0x08006afc

080032e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003300:	f7ff f9ee 	bl	80026e0 <HAL_PWREx_GetVoltageRange>
 8003304:	6178      	str	r0, [r7, #20]
 8003306:	e014      	b.n	8003332 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003308:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	4a24      	ldr	r2, [pc, #144]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800330e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003312:	6593      	str	r3, [r2, #88]	; 0x58
 8003314:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003320:	f7ff f9de 	bl	80026e0 <HAL_PWREx_GetVoltageRange>
 8003324:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003326:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800332c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003330:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003338:	d10b      	bne.n	8003352 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d919      	bls.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2ba0      	cmp	r3, #160	; 0xa0
 8003344:	d902      	bls.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003346:	2302      	movs	r3, #2
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	e013      	b.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800334c:	2301      	movs	r3, #1
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	e010      	b.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b80      	cmp	r3, #128	; 0x80
 8003356:	d902      	bls.n	800335e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003358:	2303      	movs	r3, #3
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	e00a      	b.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b80      	cmp	r3, #128	; 0x80
 8003362:	d102      	bne.n	800336a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003364:	2302      	movs	r3, #2
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	e004      	b.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b70      	cmp	r3, #112	; 0x70
 800336e:	d101      	bne.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003370:	2301      	movs	r3, #1
 8003372:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 0207 	bic.w	r2, r3, #7
 800337c:	4909      	ldr	r1, [pc, #36]	; (80033a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003384:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	429a      	cmp	r2, r3
 8003390:	d001      	beq.n	8003396 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40022000 	.word	0x40022000

080033a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033b0:	2300      	movs	r3, #0
 80033b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033b4:	2300      	movs	r3, #0
 80033b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d041      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033cc:	d02a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033d2:	d824      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033d8:	d008      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033de:	d81e      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e8:	d010      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033ea:	e018      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033ec:	4b86      	ldr	r3, [pc, #536]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4a85      	ldr	r2, [pc, #532]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033f8:	e015      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3304      	adds	r3, #4
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fabb 	bl	800397c <RCCEx_PLLSAI1_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800340a:	e00c      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3320      	adds	r3, #32
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fba6 	bl	8003b64 <RCCEx_PLLSAI2_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800341c:	e003      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	74fb      	strb	r3, [r7, #19]
      break;
 8003422:	e000      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800342c:	4b76      	ldr	r3, [pc, #472]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800343a:	4973      	ldr	r1, [pc, #460]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003442:	e001      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d041      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003458:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800345c:	d02a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800345e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003462:	d824      	bhi.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003468:	d008      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800346a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800346e:	d81e      	bhi.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003478:	d010      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800347a:	e018      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800347c:	4b62      	ldr	r3, [pc, #392]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a61      	ldr	r2, [pc, #388]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003486:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003488:	e015      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fa73 	bl	800397c <RCCEx_PLLSAI1_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800349a:	e00c      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3320      	adds	r3, #32
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fb5e 	bl	8003b64 <RCCEx_PLLSAI2_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ac:	e003      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	74fb      	strb	r3, [r7, #19]
      break;
 80034b2:	e000      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10b      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034bc:	4b52      	ldr	r3, [pc, #328]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ca:	494f      	ldr	r1, [pc, #316]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034d2:	e001      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a0 	beq.w	8003626 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e6:	2300      	movs	r3, #0
 80034e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034ea:	4b47      	ldr	r3, [pc, #284]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034fa:	2300      	movs	r3, #0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003500:	4b41      	ldr	r3, [pc, #260]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	4a40      	ldr	r2, [pc, #256]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350a:	6593      	str	r3, [r2, #88]	; 0x58
 800350c:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003518:	2301      	movs	r3, #1
 800351a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800351c:	4b3b      	ldr	r3, [pc, #236]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a3a      	ldr	r2, [pc, #232]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003526:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003528:	f7fe f89e 	bl	8001668 <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800352e:	e009      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003530:	f7fe f89a 	bl	8001668 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d902      	bls.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	74fb      	strb	r3, [r7, #19]
        break;
 8003542:	e005      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003544:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0ef      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d15c      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003556:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003560:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01f      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	429a      	cmp	r2, r3
 8003572:	d019      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003574:	4b24      	ldr	r3, [pc, #144]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003580:	4b21      	ldr	r3, [pc, #132]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	4a20      	ldr	r2, [pc, #128]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003590:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035a0:	4a19      	ldr	r2, [pc, #100]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b2:	f7fe f859 	bl	8001668 <HAL_GetTick>
 80035b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b8:	e00b      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fe f855 	bl	8001668 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d902      	bls.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	74fb      	strb	r3, [r7, #19]
            break;
 80035d0:	e006      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ec      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10c      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f6:	4904      	ldr	r1, [pc, #16]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035fe:	e009      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	74bb      	strb	r3, [r7, #18]
 8003604:	e006      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003614:	7c7b      	ldrb	r3, [r7, #17]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d105      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800361a:	4b9e      	ldr	r3, [pc, #632]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	4a9d      	ldr	r2, [pc, #628]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003624:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003632:	4b98      	ldr	r3, [pc, #608]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	f023 0203 	bic.w	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	4994      	ldr	r1, [pc, #592]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003654:	4b8f      	ldr	r3, [pc, #572]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	f023 020c 	bic.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	498c      	ldr	r1, [pc, #560]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003676:	4b87      	ldr	r3, [pc, #540]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	4983      	ldr	r1, [pc, #524]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003698:	4b7e      	ldr	r3, [pc, #504]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	497b      	ldr	r1, [pc, #492]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036ba:	4b76      	ldr	r3, [pc, #472]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c8:	4972      	ldr	r1, [pc, #456]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036dc:	4b6d      	ldr	r3, [pc, #436]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	496a      	ldr	r1, [pc, #424]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036fe:	4b65      	ldr	r3, [pc, #404]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370c:	4961      	ldr	r1, [pc, #388]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003720:	4b5c      	ldr	r3, [pc, #368]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372e:	4959      	ldr	r1, [pc, #356]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003742:	4b54      	ldr	r3, [pc, #336]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003750:	4950      	ldr	r1, [pc, #320]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003764:	4b4b      	ldr	r3, [pc, #300]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	4948      	ldr	r1, [pc, #288]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003786:	4b43      	ldr	r3, [pc, #268]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	493f      	ldr	r1, [pc, #252]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d028      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037a8:	4b3a      	ldr	r3, [pc, #232]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b6:	4937      	ldr	r1, [pc, #220]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037c6:	d106      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c8:	4b32      	ldr	r3, [pc, #200]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a31      	ldr	r2, [pc, #196]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037d2:	60d3      	str	r3, [r2, #12]
 80037d4:	e011      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037de:	d10c      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	2101      	movs	r1, #1
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f8c8 	bl	800397c <RCCEx_PLLSAI1_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d028      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	491f      	ldr	r1, [pc, #124]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003824:	d106      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4a1a      	ldr	r2, [pc, #104]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003830:	60d3      	str	r3, [r2, #12]
 8003832:	e011      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800383c:	d10c      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	2101      	movs	r1, #1
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f899 	bl	800397c <RCCEx_PLLSAI1_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800384e:	7cfb      	ldrb	r3, [r7, #19]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02b      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003872:	4908      	ldr	r1, [pc, #32]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003882:	d109      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a02      	ldr	r2, [pc, #8]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800388e:	60d3      	str	r3, [r2, #12]
 8003890:	e014      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038a0:	d10c      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	2101      	movs	r1, #1
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 f867 	bl	800397c <RCCEx_PLLSAI1_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d02f      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038d6:	4928      	ldr	r1, [pc, #160]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e6:	d10d      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3304      	adds	r3, #4
 80038ec:	2102      	movs	r1, #2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f844 	bl	800397c <RCCEx_PLLSAI1_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d014      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
 8003900:	74bb      	strb	r3, [r7, #18]
 8003902:	e011      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800390c:	d10c      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3320      	adds	r3, #32
 8003912:	2102      	movs	r1, #2
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f925 	bl	8003b64 <RCCEx_PLLSAI2_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003934:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003942:	490d      	ldr	r1, [pc, #52]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003966:	4904      	ldr	r1, [pc, #16]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800396e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000

0800397c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800398a:	4b75      	ldr	r3, [pc, #468]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d018      	beq.n	80039c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003996:	4b72      	ldr	r3, [pc, #456]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0203 	and.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d10d      	bne.n	80039c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
       ||
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039ae:	4b6c      	ldr	r3, [pc, #432]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
       ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d047      	beq.n	8003a52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
 80039c6:	e044      	b.n	8003a52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d018      	beq.n	8003a02 <RCCEx_PLLSAI1_Config+0x86>
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d825      	bhi.n	8003a20 <RCCEx_PLLSAI1_Config+0xa4>
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d002      	beq.n	80039de <RCCEx_PLLSAI1_Config+0x62>
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d009      	beq.n	80039f0 <RCCEx_PLLSAI1_Config+0x74>
 80039dc:	e020      	b.n	8003a20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039de:	4b60      	ldr	r3, [pc, #384]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11d      	bne.n	8003a26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ee:	e01a      	b.n	8003a26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039f0:	4b5b      	ldr	r3, [pc, #364]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d116      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a00:	e013      	b.n	8003a2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a02:	4b57      	ldr	r3, [pc, #348]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10f      	bne.n	8003a2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a0e:	4b54      	ldr	r3, [pc, #336]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a1e:	e006      	b.n	8003a2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      break;
 8003a24:	e004      	b.n	8003a30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a26:	bf00      	nop
 8003a28:	e002      	b.n	8003a30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10d      	bne.n	8003a52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a36:	4b4a      	ldr	r3, [pc, #296]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	4944      	ldr	r1, [pc, #272]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d17d      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a58:	4b41      	ldr	r3, [pc, #260]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a40      	ldr	r2, [pc, #256]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a64:	f7fd fe00 	bl	8001668 <HAL_GetTick>
 8003a68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a6a:	e009      	b.n	8003a80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a6c:	f7fd fdfc 	bl	8001668 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d902      	bls.n	8003a80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a7e:	e005      	b.n	8003a8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a80:	4b37      	ldr	r3, [pc, #220]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1ef      	bne.n	8003a6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d160      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d111      	bne.n	8003abc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a98:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6892      	ldr	r2, [r2, #8]
 8003aa8:	0211      	lsls	r1, r2, #8
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68d2      	ldr	r2, [r2, #12]
 8003aae:	0912      	lsrs	r2, r2, #4
 8003ab0:	0452      	lsls	r2, r2, #17
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	492a      	ldr	r1, [pc, #168]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	610b      	str	r3, [r1, #16]
 8003aba:	e027      	b.n	8003b0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d112      	bne.n	8003ae8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ac2:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003aca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6892      	ldr	r2, [r2, #8]
 8003ad2:	0211      	lsls	r1, r2, #8
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6912      	ldr	r2, [r2, #16]
 8003ad8:	0852      	lsrs	r2, r2, #1
 8003ada:	3a01      	subs	r2, #1
 8003adc:	0552      	lsls	r2, r2, #21
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	491f      	ldr	r1, [pc, #124]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	610b      	str	r3, [r1, #16]
 8003ae6:	e011      	b.n	8003b0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003af0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6892      	ldr	r2, [r2, #8]
 8003af8:	0211      	lsls	r1, r2, #8
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6952      	ldr	r2, [r2, #20]
 8003afe:	0852      	lsrs	r2, r2, #1
 8003b00:	3a01      	subs	r2, #1
 8003b02:	0652      	lsls	r2, r2, #25
 8003b04:	430a      	orrs	r2, r1
 8003b06:	4916      	ldr	r1, [pc, #88]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b0c:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fd fda6 	bl	8001668 <HAL_GetTick>
 8003b1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b1e:	e009      	b.n	8003b34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b20:	f7fd fda2 	bl	8001668 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d902      	bls.n	8003b34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	73fb      	strb	r3, [r7, #15]
          break;
 8003b32:	e005      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b34:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ef      	beq.n	8003b20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	4904      	ldr	r1, [pc, #16]	; (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000

08003b64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b72:	4b6a      	ldr	r3, [pc, #424]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d018      	beq.n	8003bb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b7e:	4b67      	ldr	r3, [pc, #412]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0203 	and.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d10d      	bne.n	8003baa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
       ||
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b96:	4b61      	ldr	r3, [pc, #388]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d047      	beq.n	8003c3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
 8003bae:	e044      	b.n	8003c3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d018      	beq.n	8003bea <RCCEx_PLLSAI2_Config+0x86>
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d825      	bhi.n	8003c08 <RCCEx_PLLSAI2_Config+0xa4>
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d002      	beq.n	8003bc6 <RCCEx_PLLSAI2_Config+0x62>
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d009      	beq.n	8003bd8 <RCCEx_PLLSAI2_Config+0x74>
 8003bc4:	e020      	b.n	8003c08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bc6:	4b55      	ldr	r3, [pc, #340]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d11d      	bne.n	8003c0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd6:	e01a      	b.n	8003c0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bd8:	4b50      	ldr	r3, [pc, #320]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d116      	bne.n	8003c12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be8:	e013      	b.n	8003c12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bea:	4b4c      	ldr	r3, [pc, #304]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bf6:	4b49      	ldr	r3, [pc, #292]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c06:	e006      	b.n	8003c16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0c:	e004      	b.n	8003c18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c16:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10d      	bne.n	8003c3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c1e:	4b3f      	ldr	r3, [pc, #252]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6819      	ldr	r1, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	430b      	orrs	r3, r1
 8003c34:	4939      	ldr	r1, [pc, #228]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d167      	bne.n	8003d10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c40:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a35      	ldr	r2, [pc, #212]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4c:	f7fd fd0c 	bl	8001668 <HAL_GetTick>
 8003c50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c52:	e009      	b.n	8003c68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c54:	f7fd fd08 	bl	8001668 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d902      	bls.n	8003c68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	73fb      	strb	r3, [r7, #15]
        break;
 8003c66:	e005      	b.n	8003c74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c68:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ef      	bne.n	8003c54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d14a      	bne.n	8003d10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d111      	bne.n	8003ca4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c80:	4b26      	ldr	r3, [pc, #152]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6892      	ldr	r2, [r2, #8]
 8003c90:	0211      	lsls	r1, r2, #8
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68d2      	ldr	r2, [r2, #12]
 8003c96:	0912      	lsrs	r2, r2, #4
 8003c98:	0452      	lsls	r2, r2, #17
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	491f      	ldr	r1, [pc, #124]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	614b      	str	r3, [r1, #20]
 8003ca2:	e011      	b.n	8003cc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6892      	ldr	r2, [r2, #8]
 8003cb4:	0211      	lsls	r1, r2, #8
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6912      	ldr	r2, [r2, #16]
 8003cba:	0852      	lsrs	r2, r2, #1
 8003cbc:	3a01      	subs	r2, #1
 8003cbe:	0652      	lsls	r2, r2, #25
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	4916      	ldr	r1, [pc, #88]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fd fcc8 	bl	8001668 <HAL_GetTick>
 8003cd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cda:	e009      	b.n	8003cf0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cdc:	f7fd fcc4 	bl	8001668 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d902      	bls.n	8003cf0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	73fb      	strb	r3, [r7, #15]
          break;
 8003cee:	e005      	b.n	8003cfc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	4904      	ldr	r1, [pc, #16]	; (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000

08003d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e095      	b.n	8003e5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d108      	bne.n	8003d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d42:	d009      	beq.n	8003d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]
 8003d4a:	e005      	b.n	8003d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd fa1a 	bl	80011ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d98:	d902      	bls.n	8003da0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	e002      	b.n	8003da6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003dae:	d007      	beq.n	8003dc0 <HAL_SPI_Init+0xa0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003db8:	d002      	beq.n	8003dc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	ea42 0103 	orr.w	r1, r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	f003 0204 	and.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e3c:	ea42 0103 	orr.w	r1, r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b088      	sub	sp, #32
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	4613      	mov	r3, r2
 8003e74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_SPI_Transmit+0x22>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e15f      	b.n	8004148 <HAL_SPI_Transmit+0x2e2>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e90:	f7fd fbea 	bl	8001668 <HAL_GetTick>
 8003e94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d002      	beq.n	8003eac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eaa:	e148      	b.n	800413e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_SPI_Transmit+0x52>
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ebc:	e13f      	b.n	800413e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	88fa      	ldrh	r2, [r7, #6]
 8003ed6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f08:	d10f      	bne.n	8003f2a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d007      	beq.n	8003f48 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f50:	d94f      	bls.n	8003ff2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_SPI_Transmit+0xfa>
 8003f5a:	8afb      	ldrh	r3, [r7, #22]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d142      	bne.n	8003fe6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	881a      	ldrh	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	1c9a      	adds	r2, r3, #2
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f84:	e02f      	b.n	8003fe6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d112      	bne.n	8003fba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	881a      	ldrh	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	1c9a      	adds	r2, r3, #2
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fb8:	e015      	b.n	8003fe6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fba:	f7fd fb55 	bl	8001668 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d803      	bhi.n	8003fd2 <HAL_SPI_Transmit+0x16c>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d102      	bne.n	8003fd8 <HAL_SPI_Transmit+0x172>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003fe4:	e0ab      	b.n	800413e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1ca      	bne.n	8003f86 <HAL_SPI_Transmit+0x120>
 8003ff0:	e080      	b.n	80040f4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_SPI_Transmit+0x19a>
 8003ffa:	8afb      	ldrh	r3, [r7, #22]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d174      	bne.n	80040ea <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d912      	bls.n	8004030 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	881a      	ldrh	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	1c9a      	adds	r2, r3, #2
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b02      	subs	r3, #2
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800402e:	e05c      	b.n	80040ea <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004056:	e048      	b.n	80040ea <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d12b      	bne.n	80040be <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d912      	bls.n	8004096 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	881a      	ldrh	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	1c9a      	adds	r2, r3, #2
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b02      	subs	r3, #2
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004094:	e029      	b.n	80040ea <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	7812      	ldrb	r2, [r2, #0]
 80040a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040bc:	e015      	b.n	80040ea <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040be:	f7fd fad3 	bl	8001668 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d803      	bhi.n	80040d6 <HAL_SPI_Transmit+0x270>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d102      	bne.n	80040dc <HAL_SPI_Transmit+0x276>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80040e8:	e029      	b.n	800413e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1b1      	bne.n	8004058 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	6839      	ldr	r1, [r7, #0]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 fb69 	bl	80047d0 <SPI_EndRxTxTransaction>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e003      	b.n	800413e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004146:	7ffb      	ldrb	r3, [r7, #31]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	; 0x28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800415e:	2301      	movs	r3, #1
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_SPI_TransmitReceive+0x26>
 8004172:	2302      	movs	r3, #2
 8004174:	e20a      	b.n	800458c <HAL_SPI_TransmitReceive+0x43c>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800417e:	f7fd fa73 	bl	8001668 <HAL_GetTick>
 8004182:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800418a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004196:	887b      	ldrh	r3, [r7, #2]
 8004198:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800419a:	7efb      	ldrb	r3, [r7, #27]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d00e      	beq.n	80041be <HAL_SPI_TransmitReceive+0x6e>
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a6:	d106      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x66>
 80041b0:	7efb      	ldrb	r3, [r7, #27]
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d003      	beq.n	80041be <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80041b6:	2302      	movs	r3, #2
 80041b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80041bc:	e1e0      	b.n	8004580 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_SPI_TransmitReceive+0x80>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_SPI_TransmitReceive+0x80>
 80041ca:	887b      	ldrh	r3, [r7, #2]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d103      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80041d6:	e1d3      	b.n	8004580 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d003      	beq.n	80041ec <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2205      	movs	r2, #5
 80041e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	887a      	ldrh	r2, [r7, #2]
 8004212:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	887a      	ldrh	r2, [r7, #2]
 8004218:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800422e:	d802      	bhi.n	8004236 <HAL_SPI_TransmitReceive+0xe6>
 8004230:	8a3b      	ldrh	r3, [r7, #16]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d908      	bls.n	8004248 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	e007      	b.n	8004258 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004256:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d007      	beq.n	8004276 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004274:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800427e:	f240 8081 	bls.w	8004384 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_SPI_TransmitReceive+0x140>
 800428a:	8a7b      	ldrh	r3, [r7, #18]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d16d      	bne.n	800436c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	881a      	ldrh	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	1c9a      	adds	r2, r3, #2
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b4:	e05a      	b.n	800436c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d11b      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x1ac>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <HAL_SPI_TransmitReceive+0x1ac>
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d113      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	881a      	ldrh	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	1c9a      	adds	r2, r3, #2
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b01      	cmp	r3, #1
 8004308:	d11c      	bne.n	8004344 <HAL_SPI_TransmitReceive+0x1f4>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d016      	beq.n	8004344 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	b292      	uxth	r2, r2
 8004322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004340:	2301      	movs	r3, #1
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004344:	f7fd f990 	bl	8001668 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004350:	429a      	cmp	r2, r3
 8004352:	d80b      	bhi.n	800436c <HAL_SPI_TransmitReceive+0x21c>
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d007      	beq.n	800436c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800436a:	e109      	b.n	8004580 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d19f      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x166>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d199      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x166>
 8004382:	e0e3      	b.n	800454c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_SPI_TransmitReceive+0x244>
 800438c:	8a7b      	ldrh	r3, [r7, #18]
 800438e:	2b01      	cmp	r3, #1
 8004390:	f040 80cf 	bne.w	8004532 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d912      	bls.n	80043c4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	881a      	ldrh	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	1c9a      	adds	r2, r3, #2
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b02      	subs	r3, #2
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043c2:	e0b6      	b.n	8004532 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ea:	e0a2      	b.n	8004532 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d134      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x314>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d02f      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x314>
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	2b01      	cmp	r3, #1
 8004408:	d12c      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d912      	bls.n	800443a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	881a      	ldrh	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	1c9a      	adds	r2, r3, #2
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b02      	subs	r3, #2
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004438:	e012      	b.n	8004460 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d148      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x3b4>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d042      	beq.n	8004504 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d923      	bls.n	80044d2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	b292      	uxth	r2, r2
 8004496:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	1c9a      	adds	r2, r3, #2
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b02      	subs	r3, #2
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d81f      	bhi.n	8004500 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	e016      	b.n	8004500 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f103 020c 	add.w	r2, r3, #12
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	7812      	ldrb	r2, [r2, #0]
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004500:	2301      	movs	r3, #1
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004504:	f7fd f8b0 	bl	8001668 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004510:	429a      	cmp	r2, r3
 8004512:	d803      	bhi.n	800451c <HAL_SPI_TransmitReceive+0x3cc>
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451a:	d102      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x3d2>
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	2b00      	cmp	r3, #0
 8004520:	d107      	bne.n	8004532 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004530:	e026      	b.n	8004580 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	f47f af57 	bne.w	80043ec <HAL_SPI_TransmitReceive+0x29c>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	f47f af50 	bne.w	80043ec <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f93d 	bl	80047d0 <SPI_EndRxTxTransaction>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004576:	e003      	b.n	8004580 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800458c:	4618      	mov	r0, r3
 800458e:	3728      	adds	r7, #40	; 0x28
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045a4:	f7fd f860 	bl	8001668 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	4413      	add	r3, r2
 80045b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045b4:	f7fd f858 	bl	8001668 <HAL_GetTick>
 80045b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045ba:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	015b      	lsls	r3, r3, #5
 80045c0:	0d1b      	lsrs	r3, r3, #20
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	fb02 f303 	mul.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ca:	e054      	b.n	8004676 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d050      	beq.n	8004676 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045d4:	f7fd f848 	bl	8001668 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d902      	bls.n	80045ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d13d      	bne.n	8004666 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004602:	d111      	bne.n	8004628 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460c:	d004      	beq.n	8004618 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004616:	d107      	bne.n	8004628 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004626:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004630:	d10f      	bne.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004650:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e017      	b.n	8004696 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3b01      	subs	r3, #1
 8004674:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4013      	ands	r3, r2
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	bf0c      	ite	eq
 8004686:	2301      	moveq	r3, #1
 8004688:	2300      	movne	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	429a      	cmp	r2, r3
 8004692:	d19b      	bne.n	80045cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000034 	.word	0x20000034

080046a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	; 0x28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046b6:	f7fc ffd7 	bl	8001668 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	4413      	add	r3, r2
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80046c6:	f7fc ffcf 	bl	8001668 <HAL_GetTick>
 80046ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046d4:	4b3d      	ldr	r3, [pc, #244]	; (80047cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	00da      	lsls	r2, r3, #3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	0d1b      	lsrs	r3, r3, #20
 80046e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046ec:	e060      	b.n	80047b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046f4:	d107      	bne.n	8004706 <SPI_WaitFifoStateUntilTimeout+0x62>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d104      	bne.n	8004706 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004704:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d050      	beq.n	80047b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800470e:	f7fc ffab 	bl	8001668 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471a:	429a      	cmp	r2, r3
 800471c:	d902      	bls.n	8004724 <SPI_WaitFifoStateUntilTimeout+0x80>
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	d13d      	bne.n	80047a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004732:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800473c:	d111      	bne.n	8004762 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004746:	d004      	beq.n	8004752 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004750:	d107      	bne.n	8004762 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004760:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476a:	d10f      	bne.n	800478c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800478a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e010      	b.n	80047c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4013      	ands	r3, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d196      	bne.n	80046ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3728      	adds	r7, #40	; 0x28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000034 	.word	0x20000034

080047d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f7ff ff5b 	bl	80046a4 <SPI_WaitFifoStateUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f8:	f043 0220 	orr.w	r2, r3, #32
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e027      	b.n	8004854 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2200      	movs	r2, #0
 800480c:	2180      	movs	r1, #128	; 0x80
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f7ff fec0 	bl	8004594 <SPI_WaitFlagStateUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481e:	f043 0220 	orr.w	r2, r3, #32
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e014      	b.n	8004854 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2200      	movs	r2, #0
 8004832:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7ff ff34 	bl	80046a4 <SPI_WaitFifoStateUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e000      	b.n	8004854 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e040      	b.n	80048f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fc fcd6 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2224      	movs	r2, #36	; 0x24
 8004888:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fc34 	bl	8005110 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f979 	bl	8004ba0 <UART_SetConfig>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e01b      	b.n	80048f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fcb3 	bl	8005254 <UART_CheckIdleState>
 80048ee:	4603      	mov	r3, r0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800490c:	2b20      	cmp	r3, #32
 800490e:	d178      	bne.n	8004a02 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_UART_Transmit+0x24>
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e071      	b.n	8004a04 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2221      	movs	r2, #33	; 0x21
 800492c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800492e:	f7fc fe9b 	bl	8001668 <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494c:	d108      	bne.n	8004960 <HAL_UART_Transmit+0x68>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d104      	bne.n	8004960 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e003      	b.n	8004968 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004964:	2300      	movs	r3, #0
 8004966:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004968:	e030      	b.n	80049cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	2180      	movs	r1, #128	; 0x80
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 fd15 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d004      	beq.n	800498a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e03c      	b.n	8004a04 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499c:	b292      	uxth	r2, r2
 800499e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	3302      	adds	r3, #2
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	e008      	b.n	80049ba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	781a      	ldrb	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	b292      	uxth	r2, r2
 80049b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	3301      	adds	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1c8      	bne.n	800496a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2200      	movs	r2, #0
 80049e0:	2140      	movs	r1, #64	; 0x40
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fcde 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d004      	beq.n	80049f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e005      	b.n	8004a04 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e000      	b.n	8004a04 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
  }
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	f040 80b6 	bne.w	8004b94 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_UART_Receive+0x28>
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0ae      	b.n	8004b96 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2222      	movs	r2, #34	; 0x22
 8004a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a4e:	f7fc fe0b 	bl	8001668 <HAL_GetTick>
 8004a52:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	88fa      	ldrh	r2, [r7, #6]
 8004a58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6c:	d10e      	bne.n	8004a8c <HAL_UART_Receive+0x80>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <HAL_UART_Receive+0x76>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a80:	e02d      	b.n	8004ade <HAL_UART_Receive+0xd2>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	22ff      	movs	r2, #255	; 0xff
 8004a86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a8a:	e028      	b.n	8004ade <HAL_UART_Receive+0xd2>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10d      	bne.n	8004ab0 <HAL_UART_Receive+0xa4>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d104      	bne.n	8004aa6 <HAL_UART_Receive+0x9a>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	22ff      	movs	r2, #255	; 0xff
 8004aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aa4:	e01b      	b.n	8004ade <HAL_UART_Receive+0xd2>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	227f      	movs	r2, #127	; 0x7f
 8004aaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aae:	e016      	b.n	8004ade <HAL_UART_Receive+0xd2>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab8:	d10d      	bne.n	8004ad6 <HAL_UART_Receive+0xca>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d104      	bne.n	8004acc <HAL_UART_Receive+0xc0>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	227f      	movs	r2, #127	; 0x7f
 8004ac6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aca:	e008      	b.n	8004ade <HAL_UART_Receive+0xd2>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	223f      	movs	r2, #63	; 0x3f
 8004ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ad4:	e003      	b.n	8004ade <HAL_UART_Receive+0xd2>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ae4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aee:	d108      	bne.n	8004b02 <HAL_UART_Receive+0xf6>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d104      	bne.n	8004b02 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	e003      	b.n	8004b0a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b0a:	e037      	b.n	8004b7c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2200      	movs	r2, #0
 8004b14:	2120      	movs	r1, #32
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fc44 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e033      	b.n	8004b96 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10c      	bne.n	8004b4e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	8a7b      	ldrh	r3, [r7, #18]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	3302      	adds	r3, #2
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	e00d      	b.n	8004b6a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	8a7b      	ldrh	r3, [r7, #18]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	3301      	adds	r3, #1
 8004b68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1c1      	bne.n	8004b0c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e000      	b.n	8004b96 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004b94:	2302      	movs	r3, #2
  }
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba4:	b08a      	sub	sp, #40	; 0x28
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4ba4      	ldr	r3, [pc, #656]	; (8004e60 <UART_SetConfig+0x2c0>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a99      	ldr	r2, [pc, #612]	; (8004e64 <UART_SetConfig+0x2c4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d004      	beq.n	8004c0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a90      	ldr	r2, [pc, #576]	; (8004e68 <UART_SetConfig+0x2c8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d126      	bne.n	8004c78 <UART_SetConfig+0xd8>
 8004c2a:	4b90      	ldr	r3, [pc, #576]	; (8004e6c <UART_SetConfig+0x2cc>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d81b      	bhi.n	8004c70 <UART_SetConfig+0xd0>
 8004c38:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <UART_SetConfig+0xa0>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c61 	.word	0x08004c61
 8004c48:	08004c59 	.word	0x08004c59
 8004c4c:	08004c69 	.word	0x08004c69
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c56:	e116      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5e:	e112      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004c60:	2304      	movs	r3, #4
 8004c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c66:	e10e      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004c68:	2308      	movs	r3, #8
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6e:	e10a      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c76:	e106      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a7c      	ldr	r2, [pc, #496]	; (8004e70 <UART_SetConfig+0x2d0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d138      	bne.n	8004cf4 <UART_SetConfig+0x154>
 8004c82:	4b7a      	ldr	r3, [pc, #488]	; (8004e6c <UART_SetConfig+0x2cc>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b0c      	cmp	r3, #12
 8004c8e:	d82d      	bhi.n	8004cec <UART_SetConfig+0x14c>
 8004c90:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <UART_SetConfig+0xf8>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004ccd 	.word	0x08004ccd
 8004c9c:	08004ced 	.word	0x08004ced
 8004ca0:	08004ced 	.word	0x08004ced
 8004ca4:	08004ced 	.word	0x08004ced
 8004ca8:	08004cdd 	.word	0x08004cdd
 8004cac:	08004ced 	.word	0x08004ced
 8004cb0:	08004ced 	.word	0x08004ced
 8004cb4:	08004ced 	.word	0x08004ced
 8004cb8:	08004cd5 	.word	0x08004cd5
 8004cbc:	08004ced 	.word	0x08004ced
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	08004ced 	.word	0x08004ced
 8004cc8:	08004ce5 	.word	0x08004ce5
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e0d8      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e0d4      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e0d0      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cea:	e0cc      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004cec:	2310      	movs	r3, #16
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf2:	e0c8      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a5e      	ldr	r2, [pc, #376]	; (8004e74 <UART_SetConfig+0x2d4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d125      	bne.n	8004d4a <UART_SetConfig+0x1aa>
 8004cfe:	4b5b      	ldr	r3, [pc, #364]	; (8004e6c <UART_SetConfig+0x2cc>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d08:	2b30      	cmp	r3, #48	; 0x30
 8004d0a:	d016      	beq.n	8004d3a <UART_SetConfig+0x19a>
 8004d0c:	2b30      	cmp	r3, #48	; 0x30
 8004d0e:	d818      	bhi.n	8004d42 <UART_SetConfig+0x1a2>
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d00a      	beq.n	8004d2a <UART_SetConfig+0x18a>
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d814      	bhi.n	8004d42 <UART_SetConfig+0x1a2>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <UART_SetConfig+0x182>
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d008      	beq.n	8004d32 <UART_SetConfig+0x192>
 8004d20:	e00f      	b.n	8004d42 <UART_SetConfig+0x1a2>
 8004d22:	2300      	movs	r3, #0
 8004d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d28:	e0ad      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d30:	e0a9      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004d32:	2304      	movs	r3, #4
 8004d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d38:	e0a5      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d40:	e0a1      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004d42:	2310      	movs	r3, #16
 8004d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d48:	e09d      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a4a      	ldr	r2, [pc, #296]	; (8004e78 <UART_SetConfig+0x2d8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d125      	bne.n	8004da0 <UART_SetConfig+0x200>
 8004d54:	4b45      	ldr	r3, [pc, #276]	; (8004e6c <UART_SetConfig+0x2cc>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d60:	d016      	beq.n	8004d90 <UART_SetConfig+0x1f0>
 8004d62:	2bc0      	cmp	r3, #192	; 0xc0
 8004d64:	d818      	bhi.n	8004d98 <UART_SetConfig+0x1f8>
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	d00a      	beq.n	8004d80 <UART_SetConfig+0x1e0>
 8004d6a:	2b80      	cmp	r3, #128	; 0x80
 8004d6c:	d814      	bhi.n	8004d98 <UART_SetConfig+0x1f8>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <UART_SetConfig+0x1d8>
 8004d72:	2b40      	cmp	r3, #64	; 0x40
 8004d74:	d008      	beq.n	8004d88 <UART_SetConfig+0x1e8>
 8004d76:	e00f      	b.n	8004d98 <UART_SetConfig+0x1f8>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e082      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004d80:	2302      	movs	r3, #2
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d86:	e07e      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8e:	e07a      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004d90:	2308      	movs	r3, #8
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d96:	e076      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004d98:	2310      	movs	r3, #16
 8004d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9e:	e072      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a35      	ldr	r2, [pc, #212]	; (8004e7c <UART_SetConfig+0x2dc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d12a      	bne.n	8004e00 <UART_SetConfig+0x260>
 8004daa:	4b30      	ldr	r3, [pc, #192]	; (8004e6c <UART_SetConfig+0x2cc>)
 8004dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004db8:	d01a      	beq.n	8004df0 <UART_SetConfig+0x250>
 8004dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dbe:	d81b      	bhi.n	8004df8 <UART_SetConfig+0x258>
 8004dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc4:	d00c      	beq.n	8004de0 <UART_SetConfig+0x240>
 8004dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dca:	d815      	bhi.n	8004df8 <UART_SetConfig+0x258>
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <UART_SetConfig+0x238>
 8004dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd4:	d008      	beq.n	8004de8 <UART_SetConfig+0x248>
 8004dd6:	e00f      	b.n	8004df8 <UART_SetConfig+0x258>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dde:	e052      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004de0:	2302      	movs	r3, #2
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de6:	e04e      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004de8:	2304      	movs	r3, #4
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dee:	e04a      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004df0:	2308      	movs	r3, #8
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df6:	e046      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004df8:	2310      	movs	r3, #16
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfe:	e042      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <UART_SetConfig+0x2c4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d13a      	bne.n	8004e80 <UART_SetConfig+0x2e0>
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <UART_SetConfig+0x2cc>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e18:	d01a      	beq.n	8004e50 <UART_SetConfig+0x2b0>
 8004e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e1e:	d81b      	bhi.n	8004e58 <UART_SetConfig+0x2b8>
 8004e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e24:	d00c      	beq.n	8004e40 <UART_SetConfig+0x2a0>
 8004e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e2a:	d815      	bhi.n	8004e58 <UART_SetConfig+0x2b8>
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <UART_SetConfig+0x298>
 8004e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e34:	d008      	beq.n	8004e48 <UART_SetConfig+0x2a8>
 8004e36:	e00f      	b.n	8004e58 <UART_SetConfig+0x2b8>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e022      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004e40:	2302      	movs	r3, #2
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e01e      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e01a      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004e50:	2308      	movs	r3, #8
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e016      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004e58:	2310      	movs	r3, #16
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e012      	b.n	8004e86 <UART_SetConfig+0x2e6>
 8004e60:	efff69f3 	.word	0xefff69f3
 8004e64:	40008000 	.word	0x40008000
 8004e68:	40013800 	.word	0x40013800
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	40004400 	.word	0x40004400
 8004e74:	40004800 	.word	0x40004800
 8004e78:	40004c00 	.word	0x40004c00
 8004e7c:	40005000 	.word	0x40005000
 8004e80:	2310      	movs	r3, #16
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a9f      	ldr	r2, [pc, #636]	; (8005108 <UART_SetConfig+0x568>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d17a      	bne.n	8004f86 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d824      	bhi.n	8004ee2 <UART_SetConfig+0x342>
 8004e98:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <UART_SetConfig+0x300>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004ee3 	.word	0x08004ee3
 8004ea8:	08004ecd 	.word	0x08004ecd
 8004eac:	08004ee3 	.word	0x08004ee3
 8004eb0:	08004ed3 	.word	0x08004ed3
 8004eb4:	08004ee3 	.word	0x08004ee3
 8004eb8:	08004ee3 	.word	0x08004ee3
 8004ebc:	08004ee3 	.word	0x08004ee3
 8004ec0:	08004edb 	.word	0x08004edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec4:	f7fe f9e4 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 8004ec8:	61f8      	str	r0, [r7, #28]
        break;
 8004eca:	e010      	b.n	8004eee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ecc:	4b8f      	ldr	r3, [pc, #572]	; (800510c <UART_SetConfig+0x56c>)
 8004ece:	61fb      	str	r3, [r7, #28]
        break;
 8004ed0:	e00d      	b.n	8004eee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed2:	f7fe f945 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 8004ed6:	61f8      	str	r0, [r7, #28]
        break;
 8004ed8:	e009      	b.n	8004eee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ede:	61fb      	str	r3, [r7, #28]
        break;
 8004ee0:	e005      	b.n	8004eee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004eec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80fb 	beq.w	80050ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	4413      	add	r3, r2
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d305      	bcc.n	8004f12 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d903      	bls.n	8004f1a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f18:	e0e8      	b.n	80050ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	461c      	mov	r4, r3
 8004f20:	4615      	mov	r5, r2
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	022b      	lsls	r3, r5, #8
 8004f2c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f30:	0222      	lsls	r2, r4, #8
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	6849      	ldr	r1, [r1, #4]
 8004f36:	0849      	lsrs	r1, r1, #1
 8004f38:	2000      	movs	r0, #0
 8004f3a:	4688      	mov	r8, r1
 8004f3c:	4681      	mov	r9, r0
 8004f3e:	eb12 0a08 	adds.w	sl, r2, r8
 8004f42:	eb43 0b09 	adc.w	fp, r3, r9
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	607a      	str	r2, [r7, #4]
 8004f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f54:	4650      	mov	r0, sl
 8004f56:	4659      	mov	r1, fp
 8004f58:	f7fb f98a 	bl	8000270 <__aeabi_uldivmod>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4613      	mov	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f6a:	d308      	bcc.n	8004f7e <UART_SetConfig+0x3de>
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f72:	d204      	bcs.n	8004f7e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	60da      	str	r2, [r3, #12]
 8004f7c:	e0b6      	b.n	80050ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f84:	e0b2      	b.n	80050ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8e:	d15e      	bne.n	800504e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d828      	bhi.n	8004fea <UART_SetConfig+0x44a>
 8004f98:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <UART_SetConfig+0x400>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004fc5 	.word	0x08004fc5
 8004fa4:	08004fcd 	.word	0x08004fcd
 8004fa8:	08004fd5 	.word	0x08004fd5
 8004fac:	08004feb 	.word	0x08004feb
 8004fb0:	08004fdb 	.word	0x08004fdb
 8004fb4:	08004feb 	.word	0x08004feb
 8004fb8:	08004feb 	.word	0x08004feb
 8004fbc:	08004feb 	.word	0x08004feb
 8004fc0:	08004fe3 	.word	0x08004fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc4:	f7fe f964 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 8004fc8:	61f8      	str	r0, [r7, #28]
        break;
 8004fca:	e014      	b.n	8004ff6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fcc:	f7fe f976 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 8004fd0:	61f8      	str	r0, [r7, #28]
        break;
 8004fd2:	e010      	b.n	8004ff6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd4:	4b4d      	ldr	r3, [pc, #308]	; (800510c <UART_SetConfig+0x56c>)
 8004fd6:	61fb      	str	r3, [r7, #28]
        break;
 8004fd8:	e00d      	b.n	8004ff6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fda:	f7fe f8c1 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 8004fde:	61f8      	str	r0, [r7, #28]
        break;
 8004fe0:	e009      	b.n	8004ff6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe6:	61fb      	str	r3, [r7, #28]
        break;
 8004fe8:	e005      	b.n	8004ff6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ff4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d077      	beq.n	80050ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	005a      	lsls	r2, r3, #1
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	085b      	lsrs	r3, r3, #1
 8005006:	441a      	add	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005010:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b0f      	cmp	r3, #15
 8005016:	d916      	bls.n	8005046 <UART_SetConfig+0x4a6>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800501e:	d212      	bcs.n	8005046 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	b29b      	uxth	r3, r3
 8005024:	f023 030f 	bic.w	r3, r3, #15
 8005028:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	b29b      	uxth	r3, r3
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	b29a      	uxth	r2, r3
 8005036:	8afb      	ldrh	r3, [r7, #22]
 8005038:	4313      	orrs	r3, r2
 800503a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	8afa      	ldrh	r2, [r7, #22]
 8005042:	60da      	str	r2, [r3, #12]
 8005044:	e052      	b.n	80050ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800504c:	e04e      	b.n	80050ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800504e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005052:	2b08      	cmp	r3, #8
 8005054:	d827      	bhi.n	80050a6 <UART_SetConfig+0x506>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <UART_SetConfig+0x4bc>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	08005081 	.word	0x08005081
 8005060:	08005089 	.word	0x08005089
 8005064:	08005091 	.word	0x08005091
 8005068:	080050a7 	.word	0x080050a7
 800506c:	08005097 	.word	0x08005097
 8005070:	080050a7 	.word	0x080050a7
 8005074:	080050a7 	.word	0x080050a7
 8005078:	080050a7 	.word	0x080050a7
 800507c:	0800509f 	.word	0x0800509f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005080:	f7fe f906 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 8005084:	61f8      	str	r0, [r7, #28]
        break;
 8005086:	e014      	b.n	80050b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005088:	f7fe f918 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 800508c:	61f8      	str	r0, [r7, #28]
        break;
 800508e:	e010      	b.n	80050b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005090:	4b1e      	ldr	r3, [pc, #120]	; (800510c <UART_SetConfig+0x56c>)
 8005092:	61fb      	str	r3, [r7, #28]
        break;
 8005094:	e00d      	b.n	80050b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005096:	f7fe f863 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 800509a:	61f8      	str	r0, [r7, #28]
        break;
 800509c:	e009      	b.n	80050b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a2:	61fb      	str	r3, [r7, #28]
        break;
 80050a4:	e005      	b.n	80050b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050b0:	bf00      	nop
    }

    if (pclk != 0U)
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d019      	beq.n	80050ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	085a      	lsrs	r2, r3, #1
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	441a      	add	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d909      	bls.n	80050e6 <UART_SetConfig+0x546>
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d8:	d205      	bcs.n	80050e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60da      	str	r2, [r3, #12]
 80050e4:	e002      	b.n	80050ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3728      	adds	r7, #40	; 0x28
 8005100:	46bd      	mov	sp, r7
 8005102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005106:	bf00      	nop
 8005108:	40008000 	.word	0x40008000
 800510c:	00f42400 	.word	0x00f42400

08005110 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01a      	beq.n	8005226 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800520e:	d10a      	bne.n	8005226 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	605a      	str	r2, [r3, #4]
  }
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b098      	sub	sp, #96	; 0x60
 8005258:	af02      	add	r7, sp, #8
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005264:	f7fc fa00 	bl	8001668 <HAL_GetTick>
 8005268:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b08      	cmp	r3, #8
 8005276:	d12e      	bne.n	80052d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005278:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005280:	2200      	movs	r2, #0
 8005282:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f88c 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d021      	beq.n	80052d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a6:	653b      	str	r3, [r7, #80]	; 0x50
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
 80052b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e6      	bne.n	8005292 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e062      	b.n	800539c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d149      	bne.n	8005378 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ec:	2200      	movs	r2, #0
 80052ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f856 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d03c      	beq.n	8005378 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	623b      	str	r3, [r7, #32]
   return(result);
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
 800531e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e6      	bne.n	80052fe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3308      	adds	r3, #8
 8005336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0301 	bic.w	r3, r3, #1
 8005346:	64bb      	str	r3, [r7, #72]	; 0x48
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3308      	adds	r3, #8
 800534e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005350:	61fa      	str	r2, [r7, #28]
 8005352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	69b9      	ldr	r1, [r7, #24]
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	617b      	str	r3, [r7, #20]
   return(result);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e5      	bne.n	8005330 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e011      	b.n	800539c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3758      	adds	r7, #88	; 0x58
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b4:	e049      	b.n	800544a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053bc:	d045      	beq.n	800544a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053be:	f7fc f953 	bl	8001668 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d302      	bcc.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e048      	b.n	800546a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d031      	beq.n	800544a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d110      	bne.n	8005416 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2208      	movs	r2, #8
 80053fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f838 	bl	8005472 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2208      	movs	r2, #8
 8005406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e029      	b.n	800546a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005424:	d111      	bne.n	800544a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800542e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 f81e 	bl	8005472 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e00f      	b.n	800546a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4013      	ands	r3, r2
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	429a      	cmp	r2, r3
 8005458:	bf0c      	ite	eq
 800545a:	2301      	moveq	r3, #1
 800545c:	2300      	movne	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	461a      	mov	r2, r3
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	429a      	cmp	r2, r3
 8005466:	d0a6      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005472:	b480      	push	{r7}
 8005474:	b095      	sub	sp, #84	; 0x54
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005482:	e853 3f00 	ldrex	r3, [r3]
 8005486:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800548e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005498:	643b      	str	r3, [r7, #64]	; 0x40
 800549a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800549e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054a0:	e841 2300 	strex	r3, r2, [r1]
 80054a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e6      	bne.n	800547a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3308      	adds	r3, #8
 80054ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e5      	bne.n	80054ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d118      	bne.n	800551a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f023 0310 	bic.w	r3, r3, #16
 80054fc:	647b      	str	r3, [r7, #68]	; 0x44
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	6979      	ldr	r1, [r7, #20]
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	613b      	str	r3, [r7, #16]
   return(result);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e6      	bne.n	80054e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800552e:	bf00      	nop
 8005530:	3754      	adds	r7, #84	; 0x54
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <free>:
 800553c:	4b02      	ldr	r3, [pc, #8]	; (8005548 <free+0xc>)
 800553e:	4601      	mov	r1, r0
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	f000 bb43 	b.w	8005bcc <_free_r>
 8005546:	bf00      	nop
 8005548:	20000098 	.word	0x20000098

0800554c <sbrk_aligned>:
 800554c:	b570      	push	{r4, r5, r6, lr}
 800554e:	4e0e      	ldr	r6, [pc, #56]	; (8005588 <sbrk_aligned+0x3c>)
 8005550:	460c      	mov	r4, r1
 8005552:	6831      	ldr	r1, [r6, #0]
 8005554:	4605      	mov	r5, r0
 8005556:	b911      	cbnz	r1, 800555e <sbrk_aligned+0x12>
 8005558:	f000 fae8 	bl	8005b2c <_sbrk_r>
 800555c:	6030      	str	r0, [r6, #0]
 800555e:	4621      	mov	r1, r4
 8005560:	4628      	mov	r0, r5
 8005562:	f000 fae3 	bl	8005b2c <_sbrk_r>
 8005566:	1c43      	adds	r3, r0, #1
 8005568:	d00a      	beq.n	8005580 <sbrk_aligned+0x34>
 800556a:	1cc4      	adds	r4, r0, #3
 800556c:	f024 0403 	bic.w	r4, r4, #3
 8005570:	42a0      	cmp	r0, r4
 8005572:	d007      	beq.n	8005584 <sbrk_aligned+0x38>
 8005574:	1a21      	subs	r1, r4, r0
 8005576:	4628      	mov	r0, r5
 8005578:	f000 fad8 	bl	8005b2c <_sbrk_r>
 800557c:	3001      	adds	r0, #1
 800557e:	d101      	bne.n	8005584 <sbrk_aligned+0x38>
 8005580:	f04f 34ff 	mov.w	r4, #4294967295
 8005584:	4620      	mov	r0, r4
 8005586:	bd70      	pop	{r4, r5, r6, pc}
 8005588:	20000294 	.word	0x20000294

0800558c <_malloc_r>:
 800558c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005590:	1ccd      	adds	r5, r1, #3
 8005592:	f025 0503 	bic.w	r5, r5, #3
 8005596:	3508      	adds	r5, #8
 8005598:	2d0c      	cmp	r5, #12
 800559a:	bf38      	it	cc
 800559c:	250c      	movcc	r5, #12
 800559e:	2d00      	cmp	r5, #0
 80055a0:	4607      	mov	r7, r0
 80055a2:	db01      	blt.n	80055a8 <_malloc_r+0x1c>
 80055a4:	42a9      	cmp	r1, r5
 80055a6:	d905      	bls.n	80055b4 <_malloc_r+0x28>
 80055a8:	230c      	movs	r3, #12
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	2600      	movs	r6, #0
 80055ae:	4630      	mov	r0, r6
 80055b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005688 <_malloc_r+0xfc>
 80055b8:	f000 f868 	bl	800568c <__malloc_lock>
 80055bc:	f8d8 3000 	ldr.w	r3, [r8]
 80055c0:	461c      	mov	r4, r3
 80055c2:	bb5c      	cbnz	r4, 800561c <_malloc_r+0x90>
 80055c4:	4629      	mov	r1, r5
 80055c6:	4638      	mov	r0, r7
 80055c8:	f7ff ffc0 	bl	800554c <sbrk_aligned>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	4604      	mov	r4, r0
 80055d0:	d155      	bne.n	800567e <_malloc_r+0xf2>
 80055d2:	f8d8 4000 	ldr.w	r4, [r8]
 80055d6:	4626      	mov	r6, r4
 80055d8:	2e00      	cmp	r6, #0
 80055da:	d145      	bne.n	8005668 <_malloc_r+0xdc>
 80055dc:	2c00      	cmp	r4, #0
 80055de:	d048      	beq.n	8005672 <_malloc_r+0xe6>
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	4631      	mov	r1, r6
 80055e4:	4638      	mov	r0, r7
 80055e6:	eb04 0903 	add.w	r9, r4, r3
 80055ea:	f000 fa9f 	bl	8005b2c <_sbrk_r>
 80055ee:	4581      	cmp	r9, r0
 80055f0:	d13f      	bne.n	8005672 <_malloc_r+0xe6>
 80055f2:	6821      	ldr	r1, [r4, #0]
 80055f4:	1a6d      	subs	r5, r5, r1
 80055f6:	4629      	mov	r1, r5
 80055f8:	4638      	mov	r0, r7
 80055fa:	f7ff ffa7 	bl	800554c <sbrk_aligned>
 80055fe:	3001      	adds	r0, #1
 8005600:	d037      	beq.n	8005672 <_malloc_r+0xe6>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	442b      	add	r3, r5
 8005606:	6023      	str	r3, [r4, #0]
 8005608:	f8d8 3000 	ldr.w	r3, [r8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d038      	beq.n	8005682 <_malloc_r+0xf6>
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	42a2      	cmp	r2, r4
 8005614:	d12b      	bne.n	800566e <_malloc_r+0xe2>
 8005616:	2200      	movs	r2, #0
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	e00f      	b.n	800563c <_malloc_r+0xb0>
 800561c:	6822      	ldr	r2, [r4, #0]
 800561e:	1b52      	subs	r2, r2, r5
 8005620:	d41f      	bmi.n	8005662 <_malloc_r+0xd6>
 8005622:	2a0b      	cmp	r2, #11
 8005624:	d917      	bls.n	8005656 <_malloc_r+0xca>
 8005626:	1961      	adds	r1, r4, r5
 8005628:	42a3      	cmp	r3, r4
 800562a:	6025      	str	r5, [r4, #0]
 800562c:	bf18      	it	ne
 800562e:	6059      	strne	r1, [r3, #4]
 8005630:	6863      	ldr	r3, [r4, #4]
 8005632:	bf08      	it	eq
 8005634:	f8c8 1000 	streq.w	r1, [r8]
 8005638:	5162      	str	r2, [r4, r5]
 800563a:	604b      	str	r3, [r1, #4]
 800563c:	4638      	mov	r0, r7
 800563e:	f104 060b 	add.w	r6, r4, #11
 8005642:	f000 f829 	bl	8005698 <__malloc_unlock>
 8005646:	f026 0607 	bic.w	r6, r6, #7
 800564a:	1d23      	adds	r3, r4, #4
 800564c:	1af2      	subs	r2, r6, r3
 800564e:	d0ae      	beq.n	80055ae <_malloc_r+0x22>
 8005650:	1b9b      	subs	r3, r3, r6
 8005652:	50a3      	str	r3, [r4, r2]
 8005654:	e7ab      	b.n	80055ae <_malloc_r+0x22>
 8005656:	42a3      	cmp	r3, r4
 8005658:	6862      	ldr	r2, [r4, #4]
 800565a:	d1dd      	bne.n	8005618 <_malloc_r+0x8c>
 800565c:	f8c8 2000 	str.w	r2, [r8]
 8005660:	e7ec      	b.n	800563c <_malloc_r+0xb0>
 8005662:	4623      	mov	r3, r4
 8005664:	6864      	ldr	r4, [r4, #4]
 8005666:	e7ac      	b.n	80055c2 <_malloc_r+0x36>
 8005668:	4634      	mov	r4, r6
 800566a:	6876      	ldr	r6, [r6, #4]
 800566c:	e7b4      	b.n	80055d8 <_malloc_r+0x4c>
 800566e:	4613      	mov	r3, r2
 8005670:	e7cc      	b.n	800560c <_malloc_r+0x80>
 8005672:	230c      	movs	r3, #12
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4638      	mov	r0, r7
 8005678:	f000 f80e 	bl	8005698 <__malloc_unlock>
 800567c:	e797      	b.n	80055ae <_malloc_r+0x22>
 800567e:	6025      	str	r5, [r4, #0]
 8005680:	e7dc      	b.n	800563c <_malloc_r+0xb0>
 8005682:	605b      	str	r3, [r3, #4]
 8005684:	deff      	udf	#255	; 0xff
 8005686:	bf00      	nop
 8005688:	20000290 	.word	0x20000290

0800568c <__malloc_lock>:
 800568c:	4801      	ldr	r0, [pc, #4]	; (8005694 <__malloc_lock+0x8>)
 800568e:	f000 ba9a 	b.w	8005bc6 <__retarget_lock_acquire_recursive>
 8005692:	bf00      	nop
 8005694:	200003d8 	.word	0x200003d8

08005698 <__malloc_unlock>:
 8005698:	4801      	ldr	r0, [pc, #4]	; (80056a0 <__malloc_unlock+0x8>)
 800569a:	f000 ba95 	b.w	8005bc8 <__retarget_lock_release_recursive>
 800569e:	bf00      	nop
 80056a0:	200003d8 	.word	0x200003d8

080056a4 <std>:
 80056a4:	2300      	movs	r3, #0
 80056a6:	b510      	push	{r4, lr}
 80056a8:	4604      	mov	r4, r0
 80056aa:	e9c0 3300 	strd	r3, r3, [r0]
 80056ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056b2:	6083      	str	r3, [r0, #8]
 80056b4:	8181      	strh	r1, [r0, #12]
 80056b6:	6643      	str	r3, [r0, #100]	; 0x64
 80056b8:	81c2      	strh	r2, [r0, #14]
 80056ba:	6183      	str	r3, [r0, #24]
 80056bc:	4619      	mov	r1, r3
 80056be:	2208      	movs	r2, #8
 80056c0:	305c      	adds	r0, #92	; 0x5c
 80056c2:	f000 f9f7 	bl	8005ab4 <memset>
 80056c6:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <std+0x58>)
 80056c8:	6263      	str	r3, [r4, #36]	; 0x24
 80056ca:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <std+0x5c>)
 80056cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80056ce:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <std+0x60>)
 80056d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056d2:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <std+0x64>)
 80056d4:	6323      	str	r3, [r4, #48]	; 0x30
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <std+0x68>)
 80056d8:	6224      	str	r4, [r4, #32]
 80056da:	429c      	cmp	r4, r3
 80056dc:	d006      	beq.n	80056ec <std+0x48>
 80056de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80056e2:	4294      	cmp	r4, r2
 80056e4:	d002      	beq.n	80056ec <std+0x48>
 80056e6:	33d0      	adds	r3, #208	; 0xd0
 80056e8:	429c      	cmp	r4, r3
 80056ea:	d105      	bne.n	80056f8 <std+0x54>
 80056ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f4:	f000 ba66 	b.w	8005bc4 <__retarget_lock_init_recursive>
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	bf00      	nop
 80056fc:	08005905 	.word	0x08005905
 8005700:	08005927 	.word	0x08005927
 8005704:	0800595f 	.word	0x0800595f
 8005708:	08005983 	.word	0x08005983
 800570c:	20000298 	.word	0x20000298

08005710 <stdio_exit_handler>:
 8005710:	4a02      	ldr	r2, [pc, #8]	; (800571c <stdio_exit_handler+0xc>)
 8005712:	4903      	ldr	r1, [pc, #12]	; (8005720 <stdio_exit_handler+0x10>)
 8005714:	4803      	ldr	r0, [pc, #12]	; (8005724 <stdio_exit_handler+0x14>)
 8005716:	f000 b869 	b.w	80057ec <_fwalk_sglue>
 800571a:	bf00      	nop
 800571c:	20000040 	.word	0x20000040
 8005720:	08006319 	.word	0x08006319
 8005724:	2000004c 	.word	0x2000004c

08005728 <cleanup_stdio>:
 8005728:	6841      	ldr	r1, [r0, #4]
 800572a:	4b0c      	ldr	r3, [pc, #48]	; (800575c <cleanup_stdio+0x34>)
 800572c:	4299      	cmp	r1, r3
 800572e:	b510      	push	{r4, lr}
 8005730:	4604      	mov	r4, r0
 8005732:	d001      	beq.n	8005738 <cleanup_stdio+0x10>
 8005734:	f000 fdf0 	bl	8006318 <_fflush_r>
 8005738:	68a1      	ldr	r1, [r4, #8]
 800573a:	4b09      	ldr	r3, [pc, #36]	; (8005760 <cleanup_stdio+0x38>)
 800573c:	4299      	cmp	r1, r3
 800573e:	d002      	beq.n	8005746 <cleanup_stdio+0x1e>
 8005740:	4620      	mov	r0, r4
 8005742:	f000 fde9 	bl	8006318 <_fflush_r>
 8005746:	68e1      	ldr	r1, [r4, #12]
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <cleanup_stdio+0x3c>)
 800574a:	4299      	cmp	r1, r3
 800574c:	d004      	beq.n	8005758 <cleanup_stdio+0x30>
 800574e:	4620      	mov	r0, r4
 8005750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005754:	f000 bde0 	b.w	8006318 <_fflush_r>
 8005758:	bd10      	pop	{r4, pc}
 800575a:	bf00      	nop
 800575c:	20000298 	.word	0x20000298
 8005760:	20000300 	.word	0x20000300
 8005764:	20000368 	.word	0x20000368

08005768 <global_stdio_init.part.0>:
 8005768:	b510      	push	{r4, lr}
 800576a:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <global_stdio_init.part.0+0x30>)
 800576c:	4c0b      	ldr	r4, [pc, #44]	; (800579c <global_stdio_init.part.0+0x34>)
 800576e:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <global_stdio_init.part.0+0x38>)
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	4620      	mov	r0, r4
 8005774:	2200      	movs	r2, #0
 8005776:	2104      	movs	r1, #4
 8005778:	f7ff ff94 	bl	80056a4 <std>
 800577c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005780:	2201      	movs	r2, #1
 8005782:	2109      	movs	r1, #9
 8005784:	f7ff ff8e 	bl	80056a4 <std>
 8005788:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800578c:	2202      	movs	r2, #2
 800578e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005792:	2112      	movs	r1, #18
 8005794:	f7ff bf86 	b.w	80056a4 <std>
 8005798:	200003d0 	.word	0x200003d0
 800579c:	20000298 	.word	0x20000298
 80057a0:	08005711 	.word	0x08005711

080057a4 <__sfp_lock_acquire>:
 80057a4:	4801      	ldr	r0, [pc, #4]	; (80057ac <__sfp_lock_acquire+0x8>)
 80057a6:	f000 ba0e 	b.w	8005bc6 <__retarget_lock_acquire_recursive>
 80057aa:	bf00      	nop
 80057ac:	200003d9 	.word	0x200003d9

080057b0 <__sfp_lock_release>:
 80057b0:	4801      	ldr	r0, [pc, #4]	; (80057b8 <__sfp_lock_release+0x8>)
 80057b2:	f000 ba09 	b.w	8005bc8 <__retarget_lock_release_recursive>
 80057b6:	bf00      	nop
 80057b8:	200003d9 	.word	0x200003d9

080057bc <__sinit>:
 80057bc:	b510      	push	{r4, lr}
 80057be:	4604      	mov	r4, r0
 80057c0:	f7ff fff0 	bl	80057a4 <__sfp_lock_acquire>
 80057c4:	6a23      	ldr	r3, [r4, #32]
 80057c6:	b11b      	cbz	r3, 80057d0 <__sinit+0x14>
 80057c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057cc:	f7ff bff0 	b.w	80057b0 <__sfp_lock_release>
 80057d0:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <__sinit+0x28>)
 80057d2:	6223      	str	r3, [r4, #32]
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <__sinit+0x2c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f5      	bne.n	80057c8 <__sinit+0xc>
 80057dc:	f7ff ffc4 	bl	8005768 <global_stdio_init.part.0>
 80057e0:	e7f2      	b.n	80057c8 <__sinit+0xc>
 80057e2:	bf00      	nop
 80057e4:	08005729 	.word	0x08005729
 80057e8:	200003d0 	.word	0x200003d0

080057ec <_fwalk_sglue>:
 80057ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f0:	4607      	mov	r7, r0
 80057f2:	4688      	mov	r8, r1
 80057f4:	4614      	mov	r4, r2
 80057f6:	2600      	movs	r6, #0
 80057f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057fc:	f1b9 0901 	subs.w	r9, r9, #1
 8005800:	d505      	bpl.n	800580e <_fwalk_sglue+0x22>
 8005802:	6824      	ldr	r4, [r4, #0]
 8005804:	2c00      	cmp	r4, #0
 8005806:	d1f7      	bne.n	80057f8 <_fwalk_sglue+0xc>
 8005808:	4630      	mov	r0, r6
 800580a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800580e:	89ab      	ldrh	r3, [r5, #12]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d907      	bls.n	8005824 <_fwalk_sglue+0x38>
 8005814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005818:	3301      	adds	r3, #1
 800581a:	d003      	beq.n	8005824 <_fwalk_sglue+0x38>
 800581c:	4629      	mov	r1, r5
 800581e:	4638      	mov	r0, r7
 8005820:	47c0      	blx	r8
 8005822:	4306      	orrs	r6, r0
 8005824:	3568      	adds	r5, #104	; 0x68
 8005826:	e7e9      	b.n	80057fc <_fwalk_sglue+0x10>

08005828 <iprintf>:
 8005828:	b40f      	push	{r0, r1, r2, r3}
 800582a:	b507      	push	{r0, r1, r2, lr}
 800582c:	4906      	ldr	r1, [pc, #24]	; (8005848 <iprintf+0x20>)
 800582e:	ab04      	add	r3, sp, #16
 8005830:	6808      	ldr	r0, [r1, #0]
 8005832:	f853 2b04 	ldr.w	r2, [r3], #4
 8005836:	6881      	ldr	r1, [r0, #8]
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	f000 fa3d 	bl	8005cb8 <_vfiprintf_r>
 800583e:	b003      	add	sp, #12
 8005840:	f85d eb04 	ldr.w	lr, [sp], #4
 8005844:	b004      	add	sp, #16
 8005846:	4770      	bx	lr
 8005848:	20000098 	.word	0x20000098

0800584c <_puts_r>:
 800584c:	6a03      	ldr	r3, [r0, #32]
 800584e:	b570      	push	{r4, r5, r6, lr}
 8005850:	6884      	ldr	r4, [r0, #8]
 8005852:	4605      	mov	r5, r0
 8005854:	460e      	mov	r6, r1
 8005856:	b90b      	cbnz	r3, 800585c <_puts_r+0x10>
 8005858:	f7ff ffb0 	bl	80057bc <__sinit>
 800585c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800585e:	07db      	lsls	r3, r3, #31
 8005860:	d405      	bmi.n	800586e <_puts_r+0x22>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	0598      	lsls	r0, r3, #22
 8005866:	d402      	bmi.n	800586e <_puts_r+0x22>
 8005868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800586a:	f000 f9ac 	bl	8005bc6 <__retarget_lock_acquire_recursive>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	0719      	lsls	r1, r3, #28
 8005872:	d513      	bpl.n	800589c <_puts_r+0x50>
 8005874:	6923      	ldr	r3, [r4, #16]
 8005876:	b18b      	cbz	r3, 800589c <_puts_r+0x50>
 8005878:	3e01      	subs	r6, #1
 800587a:	68a3      	ldr	r3, [r4, #8]
 800587c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005880:	3b01      	subs	r3, #1
 8005882:	60a3      	str	r3, [r4, #8]
 8005884:	b9e9      	cbnz	r1, 80058c2 <_puts_r+0x76>
 8005886:	2b00      	cmp	r3, #0
 8005888:	da2e      	bge.n	80058e8 <_puts_r+0x9c>
 800588a:	4622      	mov	r2, r4
 800588c:	210a      	movs	r1, #10
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f87b 	bl	800598a <__swbuf_r>
 8005894:	3001      	adds	r0, #1
 8005896:	d007      	beq.n	80058a8 <_puts_r+0x5c>
 8005898:	250a      	movs	r5, #10
 800589a:	e007      	b.n	80058ac <_puts_r+0x60>
 800589c:	4621      	mov	r1, r4
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f8b0 	bl	8005a04 <__swsetup_r>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d0e7      	beq.n	8005878 <_puts_r+0x2c>
 80058a8:	f04f 35ff 	mov.w	r5, #4294967295
 80058ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ae:	07da      	lsls	r2, r3, #31
 80058b0:	d405      	bmi.n	80058be <_puts_r+0x72>
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	059b      	lsls	r3, r3, #22
 80058b6:	d402      	bmi.n	80058be <_puts_r+0x72>
 80058b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ba:	f000 f985 	bl	8005bc8 <__retarget_lock_release_recursive>
 80058be:	4628      	mov	r0, r5
 80058c0:	bd70      	pop	{r4, r5, r6, pc}
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	da04      	bge.n	80058d0 <_puts_r+0x84>
 80058c6:	69a2      	ldr	r2, [r4, #24]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	dc06      	bgt.n	80058da <_puts_r+0x8e>
 80058cc:	290a      	cmp	r1, #10
 80058ce:	d004      	beq.n	80058da <_puts_r+0x8e>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	6022      	str	r2, [r4, #0]
 80058d6:	7019      	strb	r1, [r3, #0]
 80058d8:	e7cf      	b.n	800587a <_puts_r+0x2e>
 80058da:	4622      	mov	r2, r4
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 f854 	bl	800598a <__swbuf_r>
 80058e2:	3001      	adds	r0, #1
 80058e4:	d1c9      	bne.n	800587a <_puts_r+0x2e>
 80058e6:	e7df      	b.n	80058a8 <_puts_r+0x5c>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	250a      	movs	r5, #10
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	6022      	str	r2, [r4, #0]
 80058f0:	701d      	strb	r5, [r3, #0]
 80058f2:	e7db      	b.n	80058ac <_puts_r+0x60>

080058f4 <puts>:
 80058f4:	4b02      	ldr	r3, [pc, #8]	; (8005900 <puts+0xc>)
 80058f6:	4601      	mov	r1, r0
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	f7ff bfa7 	b.w	800584c <_puts_r>
 80058fe:	bf00      	nop
 8005900:	20000098 	.word	0x20000098

08005904 <__sread>:
 8005904:	b510      	push	{r4, lr}
 8005906:	460c      	mov	r4, r1
 8005908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590c:	f000 f8fc 	bl	8005b08 <_read_r>
 8005910:	2800      	cmp	r0, #0
 8005912:	bfab      	itete	ge
 8005914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005916:	89a3      	ldrhlt	r3, [r4, #12]
 8005918:	181b      	addge	r3, r3, r0
 800591a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800591e:	bfac      	ite	ge
 8005920:	6563      	strge	r3, [r4, #84]	; 0x54
 8005922:	81a3      	strhlt	r3, [r4, #12]
 8005924:	bd10      	pop	{r4, pc}

08005926 <__swrite>:
 8005926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592a:	461f      	mov	r7, r3
 800592c:	898b      	ldrh	r3, [r1, #12]
 800592e:	05db      	lsls	r3, r3, #23
 8005930:	4605      	mov	r5, r0
 8005932:	460c      	mov	r4, r1
 8005934:	4616      	mov	r6, r2
 8005936:	d505      	bpl.n	8005944 <__swrite+0x1e>
 8005938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593c:	2302      	movs	r3, #2
 800593e:	2200      	movs	r2, #0
 8005940:	f000 f8d0 	bl	8005ae4 <_lseek_r>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800594a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	4632      	mov	r2, r6
 8005952:	463b      	mov	r3, r7
 8005954:	4628      	mov	r0, r5
 8005956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800595a:	f000 b8f7 	b.w	8005b4c <_write_r>

0800595e <__sseek>:
 800595e:	b510      	push	{r4, lr}
 8005960:	460c      	mov	r4, r1
 8005962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005966:	f000 f8bd 	bl	8005ae4 <_lseek_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	bf15      	itete	ne
 8005970:	6560      	strne	r0, [r4, #84]	; 0x54
 8005972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800597a:	81a3      	strheq	r3, [r4, #12]
 800597c:	bf18      	it	ne
 800597e:	81a3      	strhne	r3, [r4, #12]
 8005980:	bd10      	pop	{r4, pc}

08005982 <__sclose>:
 8005982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005986:	f000 b89d 	b.w	8005ac4 <_close_r>

0800598a <__swbuf_r>:
 800598a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598c:	460e      	mov	r6, r1
 800598e:	4614      	mov	r4, r2
 8005990:	4605      	mov	r5, r0
 8005992:	b118      	cbz	r0, 800599c <__swbuf_r+0x12>
 8005994:	6a03      	ldr	r3, [r0, #32]
 8005996:	b90b      	cbnz	r3, 800599c <__swbuf_r+0x12>
 8005998:	f7ff ff10 	bl	80057bc <__sinit>
 800599c:	69a3      	ldr	r3, [r4, #24]
 800599e:	60a3      	str	r3, [r4, #8]
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	071a      	lsls	r2, r3, #28
 80059a4:	d525      	bpl.n	80059f2 <__swbuf_r+0x68>
 80059a6:	6923      	ldr	r3, [r4, #16]
 80059a8:	b31b      	cbz	r3, 80059f2 <__swbuf_r+0x68>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	6922      	ldr	r2, [r4, #16]
 80059ae:	1a98      	subs	r0, r3, r2
 80059b0:	6963      	ldr	r3, [r4, #20]
 80059b2:	b2f6      	uxtb	r6, r6
 80059b4:	4283      	cmp	r3, r0
 80059b6:	4637      	mov	r7, r6
 80059b8:	dc04      	bgt.n	80059c4 <__swbuf_r+0x3a>
 80059ba:	4621      	mov	r1, r4
 80059bc:	4628      	mov	r0, r5
 80059be:	f000 fcab 	bl	8006318 <_fflush_r>
 80059c2:	b9e0      	cbnz	r0, 80059fe <__swbuf_r+0x74>
 80059c4:	68a3      	ldr	r3, [r4, #8]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	6022      	str	r2, [r4, #0]
 80059d0:	701e      	strb	r6, [r3, #0]
 80059d2:	6962      	ldr	r2, [r4, #20]
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d004      	beq.n	80059e4 <__swbuf_r+0x5a>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	07db      	lsls	r3, r3, #31
 80059de:	d506      	bpl.n	80059ee <__swbuf_r+0x64>
 80059e0:	2e0a      	cmp	r6, #10
 80059e2:	d104      	bne.n	80059ee <__swbuf_r+0x64>
 80059e4:	4621      	mov	r1, r4
 80059e6:	4628      	mov	r0, r5
 80059e8:	f000 fc96 	bl	8006318 <_fflush_r>
 80059ec:	b938      	cbnz	r0, 80059fe <__swbuf_r+0x74>
 80059ee:	4638      	mov	r0, r7
 80059f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f2:	4621      	mov	r1, r4
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 f805 	bl	8005a04 <__swsetup_r>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d0d5      	beq.n	80059aa <__swbuf_r+0x20>
 80059fe:	f04f 37ff 	mov.w	r7, #4294967295
 8005a02:	e7f4      	b.n	80059ee <__swbuf_r+0x64>

08005a04 <__swsetup_r>:
 8005a04:	b538      	push	{r3, r4, r5, lr}
 8005a06:	4b2a      	ldr	r3, [pc, #168]	; (8005ab0 <__swsetup_r+0xac>)
 8005a08:	4605      	mov	r5, r0
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	b118      	cbz	r0, 8005a18 <__swsetup_r+0x14>
 8005a10:	6a03      	ldr	r3, [r0, #32]
 8005a12:	b90b      	cbnz	r3, 8005a18 <__swsetup_r+0x14>
 8005a14:	f7ff fed2 	bl	80057bc <__sinit>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a1e:	0718      	lsls	r0, r3, #28
 8005a20:	d422      	bmi.n	8005a68 <__swsetup_r+0x64>
 8005a22:	06d9      	lsls	r1, r3, #27
 8005a24:	d407      	bmi.n	8005a36 <__swsetup_r+0x32>
 8005a26:	2309      	movs	r3, #9
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a2e:	81a3      	strh	r3, [r4, #12]
 8005a30:	f04f 30ff 	mov.w	r0, #4294967295
 8005a34:	e034      	b.n	8005aa0 <__swsetup_r+0x9c>
 8005a36:	0758      	lsls	r0, r3, #29
 8005a38:	d512      	bpl.n	8005a60 <__swsetup_r+0x5c>
 8005a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a3c:	b141      	cbz	r1, 8005a50 <__swsetup_r+0x4c>
 8005a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a42:	4299      	cmp	r1, r3
 8005a44:	d002      	beq.n	8005a4c <__swsetup_r+0x48>
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 f8c0 	bl	8005bcc <_free_r>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	6363      	str	r3, [r4, #52]	; 0x34
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6063      	str	r3, [r4, #4]
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	f043 0308 	orr.w	r3, r3, #8
 8005a66:	81a3      	strh	r3, [r4, #12]
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	b94b      	cbnz	r3, 8005a80 <__swsetup_r+0x7c>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a76:	d003      	beq.n	8005a80 <__swsetup_r+0x7c>
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 fc9a 	bl	80063b4 <__smakebuf_r>
 8005a80:	89a0      	ldrh	r0, [r4, #12]
 8005a82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a86:	f010 0301 	ands.w	r3, r0, #1
 8005a8a:	d00a      	beq.n	8005aa2 <__swsetup_r+0x9e>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60a3      	str	r3, [r4, #8]
 8005a90:	6963      	ldr	r3, [r4, #20]
 8005a92:	425b      	negs	r3, r3
 8005a94:	61a3      	str	r3, [r4, #24]
 8005a96:	6923      	ldr	r3, [r4, #16]
 8005a98:	b943      	cbnz	r3, 8005aac <__swsetup_r+0xa8>
 8005a9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a9e:	d1c4      	bne.n	8005a2a <__swsetup_r+0x26>
 8005aa0:	bd38      	pop	{r3, r4, r5, pc}
 8005aa2:	0781      	lsls	r1, r0, #30
 8005aa4:	bf58      	it	pl
 8005aa6:	6963      	ldrpl	r3, [r4, #20]
 8005aa8:	60a3      	str	r3, [r4, #8]
 8005aaa:	e7f4      	b.n	8005a96 <__swsetup_r+0x92>
 8005aac:	2000      	movs	r0, #0
 8005aae:	e7f7      	b.n	8005aa0 <__swsetup_r+0x9c>
 8005ab0:	20000098 	.word	0x20000098

08005ab4 <memset>:
 8005ab4:	4402      	add	r2, r0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d100      	bne.n	8005abe <memset+0xa>
 8005abc:	4770      	bx	lr
 8005abe:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac2:	e7f9      	b.n	8005ab8 <memset+0x4>

08005ac4 <_close_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d06      	ldr	r5, [pc, #24]	; (8005ae0 <_close_r+0x1c>)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	f7fb fcb3 	bl	800143a <_close>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_close_r+0x1a>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_close_r+0x1a>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	200003d4 	.word	0x200003d4

08005ae4 <_lseek_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4d07      	ldr	r5, [pc, #28]	; (8005b04 <_lseek_r+0x20>)
 8005ae8:	4604      	mov	r4, r0
 8005aea:	4608      	mov	r0, r1
 8005aec:	4611      	mov	r1, r2
 8005aee:	2200      	movs	r2, #0
 8005af0:	602a      	str	r2, [r5, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f7fb fcc8 	bl	8001488 <_lseek>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_lseek_r+0x1e>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_lseek_r+0x1e>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	200003d4 	.word	0x200003d4

08005b08 <_read_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d07      	ldr	r5, [pc, #28]	; (8005b28 <_read_r+0x20>)
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	4608      	mov	r0, r1
 8005b10:	4611      	mov	r1, r2
 8005b12:	2200      	movs	r2, #0
 8005b14:	602a      	str	r2, [r5, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f7fb fc56 	bl	80013c8 <_read>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_read_r+0x1e>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_read_r+0x1e>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	200003d4 	.word	0x200003d4

08005b2c <_sbrk_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d06      	ldr	r5, [pc, #24]	; (8005b48 <_sbrk_r+0x1c>)
 8005b30:	2300      	movs	r3, #0
 8005b32:	4604      	mov	r4, r0
 8005b34:	4608      	mov	r0, r1
 8005b36:	602b      	str	r3, [r5, #0]
 8005b38:	f7fb fcb4 	bl	80014a4 <_sbrk>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d102      	bne.n	8005b46 <_sbrk_r+0x1a>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	b103      	cbz	r3, 8005b46 <_sbrk_r+0x1a>
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
 8005b48:	200003d4 	.word	0x200003d4

08005b4c <_write_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4d07      	ldr	r5, [pc, #28]	; (8005b6c <_write_r+0x20>)
 8005b50:	4604      	mov	r4, r0
 8005b52:	4608      	mov	r0, r1
 8005b54:	4611      	mov	r1, r2
 8005b56:	2200      	movs	r2, #0
 8005b58:	602a      	str	r2, [r5, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f7fb fc51 	bl	8001402 <_write>
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	d102      	bne.n	8005b6a <_write_r+0x1e>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	b103      	cbz	r3, 8005b6a <_write_r+0x1e>
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
 8005b6c:	200003d4 	.word	0x200003d4

08005b70 <__errno>:
 8005b70:	4b01      	ldr	r3, [pc, #4]	; (8005b78 <__errno+0x8>)
 8005b72:	6818      	ldr	r0, [r3, #0]
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000098 	.word	0x20000098

08005b7c <__libc_init_array>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	4d0d      	ldr	r5, [pc, #52]	; (8005bb4 <__libc_init_array+0x38>)
 8005b80:	4c0d      	ldr	r4, [pc, #52]	; (8005bb8 <__libc_init_array+0x3c>)
 8005b82:	1b64      	subs	r4, r4, r5
 8005b84:	10a4      	asrs	r4, r4, #2
 8005b86:	2600      	movs	r6, #0
 8005b88:	42a6      	cmp	r6, r4
 8005b8a:	d109      	bne.n	8005ba0 <__libc_init_array+0x24>
 8005b8c:	4d0b      	ldr	r5, [pc, #44]	; (8005bbc <__libc_init_array+0x40>)
 8005b8e:	4c0c      	ldr	r4, [pc, #48]	; (8005bc0 <__libc_init_array+0x44>)
 8005b90:	f000 fc6e 	bl	8006470 <_init>
 8005b94:	1b64      	subs	r4, r4, r5
 8005b96:	10a4      	asrs	r4, r4, #2
 8005b98:	2600      	movs	r6, #0
 8005b9a:	42a6      	cmp	r6, r4
 8005b9c:	d105      	bne.n	8005baa <__libc_init_array+0x2e>
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba4:	4798      	blx	r3
 8005ba6:	3601      	adds	r6, #1
 8005ba8:	e7ee      	b.n	8005b88 <__libc_init_array+0xc>
 8005baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bae:	4798      	blx	r3
 8005bb0:	3601      	adds	r6, #1
 8005bb2:	e7f2      	b.n	8005b9a <__libc_init_array+0x1e>
 8005bb4:	08006b70 	.word	0x08006b70
 8005bb8:	08006b70 	.word	0x08006b70
 8005bbc:	08006b70 	.word	0x08006b70
 8005bc0:	08006b74 	.word	0x08006b74

08005bc4 <__retarget_lock_init_recursive>:
 8005bc4:	4770      	bx	lr

08005bc6 <__retarget_lock_acquire_recursive>:
 8005bc6:	4770      	bx	lr

08005bc8 <__retarget_lock_release_recursive>:
 8005bc8:	4770      	bx	lr
	...

08005bcc <_free_r>:
 8005bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bce:	2900      	cmp	r1, #0
 8005bd0:	d044      	beq.n	8005c5c <_free_r+0x90>
 8005bd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bd6:	9001      	str	r0, [sp, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f1a1 0404 	sub.w	r4, r1, #4
 8005bde:	bfb8      	it	lt
 8005be0:	18e4      	addlt	r4, r4, r3
 8005be2:	f7ff fd53 	bl	800568c <__malloc_lock>
 8005be6:	4a1e      	ldr	r2, [pc, #120]	; (8005c60 <_free_r+0x94>)
 8005be8:	9801      	ldr	r0, [sp, #4]
 8005bea:	6813      	ldr	r3, [r2, #0]
 8005bec:	b933      	cbnz	r3, 8005bfc <_free_r+0x30>
 8005bee:	6063      	str	r3, [r4, #4]
 8005bf0:	6014      	str	r4, [r2, #0]
 8005bf2:	b003      	add	sp, #12
 8005bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bf8:	f7ff bd4e 	b.w	8005698 <__malloc_unlock>
 8005bfc:	42a3      	cmp	r3, r4
 8005bfe:	d908      	bls.n	8005c12 <_free_r+0x46>
 8005c00:	6825      	ldr	r5, [r4, #0]
 8005c02:	1961      	adds	r1, r4, r5
 8005c04:	428b      	cmp	r3, r1
 8005c06:	bf01      	itttt	eq
 8005c08:	6819      	ldreq	r1, [r3, #0]
 8005c0a:	685b      	ldreq	r3, [r3, #4]
 8005c0c:	1949      	addeq	r1, r1, r5
 8005c0e:	6021      	streq	r1, [r4, #0]
 8005c10:	e7ed      	b.n	8005bee <_free_r+0x22>
 8005c12:	461a      	mov	r2, r3
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	b10b      	cbz	r3, 8005c1c <_free_r+0x50>
 8005c18:	42a3      	cmp	r3, r4
 8005c1a:	d9fa      	bls.n	8005c12 <_free_r+0x46>
 8005c1c:	6811      	ldr	r1, [r2, #0]
 8005c1e:	1855      	adds	r5, r2, r1
 8005c20:	42a5      	cmp	r5, r4
 8005c22:	d10b      	bne.n	8005c3c <_free_r+0x70>
 8005c24:	6824      	ldr	r4, [r4, #0]
 8005c26:	4421      	add	r1, r4
 8005c28:	1854      	adds	r4, r2, r1
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	6011      	str	r1, [r2, #0]
 8005c2e:	d1e0      	bne.n	8005bf2 <_free_r+0x26>
 8005c30:	681c      	ldr	r4, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	6053      	str	r3, [r2, #4]
 8005c36:	440c      	add	r4, r1
 8005c38:	6014      	str	r4, [r2, #0]
 8005c3a:	e7da      	b.n	8005bf2 <_free_r+0x26>
 8005c3c:	d902      	bls.n	8005c44 <_free_r+0x78>
 8005c3e:	230c      	movs	r3, #12
 8005c40:	6003      	str	r3, [r0, #0]
 8005c42:	e7d6      	b.n	8005bf2 <_free_r+0x26>
 8005c44:	6825      	ldr	r5, [r4, #0]
 8005c46:	1961      	adds	r1, r4, r5
 8005c48:	428b      	cmp	r3, r1
 8005c4a:	bf04      	itt	eq
 8005c4c:	6819      	ldreq	r1, [r3, #0]
 8005c4e:	685b      	ldreq	r3, [r3, #4]
 8005c50:	6063      	str	r3, [r4, #4]
 8005c52:	bf04      	itt	eq
 8005c54:	1949      	addeq	r1, r1, r5
 8005c56:	6021      	streq	r1, [r4, #0]
 8005c58:	6054      	str	r4, [r2, #4]
 8005c5a:	e7ca      	b.n	8005bf2 <_free_r+0x26>
 8005c5c:	b003      	add	sp, #12
 8005c5e:	bd30      	pop	{r4, r5, pc}
 8005c60:	20000290 	.word	0x20000290

08005c64 <__sfputc_r>:
 8005c64:	6893      	ldr	r3, [r2, #8]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	b410      	push	{r4}
 8005c6c:	6093      	str	r3, [r2, #8]
 8005c6e:	da08      	bge.n	8005c82 <__sfputc_r+0x1e>
 8005c70:	6994      	ldr	r4, [r2, #24]
 8005c72:	42a3      	cmp	r3, r4
 8005c74:	db01      	blt.n	8005c7a <__sfputc_r+0x16>
 8005c76:	290a      	cmp	r1, #10
 8005c78:	d103      	bne.n	8005c82 <__sfputc_r+0x1e>
 8005c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c7e:	f7ff be84 	b.w	800598a <__swbuf_r>
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	1c58      	adds	r0, r3, #1
 8005c86:	6010      	str	r0, [r2, #0]
 8005c88:	7019      	strb	r1, [r3, #0]
 8005c8a:	4608      	mov	r0, r1
 8005c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <__sfputs_r>:
 8005c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c94:	4606      	mov	r6, r0
 8005c96:	460f      	mov	r7, r1
 8005c98:	4614      	mov	r4, r2
 8005c9a:	18d5      	adds	r5, r2, r3
 8005c9c:	42ac      	cmp	r4, r5
 8005c9e:	d101      	bne.n	8005ca4 <__sfputs_r+0x12>
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	e007      	b.n	8005cb4 <__sfputs_r+0x22>
 8005ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca8:	463a      	mov	r2, r7
 8005caa:	4630      	mov	r0, r6
 8005cac:	f7ff ffda 	bl	8005c64 <__sfputc_r>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d1f3      	bne.n	8005c9c <__sfputs_r+0xa>
 8005cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cb8 <_vfiprintf_r>:
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	460d      	mov	r5, r1
 8005cbe:	b09d      	sub	sp, #116	; 0x74
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	4698      	mov	r8, r3
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	b118      	cbz	r0, 8005cd0 <_vfiprintf_r+0x18>
 8005cc8:	6a03      	ldr	r3, [r0, #32]
 8005cca:	b90b      	cbnz	r3, 8005cd0 <_vfiprintf_r+0x18>
 8005ccc:	f7ff fd76 	bl	80057bc <__sinit>
 8005cd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cd2:	07d9      	lsls	r1, r3, #31
 8005cd4:	d405      	bmi.n	8005ce2 <_vfiprintf_r+0x2a>
 8005cd6:	89ab      	ldrh	r3, [r5, #12]
 8005cd8:	059a      	lsls	r2, r3, #22
 8005cda:	d402      	bmi.n	8005ce2 <_vfiprintf_r+0x2a>
 8005cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cde:	f7ff ff72 	bl	8005bc6 <__retarget_lock_acquire_recursive>
 8005ce2:	89ab      	ldrh	r3, [r5, #12]
 8005ce4:	071b      	lsls	r3, r3, #28
 8005ce6:	d501      	bpl.n	8005cec <_vfiprintf_r+0x34>
 8005ce8:	692b      	ldr	r3, [r5, #16]
 8005cea:	b99b      	cbnz	r3, 8005d14 <_vfiprintf_r+0x5c>
 8005cec:	4629      	mov	r1, r5
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f7ff fe88 	bl	8005a04 <__swsetup_r>
 8005cf4:	b170      	cbz	r0, 8005d14 <_vfiprintf_r+0x5c>
 8005cf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cf8:	07dc      	lsls	r4, r3, #31
 8005cfa:	d504      	bpl.n	8005d06 <_vfiprintf_r+0x4e>
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005d00:	b01d      	add	sp, #116	; 0x74
 8005d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d06:	89ab      	ldrh	r3, [r5, #12]
 8005d08:	0598      	lsls	r0, r3, #22
 8005d0a:	d4f7      	bmi.n	8005cfc <_vfiprintf_r+0x44>
 8005d0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d0e:	f7ff ff5b 	bl	8005bc8 <__retarget_lock_release_recursive>
 8005d12:	e7f3      	b.n	8005cfc <_vfiprintf_r+0x44>
 8005d14:	2300      	movs	r3, #0
 8005d16:	9309      	str	r3, [sp, #36]	; 0x24
 8005d18:	2320      	movs	r3, #32
 8005d1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d22:	2330      	movs	r3, #48	; 0x30
 8005d24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005ed8 <_vfiprintf_r+0x220>
 8005d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d2c:	f04f 0901 	mov.w	r9, #1
 8005d30:	4623      	mov	r3, r4
 8005d32:	469a      	mov	sl, r3
 8005d34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d38:	b10a      	cbz	r2, 8005d3e <_vfiprintf_r+0x86>
 8005d3a:	2a25      	cmp	r2, #37	; 0x25
 8005d3c:	d1f9      	bne.n	8005d32 <_vfiprintf_r+0x7a>
 8005d3e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d42:	d00b      	beq.n	8005d5c <_vfiprintf_r+0xa4>
 8005d44:	465b      	mov	r3, fp
 8005d46:	4622      	mov	r2, r4
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7ff ffa1 	bl	8005c92 <__sfputs_r>
 8005d50:	3001      	adds	r0, #1
 8005d52:	f000 80a9 	beq.w	8005ea8 <_vfiprintf_r+0x1f0>
 8005d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d58:	445a      	add	r2, fp
 8005d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80a1 	beq.w	8005ea8 <_vfiprintf_r+0x1f0>
 8005d66:	2300      	movs	r3, #0
 8005d68:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d70:	f10a 0a01 	add.w	sl, sl, #1
 8005d74:	9304      	str	r3, [sp, #16]
 8005d76:	9307      	str	r3, [sp, #28]
 8005d78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d7e:	4654      	mov	r4, sl
 8005d80:	2205      	movs	r2, #5
 8005d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d86:	4854      	ldr	r0, [pc, #336]	; (8005ed8 <_vfiprintf_r+0x220>)
 8005d88:	f7fa fa22 	bl	80001d0 <memchr>
 8005d8c:	9a04      	ldr	r2, [sp, #16]
 8005d8e:	b9d8      	cbnz	r0, 8005dc8 <_vfiprintf_r+0x110>
 8005d90:	06d1      	lsls	r1, r2, #27
 8005d92:	bf44      	itt	mi
 8005d94:	2320      	movmi	r3, #32
 8005d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d9a:	0713      	lsls	r3, r2, #28
 8005d9c:	bf44      	itt	mi
 8005d9e:	232b      	movmi	r3, #43	; 0x2b
 8005da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005da4:	f89a 3000 	ldrb.w	r3, [sl]
 8005da8:	2b2a      	cmp	r3, #42	; 0x2a
 8005daa:	d015      	beq.n	8005dd8 <_vfiprintf_r+0x120>
 8005dac:	9a07      	ldr	r2, [sp, #28]
 8005dae:	4654      	mov	r4, sl
 8005db0:	2000      	movs	r0, #0
 8005db2:	f04f 0c0a 	mov.w	ip, #10
 8005db6:	4621      	mov	r1, r4
 8005db8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dbc:	3b30      	subs	r3, #48	; 0x30
 8005dbe:	2b09      	cmp	r3, #9
 8005dc0:	d94d      	bls.n	8005e5e <_vfiprintf_r+0x1a6>
 8005dc2:	b1b0      	cbz	r0, 8005df2 <_vfiprintf_r+0x13a>
 8005dc4:	9207      	str	r2, [sp, #28]
 8005dc6:	e014      	b.n	8005df2 <_vfiprintf_r+0x13a>
 8005dc8:	eba0 0308 	sub.w	r3, r0, r8
 8005dcc:	fa09 f303 	lsl.w	r3, r9, r3
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	9304      	str	r3, [sp, #16]
 8005dd4:	46a2      	mov	sl, r4
 8005dd6:	e7d2      	b.n	8005d7e <_vfiprintf_r+0xc6>
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	1d19      	adds	r1, r3, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	9103      	str	r1, [sp, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	bfbb      	ittet	lt
 8005de4:	425b      	neglt	r3, r3
 8005de6:	f042 0202 	orrlt.w	r2, r2, #2
 8005dea:	9307      	strge	r3, [sp, #28]
 8005dec:	9307      	strlt	r3, [sp, #28]
 8005dee:	bfb8      	it	lt
 8005df0:	9204      	strlt	r2, [sp, #16]
 8005df2:	7823      	ldrb	r3, [r4, #0]
 8005df4:	2b2e      	cmp	r3, #46	; 0x2e
 8005df6:	d10c      	bne.n	8005e12 <_vfiprintf_r+0x15a>
 8005df8:	7863      	ldrb	r3, [r4, #1]
 8005dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005dfc:	d134      	bne.n	8005e68 <_vfiprintf_r+0x1b0>
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	1d1a      	adds	r2, r3, #4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	9203      	str	r2, [sp, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bfb8      	it	lt
 8005e0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e0e:	3402      	adds	r4, #2
 8005e10:	9305      	str	r3, [sp, #20]
 8005e12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005ee8 <_vfiprintf_r+0x230>
 8005e16:	7821      	ldrb	r1, [r4, #0]
 8005e18:	2203      	movs	r2, #3
 8005e1a:	4650      	mov	r0, sl
 8005e1c:	f7fa f9d8 	bl	80001d0 <memchr>
 8005e20:	b138      	cbz	r0, 8005e32 <_vfiprintf_r+0x17a>
 8005e22:	9b04      	ldr	r3, [sp, #16]
 8005e24:	eba0 000a 	sub.w	r0, r0, sl
 8005e28:	2240      	movs	r2, #64	; 0x40
 8005e2a:	4082      	lsls	r2, r0
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	3401      	adds	r4, #1
 8005e30:	9304      	str	r3, [sp, #16]
 8005e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e36:	4829      	ldr	r0, [pc, #164]	; (8005edc <_vfiprintf_r+0x224>)
 8005e38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e3c:	2206      	movs	r2, #6
 8005e3e:	f7fa f9c7 	bl	80001d0 <memchr>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d03f      	beq.n	8005ec6 <_vfiprintf_r+0x20e>
 8005e46:	4b26      	ldr	r3, [pc, #152]	; (8005ee0 <_vfiprintf_r+0x228>)
 8005e48:	bb1b      	cbnz	r3, 8005e92 <_vfiprintf_r+0x1da>
 8005e4a:	9b03      	ldr	r3, [sp, #12]
 8005e4c:	3307      	adds	r3, #7
 8005e4e:	f023 0307 	bic.w	r3, r3, #7
 8005e52:	3308      	adds	r3, #8
 8005e54:	9303      	str	r3, [sp, #12]
 8005e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e58:	443b      	add	r3, r7
 8005e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e5c:	e768      	b.n	8005d30 <_vfiprintf_r+0x78>
 8005e5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e62:	460c      	mov	r4, r1
 8005e64:	2001      	movs	r0, #1
 8005e66:	e7a6      	b.n	8005db6 <_vfiprintf_r+0xfe>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	3401      	adds	r4, #1
 8005e6c:	9305      	str	r3, [sp, #20]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	f04f 0c0a 	mov.w	ip, #10
 8005e74:	4620      	mov	r0, r4
 8005e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e7a:	3a30      	subs	r2, #48	; 0x30
 8005e7c:	2a09      	cmp	r2, #9
 8005e7e:	d903      	bls.n	8005e88 <_vfiprintf_r+0x1d0>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0c6      	beq.n	8005e12 <_vfiprintf_r+0x15a>
 8005e84:	9105      	str	r1, [sp, #20]
 8005e86:	e7c4      	b.n	8005e12 <_vfiprintf_r+0x15a>
 8005e88:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e7f0      	b.n	8005e74 <_vfiprintf_r+0x1bc>
 8005e92:	ab03      	add	r3, sp, #12
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	462a      	mov	r2, r5
 8005e98:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <_vfiprintf_r+0x22c>)
 8005e9a:	a904      	add	r1, sp, #16
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f3af 8000 	nop.w
 8005ea2:	4607      	mov	r7, r0
 8005ea4:	1c78      	adds	r0, r7, #1
 8005ea6:	d1d6      	bne.n	8005e56 <_vfiprintf_r+0x19e>
 8005ea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eaa:	07d9      	lsls	r1, r3, #31
 8005eac:	d405      	bmi.n	8005eba <_vfiprintf_r+0x202>
 8005eae:	89ab      	ldrh	r3, [r5, #12]
 8005eb0:	059a      	lsls	r2, r3, #22
 8005eb2:	d402      	bmi.n	8005eba <_vfiprintf_r+0x202>
 8005eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eb6:	f7ff fe87 	bl	8005bc8 <__retarget_lock_release_recursive>
 8005eba:	89ab      	ldrh	r3, [r5, #12]
 8005ebc:	065b      	lsls	r3, r3, #25
 8005ebe:	f53f af1d 	bmi.w	8005cfc <_vfiprintf_r+0x44>
 8005ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ec4:	e71c      	b.n	8005d00 <_vfiprintf_r+0x48>
 8005ec6:	ab03      	add	r3, sp, #12
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	462a      	mov	r2, r5
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <_vfiprintf_r+0x22c>)
 8005ece:	a904      	add	r1, sp, #16
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f000 f879 	bl	8005fc8 <_printf_i>
 8005ed6:	e7e4      	b.n	8005ea2 <_vfiprintf_r+0x1ea>
 8005ed8:	08006b34 	.word	0x08006b34
 8005edc:	08006b3e 	.word	0x08006b3e
 8005ee0:	00000000 	.word	0x00000000
 8005ee4:	08005c93 	.word	0x08005c93
 8005ee8:	08006b3a 	.word	0x08006b3a

08005eec <_printf_common>:
 8005eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef0:	4616      	mov	r6, r2
 8005ef2:	4699      	mov	r9, r3
 8005ef4:	688a      	ldr	r2, [r1, #8]
 8005ef6:	690b      	ldr	r3, [r1, #16]
 8005ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005efc:	4293      	cmp	r3, r2
 8005efe:	bfb8      	it	lt
 8005f00:	4613      	movlt	r3, r2
 8005f02:	6033      	str	r3, [r6, #0]
 8005f04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f08:	4607      	mov	r7, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	b10a      	cbz	r2, 8005f12 <_printf_common+0x26>
 8005f0e:	3301      	adds	r3, #1
 8005f10:	6033      	str	r3, [r6, #0]
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	0699      	lsls	r1, r3, #26
 8005f16:	bf42      	ittt	mi
 8005f18:	6833      	ldrmi	r3, [r6, #0]
 8005f1a:	3302      	addmi	r3, #2
 8005f1c:	6033      	strmi	r3, [r6, #0]
 8005f1e:	6825      	ldr	r5, [r4, #0]
 8005f20:	f015 0506 	ands.w	r5, r5, #6
 8005f24:	d106      	bne.n	8005f34 <_printf_common+0x48>
 8005f26:	f104 0a19 	add.w	sl, r4, #25
 8005f2a:	68e3      	ldr	r3, [r4, #12]
 8005f2c:	6832      	ldr	r2, [r6, #0]
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	42ab      	cmp	r3, r5
 8005f32:	dc26      	bgt.n	8005f82 <_printf_common+0x96>
 8005f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f38:	1e13      	subs	r3, r2, #0
 8005f3a:	6822      	ldr	r2, [r4, #0]
 8005f3c:	bf18      	it	ne
 8005f3e:	2301      	movne	r3, #1
 8005f40:	0692      	lsls	r2, r2, #26
 8005f42:	d42b      	bmi.n	8005f9c <_printf_common+0xb0>
 8005f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f48:	4649      	mov	r1, r9
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	47c0      	blx	r8
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d01e      	beq.n	8005f90 <_printf_common+0xa4>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	6922      	ldr	r2, [r4, #16]
 8005f56:	f003 0306 	and.w	r3, r3, #6
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	bf02      	ittt	eq
 8005f5e:	68e5      	ldreq	r5, [r4, #12]
 8005f60:	6833      	ldreq	r3, [r6, #0]
 8005f62:	1aed      	subeq	r5, r5, r3
 8005f64:	68a3      	ldr	r3, [r4, #8]
 8005f66:	bf0c      	ite	eq
 8005f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f6c:	2500      	movne	r5, #0
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	bfc4      	itt	gt
 8005f72:	1a9b      	subgt	r3, r3, r2
 8005f74:	18ed      	addgt	r5, r5, r3
 8005f76:	2600      	movs	r6, #0
 8005f78:	341a      	adds	r4, #26
 8005f7a:	42b5      	cmp	r5, r6
 8005f7c:	d11a      	bne.n	8005fb4 <_printf_common+0xc8>
 8005f7e:	2000      	movs	r0, #0
 8005f80:	e008      	b.n	8005f94 <_printf_common+0xa8>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4652      	mov	r2, sl
 8005f86:	4649      	mov	r1, r9
 8005f88:	4638      	mov	r0, r7
 8005f8a:	47c0      	blx	r8
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d103      	bne.n	8005f98 <_printf_common+0xac>
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295
 8005f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f98:	3501      	adds	r5, #1
 8005f9a:	e7c6      	b.n	8005f2a <_printf_common+0x3e>
 8005f9c:	18e1      	adds	r1, r4, r3
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	2030      	movs	r0, #48	; 0x30
 8005fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fa6:	4422      	add	r2, r4
 8005fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fb0:	3302      	adds	r3, #2
 8005fb2:	e7c7      	b.n	8005f44 <_printf_common+0x58>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4649      	mov	r1, r9
 8005fba:	4638      	mov	r0, r7
 8005fbc:	47c0      	blx	r8
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d0e6      	beq.n	8005f90 <_printf_common+0xa4>
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	e7d9      	b.n	8005f7a <_printf_common+0x8e>
	...

08005fc8 <_printf_i>:
 8005fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	7e0f      	ldrb	r7, [r1, #24]
 8005fce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fd0:	2f78      	cmp	r7, #120	; 0x78
 8005fd2:	4691      	mov	r9, r2
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	469a      	mov	sl, r3
 8005fda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fde:	d807      	bhi.n	8005ff0 <_printf_i+0x28>
 8005fe0:	2f62      	cmp	r7, #98	; 0x62
 8005fe2:	d80a      	bhi.n	8005ffa <_printf_i+0x32>
 8005fe4:	2f00      	cmp	r7, #0
 8005fe6:	f000 80d4 	beq.w	8006192 <_printf_i+0x1ca>
 8005fea:	2f58      	cmp	r7, #88	; 0x58
 8005fec:	f000 80c0 	beq.w	8006170 <_printf_i+0x1a8>
 8005ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ff8:	e03a      	b.n	8006070 <_printf_i+0xa8>
 8005ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ffe:	2b15      	cmp	r3, #21
 8006000:	d8f6      	bhi.n	8005ff0 <_printf_i+0x28>
 8006002:	a101      	add	r1, pc, #4	; (adr r1, 8006008 <_printf_i+0x40>)
 8006004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006008:	08006061 	.word	0x08006061
 800600c:	08006075 	.word	0x08006075
 8006010:	08005ff1 	.word	0x08005ff1
 8006014:	08005ff1 	.word	0x08005ff1
 8006018:	08005ff1 	.word	0x08005ff1
 800601c:	08005ff1 	.word	0x08005ff1
 8006020:	08006075 	.word	0x08006075
 8006024:	08005ff1 	.word	0x08005ff1
 8006028:	08005ff1 	.word	0x08005ff1
 800602c:	08005ff1 	.word	0x08005ff1
 8006030:	08005ff1 	.word	0x08005ff1
 8006034:	08006179 	.word	0x08006179
 8006038:	080060a1 	.word	0x080060a1
 800603c:	08006133 	.word	0x08006133
 8006040:	08005ff1 	.word	0x08005ff1
 8006044:	08005ff1 	.word	0x08005ff1
 8006048:	0800619b 	.word	0x0800619b
 800604c:	08005ff1 	.word	0x08005ff1
 8006050:	080060a1 	.word	0x080060a1
 8006054:	08005ff1 	.word	0x08005ff1
 8006058:	08005ff1 	.word	0x08005ff1
 800605c:	0800613b 	.word	0x0800613b
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	1d1a      	adds	r2, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	602a      	str	r2, [r5, #0]
 8006068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800606c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006070:	2301      	movs	r3, #1
 8006072:	e09f      	b.n	80061b4 <_printf_i+0x1ec>
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	682b      	ldr	r3, [r5, #0]
 8006078:	0607      	lsls	r7, r0, #24
 800607a:	f103 0104 	add.w	r1, r3, #4
 800607e:	6029      	str	r1, [r5, #0]
 8006080:	d501      	bpl.n	8006086 <_printf_i+0xbe>
 8006082:	681e      	ldr	r6, [r3, #0]
 8006084:	e003      	b.n	800608e <_printf_i+0xc6>
 8006086:	0646      	lsls	r6, r0, #25
 8006088:	d5fb      	bpl.n	8006082 <_printf_i+0xba>
 800608a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800608e:	2e00      	cmp	r6, #0
 8006090:	da03      	bge.n	800609a <_printf_i+0xd2>
 8006092:	232d      	movs	r3, #45	; 0x2d
 8006094:	4276      	negs	r6, r6
 8006096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800609a:	485a      	ldr	r0, [pc, #360]	; (8006204 <_printf_i+0x23c>)
 800609c:	230a      	movs	r3, #10
 800609e:	e012      	b.n	80060c6 <_printf_i+0xfe>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	6820      	ldr	r0, [r4, #0]
 80060a4:	1d19      	adds	r1, r3, #4
 80060a6:	6029      	str	r1, [r5, #0]
 80060a8:	0605      	lsls	r5, r0, #24
 80060aa:	d501      	bpl.n	80060b0 <_printf_i+0xe8>
 80060ac:	681e      	ldr	r6, [r3, #0]
 80060ae:	e002      	b.n	80060b6 <_printf_i+0xee>
 80060b0:	0641      	lsls	r1, r0, #25
 80060b2:	d5fb      	bpl.n	80060ac <_printf_i+0xe4>
 80060b4:	881e      	ldrh	r6, [r3, #0]
 80060b6:	4853      	ldr	r0, [pc, #332]	; (8006204 <_printf_i+0x23c>)
 80060b8:	2f6f      	cmp	r7, #111	; 0x6f
 80060ba:	bf0c      	ite	eq
 80060bc:	2308      	moveq	r3, #8
 80060be:	230a      	movne	r3, #10
 80060c0:	2100      	movs	r1, #0
 80060c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060c6:	6865      	ldr	r5, [r4, #4]
 80060c8:	60a5      	str	r5, [r4, #8]
 80060ca:	2d00      	cmp	r5, #0
 80060cc:	bfa2      	ittt	ge
 80060ce:	6821      	ldrge	r1, [r4, #0]
 80060d0:	f021 0104 	bicge.w	r1, r1, #4
 80060d4:	6021      	strge	r1, [r4, #0]
 80060d6:	b90e      	cbnz	r6, 80060dc <_printf_i+0x114>
 80060d8:	2d00      	cmp	r5, #0
 80060da:	d04b      	beq.n	8006174 <_printf_i+0x1ac>
 80060dc:	4615      	mov	r5, r2
 80060de:	fbb6 f1f3 	udiv	r1, r6, r3
 80060e2:	fb03 6711 	mls	r7, r3, r1, r6
 80060e6:	5dc7      	ldrb	r7, [r0, r7]
 80060e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060ec:	4637      	mov	r7, r6
 80060ee:	42bb      	cmp	r3, r7
 80060f0:	460e      	mov	r6, r1
 80060f2:	d9f4      	bls.n	80060de <_printf_i+0x116>
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d10b      	bne.n	8006110 <_printf_i+0x148>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	07de      	lsls	r6, r3, #31
 80060fc:	d508      	bpl.n	8006110 <_printf_i+0x148>
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	6861      	ldr	r1, [r4, #4]
 8006102:	4299      	cmp	r1, r3
 8006104:	bfde      	ittt	le
 8006106:	2330      	movle	r3, #48	; 0x30
 8006108:	f805 3c01 	strble.w	r3, [r5, #-1]
 800610c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006110:	1b52      	subs	r2, r2, r5
 8006112:	6122      	str	r2, [r4, #16]
 8006114:	f8cd a000 	str.w	sl, [sp]
 8006118:	464b      	mov	r3, r9
 800611a:	aa03      	add	r2, sp, #12
 800611c:	4621      	mov	r1, r4
 800611e:	4640      	mov	r0, r8
 8006120:	f7ff fee4 	bl	8005eec <_printf_common>
 8006124:	3001      	adds	r0, #1
 8006126:	d14a      	bne.n	80061be <_printf_i+0x1f6>
 8006128:	f04f 30ff 	mov.w	r0, #4294967295
 800612c:	b004      	add	sp, #16
 800612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	f043 0320 	orr.w	r3, r3, #32
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	4833      	ldr	r0, [pc, #204]	; (8006208 <_printf_i+0x240>)
 800613c:	2778      	movs	r7, #120	; 0x78
 800613e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	6829      	ldr	r1, [r5, #0]
 8006146:	061f      	lsls	r7, r3, #24
 8006148:	f851 6b04 	ldr.w	r6, [r1], #4
 800614c:	d402      	bmi.n	8006154 <_printf_i+0x18c>
 800614e:	065f      	lsls	r7, r3, #25
 8006150:	bf48      	it	mi
 8006152:	b2b6      	uxthmi	r6, r6
 8006154:	07df      	lsls	r7, r3, #31
 8006156:	bf48      	it	mi
 8006158:	f043 0320 	orrmi.w	r3, r3, #32
 800615c:	6029      	str	r1, [r5, #0]
 800615e:	bf48      	it	mi
 8006160:	6023      	strmi	r3, [r4, #0]
 8006162:	b91e      	cbnz	r6, 800616c <_printf_i+0x1a4>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	f023 0320 	bic.w	r3, r3, #32
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	2310      	movs	r3, #16
 800616e:	e7a7      	b.n	80060c0 <_printf_i+0xf8>
 8006170:	4824      	ldr	r0, [pc, #144]	; (8006204 <_printf_i+0x23c>)
 8006172:	e7e4      	b.n	800613e <_printf_i+0x176>
 8006174:	4615      	mov	r5, r2
 8006176:	e7bd      	b.n	80060f4 <_printf_i+0x12c>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	6826      	ldr	r6, [r4, #0]
 800617c:	6961      	ldr	r1, [r4, #20]
 800617e:	1d18      	adds	r0, r3, #4
 8006180:	6028      	str	r0, [r5, #0]
 8006182:	0635      	lsls	r5, r6, #24
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	d501      	bpl.n	800618c <_printf_i+0x1c4>
 8006188:	6019      	str	r1, [r3, #0]
 800618a:	e002      	b.n	8006192 <_printf_i+0x1ca>
 800618c:	0670      	lsls	r0, r6, #25
 800618e:	d5fb      	bpl.n	8006188 <_printf_i+0x1c0>
 8006190:	8019      	strh	r1, [r3, #0]
 8006192:	2300      	movs	r3, #0
 8006194:	6123      	str	r3, [r4, #16]
 8006196:	4615      	mov	r5, r2
 8006198:	e7bc      	b.n	8006114 <_printf_i+0x14c>
 800619a:	682b      	ldr	r3, [r5, #0]
 800619c:	1d1a      	adds	r2, r3, #4
 800619e:	602a      	str	r2, [r5, #0]
 80061a0:	681d      	ldr	r5, [r3, #0]
 80061a2:	6862      	ldr	r2, [r4, #4]
 80061a4:	2100      	movs	r1, #0
 80061a6:	4628      	mov	r0, r5
 80061a8:	f7fa f812 	bl	80001d0 <memchr>
 80061ac:	b108      	cbz	r0, 80061b2 <_printf_i+0x1ea>
 80061ae:	1b40      	subs	r0, r0, r5
 80061b0:	6060      	str	r0, [r4, #4]
 80061b2:	6863      	ldr	r3, [r4, #4]
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	2300      	movs	r3, #0
 80061b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061bc:	e7aa      	b.n	8006114 <_printf_i+0x14c>
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	462a      	mov	r2, r5
 80061c2:	4649      	mov	r1, r9
 80061c4:	4640      	mov	r0, r8
 80061c6:	47d0      	blx	sl
 80061c8:	3001      	adds	r0, #1
 80061ca:	d0ad      	beq.n	8006128 <_printf_i+0x160>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	079b      	lsls	r3, r3, #30
 80061d0:	d413      	bmi.n	80061fa <_printf_i+0x232>
 80061d2:	68e0      	ldr	r0, [r4, #12]
 80061d4:	9b03      	ldr	r3, [sp, #12]
 80061d6:	4298      	cmp	r0, r3
 80061d8:	bfb8      	it	lt
 80061da:	4618      	movlt	r0, r3
 80061dc:	e7a6      	b.n	800612c <_printf_i+0x164>
 80061de:	2301      	movs	r3, #1
 80061e0:	4632      	mov	r2, r6
 80061e2:	4649      	mov	r1, r9
 80061e4:	4640      	mov	r0, r8
 80061e6:	47d0      	blx	sl
 80061e8:	3001      	adds	r0, #1
 80061ea:	d09d      	beq.n	8006128 <_printf_i+0x160>
 80061ec:	3501      	adds	r5, #1
 80061ee:	68e3      	ldr	r3, [r4, #12]
 80061f0:	9903      	ldr	r1, [sp, #12]
 80061f2:	1a5b      	subs	r3, r3, r1
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	dcf2      	bgt.n	80061de <_printf_i+0x216>
 80061f8:	e7eb      	b.n	80061d2 <_printf_i+0x20a>
 80061fa:	2500      	movs	r5, #0
 80061fc:	f104 0619 	add.w	r6, r4, #25
 8006200:	e7f5      	b.n	80061ee <_printf_i+0x226>
 8006202:	bf00      	nop
 8006204:	08006b45 	.word	0x08006b45
 8006208:	08006b56 	.word	0x08006b56

0800620c <__sflush_r>:
 800620c:	898a      	ldrh	r2, [r1, #12]
 800620e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006212:	4605      	mov	r5, r0
 8006214:	0710      	lsls	r0, r2, #28
 8006216:	460c      	mov	r4, r1
 8006218:	d458      	bmi.n	80062cc <__sflush_r+0xc0>
 800621a:	684b      	ldr	r3, [r1, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	dc05      	bgt.n	800622c <__sflush_r+0x20>
 8006220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006222:	2b00      	cmp	r3, #0
 8006224:	dc02      	bgt.n	800622c <__sflush_r+0x20>
 8006226:	2000      	movs	r0, #0
 8006228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800622c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800622e:	2e00      	cmp	r6, #0
 8006230:	d0f9      	beq.n	8006226 <__sflush_r+0x1a>
 8006232:	2300      	movs	r3, #0
 8006234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006238:	682f      	ldr	r7, [r5, #0]
 800623a:	6a21      	ldr	r1, [r4, #32]
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	d032      	beq.n	80062a6 <__sflush_r+0x9a>
 8006240:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006242:	89a3      	ldrh	r3, [r4, #12]
 8006244:	075a      	lsls	r2, r3, #29
 8006246:	d505      	bpl.n	8006254 <__sflush_r+0x48>
 8006248:	6863      	ldr	r3, [r4, #4]
 800624a:	1ac0      	subs	r0, r0, r3
 800624c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800624e:	b10b      	cbz	r3, 8006254 <__sflush_r+0x48>
 8006250:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006252:	1ac0      	subs	r0, r0, r3
 8006254:	2300      	movs	r3, #0
 8006256:	4602      	mov	r2, r0
 8006258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800625a:	6a21      	ldr	r1, [r4, #32]
 800625c:	4628      	mov	r0, r5
 800625e:	47b0      	blx	r6
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	d106      	bne.n	8006274 <__sflush_r+0x68>
 8006266:	6829      	ldr	r1, [r5, #0]
 8006268:	291d      	cmp	r1, #29
 800626a:	d82b      	bhi.n	80062c4 <__sflush_r+0xb8>
 800626c:	4a29      	ldr	r2, [pc, #164]	; (8006314 <__sflush_r+0x108>)
 800626e:	410a      	asrs	r2, r1
 8006270:	07d6      	lsls	r6, r2, #31
 8006272:	d427      	bmi.n	80062c4 <__sflush_r+0xb8>
 8006274:	2200      	movs	r2, #0
 8006276:	6062      	str	r2, [r4, #4]
 8006278:	04d9      	lsls	r1, r3, #19
 800627a:	6922      	ldr	r2, [r4, #16]
 800627c:	6022      	str	r2, [r4, #0]
 800627e:	d504      	bpl.n	800628a <__sflush_r+0x7e>
 8006280:	1c42      	adds	r2, r0, #1
 8006282:	d101      	bne.n	8006288 <__sflush_r+0x7c>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	b903      	cbnz	r3, 800628a <__sflush_r+0x7e>
 8006288:	6560      	str	r0, [r4, #84]	; 0x54
 800628a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800628c:	602f      	str	r7, [r5, #0]
 800628e:	2900      	cmp	r1, #0
 8006290:	d0c9      	beq.n	8006226 <__sflush_r+0x1a>
 8006292:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006296:	4299      	cmp	r1, r3
 8006298:	d002      	beq.n	80062a0 <__sflush_r+0x94>
 800629a:	4628      	mov	r0, r5
 800629c:	f7ff fc96 	bl	8005bcc <_free_r>
 80062a0:	2000      	movs	r0, #0
 80062a2:	6360      	str	r0, [r4, #52]	; 0x34
 80062a4:	e7c0      	b.n	8006228 <__sflush_r+0x1c>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4628      	mov	r0, r5
 80062aa:	47b0      	blx	r6
 80062ac:	1c41      	adds	r1, r0, #1
 80062ae:	d1c8      	bne.n	8006242 <__sflush_r+0x36>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0c5      	beq.n	8006242 <__sflush_r+0x36>
 80062b6:	2b1d      	cmp	r3, #29
 80062b8:	d001      	beq.n	80062be <__sflush_r+0xb2>
 80062ba:	2b16      	cmp	r3, #22
 80062bc:	d101      	bne.n	80062c2 <__sflush_r+0xb6>
 80062be:	602f      	str	r7, [r5, #0]
 80062c0:	e7b1      	b.n	8006226 <__sflush_r+0x1a>
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c8:	81a3      	strh	r3, [r4, #12]
 80062ca:	e7ad      	b.n	8006228 <__sflush_r+0x1c>
 80062cc:	690f      	ldr	r7, [r1, #16]
 80062ce:	2f00      	cmp	r7, #0
 80062d0:	d0a9      	beq.n	8006226 <__sflush_r+0x1a>
 80062d2:	0793      	lsls	r3, r2, #30
 80062d4:	680e      	ldr	r6, [r1, #0]
 80062d6:	bf08      	it	eq
 80062d8:	694b      	ldreq	r3, [r1, #20]
 80062da:	600f      	str	r7, [r1, #0]
 80062dc:	bf18      	it	ne
 80062de:	2300      	movne	r3, #0
 80062e0:	eba6 0807 	sub.w	r8, r6, r7
 80062e4:	608b      	str	r3, [r1, #8]
 80062e6:	f1b8 0f00 	cmp.w	r8, #0
 80062ea:	dd9c      	ble.n	8006226 <__sflush_r+0x1a>
 80062ec:	6a21      	ldr	r1, [r4, #32]
 80062ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062f0:	4643      	mov	r3, r8
 80062f2:	463a      	mov	r2, r7
 80062f4:	4628      	mov	r0, r5
 80062f6:	47b0      	blx	r6
 80062f8:	2800      	cmp	r0, #0
 80062fa:	dc06      	bgt.n	800630a <__sflush_r+0xfe>
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006302:	81a3      	strh	r3, [r4, #12]
 8006304:	f04f 30ff 	mov.w	r0, #4294967295
 8006308:	e78e      	b.n	8006228 <__sflush_r+0x1c>
 800630a:	4407      	add	r7, r0
 800630c:	eba8 0800 	sub.w	r8, r8, r0
 8006310:	e7e9      	b.n	80062e6 <__sflush_r+0xda>
 8006312:	bf00      	nop
 8006314:	dfbffffe 	.word	0xdfbffffe

08006318 <_fflush_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	690b      	ldr	r3, [r1, #16]
 800631c:	4605      	mov	r5, r0
 800631e:	460c      	mov	r4, r1
 8006320:	b913      	cbnz	r3, 8006328 <_fflush_r+0x10>
 8006322:	2500      	movs	r5, #0
 8006324:	4628      	mov	r0, r5
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	b118      	cbz	r0, 8006332 <_fflush_r+0x1a>
 800632a:	6a03      	ldr	r3, [r0, #32]
 800632c:	b90b      	cbnz	r3, 8006332 <_fflush_r+0x1a>
 800632e:	f7ff fa45 	bl	80057bc <__sinit>
 8006332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0f3      	beq.n	8006322 <_fflush_r+0xa>
 800633a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800633c:	07d0      	lsls	r0, r2, #31
 800633e:	d404      	bmi.n	800634a <_fflush_r+0x32>
 8006340:	0599      	lsls	r1, r3, #22
 8006342:	d402      	bmi.n	800634a <_fflush_r+0x32>
 8006344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006346:	f7ff fc3e 	bl	8005bc6 <__retarget_lock_acquire_recursive>
 800634a:	4628      	mov	r0, r5
 800634c:	4621      	mov	r1, r4
 800634e:	f7ff ff5d 	bl	800620c <__sflush_r>
 8006352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006354:	07da      	lsls	r2, r3, #31
 8006356:	4605      	mov	r5, r0
 8006358:	d4e4      	bmi.n	8006324 <_fflush_r+0xc>
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	059b      	lsls	r3, r3, #22
 800635e:	d4e1      	bmi.n	8006324 <_fflush_r+0xc>
 8006360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006362:	f7ff fc31 	bl	8005bc8 <__retarget_lock_release_recursive>
 8006366:	e7dd      	b.n	8006324 <_fflush_r+0xc>

08006368 <__swhatbuf_r>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	460c      	mov	r4, r1
 800636c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006370:	2900      	cmp	r1, #0
 8006372:	b096      	sub	sp, #88	; 0x58
 8006374:	4615      	mov	r5, r2
 8006376:	461e      	mov	r6, r3
 8006378:	da0d      	bge.n	8006396 <__swhatbuf_r+0x2e>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006380:	f04f 0100 	mov.w	r1, #0
 8006384:	bf0c      	ite	eq
 8006386:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800638a:	2340      	movne	r3, #64	; 0x40
 800638c:	2000      	movs	r0, #0
 800638e:	6031      	str	r1, [r6, #0]
 8006390:	602b      	str	r3, [r5, #0]
 8006392:	b016      	add	sp, #88	; 0x58
 8006394:	bd70      	pop	{r4, r5, r6, pc}
 8006396:	466a      	mov	r2, sp
 8006398:	f000 f848 	bl	800642c <_fstat_r>
 800639c:	2800      	cmp	r0, #0
 800639e:	dbec      	blt.n	800637a <__swhatbuf_r+0x12>
 80063a0:	9901      	ldr	r1, [sp, #4]
 80063a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80063a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80063aa:	4259      	negs	r1, r3
 80063ac:	4159      	adcs	r1, r3
 80063ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063b2:	e7eb      	b.n	800638c <__swhatbuf_r+0x24>

080063b4 <__smakebuf_r>:
 80063b4:	898b      	ldrh	r3, [r1, #12]
 80063b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063b8:	079d      	lsls	r5, r3, #30
 80063ba:	4606      	mov	r6, r0
 80063bc:	460c      	mov	r4, r1
 80063be:	d507      	bpl.n	80063d0 <__smakebuf_r+0x1c>
 80063c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	2301      	movs	r3, #1
 80063ca:	6163      	str	r3, [r4, #20]
 80063cc:	b002      	add	sp, #8
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	ab01      	add	r3, sp, #4
 80063d2:	466a      	mov	r2, sp
 80063d4:	f7ff ffc8 	bl	8006368 <__swhatbuf_r>
 80063d8:	9900      	ldr	r1, [sp, #0]
 80063da:	4605      	mov	r5, r0
 80063dc:	4630      	mov	r0, r6
 80063de:	f7ff f8d5 	bl	800558c <_malloc_r>
 80063e2:	b948      	cbnz	r0, 80063f8 <__smakebuf_r+0x44>
 80063e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063e8:	059a      	lsls	r2, r3, #22
 80063ea:	d4ef      	bmi.n	80063cc <__smakebuf_r+0x18>
 80063ec:	f023 0303 	bic.w	r3, r3, #3
 80063f0:	f043 0302 	orr.w	r3, r3, #2
 80063f4:	81a3      	strh	r3, [r4, #12]
 80063f6:	e7e3      	b.n	80063c0 <__smakebuf_r+0xc>
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	6020      	str	r0, [r4, #0]
 80063fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006400:	81a3      	strh	r3, [r4, #12]
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	6163      	str	r3, [r4, #20]
 8006406:	9b01      	ldr	r3, [sp, #4]
 8006408:	6120      	str	r0, [r4, #16]
 800640a:	b15b      	cbz	r3, 8006424 <__smakebuf_r+0x70>
 800640c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006410:	4630      	mov	r0, r6
 8006412:	f000 f81d 	bl	8006450 <_isatty_r>
 8006416:	b128      	cbz	r0, 8006424 <__smakebuf_r+0x70>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	f023 0303 	bic.w	r3, r3, #3
 800641e:	f043 0301 	orr.w	r3, r3, #1
 8006422:	81a3      	strh	r3, [r4, #12]
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	431d      	orrs	r5, r3
 8006428:	81a5      	strh	r5, [r4, #12]
 800642a:	e7cf      	b.n	80063cc <__smakebuf_r+0x18>

0800642c <_fstat_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d07      	ldr	r5, [pc, #28]	; (800644c <_fstat_r+0x20>)
 8006430:	2300      	movs	r3, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	4611      	mov	r1, r2
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	f7fb f80a 	bl	8001452 <_fstat>
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	d102      	bne.n	8006448 <_fstat_r+0x1c>
 8006442:	682b      	ldr	r3, [r5, #0]
 8006444:	b103      	cbz	r3, 8006448 <_fstat_r+0x1c>
 8006446:	6023      	str	r3, [r4, #0]
 8006448:	bd38      	pop	{r3, r4, r5, pc}
 800644a:	bf00      	nop
 800644c:	200003d4 	.word	0x200003d4

08006450 <_isatty_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d06      	ldr	r5, [pc, #24]	; (800646c <_isatty_r+0x1c>)
 8006454:	2300      	movs	r3, #0
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	f7fb f809 	bl	8001472 <_isatty>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_isatty_r+0x1a>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_isatty_r+0x1a>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	200003d4 	.word	0x200003d4

08006470 <_init>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	bf00      	nop
 8006474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006476:	bc08      	pop	{r3}
 8006478:	469e      	mov	lr, r3
 800647a:	4770      	bx	lr

0800647c <_fini>:
 800647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647e:	bf00      	nop
 8006480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006482:	bc08      	pop	{r3}
 8006484:	469e      	mov	lr, r3
 8006486:	4770      	bx	lr
