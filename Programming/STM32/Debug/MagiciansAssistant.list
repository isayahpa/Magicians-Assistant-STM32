
MagiciansAssistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  08007eec  08007eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086f8  080086f8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080086f8  080086f8  000186f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008700  08008700  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008700  08008700  00018700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008704  08008704  00018704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08008708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  2000009c  080087a4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  080087a4  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017894  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e81  00000000  00000000  000379a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0003a828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b9  00000000  00000000  0003bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000293b5  00000000  00000000  0003ce41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a817  00000000  00000000  000661f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9b22  00000000  00000000  00080a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006340  00000000  00000000  0017a530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00180870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ed4 	.word	0x08007ed4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08007ed4 	.word	0x08007ed4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <initArducam>:
/* Notes:
 * The chip select signal should always be LOW during the SPI read or write bus cycle
 * I2C interfaces directly with the OV2640 sensor (the camera itself)
 * SPI interfaces with the Chip as a whole, to indirectly control the camera
 */
void initArducam(ArducamController* pCtrl, I2C_HandleTypeDef* pHI2C, SPI_HandleTypeDef* pHSPI, GPIO_TypeDef* pCSPort, uint16_t csPinNo, GPIO_TypeDef* pFlashPort, uint16_t flashPinNo){
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
 8000578:	603b      	str	r3, [r7, #0]
	printf("Initializing ArduCam\n");
 800057a:	4831      	ldr	r0, [pc, #196]	; (8000640 <initArducam+0xd4>)
 800057c:	f006 feb8 	bl	80072f0 <puts>
	pCtrl->pI2CHandle = pHI2C;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	601a      	str	r2, [r3, #0]
	pCtrl->pSPIHandle = pHSPI;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	605a      	str	r2, [r3, #4]
	pCtrl->status = HAL_OK;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2200      	movs	r2, #0
 8000590:	721a      	strb	r2, [r3, #8]
	pCtrl -> pCSPort = pCSPort;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	60da      	str	r2, [r3, #12]
	pCtrl -> csPinNo = csPinNo;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	8b3a      	ldrh	r2, [r7, #24]
 800059c:	821a      	strh	r2, [r3, #16]
	pCtrl -> pFlashPort = pFlashPort;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	69fa      	ldr	r2, [r7, #28]
 80005a2:	615a      	str	r2, [r3, #20]
	pCtrl -> flashPinNo = flashPinNo;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	8c3a      	ldrh	r2, [r7, #32]
 80005a8:	831a      	strh	r2, [r3, #24]

	resetCPLD(pCtrl);
 80005aa:	68f8      	ldr	r0, [r7, #12]
 80005ac:	f000 fa78 	bl	8000aa0 <resetCPLD>
	if((pCtrl->status = HAL_I2C_IsDeviceReady(pHI2C, I2C_ADDR_WRITE, 1, HAL_MAX_DELAY)) != HAL_OK ||
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	2201      	movs	r2, #1
 80005b6:	2160      	movs	r1, #96	; 0x60
 80005b8:	68b8      	ldr	r0, [r7, #8]
 80005ba:	f001 ffd5 	bl	8002568 <HAL_I2C_IsDeviceReady>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	721a      	strb	r2, [r3, #8]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	7a1b      	ldrb	r3, [r3, #8]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10d      	bne.n	80005ea <initArducam+0x7e>
			(pCtrl->status = HAL_I2C_IsDeviceReady(pHI2C, I2C_ADDR_READ, 1, HAL_MAX_DELAY != HAL_OK))){
 80005ce:	2301      	movs	r3, #1
 80005d0:	2201      	movs	r2, #1
 80005d2:	2161      	movs	r1, #97	; 0x61
 80005d4:	68b8      	ldr	r0, [r7, #8]
 80005d6:	f001 ffc7 	bl	8002568 <HAL_I2C_IsDeviceReady>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	721a      	strb	r2, [r3, #8]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	7a1b      	ldrb	r3, [r3, #8]
	if((pCtrl->status = HAL_I2C_IsDeviceReady(pHI2C, I2C_ADDR_WRITE, 1, HAL_MAX_DELAY)) != HAL_OK ||
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d003      	beq.n	80005f2 <initArducam+0x86>
		printf("Arducam I2C Error.\n");
 80005ea:	4816      	ldr	r0, [pc, #88]	; (8000644 <initArducam+0xd8>)
 80005ec:	f006 fe80 	bl	80072f0 <puts>
 80005f0:	e016      	b.n	8000620 <initArducam+0xb4>
	} else if(!isSPIWorking(pCtrl)){
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f000 f938 	bl	8000868 <isSPIWorking>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d103      	bne.n	8000606 <initArducam+0x9a>
		printf("Arducam SPI Error.\n");
 80005fe:	4812      	ldr	r0, [pc, #72]	; (8000648 <initArducam+0xdc>)
 8000600:	f006 fe76 	bl	80072f0 <puts>
 8000604:	e00c      	b.n	8000620 <initArducam+0xb4>
	} else {
		printf("I2C Check Passed\n");
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <initArducam+0xe0>)
 8000608:	f006 fe72 	bl	80072f0 <puts>
		printf("SPI Check Passed\n");
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <initArducam+0xe4>)
 800060e:	f006 fe6f 	bl	80072f0 <puts>
		setDefaultSettings(pCtrl);
 8000612:	68f8      	ldr	r0, [r7, #12]
 8000614:	f000 f8d2 	bl	80007bc <setDefaultSettings>
		HAL_Delay(1000);
 8000618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061c:	f001 fb24 	bl	8001c68 <HAL_Delay>
		//clearFIFOFlag(pCtrl);
	}

	if(pCtrl->status != HAL_OK){
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	7a1b      	ldrb	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d003      	beq.n	8000630 <initArducam+0xc4>
		printf("Arducam Init Fail\n");
 8000628:	480a      	ldr	r0, [pc, #40]	; (8000654 <initArducam+0xe8>)
 800062a:	f006 fe61 	bl	80072f0 <puts>
	} else {
		printf("Arducam Init Success!\n");
	}

	//printStatus(pCtrl);
}
 800062e:	e002      	b.n	8000636 <initArducam+0xca>
		printf("Arducam Init Success!\n");
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <initArducam+0xec>)
 8000632:	f006 fe5d 	bl	80072f0 <puts>
}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	08007eec 	.word	0x08007eec
 8000644:	08007f04 	.word	0x08007f04
 8000648:	08007f18 	.word	0x08007f18
 800064c:	08007f2c 	.word	0x08007f2c
 8000650:	08007f40 	.word	0x08007f40
 8000654:	08007f54 	.word	0x08007f54
 8000658:	08007f68 	.word	0x08007f68

0800065c <singleCapture>:

//Fills *ppBuffer with the Picture Data
//Returns the # of bytes read from the FIFO
uint16_t singleCapture(ArducamController* pCtrl, uint8_t **ppBuffer){
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
		printf("Starting Capture\n");
 8000666:	4825      	ldr	r0, [pc, #148]	; (80006fc <singleCapture+0xa0>)
 8000668:	f006 fe42 	bl	80072f0 <puts>

		flashOn(pCtrl);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 fadb 	bl	8000c28 <flashOn>
		clearFIFOFlag(pCtrl);
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 fa34 	bl	8000ae0 <clearFIFOFlag>
		resetFIFOPointers(pCtrl);
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 fa42 	bl	8000b02 <resetFIFOPointers>
		setNCaptureFrames(pCtrl, 1);
 800067e:	2101      	movs	r1, #1
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 fa60 	bl	8000b46 <setNCaptureFrames>
		setCaptureFlag(pCtrl);
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 fa4c 	bl	8000b24 <setCaptureFlag>
		while(!isFIFOReady(pCtrl)){
 800068c:	e003      	b.n	8000696 <singleCapture+0x3a>
			HAL_Delay(CAPTURE_DELAY);//    Wait 'til Finished Flag is set
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	f001 fae9 	bl	8001c68 <HAL_Delay>
		while(!isFIFOReady(pCtrl)){
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f9e4 	bl	8000a64 <isFIFOReady>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f5      	beq.n	800068e <singleCapture+0x32>
		}
		printf("FIFO Write Finished!\n");
 80006a2:	4817      	ldr	r0, [pc, #92]	; (8000700 <singleCapture+0xa4>)
 80006a4:	f006 fe24 	bl	80072f0 <puts>
		flashOff(pCtrl);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 facd 	bl	8000c48 <flashOff>

		uint16_t bufferSize = burstReadFIFO(pCtrl, ppBuffer);
 80006ae:	6839      	ldr	r1, [r7, #0]
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f82d 	bl	8000710 <burstReadFIFO>
 80006b6:	4603      	mov	r3, r0
 80006b8:	817b      	strh	r3, [r7, #10]

		printf("Capture Complete!\n");
 80006ba:	4812      	ldr	r0, [pc, #72]	; (8000704 <singleCapture+0xa8>)
 80006bc:	f006 fe18 	bl	80072f0 <puts>
		printf("Picture Buffer: \n");
 80006c0:	4811      	ldr	r0, [pc, #68]	; (8000708 <singleCapture+0xac>)
 80006c2:	f006 fe15 	bl	80072f0 <puts>
		for(int i = 0; i < bufferSize; i++){
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	e00b      	b.n	80006e4 <singleCapture+0x88>
			printf("%x", (*ppBuffer)[i]);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4619      	mov	r1, r3
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <singleCapture+0xb0>)
 80006da:	f006 fd9b 	bl	8007214 <iprintf>
		for(int i = 0; i < bufferSize; i++){
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	3301      	adds	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	897b      	ldrh	r3, [r7, #10]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dbef      	blt.n	80006cc <singleCapture+0x70>
			//if(!(i % 100)){printf("\n");}
		}
		printf("\n");
 80006ec:	200a      	movs	r0, #10
 80006ee:	f006 fda3 	bl	8007238 <putchar>

		return bufferSize;
 80006f2:	897b      	ldrh	r3, [r7, #10]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	08007f80 	.word	0x08007f80
 8000700:	08007f94 	.word	0x08007f94
 8000704:	08007fac 	.word	0x08007fac
 8000708:	08007fc0 	.word	0x08007fc0
 800070c:	08007fd4 	.word	0x08007fd4

08000710 <burstReadFIFO>:

//Returns the amount of data (in bytes) read from FIFO
uint16_t burstReadFIFO(ArducamController *pCtrl, uint8_t **ppBuffer){
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af02      	add	r7, sp, #8
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	uint8_t cmd = FIFO_BURST_READ;
 800071a:	233c      	movs	r3, #60	; 0x3c
 800071c:	73fb      	strb	r3, [r7, #15]
	uint32_t fifoLength = getFIFOLength(pCtrl);
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 fa2c 	bl	8000b7c <getFIFOLength>
 8000724:	6138      	str	r0, [r7, #16]
	uint32_t transmissionSize = fifoLength;
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	617b      	str	r3, [r7, #20]
	if(fifoLength >= 0xFFFF){
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000730:	4293      	cmp	r3, r2
 8000732:	d905      	bls.n	8000740 <burstReadFIFO+0x30>
		printf("Had to Truncate FIFO Transfer\n");
 8000734:	481f      	ldr	r0, [pc, #124]	; (80007b4 <burstReadFIFO+0xa4>)
 8000736:	f006 fddb 	bl	80072f0 <puts>
		transmissionSize = 0xFFFF;
 800073a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073e:	617b      	str	r3, [r7, #20]
	}

	// Allocate some space for the buffer
	*ppBuffer = calloc(transmissionSize, sizeof(uint8_t));
 8000740:	2101      	movs	r1, #1
 8000742:	6978      	ldr	r0, [r7, #20]
 8000744:	f006 fbd2 	bl	8006eec <calloc>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	601a      	str	r2, [r3, #0]

	printf("Reading %lu bytes from Arducam\n", transmissionSize);
 8000750:	6979      	ldr	r1, [r7, #20]
 8000752:	4819      	ldr	r0, [pc, #100]	; (80007b8 <burstReadFIFO+0xa8>)
 8000754:	f006 fd5e 	bl	8007214 <iprintf>
	enable(pCtrl);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 fa45 	bl	8000be8 <enable>
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &cmd, *ppBuffer, 1, HAL_MAX_DELAY);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6858      	ldr	r0, [r3, #4]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	f107 010f 	add.w	r1, r7, #15
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2301      	movs	r3, #1
 8000772:	f004 f918 	bl	80049a6 <HAL_SPI_TransmitReceive>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	721a      	strb	r2, [r3, #8]
	pCtrl -> status = HAL_SPI_Receive(pCtrl->pSPIHandle, *ppBuffer, transmissionSize, HAL_MAX_DELAY);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6858      	ldr	r0, [r3, #4]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	6819      	ldr	r1, [r3, #0]
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	b29a      	uxth	r2, r3
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	f003 ffd3 	bl	8004738 <HAL_SPI_Receive>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	721a      	strb	r2, [r3, #8]
	HAL_Delay(1000); // Just making sure all the data makes it through
 800079a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079e:	f001 fa63 	bl	8001c68 <HAL_Delay>
	disable(pCtrl);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 fa30 	bl	8000c08 <disable>

	return transmissionSize;
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	b29b      	uxth	r3, r3
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	08007fd8 	.word	0x08007fd8
 80007b8:	08007ff8 	.word	0x08007ff8

080007bc <setDefaultSettings>:

void setDefaultSettings(ArducamController* pCtrl){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	printf("Configuring Default Settings\n");
 80007c4:	4823      	ldr	r0, [pc, #140]	; (8000854 <setDefaultSettings+0x98>)
 80007c6:	f006 fd93 	bl	80072f0 <puts>
	uint8_t data = 0x01;
 80007ca:	2301      	movs	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0xFF, &data, 1);
 80007ce:	f107 020f 	add.w	r2, r7, #15
 80007d2:	2301      	movs	r3, #1
 80007d4:	21ff      	movs	r1, #255	; 0xff
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f868 	bl	80008ac <i2cRegWrite>
	data = 0x80;
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0x12, &data, 1);
 80007e0:	f107 020f 	add.w	r2, r7, #15
 80007e4:	2301      	movs	r3, #1
 80007e6:	2112      	movs	r1, #18
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 f85f 	bl	80008ac <i2cRegWrite>
	HAL_Delay(100);
 80007ee:	2064      	movs	r0, #100	; 0x64
 80007f0:	f001 fa3a 	bl	8001c68 <HAL_Delay>

	i2cWriteMultiple(pCtrl, OV2640_JPEG_INIT);
 80007f4:	4918      	ldr	r1, [pc, #96]	; (8000858 <setDefaultSettings+0x9c>)
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 f88e 	bl	8000918 <i2cWriteMultiple>
	i2cWriteMultiple(pCtrl, OV2640_YUV422);
 80007fc:	4917      	ldr	r1, [pc, #92]	; (800085c <setDefaultSettings+0xa0>)
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f88a 	bl	8000918 <i2cWriteMultiple>
	i2cWriteMultiple(pCtrl, OV2640_JPEG);
 8000804:	4916      	ldr	r1, [pc, #88]	; (8000860 <setDefaultSettings+0xa4>)
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f000 f886 	bl	8000918 <i2cWriteMultiple>
	data = 0x01;
 800080c:	2301      	movs	r3, #1
 800080e:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0xFF, &data, 1);
 8000810:	f107 020f 	add.w	r2, r7, #15
 8000814:	2301      	movs	r3, #1
 8000816:	21ff      	movs	r1, #255	; 0xff
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 f847 	bl	80008ac <i2cRegWrite>
	data = 0x00;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]
	i2cRegWrite(pCtrl, 0x15, &data, 1);
 8000822:	f107 020f 	add.w	r2, r7, #15
 8000826:	2301      	movs	r3, #1
 8000828:	2115      	movs	r1, #21
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 f83e 	bl	80008ac <i2cRegWrite>
	i2cWriteMultiple(pCtrl, OV2640_320x240_JPEG);
 8000830:	490c      	ldr	r1, [pc, #48]	; (8000864 <setDefaultSettings+0xa8>)
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f000 f870 	bl	8000918 <i2cWriteMultiple>

	data = 0x02;
 8000838:	2302      	movs	r3, #2
 800083a:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, (uint8_t)0x03, &data, 1);
 800083c:	f107 020f 	add.w	r2, r7, #15
 8000840:	2301      	movs	r3, #1
 8000842:	2103      	movs	r1, #3
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f887 	bl	8000958 <spiRegWrite>

}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	08008018 	.word	0x08008018
 8000858:	08008484 	.word	0x08008484
 800085c:	08008604 	.word	0x08008604
 8000860:	08008618 	.word	0x08008618
 8000864:	0800862c 	.word	0x0800862c

08000868 <isSPIWorking>:


int isSPIWorking(ArducamController *pCtrl){
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	uint8_t testVal = 0xAB;
 8000870:	23ab      	movs	r3, #171	; 0xab
 8000872:	73fb      	strb	r3, [r7, #15]
	uint8_t readVal = 0x00;
 8000874:	2300      	movs	r3, #0
 8000876:	73bb      	strb	r3, [r7, #14]
	spiRegWrite(pCtrl, 0x00, &testVal, 1);
 8000878:	f107 020f 	add.w	r2, r7, #15
 800087c:	2301      	movs	r3, #1
 800087e:	2100      	movs	r1, #0
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f869 	bl	8000958 <spiRegWrite>
	spiRegRead(pCtrl, 0x00, &readVal, 1);
 8000886:	f107 020e 	add.w	r2, r7, #14
 800088a:	2301      	movs	r3, #1
 800088c:	2100      	movs	r1, #0
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f000 f8a2 	bl	80009d8 <spiRegRead>

	return (readVal == testVal);
 8000894:	7bba      	ldrb	r2, [r7, #14]
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	429a      	cmp	r2, r3
 800089a:	bf0c      	ite	eq
 800089c:	2301      	moveq	r3, #1
 800089e:	2300      	movne	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <i2cRegWrite>:
//TODO: Make it so that when Register Writes/Reads fail (status != 00), we print error data and throw an interrupt? or maybe just halt the function?
//
/*To Write over i2c:
* Request I2C_ADDR_WRITE -> Send Cam Register Address (left shift device addr's by 1) -> Send Data bytes
*/
void i2cRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t *pData, uint16_t size){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	461a      	mov	r2, r3
 80008b8:	460b      	mov	r3, r1
 80008ba:	72fb      	strb	r3, [r7, #11]
 80008bc:	4613      	mov	r3, r2
 80008be:	813b      	strh	r3, [r7, #8]
	printf("(I2C) Writing 0x%04X to Reg 0x%02X\n", *pData, reg);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	7afb      	ldrb	r3, [r7, #11]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <i2cRegWrite+0x68>)
 80008cc:	f006 fca2 	bl	8007214 <iprintf>
	//printf("Before T1: %x\n", pCtrl->status);
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, &reg, (uint16_t) 1, CAM_TIMEOUT);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6818      	ldr	r0, [r3, #0]
 80008d4:	f107 020b 	add.w	r2, r7, #11
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	2301      	movs	r3, #1
 80008e0:	2160      	movs	r1, #96	; 0x60
 80008e2:	f001 fd29 	bl	8002338 <HAL_I2C_Master_Transmit>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	721a      	strb	r2, [r3, #8]
	//printf("After T1: %x\n", pCtrl->status);
	pCtrl->status = HAL_I2C_Master_Transmit(pCtrl->pI2CHandle, I2C_ADDR_WRITE, pData, (uint16_t) size, CAM_TIMEOUT);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	893b      	ldrh	r3, [r7, #8]
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	2160      	movs	r1, #96	; 0x60
 80008fe:	f001 fd1b 	bl	8002338 <HAL_I2C_Master_Transmit>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	721a      	strb	r2, [r3, #8]
	//printf("After T2: %x\n", pCtrl->status);
}
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	08008038 	.word	0x08008038

08000918 <i2cWriteMultiple>:
	pCtrl->status = HAL_I2C_Master_Receive(pCtrl->pI2CHandle, I2C_ADDR_READ, pBuffer, size, CAM_TIMEOUT);
	//printf("After R1: %x\n", pCtrl->status);
	printf("(I2C) Read 0x%02X from 0x%02X\n", *pBuffer, reg);
}

void i2cWriteMultiple(ArducamController* pCtrl, const struct SensorReg *regList){
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
	struct SensorReg *current = (struct SensorReg *) regList;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	60fb      	str	r3, [r7, #12]

	while(current->addr != 0xFF || current->val != 0xFF){
 8000926:	e00a      	b.n	800093e <i2cWriteMultiple+0x26>
		i2cRegWrite(pCtrl, current->addr, &(current->val), 1);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	7819      	ldrb	r1, [r3, #0]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	2301      	movs	r3, #1
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ffba 	bl	80008ac <i2cRegWrite>
		current++;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3302      	adds	r3, #2
 800093c:	60fb      	str	r3, [r7, #12]
	while(current->addr != 0xFF || current->val != 0xFF){
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2bff      	cmp	r3, #255	; 0xff
 8000944:	d1f0      	bne.n	8000928 <i2cWriteMultiple+0x10>
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	785b      	ldrb	r3, [r3, #1]
 800094a:	2bff      	cmp	r3, #255	; 0xff
 800094c:	d1ec      	bne.n	8000928 <i2cWriteMultiple+0x10>
	}

}
 800094e:	bf00      	nop
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <spiRegWrite>:

void spiRegWrite(ArducamController* pCtrl, uint8_t reg, uint8_t *pData, uint16_t size){
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	461a      	mov	r2, r3
 8000964:	460b      	mov	r3, r1
 8000966:	72fb      	strb	r3, [r7, #11]
 8000968:	4613      	mov	r3, r2
 800096a:	813b      	strh	r3, [r7, #8]

	enable(pCtrl); // CS Pin Set LOW
 800096c:	68f8      	ldr	r0, [r7, #12]
 800096e:	f000 f93b 	bl	8000be8 <enable>
	HAL_Delay(CS_DELAY);
 8000972:	200a      	movs	r0, #10
 8000974:	f001 f978 	bl	8001c68 <HAL_Delay>
	uint8_t maskedAddr = reg | SPI_WRITE_MASK; // a 1 followed by Reg addr, to write to reg
 8000978:	7afb      	ldrb	r3, [r7, #11]
 800097a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800097e:	b2db      	uxtb	r3, r3
 8000980:	75fb      	strb	r3, [r7, #23]

	printf("(SPI) Writing 0x%02X to 0x%02X | cmd = 0x%02X\n", *pData, reg, maskedAddr);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4619      	mov	r1, r3
 8000988:	7afa      	ldrb	r2, [r7, #11]
 800098a:	7dfb      	ldrb	r3, [r7, #23]
 800098c:	4811      	ldr	r0, [pc, #68]	; (80009d4 <spiRegWrite+0x7c>)
 800098e:	f006 fc41 	bl	8007214 <iprintf>
	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, &maskedAddr, (uint16_t)1, CAM_TIMEOUT);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6858      	ldr	r0, [r3, #4]
 8000996:	f107 0117 	add.w	r1, r7, #23
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	2201      	movs	r2, #1
 80009a0:	f003 fd55 	bl	800444e <HAL_SPI_Transmit>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	721a      	strb	r2, [r3, #8]
	pCtrl->status = HAL_SPI_Transmit(pCtrl->pSPIHandle, pData, size, CAM_TIMEOUT);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	6858      	ldr	r0, [r3, #4]
 80009b0:	893a      	ldrh	r2, [r7, #8]
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	f003 fd49 	bl	800444e <HAL_SPI_Transmit>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	721a      	strb	r2, [r3, #8]

	disable(pCtrl);
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f000 f91f 	bl	8000c08 <disable>
}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	0800807c 	.word	0x0800807c

080009d8 <spiRegRead>:

void spiRegRead(ArducamController* pCtrl, uint8_t reg, uint8_t *pBuffer, uint16_t size){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af02      	add	r7, sp, #8
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	461a      	mov	r2, r3
 80009e4:	460b      	mov	r3, r1
 80009e6:	72fb      	strb	r3, [r7, #11]
 80009e8:	4613      	mov	r3, r2
 80009ea:	813b      	strh	r3, [r7, #8]
	enable(pCtrl);
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f000 f8fb 	bl	8000be8 <enable>
	HAL_Delay(CS_DELAY);
 80009f2:	200a      	movs	r0, #10
 80009f4:	f001 f938 	bl	8001c68 <HAL_Delay>
	uint8_t maskedAddr = reg & SPI_READ_MASK; // a 0 followed by register to read
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	75fb      	strb	r3, [r7, #23]
	uint8_t dummyByte = 0x00;
 8000a02:	2300      	movs	r3, #0
 8000a04:	75bb      	strb	r3, [r7, #22]
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &maskedAddr, pBuffer, (uint16_t)1, CAM_TIMEOUT);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6858      	ldr	r0, [r3, #4]
 8000a0a:	f107 0117 	add.w	r1, r7, #23
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2301      	movs	r3, #1
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	f003 ffc5 	bl	80049a6 <HAL_SPI_TransmitReceive>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	721a      	strb	r2, [r3, #8]
	pCtrl->status = HAL_SPI_TransmitReceive(pCtrl->pSPIHandle, &dummyByte, pBuffer, size, CAM_TIMEOUT);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6858      	ldr	r0, [r3, #4]
 8000a28:	893b      	ldrh	r3, [r7, #8]
 8000a2a:	f107 0116 	add.w	r1, r7, #22
 8000a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a32:	9200      	str	r2, [sp, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	f003 ffb6 	bl	80049a6 <HAL_SPI_TransmitReceive>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	721a      	strb	r2, [r3, #8]
	disable(pCtrl);
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f000 f8e0 	bl	8000c08 <disable>
	printf("(SPI) Read 0x%02X from 0x%02X\n", *pBuffer, reg);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	7afb      	ldrb	r3, [r7, #11]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <spiRegRead+0x88>)
 8000a54:	f006 fbde 	bl	8007214 <iprintf>
}
 8000a58:	bf00      	nop
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	080080ac 	.word	0x080080ac

08000a64 <isFIFOReady>:

//Returns FIFO 'finished' flag. 0 -> FIFO is busy, 1 -> capture is finished

int isFIFOReady(ArducamController* pCtrl){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint8_t registerData = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	72fb      	strb	r3, [r7, #11]
	spiRegRead(pCtrl, FIFO_STATUS_REG, &registerData, 1);
 8000a70:	f107 020b 	add.w	r2, r7, #11
 8000a74:	2301      	movs	r3, #1
 8000a76:	2141      	movs	r1, #65	; 0x41
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ffad 	bl	80009d8 <spiRegRead>
	int isFinished = checkBit(registerData, 3);
 8000a7e:	7afb      	ldrb	r3, [r7, #11]
 8000a80:	2103      	movs	r1, #3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fa4e 	bl	8000f24 <checkBit>
 8000a88:	60f8      	str	r0, [r7, #12]
	printf("FIFO Ready Flag : %d\n", isFinished);
 8000a8a:	68f9      	ldr	r1, [r7, #12]
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <isFIFOReady+0x38>)
 8000a8e:	f006 fbc1 	bl	8007214 <iprintf>
	return isFinished;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	080080cc 	.word	0x080080cc

08000aa0 <resetCPLD>:
	}

}

//Resets the CPLD
void resetCPLD(ArducamController* pCtrl){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0x80;
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, 0x07, &cmd, 1);
 8000aac:	f107 020f 	add.w	r2, r7, #15
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	2107      	movs	r1, #7
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ff4f 	bl	8000958 <spiRegWrite>
	HAL_Delay(100);
 8000aba:	2064      	movs	r0, #100	; 0x64
 8000abc:	f001 f8d4 	bl	8001c68 <HAL_Delay>
	cmd = 0x00;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, 0x07, &cmd, 1);
 8000ac4:	f107 020f 	add.w	r2, r7, #15
 8000ac8:	2301      	movs	r3, #1
 8000aca:	2107      	movs	r1, #7
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff43 	bl	8000958 <spiRegWrite>
	HAL_Delay(100);
 8000ad2:	2064      	movs	r0, #100	; 0x64
 8000ad4:	f001 f8c8 	bl	8001c68 <HAL_Delay>
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <clearFIFOFlag>:
	clearFIFOFlag(pCtrl);
	//printf("Reseting FIFO Pointers\n");
	//resetFIFOPointers(pCtrl);
}

void clearFIFOFlag(ArducamController* pCtrl){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_FLAG_CLR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 8000aec:	f107 020f 	add.w	r2, r7, #15
 8000af0:	2301      	movs	r3, #1
 8000af2:	2104      	movs	r1, #4
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff2f 	bl	8000958 <spiRegWrite>
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <resetFIFOPointers>:

void resetFIFOPointers(ArducamController* pCtrl){
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FIFO_PTR_CLR;
 8000b0a:	2330      	movs	r3, #48	; 0x30
 8000b0c:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 8000b0e:	f107 020f 	add.w	r2, r7, #15
 8000b12:	2301      	movs	r3, #1
 8000b14:	2104      	movs	r1, #4
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ff1e 	bl	8000958 <spiRegWrite>
}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <setCaptureFlag>:

void setCaptureFlag(ArducamController* pCtrl){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = SET_CAPTURE_FLAG;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	73fb      	strb	r3, [r7, #15]
	spiRegWrite(pCtrl, FIFO_CONTROL_REG, &cmd, 1);
 8000b30:	f107 020f 	add.w	r2, r7, #15
 8000b34:	2301      	movs	r3, #1
 8000b36:	2104      	movs	r1, #4
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff0d 	bl	8000958 <spiRegWrite>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <setNCaptureFrames>:

void setNCaptureFrames(ArducamController* pCtrl, int n){
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	6039      	str	r1, [r7, #0]
	uint8_t cmd = 0b00000001;
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
	if((0 < n) && (n <= 7)){ cmd = (uint8_t) n; }
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	dd05      	ble.n	8000b66 <setNCaptureFrames+0x20>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b07      	cmp	r3, #7
 8000b5e:	dc02      	bgt.n	8000b66 <setNCaptureFrames+0x20>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	73fb      	strb	r3, [r7, #15]

	spiRegWrite(pCtrl, CAPTURE_CONTROL_REG, &cmd, 1);
 8000b66:	f107 020f 	add.w	r2, r7, #15
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fef2 	bl	8000958 <spiRegWrite>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <getFIFOLength>:

//How we find the number of bytes the FIFO is holding (for burst reading)
uint32_t getFIFOLength(ArducamController *pCtrl){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	uint32_t reg0, reg1, reg2 = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
	uint32_t fifoLength = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

	spiRegRead(pCtrl, FIFO_BYTE0, (uint8_t*) &reg0, 1);
 8000b8c:	f107 0210 	add.w	r2, r7, #16
 8000b90:	2301      	movs	r3, #1
 8000b92:	2142      	movs	r1, #66	; 0x42
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff1f 	bl	80009d8 <spiRegRead>
	spiRegRead(pCtrl, FIFO_BYTE1, (uint8_t*) &reg1, 1);
 8000b9a:	f107 020c 	add.w	r2, r7, #12
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	2143      	movs	r1, #67	; 0x43
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ff18 	bl	80009d8 <spiRegRead>
	spiRegRead(pCtrl, FIFO_BYTE2, (uint8_t*) &reg2, 1);
 8000ba8:	f107 0208 	add.w	r2, r7, #8
 8000bac:	2301      	movs	r3, #1
 8000bae:	2144      	movs	r1, #68	; 0x44
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff11 	bl	80009d8 <spiRegRead>
	reg2 = reg2 & 0x7F;
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bbc:	60bb      	str	r3, [r7, #8]

	fifoLength = ((reg2 << 16) | (reg1 << 8) | reg0) & 0x007FFFFF;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	041a      	lsls	r2, r3, #16
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000bd0:	617b      	str	r3, [r7, #20]
	printf("FIFO Length : %lu\n", fifoLength);
 8000bd2:	6979      	ldr	r1, [r7, #20]
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <getFIFOLength+0x68>)
 8000bd6:	f006 fb1d 	bl	8007214 <iprintf>
	return fifoLength;
 8000bda:	697b      	ldr	r3, [r7, #20]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	08008130 	.word	0x08008130

08000be8 <enable>:

void enable(ArducamController* pCtrl){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pCSPort, pCtrl->csPinNo, GPIO_PIN_RESET);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68d8      	ldr	r0, [r3, #12]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	8a1b      	ldrh	r3, [r3, #16]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f001 fae8 	bl	80021d0 <HAL_GPIO_WritePin>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <disable>:

void disable(ArducamController* pCtrl){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pCSPort, pCtrl->csPinNo, GPIO_PIN_SET);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68d8      	ldr	r0, [r3, #12]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	8a1b      	ldrh	r3, [r3, #16]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f001 fad8 	bl	80021d0 <HAL_GPIO_WritePin>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <flashOn>:

void flashOn(ArducamController* pCtrl){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pFlashPort, pCtrl->flashPinNo, GPIO_PIN_SET);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6958      	ldr	r0, [r3, #20]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	8b1b      	ldrh	r3, [r3, #24]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f001 fac8 	bl	80021d0 <HAL_GPIO_WritePin>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <flashOff>:

void flashOff(ArducamController* pCtrl){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pFlashPort, pCtrl->flashPinNo, GPIO_PIN_RESET);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6958      	ldr	r0, [r3, #20]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	8b1b      	ldrh	r3, [r3, #24]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f001 fab8 	bl	80021d0 <HAL_GPIO_WritePin>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <initServoController>:
#include "ServoController.h"

void initServoController(ServoController *pCtrl, Servo *servoList[]){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	printf("Initializing Servo Controller\n");
 8000c72:	481e      	ldr	r0, [pc, #120]	; (8000cec <initServoController+0x84>)
 8000c74:	f006 fb3c 	bl	80072f0 <puts>
	pCtrl->servoList = servoList;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
	pCtrl->status = HAL_OK;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	721a      	strb	r2, [r3, #8]

	int i = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
	Servo *pServo = pCtrl->servoList[0];
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	60bb      	str	r3, [r7, #8]
	while(pServo != NULL){
 8000c90:	e022      	b.n	8000cd8 <initServoController+0x70>
		pServo = pCtrl -> servoList[i];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	60bb      	str	r3, [r7, #8]
		pCtrl->status = HAL_TIM_PWM_Start(pServo->pTIMHandle, pServo->channel);
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4610      	mov	r0, r2
 8000cac:	f004 fb12 	bl	80052d4 <HAL_TIM_PWM_Start>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	721a      	strb	r2, [r3, #8]
		if(pCtrl->status != HAL_OK){
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7a1b      	ldrb	r3, [r3, #8]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d008      	beq.n	8000cd2 <initServoController+0x6a>
			printf("Failed to Start PWM for Servo #%lu | Status : %d\n", pServo->channel, pCtrl->status);
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	6859      	ldr	r1, [r3, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7a1b      	ldrb	r3, [r3, #8]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <initServoController+0x88>)
 8000ccc:	f006 faa2 	bl	8007214 <iprintf>
			break;
 8000cd0:	e005      	b.n	8000cde <initServoController+0x76>
		}
		i++;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
	while(pServo != NULL){
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1d9      	bne.n	8000c92 <initServoController+0x2a>
	}
	resetAllServos(pCtrl);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 f808 	bl	8000cf4 <resetAllServos>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	08008294 	.word	0x08008294
 8000cf0:	080082b4 	.word	0x080082b4

08000cf4 <resetAllServos>:

void resetAllServos(ServoController *pCtrl){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	printf("Resetting Servos\n");
 8000cfc:	4818      	ldr	r0, [pc, #96]	; (8000d60 <resetAllServos+0x6c>)
 8000cfe:	f006 faf7 	bl	80072f0 <puts>

	int i = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
	Servo *pServo = pCtrl->servoList[0];
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	613b      	str	r3, [r7, #16]
	while(pServo != NULL){
 8000d0e:	e01e      	b.n	8000d4e <resetAllServos+0x5a>
		Servo *pServo = pCtrl->servoList[i];
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
		pCtrl->status = setServoPosition(pServo, SERVO_POS_CENTER);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f000 f821 	bl	8000d68 <setServoPosition>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	721a      	strb	r2, [r3, #8]
		if(pCtrl->status != HAL_OK){
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7a1b      	ldrb	r3, [r3, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d008      	beq.n	8000d48 <resetAllServos+0x54>
			printf("Failed to Reset Servo #%lu\n | Status : %d", pServo->channel, pCtrl->status);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6859      	ldr	r1, [r3, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7a1b      	ldrb	r3, [r3, #8]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4808      	ldr	r0, [pc, #32]	; (8000d64 <resetAllServos+0x70>)
 8000d42:	f006 fa67 	bl	8007214 <iprintf>
			break;
 8000d46:	e006      	b.n	8000d56 <resetAllServos+0x62>
		}
		i++;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
	while(pServo != NULL){
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1dd      	bne.n	8000d10 <resetAllServos+0x1c>
	}
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	080082e8 	.word	0x080082e8
 8000d64:	080082fc 	.word	0x080082fc

08000d68 <setServoPosition>:

//https://www.youtube.com/watch?v=AjN58ceQaF4
//http://www.ee.ic.ac.uk/pcheung/teaching/DE1_EE/stores/sg90_datasheet.pdf
//Position in degrees
HAL_StatusTypeDef setServoPosition(Servo* pServo, int position){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	// TODO: Learn the PWM part to change servo position
	//Just a guess
	printf("Setting Servo #%lu to %d\n", pServo->channel, position);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	481b      	ldr	r0, [pc, #108]	; (8000de8 <setServoPosition+0x80>)
 8000d7c:	f006 fa4a 	bl	8007214 <iprintf>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	615a      	str	r2, [r3, #20]
 8000d92:	619a      	str	r2, [r3, #24]
	uint32_t positionAsPulse = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
	if(position == SERVO_POS_LEFT){
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8000d9e:	d103      	bne.n	8000da8 <setServoPosition+0x40>
		positionAsPulse = 2800;
 8000da0:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
 8000da6:	e009      	b.n	8000dbc <setServoPosition+0x54>
	} else if(position == SERVO_POS_CENTER){
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d103      	bne.n	8000db6 <setServoPosition+0x4e>
		positionAsPulse = 4200;
 8000dae:	f241 0368 	movw	r3, #4200	; 0x1068
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
 8000db4:	e002      	b.n	8000dbc <setServoPosition+0x54>
	} else {
		positionAsPulse = 5600;
 8000db6:	f44f 53af 	mov.w	r3, #5600	; 0x15e0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbc:	2360      	movs	r3, #96	; 0x60
 8000dbe:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = positionAsPulse; //TODO: Period = 140000 rn, see if this makes Servo pulsewidth 1.5ms (0 position)
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]

	return HAL_TIM_PWM_ConfigChannel(pServo->pTIMHandle, &sConfigOC, pServo->channel);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f004 fb81 	bl	80054e0 <HAL_TIM_PWM_ConfigChannel>
 8000dde:	4603      	mov	r3, r0

}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	08008328 	.word	0x08008328

08000dec <initESP>:
const char* STATUS_SNAP = "Taking a Picture";
const char* STATUS_ARCHIDEKT = "Sending Deck to Archidekt";
const char* STATUS_SHUTDOWN = "Shutting Down";
const char* STATUS_UNKNOWN = "Unknown Action";

void initESP(WiFiController* pCtrl, UART_HandleTypeDef* pUARTHandle, GPIO_TypeDef* pGPIOPort, uint16_t readyFlagPin){
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	807b      	strh	r3, [r7, #2]
	pCtrl->pUARTHandle = pUARTHandle;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	601a      	str	r2, [r3, #0]
	pCtrl->pGPIOPort = pGPIOPort;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	605a      	str	r2, [r3, #4]
	pCtrl->readyFlagPin = readyFlagPin;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	887a      	ldrh	r2, [r7, #2]
 8000e0a:	811a      	strh	r2, [r3, #8]
	pCtrl->status = HAL_OK;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	729a      	strb	r2, [r3, #10]
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <signalReady>:

void signalReady(WiFiController* pCtrl){
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->readyFlagPin, GPIO_PIN_SET);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6858      	ldr	r0, [r3, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	891b      	ldrh	r3, [r3, #8]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4619      	mov	r1, r3
 8000e32:	f001 f9cd 	bl	80021d0 <HAL_GPIO_WritePin>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <signalBusy>:

void signalBusy(WiFiController* pCtrl){
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pCtrl->pGPIOPort, pCtrl->readyFlagPin, GPIO_PIN_RESET);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6858      	ldr	r0, [r3, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	891b      	ldrh	r3, [r3, #8]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4619      	mov	r1, r3
 8000e52:	f001 f9bd 	bl	80021d0 <HAL_GPIO_WritePin>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <getNextCMD>:

HAL_StatusTypeDef getNextCMD(WiFiController* pCtrl, char *pCMDBuffer){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	printf("Waiting for next CMD...\n");
 8000e6a:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <getNextCMD+0x50>)
 8000e6c:	f006 fa40 	bl	80072f0 <puts>
	signalReady(pCtrl);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ffd4 	bl	8000e1e <signalReady>
	HAL_Delay(100);
 8000e76:	2064      	movs	r0, #100	; 0x64
 8000e78:	f000 fef6 	bl	8001c68 <HAL_Delay>
	pCtrl->status = HAL_UART_Receive(pCtrl->pUARTHandle, (uint8_t*)  pCMDBuffer, 8, HAL_MAX_DELAY); // might need to figure out how to decide how much data to read in
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	2208      	movs	r2, #8
 8000e86:	6839      	ldr	r1, [r7, #0]
 8000e88:	f005 fa98 	bl	80063bc <HAL_UART_Receive>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	729a      	strb	r2, [r3, #10]
	printf("CMD FROM ESP: %s\n", pCMDBuffer);
 8000e94:	6839      	ldr	r1, [r7, #0]
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <getNextCMD+0x54>)
 8000e98:	f006 f9bc 	bl	8007214 <iprintf>
	signalBusy(pCtrl);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ffce 	bl	8000e3e <signalBusy>
	return pCtrl->status;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7a9b      	ldrb	r3, [r3, #10]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	08008418 	.word	0x08008418
 8000eb4:	08008430 	.word	0x08008430

08000eb8 <sendData>:

HAL_StatusTypeDef sendData(WiFiController* pCtrl, uint8_t* pDataBuffer, uint16_t size){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	80fb      	strh	r3, [r7, #6]
	printf("Sending %u bytes to ESP\n", size);
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <sendData+0x3c>)
 8000ecc:	f006 f9a2 	bl	8007214 <iprintf>
	pCtrl->status = HAL_UART_Transmit(pCtrl->pUARTHandle, pDataBuffer, size, ESP_TIMEOUT);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	88fa      	ldrh	r2, [r7, #6]
 8000ed6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	f005 f9e4 	bl	80062a8 <HAL_UART_Transmit>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	729a      	strb	r2, [r3, #10]
	return pCtrl -> status;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	7a9b      	ldrb	r3, [r3, #10]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	08008444 	.word	0x08008444

08000ef8 <initHelpers>:
#include "helpers.h"

UART_HandleTypeDef *pHUART;
I2C_HandleTypeDef *pHI2C;

void initHelpers(UART_HandleTypeDef* pUHandle, I2C_HandleTypeDef *pIHandle){
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	pHUART = pUHandle;
 8000f02:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <initHelpers+0x24>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6013      	str	r3, [r2, #0]
	pHI2C = pIHandle;
 8000f08:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <initHelpers+0x28>)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	6013      	str	r3, [r2, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	200000b8 	.word	0x200000b8
 8000f20:	200000bc 	.word	0x200000bc

08000f24 <checkBit>:

//Returns the value of the bit at index in num
//Ex: checkBit(0x05, 2) == 2
int checkBit(uint8_t num, int index){
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
	return (int) ((num >> index) & 0x01);
 8000f30:	79fa      	ldrb	r2, [r7, #7]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	fa42 f303 	asr.w	r3, r2, r3
 8000f38:	f003 0301 	and.w	r3, r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(pHUART, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <__io_putchar+0x24>)
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f005 f9a4 	bl	80062a8 <HAL_UART_Transmit>
  return ch;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000b8 	.word	0x200000b8

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b09c      	sub	sp, #112	; 0x70
 8000f74:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f76:	f000 fdfb 	bl	8001b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7a:	f000 f903 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7e:	f000 fab3 	bl	80014e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f82:	f000 f951 	bl	8001228 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f86:	f000 f98f 	bl	80012a8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f8a:	f000 fa7d 	bl	8001488 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f8e:	f000 fa4b 	bl	8001428 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f92:	f000 f9c7 	bl	8001324 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //Initialize Helper Functions


  initHelpers(&huart2, &hi2c1);
 8000f96:	4964      	ldr	r1, [pc, #400]	; (8001128 <main+0x1b8>)
 8000f98:	4864      	ldr	r0, [pc, #400]	; (800112c <main+0x1bc>)
 8000f9a:	f7ff ffad 	bl	8000ef8 <initHelpers>

  //Set up buffers
  uint8_t *pictureBuffer = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	65bb      	str	r3, [r7, #88]	; 0x58
  uint16_t pictureBufferSize = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

  char pCMDBuffer[8] = "CMDBUFFR";
 8000fa8:	4a61      	ldr	r2, [pc, #388]	; (8001130 <main+0x1c0>)
 8000faa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb2:	e883 0003 	stmia.w	r3, {r0, r1}

  //Initialize the Peripheral Controllers
  ArducamController arducam;
  WiFiController esp32;
  ServoController servoController;
  Servo leftServo = {.pTIMHandle = &htim2, .channel = TIM_CHANNEL_1};
 8000fb6:	4b5f      	ldr	r3, [pc, #380]	; (8001134 <main+0x1c4>)
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  Servo rightServo = {.pTIMHandle = &htim2, .channel = TIM_CHANNEL_2};
 8000fbe:	4a5e      	ldr	r2, [pc, #376]	; (8001138 <main+0x1c8>)
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc8:	e883 0003 	stmia.w	r3, {r0, r1}
  Servo *servoList[] = {&leftServo, &rightServo};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	60bb      	str	r3, [r7, #8]

  initServoController(&servoController, servoList);
 8000fd8:	1d3a      	adds	r2, r7, #4
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fe41 	bl	8000c68 <initServoController>
  initArducam(&arducam, &hi2c1, &hspi1, CAM_CS_GPIO_Port, CAM_CS_Pin, CAM_FLASH_GPIO_Port, CAM_FLASH_Pin);
 8000fe6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fea:	2340      	movs	r3, #64	; 0x40
 8000fec:	9302      	str	r3, [sp, #8]
 8000fee:	4b53      	ldr	r3, [pc, #332]	; (800113c <main+0x1cc>)
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ffc:	4a50      	ldr	r2, [pc, #320]	; (8001140 <main+0x1d0>)
 8000ffe:	494a      	ldr	r1, [pc, #296]	; (8001128 <main+0x1b8>)
 8001000:	f7ff fab4 	bl	800056c <initArducam>
  initESP(&esp32, &huart1, READY_FLAG_GPIO_Port, READY_FLAG_Pin);
 8001004:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	4a4c      	ldr	r2, [pc, #304]	; (800113c <main+0x1cc>)
 800100c:	494d      	ldr	r1, [pc, #308]	; (8001144 <main+0x1d4>)
 800100e:	f7ff feed 	bl	8000dec <initESP>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (getNextCMD(&esp32, pCMDBuffer) == HAL_OK)
 8001012:	e071      	b.n	80010f8 <main+0x188>
  {
		if(pCMDBuffer == LIGHTS_ON){
 8001014:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <main+0x1d8>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800101c:	429a      	cmp	r2, r3
 800101e:	d10a      	bne.n	8001036 <main+0xc6>
			//Turn the Flash On
			printf(STATUS_LIGHTS_ON);
 8001020:	4b4a      	ldr	r3, [pc, #296]	; (800114c <main+0x1dc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f006 f8f5 	bl	8007214 <iprintf>
			flashOn(&arducam);
 800102a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fdfa 	bl	8000c28 <flashOn>
 8001034:	e05b      	b.n	80010ee <main+0x17e>
		} else if (pCMDBuffer == LIGHTS_OFF){
 8001036:	4b46      	ldr	r3, [pc, #280]	; (8001150 <main+0x1e0>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800103e:	429a      	cmp	r2, r3
 8001040:	d10a      	bne.n	8001058 <main+0xe8>
			//Turn the Flash Off
			printf(STATUS_LIGHTS_OFF);
 8001042:	4b44      	ldr	r3, [pc, #272]	; (8001154 <main+0x1e4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f006 f8e4 	bl	8007214 <iprintf>
			flashOff(&arducam);
 800104c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fdf9 	bl	8000c48 <flashOff>
 8001056:	e04a      	b.n	80010ee <main+0x17e>
		} else if (pCMDBuffer == SHUFFLE){
 8001058:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <main+0x1e8>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001060:	429a      	cmp	r2, r3
 8001062:	d105      	bne.n	8001070 <main+0x100>
			//Begin Shuffle Sequence
			//TODO: Make a ServoController Module
			printf(STATUS_SHUFFLE);
 8001064:	4b3d      	ldr	r3, [pc, #244]	; (800115c <main+0x1ec>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f006 f8d3 	bl	8007214 <iprintf>
 800106e:	e03e      	b.n	80010ee <main+0x17e>
		} else if (pCMDBuffer == SNAP){
 8001070:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <main+0x1f0>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001078:	429a      	cmp	r2, r3
 800107a:	d118      	bne.n	80010ae <main+0x13e>
			//Take a Single Picture and Sends it to the ESP
			printf(STATUS_SNAP);
 800107c:	4b39      	ldr	r3, [pc, #228]	; (8001164 <main+0x1f4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f006 f8c7 	bl	8007214 <iprintf>
			pictureBufferSize = singleCapture(&arducam, &pictureBuffer);
 8001086:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800108a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fae3 	bl	800065c <singleCapture>
 8001096:	4603      	mov	r3, r0
 8001098:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			sendData(&esp32, pictureBuffer, pictureBufferSize);
 800109c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800109e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80010a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff06 	bl	8000eb8 <sendData>
 80010ac:	e01f      	b.n	80010ee <main+0x17e>
		} else if (pCMDBuffer == ARCHIDEKT){
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <main+0x1f8>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d105      	bne.n	80010c6 <main+0x156>
			//Send the Deck to Archidekt
			// Idea : Capture 100 photos, send each to ESP to go to curl for Image to Text API, then Receive Text, (display it?), send out to Archidekt
			// Might be best to split into a "SCAN" cmd that scans a single card and prints the card name (at least for testing) and an "Archidekt" CMD
			printf(STATUS_ARCHIDEKT);
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <main+0x1fc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 f8a8 	bl	8007214 <iprintf>
 80010c4:	e013      	b.n	80010ee <main+0x17e>
		} else if (pCMDBuffer == SHUTDOWN){
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <main+0x200>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d105      	bne.n	80010de <main+0x16e>
			//Stop waiting for commands and exit the loop
			printf(STATUS_SHUTDOWN);
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <main+0x204>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f006 f89c 	bl	8007214 <iprintf>
			break;
 80010dc:	e017      	b.n	800110e <main+0x19e>
		} else {
			//Some strange command
			printf("%s: %s", STATUS_UNKNOWN, pCMDBuffer);
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <main+0x208>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010e6:	4619      	mov	r1, r3
 80010e8:	4824      	ldr	r0, [pc, #144]	; (800117c <main+0x20c>)
 80010ea:	f006 f893 	bl	8007214 <iprintf>
		}
		signalReady(&esp32);
 80010ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fe93 	bl	8000e1e <signalReady>
  while (getNextCMD(&esp32, pCMDBuffer) == HAL_OK)
 80010f8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff feac 	bl	8000e60 <getNextCMD>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d082      	beq.n	8001014 <main+0xa4>
	}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	  printf("Goodbye!\n");
 800110e:	481c      	ldr	r0, [pc, #112]	; (8001180 <main+0x210>)
 8001110:	f006 f8ee 	bl	80072f0 <puts>
  	  free(pictureBuffer);
 8001114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001116:	4618      	mov	r0, r3
 8001118:	f005 ff06 	bl	8006f28 <free>
 800111c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800111e:	4618      	mov	r0, r3
 8001120:	3760      	adds	r7, #96	; 0x60
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000c0 	.word	0x200000c0
 800112c:	2000024c 	.word	0x2000024c
 8001130:	08008474 	.word	0x08008474
 8001134:	20000178 	.word	0x20000178
 8001138:	0800847c 	.word	0x0800847c
 800113c:	48000800 	.word	0x48000800
 8001140:	20000114 	.word	0x20000114
 8001144:	200001c4 	.word	0x200001c4
 8001148:	20000000 	.word	0x20000000
 800114c:	20000018 	.word	0x20000018
 8001150:	20000004 	.word	0x20000004
 8001154:	2000001c 	.word	0x2000001c
 8001158:	20000008 	.word	0x20000008
 800115c:	20000020 	.word	0x20000020
 8001160:	2000000c 	.word	0x2000000c
 8001164:	20000024 	.word	0x20000024
 8001168:	20000010 	.word	0x20000010
 800116c:	20000028 	.word	0x20000028
 8001170:	20000014 	.word	0x20000014
 8001174:	2000002c 	.word	0x2000002c
 8001178:	20000030 	.word	0x20000030
 800117c:	08008460 	.word	0x08008460
 8001180:	08008468 	.word	0x08008468

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b096      	sub	sp, #88	; 0x58
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2244      	movs	r2, #68	; 0x44
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f006 f98c 	bl	80074b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011aa:	f001 fd9b 	bl	8002ce4 <HAL_PWREx_ControlVoltageScaling>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011b4:	f000 fa14 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b8:	2302      	movs	r3, #2
 80011ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c2:	2310      	movs	r3, #16
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2302      	movs	r3, #2
 80011c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ca:	2302      	movs	r3, #2
 80011cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 14;
 80011d2:	230e      	movs	r3, #14
 80011d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011d6:	2307      	movs	r3, #7
 80011d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011da:	2302      	movs	r3, #2
 80011dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80011de:	2304      	movs	r3, #4
 80011e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fdd2 	bl	8002d90 <HAL_RCC_OscConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011f2:	f000 f9f5 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f6:	230f      	movs	r3, #15
 80011f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fa:	2303      	movs	r3, #3
 80011fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80011fe:	23a0      	movs	r3, #160	; 0xa0
 8001200:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f002 f99a 	bl	8003548 <HAL_RCC_ClockConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800121a:	f000 f9e1 	bl	80015e0 <Error_Handler>
  }
}
 800121e:	bf00      	nop
 8001220:	3758      	adds	r7, #88	; 0x58
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_I2C1_Init+0x74>)
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <MX_I2C1_Init+0x78>)
 8001230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101926;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_I2C1_Init+0x74>)
 8001234:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <MX_I2C1_Init+0x7c>)
 8001236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_I2C1_Init+0x74>)
 8001240:	2201      	movs	r2, #1
 8001242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_I2C1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_I2C1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_I2C1_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_I2C1_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001262:	480e      	ldr	r0, [pc, #56]	; (800129c <MX_I2C1_Init+0x74>)
 8001264:	f000 ffcc 	bl	8002200 <HAL_I2C_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800126e:	f000 f9b7 	bl	80015e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001272:	2100      	movs	r1, #0
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <MX_I2C1_Init+0x74>)
 8001276:	f001 fc8f 	bl	8002b98 <HAL_I2CEx_ConfigAnalogFilter>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001280:	f000 f9ae 	bl	80015e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001284:	2100      	movs	r1, #0
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_I2C1_Init+0x74>)
 8001288:	f001 fcd1 	bl	8002c2e <HAL_I2CEx_ConfigDigitalFilter>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001292:	f000 f9a5 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200000c0 	.word	0x200000c0
 80012a0:	40005400 	.word	0x40005400
 80012a4:	00101926 	.word	0x00101926

080012a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <MX_SPI1_Init+0x74>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <MX_SPI1_Init+0x78>)
 80012b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_SPI1_Init+0x74>)
 80012b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_SPI1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_SPI1_Init+0x74>)
 80012c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_SPI1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_SPI1_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_SPI1_Init+0x74>)
 80012d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_SPI1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_SPI1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_SPI1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_SPI1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_SPI1_Init+0x74>)
 80012f6:	2207      	movs	r2, #7
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_SPI1_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_SPI1_Init+0x74>)
 8001302:	2208      	movs	r2, #8
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_SPI1_Init+0x74>)
 8001308:	f002 fffe 	bl	8004308 <HAL_SPI_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001312:	f000 f965 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000114 	.word	0x20000114
 8001320:	40013000 	.word	0x40013000

08001324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08e      	sub	sp, #56	; 0x38
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001356:	4b32      	ldr	r3, [pc, #200]	; (8001420 <MX_TIM2_Init+0xfc>)
 8001358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <MX_TIM2_Init+0xfc>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <MX_TIM2_Init+0xfc>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 140000;
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <MX_TIM2_Init+0xfc>)
 800136c:	4a2d      	ldr	r2, [pc, #180]	; (8001424 <MX_TIM2_Init+0x100>)
 800136e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <MX_TIM2_Init+0xfc>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <MX_TIM2_Init+0xfc>)
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800137c:	4828      	ldr	r0, [pc, #160]	; (8001420 <MX_TIM2_Init+0xfc>)
 800137e:	f003 fef1 	bl	8005164 <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001388:	f000 f92a 	bl	80015e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001396:	4619      	mov	r1, r3
 8001398:	4821      	ldr	r0, [pc, #132]	; (8001420 <MX_TIM2_Init+0xfc>)
 800139a:	f004 f9b5 	bl	8005708 <HAL_TIM_ConfigClockSource>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013a4:	f000 f91c 	bl	80015e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013a8:	481d      	ldr	r0, [pc, #116]	; (8001420 <MX_TIM2_Init+0xfc>)
 80013aa:	f003 ff32 	bl	8005212 <HAL_TIM_PWM_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013b4:	f000 f914 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4816      	ldr	r0, [pc, #88]	; (8001420 <MX_TIM2_Init+0xfc>)
 80013c8:	f004 fe98 	bl	80060fc <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013d2:	f000 f905 	bl	80015e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d6:	2360      	movs	r3, #96	; 0x60
 80013d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <MX_TIM2_Init+0xfc>)
 80013ee:	f004 f877 	bl	80054e0 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013f8:	f000 f8f2 	bl	80015e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	2204      	movs	r2, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_TIM2_Init+0xfc>)
 8001404:	f004 f86c 	bl	80054e0 <HAL_TIM_PWM_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800140e:	f000 f8e7 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <MX_TIM2_Init+0xfc>)
 8001414:	f000 f9cc 	bl	80017b0 <HAL_TIM_MspPostInit>

}
 8001418:	bf00      	nop
 800141a:	3738      	adds	r7, #56	; 0x38
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000178 	.word	0x20000178
 8001424:	000222e0 	.word	0x000222e0

08001428 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_USART1_UART_Init+0x58>)
 800142e:	4a15      	ldr	r2, [pc, #84]	; (8001484 <MX_USART1_UART_Init+0x5c>)
 8001430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_USART1_UART_Init+0x58>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_USART1_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_USART1_UART_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_USART1_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_USART1_UART_Init+0x58>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_USART1_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_USART1_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_USART1_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_USART1_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_USART1_UART_Init+0x58>)
 800146c:	f004 fece 	bl	800620c <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001476:	f000 f8b3 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200001c4 	.word	0x200001c4
 8001484:	40013800 	.word	0x40013800

08001488 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 800148e:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <MX_USART2_UART_Init+0x5c>)
 8001490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014cc:	f004 fe9e 	bl	800620c <HAL_UART_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014d6:	f000 f883 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000024c 	.word	0x2000024c
 80014e4:	40004400 	.word	0x40004400

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <MX_GPIO_Init+0xf0>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a35      	ldr	r2, [pc, #212]	; (80015d8 <MX_GPIO_Init+0xf0>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <MX_GPIO_Init+0xf0>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <MX_GPIO_Init+0xf0>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <MX_GPIO_Init+0xf0>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <MX_GPIO_Init+0xf0>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <MX_GPIO_Init+0xf0>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a29      	ldr	r2, [pc, #164]	; (80015d8 <MX_GPIO_Init+0xf0>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <MX_GPIO_Init+0xf0>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <MX_GPIO_Init+0xf0>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a23      	ldr	r2, [pc, #140]	; (80015d8 <MX_GPIO_Init+0xf0>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <MX_GPIO_Init+0xf0>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAM_FLASH_Pin|READY_FLAG_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	21c0      	movs	r1, #192	; 0xc0
 8001562:	481e      	ldr	r0, [pc, #120]	; (80015dc <MX_GPIO_Init+0xf4>)
 8001564:	f000 fe34 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_CS_GPIO_Port, CAM_CS_Pin, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001572:	f000 fe2d 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800157c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <MX_GPIO_Init+0xf4>)
 800158e:	f000 fc75 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_FLASH_Pin READY_FLAG_Pin */
  GPIO_InitStruct.Pin = CAM_FLASH_Pin|READY_FLAG_Pin;
 8001592:	23c0      	movs	r3, #192	; 0xc0
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800159a:	2302      	movs	r3, #2
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <MX_GPIO_Init+0xf4>)
 80015aa:	f000 fc67 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_CS_Pin */
  GPIO_InitStruct.Pin = CAM_CS_Pin;
 80015ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_CS_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ca:	f000 fc57 	bl	8001e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	48000800 	.word	0x48000800

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <Error_Handler+0x8>
	...

080015ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_MspInit+0x44>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_MspInit+0x44>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6613      	str	r3, [r2, #96]	; 0x60
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_MspInit+0x44>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_MspInit+0x44>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_MspInit+0x44>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6593      	str	r3, [r2, #88]	; 0x58
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_MspInit+0x44>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0ac      	sub	sp, #176	; 0xb0
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2288      	movs	r2, #136	; 0x88
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f005 ff2b 	bl	80074b0 <memset>
  if(hi2c->Instance==I2C1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a21      	ldr	r2, [pc, #132]	; (80016e4 <HAL_I2C_MspInit+0xb0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d13b      	bne.n	80016dc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001664:	2340      	movs	r3, #64	; 0x40
 8001666:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001668:	2300      	movs	r3, #0
 800166a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4618      	mov	r0, r3
 8001672:	f002 f98d 	bl	8003990 <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800167c:	f7ff ffb0 	bl	80015e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_I2C_MspInit+0xb4>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <HAL_I2C_MspInit+0xb4>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_I2C_MspInit+0xb4>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001698:	f44f 7340 	mov.w	r3, #768	; 0x300
 800169c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a0:	2312      	movs	r3, #18
 80016a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b2:	2304      	movs	r3, #4
 80016b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016bc:	4619      	mov	r1, r3
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <HAL_I2C_MspInit+0xb8>)
 80016c0:	f000 fbdc 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_I2C_MspInit+0xb4>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_I2C_MspInit+0xb4>)
 80016ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ce:	6593      	str	r3, [r2, #88]	; 0x58
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_I2C_MspInit+0xb4>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	37b0      	adds	r7, #176	; 0xb0
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40005400 	.word	0x40005400
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000400 	.word	0x48000400

080016f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a17      	ldr	r2, [pc, #92]	; (800176c <HAL_SPI_MspInit+0x7c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d128      	bne.n	8001764 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_SPI_MspInit+0x80>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	4a16      	ldr	r2, [pc, #88]	; (8001770 <HAL_SPI_MspInit+0x80>)
 8001718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800171c:	6613      	str	r3, [r2, #96]	; 0x60
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_SPI_MspInit+0x80>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_SPI_MspInit+0x80>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a10      	ldr	r2, [pc, #64]	; (8001770 <HAL_SPI_MspInit+0x80>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_SPI_MspInit+0x80>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001742:	23e0      	movs	r3, #224	; 0xe0
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001752:	2305      	movs	r3, #5
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001760:	f000 fb8c 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40013000 	.word	0x40013000
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001784:	d10b      	bne.n	800179e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_TIM_Base_MspInit+0x38>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_TIM_Base_MspInit+0x38>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6593      	str	r3, [r2, #88]	; 0x58
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_TIM_Base_MspInit+0x38>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d0:	d11c      	bne.n	800180c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_TIM_MspPostInit+0x64>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <HAL_TIM_MspPostInit+0x64>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <HAL_TIM_MspPostInit+0x64>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ea:	2303      	movs	r3, #3
 80017ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001808:	f000 fb38 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800180c:	bf00      	nop
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b0ae      	sub	sp, #184	; 0xb8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	2288      	movs	r2, #136	; 0x88
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f005 fe39 	bl	80074b0 <memset>
  if(huart->Instance==USART1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a43      	ldr	r2, [pc, #268]	; (8001950 <HAL_UART_MspInit+0x138>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d13d      	bne.n	80018c4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001848:	2301      	movs	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800184c:	2300      	movs	r3, #0
 800184e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4618      	mov	r0, r3
 8001856:	f002 f89b 	bl	8003990 <HAL_RCCEx_PeriphCLKConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001860:	f7ff febe 	bl	80015e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001864:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_UART_MspInit+0x13c>)
 8001866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001868:	4a3a      	ldr	r2, [pc, #232]	; (8001954 <HAL_UART_MspInit+0x13c>)
 800186a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186e:	6613      	str	r3, [r2, #96]	; 0x60
 8001870:	4b38      	ldr	r3, [pc, #224]	; (8001954 <HAL_UART_MspInit+0x13c>)
 8001872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b35      	ldr	r3, [pc, #212]	; (8001954 <HAL_UART_MspInit+0x13c>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001880:	4a34      	ldr	r2, [pc, #208]	; (8001954 <HAL_UART_MspInit+0x13c>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001888:	4b32      	ldr	r3, [pc, #200]	; (8001954 <HAL_UART_MspInit+0x13c>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001894:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ae:	2307      	movs	r3, #7
 80018b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018b8:	4619      	mov	r1, r3
 80018ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018be:	f000 fadd 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018c2:	e040      	b.n	8001946 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a23      	ldr	r2, [pc, #140]	; (8001958 <HAL_UART_MspInit+0x140>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d13b      	bne.n	8001946 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 f858 	bl	8003990 <HAL_RCCEx_PeriphCLKConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80018e6:	f7ff fe7b 	bl	80015e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_UART_MspInit+0x13c>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_UART_MspInit+0x13c>)
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	6593      	str	r3, [r2, #88]	; 0x58
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_UART_MspInit+0x13c>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <HAL_UART_MspInit+0x13c>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	4a13      	ldr	r2, [pc, #76]	; (8001954 <HAL_UART_MspInit+0x13c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_UART_MspInit+0x13c>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800191a:	230c      	movs	r3, #12
 800191c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001932:	2307      	movs	r3, #7
 8001934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001942:	f000 fa9b 	bl	8001e7c <HAL_GPIO_Init>
}
 8001946:	bf00      	nop
 8001948:	37b8      	adds	r7, #184	; 0xb8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40013800 	.word	0x40013800
 8001954:	40021000 	.word	0x40021000
 8001958:	40004400 	.word	0x40004400

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <NMI_Handler+0x4>

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <MemManage_Handler+0x4>

0800196e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <UsageFault_Handler+0x4>

0800197a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a8:	f000 f93e 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e00a      	b.n	80019d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c2:	f3af 8000 	nop.w
 80019c6:	4601      	mov	r1, r0
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	b2ca      	uxtb	r2, r1
 80019d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dbf0      	blt.n	80019c2 <_read+0x12>
  }

  return len;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e009      	b.n	8001a10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	60ba      	str	r2, [r7, #8]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fa9f 	bl	8000f48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf1      	blt.n	80019fc <_write+0x12>
  }
  return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_close>:

int _close(int file)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_isatty>:

int _isatty(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a94:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <_sbrk+0x5c>)
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <_sbrk+0x60>)
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <_sbrk+0x64>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <_sbrk+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d207      	bcs.n	8001acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001abc:	f005 fd56 	bl	800756c <__errno>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e009      	b.n	8001ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <_sbrk+0x64>)
 8001adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20018000 	.word	0x20018000
 8001aec:	00000400 	.word	0x00000400
 8001af0:	200002d4 	.word	0x200002d4
 8001af4:	20000428 	.word	0x20000428

08001af8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <SystemInit+0x20>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <SystemInit+0x20>)
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b20:	f7ff ffea 	bl	8001af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b26:	490d      	ldr	r1, [pc, #52]	; (8001b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <LoopForever+0xe>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b3c:	4c0a      	ldr	r4, [pc, #40]	; (8001b68 <LoopForever+0x16>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f005 fd15 	bl	8007578 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b4e:	f7ff fa0f 	bl	8000f70 <main>

08001b52 <LoopForever>:

LoopForever:
    b LoopForever
 8001b52:	e7fe      	b.n	8001b52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001b60:	08008708 	.word	0x08008708
  ldr r2, =_sbss
 8001b64:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001b68:	20000428 	.word	0x20000428

08001b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC1_2_IRQHandler>
	...

08001b70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_Init+0x3c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <HAL_Init+0x3c>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b86:	2003      	movs	r0, #3
 8001b88:	f000 f944 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f000 f80f 	bl	8001bb0 <HAL_InitTick>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	e001      	b.n	8001ba2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b9e:	f7ff fd25 	bl	80015ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40022000 	.word	0x40022000

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_InitTick+0x6c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d023      	beq.n	8001c0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <HAL_InitTick+0x70>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_InitTick+0x6c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f941 	bl	8001e62 <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10f      	bne.n	8001c06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0f      	cmp	r3, #15
 8001bea:	d809      	bhi.n	8001c00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bec:	2200      	movs	r2, #0
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f000 f919 	bl	8001e2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_InitTick+0x74>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e007      	b.n	8001c10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e004      	b.n	8001c10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e001      	b.n	8001c10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000003c 	.word	0x2000003c
 8001c20:	20000034 	.word	0x20000034
 8001c24:	20000038 	.word	0x20000038

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	2000003c 	.word	0x2000003c
 8001c4c:	200002d8 	.word	0x200002d8

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200002d8 	.word	0x200002d8

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_Delay+0x44>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffde 	bl	8001c50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000003c 	.word	0x2000003c

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	; (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	; 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff47 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff5c 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff8e 	bl	8001d68 <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffb0 	bl	8001dd0 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8a:	e17f      	b.n	800218c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8171 	beq.w	8002186 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d005      	beq.n	8001ebc <HAL_GPIO_Init+0x40>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d130      	bne.n	8001f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	f003 0201 	and.w	r2, r3, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d118      	bne.n	8001f5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f30:	2201      	movs	r2, #1
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	f003 0201 	and.w	r2, r3, #1
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d017      	beq.n	8001f98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d123      	bne.n	8001fec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	6939      	ldr	r1, [r7, #16]
 8001fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0203 	and.w	r2, r3, #3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80ac 	beq.w	8002186 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	4b5f      	ldr	r3, [pc, #380]	; (80021ac <HAL_GPIO_Init+0x330>)
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	4a5e      	ldr	r2, [pc, #376]	; (80021ac <HAL_GPIO_Init+0x330>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6613      	str	r3, [r2, #96]	; 0x60
 800203a:	4b5c      	ldr	r3, [pc, #368]	; (80021ac <HAL_GPIO_Init+0x330>)
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002046:	4a5a      	ldr	r2, [pc, #360]	; (80021b0 <HAL_GPIO_Init+0x334>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002070:	d025      	beq.n	80020be <HAL_GPIO_Init+0x242>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4f      	ldr	r2, [pc, #316]	; (80021b4 <HAL_GPIO_Init+0x338>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01f      	beq.n	80020ba <HAL_GPIO_Init+0x23e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4e      	ldr	r2, [pc, #312]	; (80021b8 <HAL_GPIO_Init+0x33c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d019      	beq.n	80020b6 <HAL_GPIO_Init+0x23a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4d      	ldr	r2, [pc, #308]	; (80021bc <HAL_GPIO_Init+0x340>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0x236>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4c      	ldr	r2, [pc, #304]	; (80021c0 <HAL_GPIO_Init+0x344>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00d      	beq.n	80020ae <HAL_GPIO_Init+0x232>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4b      	ldr	r2, [pc, #300]	; (80021c4 <HAL_GPIO_Init+0x348>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <HAL_GPIO_Init+0x22e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4a      	ldr	r2, [pc, #296]	; (80021c8 <HAL_GPIO_Init+0x34c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_GPIO_Init+0x22a>
 80020a2:	2306      	movs	r3, #6
 80020a4:	e00c      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020a6:	2307      	movs	r3, #7
 80020a8:	e00a      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020aa:	2305      	movs	r3, #5
 80020ac:	e008      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020b2:	2303      	movs	r3, #3
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020be:	2300      	movs	r3, #0
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020d0:	4937      	ldr	r1, [pc, #220]	; (80021b0 <HAL_GPIO_Init+0x334>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_GPIO_Init+0x350>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002102:	4a32      	ldr	r2, [pc, #200]	; (80021cc <HAL_GPIO_Init+0x350>)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002108:	4b30      	ldr	r3, [pc, #192]	; (80021cc <HAL_GPIO_Init+0x350>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800212c:	4a27      	ldr	r2, [pc, #156]	; (80021cc <HAL_GPIO_Init+0x350>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <HAL_GPIO_Init+0x350>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <HAL_GPIO_Init+0x350>)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_GPIO_Init+0x350>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	43db      	mvns	r3, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002180:	4a12      	ldr	r2, [pc, #72]	; (80021cc <HAL_GPIO_Init+0x350>)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	f47f ae78 	bne.w	8001e8c <HAL_GPIO_Init+0x10>
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40010000 	.word	0x40010000
 80021b4:	48000400 	.word	0x48000400
 80021b8:	48000800 	.word	0x48000800
 80021bc:	48000c00 	.word	0x48000c00
 80021c0:	48001000 	.word	0x48001000
 80021c4:	48001400 	.word	0x48001400
 80021c8:	48001800 	.word	0x48001800
 80021cc:	40010400 	.word	0x40010400

080021d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
 80021dc:	4613      	mov	r3, r2
 80021de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e0:	787b      	ldrb	r3, [r7, #1]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ec:	e002      	b.n	80021f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e08d      	b.n	800232e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fa04 	bl	8001634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2224      	movs	r2, #36	; 0x24
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002250:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002260:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	e006      	b.n	8002288 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002286:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d108      	bne.n	80022a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	e007      	b.n	80022b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69d9      	ldr	r1, [r3, #28]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	461a      	mov	r2, r3
 8002344:	460b      	mov	r3, r1
 8002346:	817b      	strh	r3, [r7, #10]
 8002348:	4613      	mov	r3, r2
 800234a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	f040 80fd 	bne.w	8002554 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_I2C_Master_Transmit+0x30>
 8002364:	2302      	movs	r3, #2
 8002366:	e0f6      	b.n	8002556 <HAL_I2C_Master_Transmit+0x21e>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002370:	f7ff fc6e 	bl	8001c50 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2319      	movs	r3, #25
 800237c:	2201      	movs	r2, #1
 800237e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fa1d 	bl	80027c2 <I2C_WaitOnFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0e1      	b.n	8002556 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2221      	movs	r2, #33	; 0x21
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2210      	movs	r2, #16
 800239e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	893a      	ldrh	r2, [r7, #8]
 80023b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2bff      	cmp	r3, #255	; 0xff
 80023c2:	d906      	bls.n	80023d2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	22ff      	movs	r2, #255	; 0xff
 80023c8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80023ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	e007      	b.n	80023e2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80023dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d024      	beq.n	8002434 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	b2db      	uxtb	r3, r3
 8002420:	3301      	adds	r3, #1
 8002422:	b2da      	uxtb	r2, r3
 8002424:	8979      	ldrh	r1, [r7, #10]
 8002426:	4b4e      	ldr	r3, [pc, #312]	; (8002560 <HAL_I2C_Master_Transmit+0x228>)
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fb81 	bl	8002b34 <I2C_TransferConfig>
 8002432:	e066      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	b2da      	uxtb	r2, r3
 800243a:	8979      	ldrh	r1, [r7, #10]
 800243c:	4b48      	ldr	r3, [pc, #288]	; (8002560 <HAL_I2C_Master_Transmit+0x228>)
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fb76 	bl	8002b34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002448:	e05b      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	6a39      	ldr	r1, [r7, #32]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fa06 	bl	8002860 <I2C_WaitOnTXISFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07b      	b.n	8002556 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d034      	beq.n	8002502 <HAL_I2C_Master_Transmit+0x1ca>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249c:	2b00      	cmp	r3, #0
 800249e:	d130      	bne.n	8002502 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f989 	bl	80027c2 <I2C_WaitOnFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e04d      	b.n	8002556 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2bff      	cmp	r3, #255	; 0xff
 80024c2:	d90e      	bls.n	80024e2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	22ff      	movs	r2, #255	; 0xff
 80024c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	8979      	ldrh	r1, [r7, #10]
 80024d2:	2300      	movs	r3, #0
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fb2a 	bl	8002b34 <I2C_TransferConfig>
 80024e0:	e00f      	b.n	8002502 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	8979      	ldrh	r1, [r7, #10]
 80024f4:	2300      	movs	r3, #0
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fb19 	bl	8002b34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d19e      	bne.n	800244a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	6a39      	ldr	r1, [r7, #32]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f9ec 	bl	80028ee <I2C_WaitOnSTOPFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e01a      	b.n	8002556 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2220      	movs	r2, #32
 8002526:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <HAL_I2C_Master_Transmit+0x22c>)
 8002534:	400b      	ands	r3, r1
 8002536:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	e000      	b.n	8002556 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002554:	2302      	movs	r3, #2
  }
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	80002000 	.word	0x80002000
 8002564:	fe00e800 	.word	0xfe00e800

08002568 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af02      	add	r7, sp, #8
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	460b      	mov	r3, r1
 8002576:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b20      	cmp	r3, #32
 8002586:	f040 80f3 	bne.w	8002770 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002598:	d101      	bne.n	800259e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	e0e9      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_I2C_IsDeviceReady+0x44>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e0e2      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x20a>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2224      	movs	r2, #36	; 0x24
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_I2C_IsDeviceReady+0x72>
 80025ca:	897b      	ldrh	r3, [r7, #10]
 80025cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025d8:	e006      	b.n	80025e8 <HAL_I2C_IsDeviceReady+0x80>
 80025da:	897b      	ldrh	r3, [r7, #10]
 80025dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80025ee:	f7ff fb2f 	bl	8001c50 <HAL_GetTick>
 80025f2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b20      	cmp	r3, #32
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b10      	cmp	r3, #16
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002620:	e034      	b.n	800268c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d01a      	beq.n	8002660 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7ff fb11 	bl	8001c50 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <HAL_I2C_IsDeviceReady+0xd8>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10f      	bne.n	8002660 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e088      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b20      	cmp	r3, #32
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b10      	cmp	r3, #16
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800268c:	7ffb      	ldrb	r3, [r7, #31]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_I2C_IsDeviceReady+0x130>
 8002692:	7fbb      	ldrb	r3, [r7, #30]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0c4      	beq.n	8002622 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b10      	cmp	r3, #16
 80026a4:	d01a      	beq.n	80026dc <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2120      	movs	r1, #32
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f886 	bl	80027c2 <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e058      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2220      	movs	r2, #32
 80026c6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	e04a      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2200      	movs	r2, #0
 80026e4:	2120      	movs	r1, #32
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f86b 	bl	80027c2 <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e03d      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2210      	movs	r2, #16
 80026fc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2220      	movs	r2, #32
 8002704:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d118      	bne.n	8002740 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800271c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2200      	movs	r2, #0
 8002726:	2120      	movs	r1, #32
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f84a 	bl	80027c2 <I2C_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e01c      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2220      	movs	r2, #32
 800273e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	f63f af39 	bhi.w	80025c2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d103      	bne.n	8002798 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2200      	movs	r2, #0
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d007      	beq.n	80027b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	619a      	str	r2, [r3, #24]
  }
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d2:	e031      	b.n	8002838 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d02d      	beq.n	8002838 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027dc:	f7ff fa38 	bl	8001c50 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d302      	bcc.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d122      	bne.n	8002838 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699a      	ldr	r2, [r3, #24]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4013      	ands	r3, r2
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	429a      	cmp	r2, r3
 8002800:	bf0c      	ite	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	2300      	movne	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	429a      	cmp	r2, r3
 800280e:	d113      	bne.n	8002838 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	f043 0220 	orr.w	r2, r3, #32
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e00f      	b.n	8002858 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4013      	ands	r3, r2
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	429a      	cmp	r2, r3
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	429a      	cmp	r2, r3
 8002854:	d0be      	beq.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800286c:	e033      	b.n	80028d6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f87e 	bl	8002974 <I2C_IsErrorOccurred>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e031      	b.n	80028e6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d025      	beq.n	80028d6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7ff f9e1 	bl	8001c50 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d11a      	bne.n	80028d6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d013      	beq.n	80028d6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f043 0220 	orr.w	r2, r3, #32
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e007      	b.n	80028e6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d1c4      	bne.n	800286e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028fa:	e02f      	b.n	800295c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f837 	bl	8002974 <I2C_IsErrorOccurred>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e02d      	b.n	800296c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002910:	f7ff f99e 	bl	8001c50 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	429a      	cmp	r2, r3
 800291e:	d302      	bcc.n	8002926 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d11a      	bne.n	800295c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b20      	cmp	r3, #32
 8002932:	d013      	beq.n	800295c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e007      	b.n	800296c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b20      	cmp	r3, #32
 8002968:	d1c8      	bne.n	80028fc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	d068      	beq.n	8002a72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2210      	movs	r2, #16
 80029a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029a8:	e049      	b.n	8002a3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d045      	beq.n	8002a3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7ff f94d 	bl	8001c50 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_IsErrorOccurred+0x54>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d13a      	bne.n	8002a3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ea:	d121      	bne.n	8002a30 <I2C_IsErrorOccurred+0xbc>
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029f2:	d01d      	beq.n	8002a30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d01a      	beq.n	8002a30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a0a:	f7ff f921 	bl	8001c50 <HAL_GetTick>
 8002a0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a10:	e00e      	b.n	8002a30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a12:	f7ff f91d 	bl	8001c50 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b19      	cmp	r3, #25
 8002a1e:	d907      	bls.n	8002a30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	f043 0320 	orr.w	r3, r3, #32
 8002a26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002a2e:	e006      	b.n	8002a3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d1e9      	bne.n	8002a12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d003      	beq.n	8002a54 <I2C_IsErrorOccurred+0xe0>
 8002a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0aa      	beq.n	80029aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d103      	bne.n	8002a64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2220      	movs	r2, #32
 8002a62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	f043 0302 	orr.w	r3, r3, #2
 8002ace:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01c      	beq.n	8002b22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff fe46 	bl	800277a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <I2C_IsErrorOccurred+0x1bc>)
 8002afa:	400b      	ands	r3, r1
 8002afc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3728      	adds	r7, #40	; 0x28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	fe00e800 	.word	0xfe00e800

08002b34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	817b      	strh	r3, [r7, #10]
 8002b42:	4613      	mov	r3, r2
 8002b44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b4c:	7a7b      	ldrb	r3, [r7, #9]
 8002b4e:	041b      	lsls	r3, r3, #16
 8002b50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	0d5b      	lsrs	r3, r3, #21
 8002b6e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <I2C_TransferConfig+0x60>)
 8002b74:	430b      	orrs	r3, r1
 8002b76:	43db      	mvns	r3, r3
 8002b78:	ea02 0103 	and.w	r1, r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	03ff63ff 	.word	0x03ff63ff

08002b98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d138      	bne.n	8002c20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e032      	b.n	8002c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e000      	b.n	8002c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c20:	2302      	movs	r3, #2
  }
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d139      	bne.n	8002cb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e033      	b.n	8002cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2224      	movs	r2, #36	; 0x24
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40007000 	.word	0x40007000

08002ce4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf2:	d130      	bne.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf4:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d00:	d038      	beq.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2232      	movs	r2, #50	; 0x32
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0c9b      	lsrs	r3, r3, #18
 8002d24:	3301      	adds	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d28:	e002      	b.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3c:	d102      	bne.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f2      	bne.n	8002d2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d50:	d110      	bne.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e00f      	b.n	8002d76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d007      	beq.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d6c:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40007000 	.word	0x40007000
 8002d88:	20000034 	.word	0x20000034
 8002d8c:	431bde83 	.word	0x431bde83

08002d90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e3ca      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da2:	4b97      	ldr	r3, [pc, #604]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dac:	4b94      	ldr	r3, [pc, #592]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80e4 	beq.w	8002f8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_RCC_OscConfig+0x4a>
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b0c      	cmp	r3, #12
 8002dce:	f040 808b 	bne.w	8002ee8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	f040 8087 	bne.w	8002ee8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dda:	4b89      	ldr	r3, [pc, #548]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x62>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e3a2      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	4b82      	ldr	r3, [pc, #520]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_RCC_OscConfig+0x7c>
 8002e02:	4b7f      	ldr	r3, [pc, #508]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0a:	e005      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
 8002e0c:	4b7c      	ldr	r3, [pc, #496]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d223      	bcs.n	8002e64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fd55 	bl	80038d0 <RCC_SetFlashLatencyFromMSIRange>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e383      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e30:	4b73      	ldr	r3, [pc, #460]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a72      	ldr	r2, [pc, #456]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e36:	f043 0308 	orr.w	r3, r3, #8
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b70      	ldr	r3, [pc, #448]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	496d      	ldr	r1, [pc, #436]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4e:	4b6c      	ldr	r3, [pc, #432]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	4968      	ldr	r1, [pc, #416]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
 8002e62:	e025      	b.n	8002eb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e64:	4b66      	ldr	r3, [pc, #408]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a65      	ldr	r2, [pc, #404]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b63      	ldr	r3, [pc, #396]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4960      	ldr	r1, [pc, #384]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e82:	4b5f      	ldr	r3, [pc, #380]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	495b      	ldr	r1, [pc, #364]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fd15 	bl	80038d0 <RCC_SetFlashLatencyFromMSIRange>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e343      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eb0:	f000 fc4a 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b52      	ldr	r3, [pc, #328]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	4950      	ldr	r1, [pc, #320]	; (8003004 <HAL_RCC_OscConfig+0x274>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ecc:	4a4e      	ldr	r2, [pc, #312]	; (8003008 <HAL_RCC_OscConfig+0x278>)
 8002ece:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ed0:	4b4e      	ldr	r3, [pc, #312]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe fe6b 	bl	8001bb0 <HAL_InitTick>
 8002eda:	4603      	mov	r3, r0
 8002edc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d052      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	e327      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d032      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a42      	ldr	r2, [pc, #264]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002efc:	f7fe fea8 	bl	8001c50 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f04:	f7fe fea4 	bl	8001c50 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e310      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f16:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f22:	4b37      	ldr	r3, [pc, #220]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a36      	ldr	r2, [pc, #216]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f28:	f043 0308 	orr.w	r3, r3, #8
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b34      	ldr	r3, [pc, #208]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4931      	ldr	r1, [pc, #196]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f40:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	492c      	ldr	r1, [pc, #176]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
 8002f54:	e01a      	b.n	8002f8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f56:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a29      	ldr	r2, [pc, #164]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f62:	f7fe fe75 	bl	8001c50 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f6a:	f7fe fe71 	bl	8001c50 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e2dd      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f7c:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x1da>
 8002f88:	e000      	b.n	8002f8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d074      	beq.n	8003082 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d005      	beq.n	8002faa <HAL_RCC_OscConfig+0x21a>
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	d10e      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d064      	beq.n	8003080 <HAL_RCC_OscConfig+0x2f0>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d160      	bne.n	8003080 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e2ba      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x24a>
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e026      	b.n	8003028 <HAL_RCC_OscConfig+0x298>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe2:	d115      	bne.n	8003010 <HAL_RCC_OscConfig+0x280>
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a05      	ldr	r2, [pc, #20]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a02      	ldr	r2, [pc, #8]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	e014      	b.n	8003028 <HAL_RCC_OscConfig+0x298>
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	0800867c 	.word	0x0800867c
 8003008:	20000034 	.word	0x20000034
 800300c:	20000038 	.word	0x20000038
 8003010:	4ba0      	ldr	r3, [pc, #640]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a9f      	ldr	r2, [pc, #636]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b9d      	ldr	r3, [pc, #628]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a9c      	ldr	r2, [pc, #624]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fe0e 	bl	8001c50 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe fe0a 	bl	8001c50 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e276      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304a:	4b92      	ldr	r3, [pc, #584]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x2a8>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe fdfa 	bl	8001c50 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003060:	f7fe fdf6 	bl	8001c50 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e262      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003072:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x2d0>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d060      	beq.n	8003150 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_OscConfig+0x310>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d119      	bne.n	80030ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d116      	bne.n	80030ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a0:	4b7c      	ldr	r3, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_OscConfig+0x328>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e23f      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b8:	4b76      	ldr	r3, [pc, #472]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	4973      	ldr	r1, [pc, #460]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030cc:	e040      	b.n	8003150 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d023      	beq.n	800311e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d6:	4b6f      	ldr	r3, [pc, #444]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6e      	ldr	r2, [pc, #440]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fe fdb5 	bl	8001c50 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ea:	f7fe fdb1 	bl	8001c50 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e21d      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fc:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003108:	4b62      	ldr	r3, [pc, #392]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	495f      	ldr	r1, [pc, #380]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
 800311c:	e018      	b.n	8003150 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311e:	4b5d      	ldr	r3, [pc, #372]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a5c      	ldr	r2, [pc, #368]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fe fd91 	bl	8001c50 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003132:	f7fe fd8d 	bl	8001c50 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1f9      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f0      	bne.n	8003132 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d03c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01c      	beq.n	800319e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003164:	4b4b      	ldr	r3, [pc, #300]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316a:	4a4a      	ldr	r2, [pc, #296]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe fd6c 	bl	8001c50 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317c:	f7fe fd68 	bl	8001c50 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1d4      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318e:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ef      	beq.n	800317c <HAL_RCC_OscConfig+0x3ec>
 800319c:	e01b      	b.n	80031d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319e:	4b3d      	ldr	r3, [pc, #244]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a4:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fe fd4f 	bl	8001c50 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fe fd4b 	bl	8001c50 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1b7      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c8:	4b32      	ldr	r3, [pc, #200]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ef      	bne.n	80031b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80a6 	beq.w	8003330 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e4:	2300      	movs	r3, #0
 80031e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031e8:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10d      	bne.n	8003210 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	4a26      	ldr	r2, [pc, #152]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320c:	2301      	movs	r3, #1
 800320e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003210:	4b21      	ldr	r3, [pc, #132]	; (8003298 <HAL_RCC_OscConfig+0x508>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d118      	bne.n	800324e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <HAL_RCC_OscConfig+0x508>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_RCC_OscConfig+0x508>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003228:	f7fe fd12 	bl	8001c50 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fe fd0e 	bl	8001c50 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e17a      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_RCC_OscConfig+0x508>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_RCC_OscConfig+0x4d8>
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325c:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003266:	e029      	b.n	80032bc <HAL_RCC_OscConfig+0x52c>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b05      	cmp	r3, #5
 800326e:	d115      	bne.n	800329c <HAL_RCC_OscConfig+0x50c>
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003280:	4b04      	ldr	r3, [pc, #16]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	4a03      	ldr	r2, [pc, #12]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003290:	e014      	b.n	80032bc <HAL_RCC_OscConfig+0x52c>
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
 800329c:	4b9c      	ldr	r3, [pc, #624]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	4a9b      	ldr	r2, [pc, #620]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ac:	4b98      	ldr	r3, [pc, #608]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b2:	4a97      	ldr	r2, [pc, #604]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80032b4:	f023 0304 	bic.w	r3, r3, #4
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d016      	beq.n	80032f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fe fcc4 	bl	8001c50 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fe fcc0 	bl	8001c50 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e12a      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e2:	4b8b      	ldr	r3, [pc, #556]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ed      	beq.n	80032cc <HAL_RCC_OscConfig+0x53c>
 80032f0:	e015      	b.n	800331e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7fe fcad 	bl	8001c50 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032f8:	e00a      	b.n	8003310 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7fe fca9 	bl	8001c50 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f241 3288 	movw	r2, #5000	; 0x1388
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e113      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003310:	4b7f      	ldr	r3, [pc, #508]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ed      	bne.n	80032fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003324:	4b7a      	ldr	r3, [pc, #488]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003328:	4a79      	ldr	r2, [pc, #484]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 800332a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80fe 	beq.w	8003536 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	2b02      	cmp	r3, #2
 8003340:	f040 80d0 	bne.w	80034e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003344:	4b72      	ldr	r3, [pc, #456]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0203 	and.w	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	429a      	cmp	r2, r3
 8003356:	d130      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	3b01      	subs	r3, #1
 8003364:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d127      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003374:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d11f      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003384:	2a07      	cmp	r2, #7
 8003386:	bf14      	ite	ne
 8003388:	2201      	movne	r2, #1
 800338a:	2200      	moveq	r2, #0
 800338c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338e:	4293      	cmp	r3, r2
 8003390:	d113      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	3b01      	subs	r3, #1
 80033a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d109      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	3b01      	subs	r3, #1
 80033b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d06e      	beq.n	8003498 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d069      	beq.n	8003494 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033c0:	4b53      	ldr	r3, [pc, #332]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d105      	bne.n	80033d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033cc:	4b50      	ldr	r3, [pc, #320]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0ad      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033dc:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a4b      	ldr	r2, [pc, #300]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80033e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033e8:	f7fe fc32 	bl	8001c50 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe fc2e 	bl	8001c50 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e09a      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003402:	4b43      	ldr	r3, [pc, #268]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	4b40      	ldr	r3, [pc, #256]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800341e:	3a01      	subs	r2, #1
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	4311      	orrs	r1, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003428:	0212      	lsls	r2, r2, #8
 800342a:	4311      	orrs	r1, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003430:	0852      	lsrs	r2, r2, #1
 8003432:	3a01      	subs	r2, #1
 8003434:	0552      	lsls	r2, r2, #21
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800343c:	0852      	lsrs	r2, r2, #1
 800343e:	3a01      	subs	r2, #1
 8003440:	0652      	lsls	r2, r2, #25
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003448:	0912      	lsrs	r2, r2, #4
 800344a:	0452      	lsls	r2, r2, #17
 800344c:	430a      	orrs	r2, r1
 800344e:	4930      	ldr	r1, [pc, #192]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003450:	4313      	orrs	r3, r2
 8003452:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003454:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a2d      	ldr	r2, [pc, #180]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 800345a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003460:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a2a      	ldr	r2, [pc, #168]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800346c:	f7fe fbf0 	bl	8001c50 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe fbec 	bl	8001c50 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e058      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003486:	4b22      	ldr	r3, [pc, #136]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003492:	e050      	b.n	8003536 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e04f      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d148      	bne.n	8003536 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a19      	ldr	r2, [pc, #100]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a16      	ldr	r2, [pc, #88]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034bc:	f7fe fbc8 	bl	8001c50 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fe fbc4 	bl	8001c50 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e030      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x734>
 80034e2:	e028      	b.n	8003536 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d023      	beq.n	8003532 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a08      	ldr	r2, [pc, #32]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fe fbab 	bl	8001c50 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fc:	e00c      	b.n	8003518 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fe:	f7fe fba7 	bl	8001c50 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d905      	bls.n	8003518 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e013      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
 8003510:	40021000 	.word	0x40021000
 8003514:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_OscConfig+0x7b0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ec      	bne.n	80034fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_OscConfig+0x7b0>)
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	4905      	ldr	r1, [pc, #20]	; (8003540 <HAL_RCC_OscConfig+0x7b0>)
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCC_OscConfig+0x7b4>)
 800352c:	4013      	ands	r3, r2
 800352e:	60cb      	str	r3, [r1, #12]
 8003530:	e001      	b.n	8003536 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	feeefffc 	.word	0xfeeefffc

08003548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0e7      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b75      	ldr	r3, [pc, #468]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d910      	bls.n	800358c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b72      	ldr	r3, [pc, #456]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 0207 	bic.w	r2, r3, #7
 8003572:	4970      	ldr	r1, [pc, #448]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b6e      	ldr	r3, [pc, #440]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0cf      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d010      	beq.n	80035ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	4b66      	ldr	r3, [pc, #408]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d908      	bls.n	80035ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4960      	ldr	r1, [pc, #384]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d04c      	beq.n	8003660 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	4b5a      	ldr	r3, [pc, #360]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d121      	bne.n	800361e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0a6      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e6:	4b54      	ldr	r3, [pc, #336]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d115      	bne.n	800361e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e09a      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035fe:	4b4e      	ldr	r3, [pc, #312]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e08e      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800360e:	4b4a      	ldr	r3, [pc, #296]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e086      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b46      	ldr	r3, [pc, #280]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4943      	ldr	r1, [pc, #268]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003630:	f7fe fb0e 	bl	8001c50 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fe fb0a 	bl	8001c50 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e06e      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d010      	beq.n	800368e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003678:	429a      	cmp	r2, r3
 800367a:	d208      	bcs.n	800368e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367c:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	492b      	ldr	r1, [pc, #172]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800368e:	4b29      	ldr	r3, [pc, #164]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d210      	bcs.n	80036be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 0207 	bic.w	r2, r3, #7
 80036a4:	4923      	ldr	r1, [pc, #140]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ac:	4b21      	ldr	r3, [pc, #132]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d001      	beq.n	80036be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e036      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4918      	ldr	r1, [pc, #96]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d009      	beq.n	80036fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4910      	ldr	r1, [pc, #64]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036fc:	f000 f824 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8003700:	4602      	mov	r2, r0
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	091b      	lsrs	r3, r3, #4
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	490b      	ldr	r1, [pc, #44]	; (800373c <HAL_RCC_ClockConfig+0x1f4>)
 800370e:	5ccb      	ldrb	r3, [r1, r3]
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
 8003718:	4a09      	ldr	r2, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x1f8>)
 800371a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_RCC_ClockConfig+0x1fc>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe fa45 	bl	8001bb0 <HAL_InitTick>
 8003726:	4603      	mov	r3, r0
 8003728:	72fb      	strb	r3, [r7, #11]

  return status;
 800372a:	7afb      	ldrb	r3, [r7, #11]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40022000 	.word	0x40022000
 8003738:	40021000 	.word	0x40021000
 800373c:	0800867c 	.word	0x0800867c
 8003740:	20000034 	.word	0x20000034
 8003744:	20000038 	.word	0x20000038

08003748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003756:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003760:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x34>
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d121      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d11e      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800377c:	4b34      	ldr	r3, [pc, #208]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d107      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003788:	4b31      	ldr	r3, [pc, #196]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e005      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003798:	4b2d      	ldr	r3, [pc, #180]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037a4:	4a2b      	ldr	r2, [pc, #172]	; (8003854 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <HAL_RCC_GetSysClockFreq+0x110>)
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	e004      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037cc:	4b23      	ldr	r3, [pc, #140]	; (800385c <HAL_RCC_GetSysClockFreq+0x114>)
 80037ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d134      	bne.n	8003840 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037d6:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d003      	beq.n	80037ee <HAL_RCC_GetSysClockFreq+0xa6>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d003      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0xac>
 80037ec:	e005      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037ee:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <HAL_RCC_GetSysClockFreq+0x110>)
 80037f0:	617b      	str	r3, [r7, #20]
      break;
 80037f2:	e005      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_RCC_GetSysClockFreq+0x114>)
 80037f6:	617b      	str	r3, [r7, #20]
      break;
 80037f8:	e002      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	617b      	str	r3, [r7, #20]
      break;
 80037fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003800:	4b13      	ldr	r3, [pc, #76]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	3301      	adds	r3, #1
 800380c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	fb03 f202 	mul.w	r2, r3, r2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	0e5b      	lsrs	r3, r3, #25
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	3301      	adds	r3, #1
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003840:	69bb      	ldr	r3, [r7, #24]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	; 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000
 8003854:	08008694 	.word	0x08008694
 8003858:	00f42400 	.word	0x00f42400
 800385c:	007a1200 	.word	0x007a1200

08003860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <HAL_RCC_GetHCLKFreq+0x14>)
 8003866:	681b      	ldr	r3, [r3, #0]
}
 8003868:	4618      	mov	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000034 	.word	0x20000034

08003878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800387c:	f7ff fff0 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4904      	ldr	r1, [pc, #16]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	0800868c 	.word	0x0800868c

080038a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038a8:	f7ff ffda 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	0adb      	lsrs	r3, r3, #11
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	4904      	ldr	r1, [pc, #16]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ba:	5ccb      	ldrb	r3, [r1, r3]
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	0800868c 	.word	0x0800868c

080038d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038dc:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038e8:	f7ff f9ee 	bl	8002cc8 <HAL_PWREx_GetVoltageRange>
 80038ec:	6178      	str	r0, [r7, #20]
 80038ee:	e014      	b.n	800391a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038f0:	4b25      	ldr	r3, [pc, #148]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	4a24      	ldr	r2, [pc, #144]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fa:	6593      	str	r3, [r2, #88]	; 0x58
 80038fc:	4b22      	ldr	r3, [pc, #136]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003908:	f7ff f9de 	bl	8002cc8 <HAL_PWREx_GetVoltageRange>
 800390c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800390e:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003912:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003918:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003920:	d10b      	bne.n	800393a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d919      	bls.n	800395c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2ba0      	cmp	r3, #160	; 0xa0
 800392c:	d902      	bls.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800392e:	2302      	movs	r3, #2
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	e013      	b.n	800395c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003934:	2301      	movs	r3, #1
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	e010      	b.n	800395c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b80      	cmp	r3, #128	; 0x80
 800393e:	d902      	bls.n	8003946 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003940:	2303      	movs	r3, #3
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	e00a      	b.n	800395c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d102      	bne.n	8003952 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800394c:	2302      	movs	r3, #2
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	e004      	b.n	800395c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b70      	cmp	r3, #112	; 0x70
 8003956:	d101      	bne.n	800395c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003958:	2301      	movs	r3, #1
 800395a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 0207 	bic.w	r2, r3, #7
 8003964:	4909      	ldr	r1, [pc, #36]	; (800398c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800396c:	4b07      	ldr	r3, [pc, #28]	; (800398c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	429a      	cmp	r2, r3
 8003978:	d001      	beq.n	800397e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	40022000 	.word	0x40022000

08003990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003998:	2300      	movs	r3, #0
 800399a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800399c:	2300      	movs	r3, #0
 800399e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d041      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039b4:	d02a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039ba:	d824      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039c0:	d008      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039c6:	d81e      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d0:	d010      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039d2:	e018      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039d4:	4b86      	ldr	r3, [pc, #536]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a85      	ldr	r2, [pc, #532]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039e0:	e015      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fabb 	bl	8003f64 <RCCEx_PLLSAI1_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039f2:	e00c      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3320      	adds	r3, #32
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fba6 	bl	800414c <RCCEx_PLLSAI2_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a04:	e003      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	74fb      	strb	r3, [r7, #19]
      break;
 8003a0a:	e000      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0e:	7cfb      	ldrb	r3, [r7, #19]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a14:	4b76      	ldr	r3, [pc, #472]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a22:	4973      	ldr	r1, [pc, #460]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a2a:	e001      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d041      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a44:	d02a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a4a:	d824      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a50:	d008      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a56:	d81e      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a60:	d010      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a62:	e018      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a64:	4b62      	ldr	r3, [pc, #392]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4a61      	ldr	r2, [pc, #388]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a70:	e015      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3304      	adds	r3, #4
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fa73 	bl	8003f64 <RCCEx_PLLSAI1_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a82:	e00c      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3320      	adds	r3, #32
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fb5e 	bl	800414c <RCCEx_PLLSAI2_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a94:	e003      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	74fb      	strb	r3, [r7, #19]
      break;
 8003a9a:	e000      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aa4:	4b52      	ldr	r3, [pc, #328]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab2:	494f      	ldr	r1, [pc, #316]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003aba:	e001      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a0 	beq.w	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00d      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae8:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	4a40      	ldr	r2, [pc, #256]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af2:	6593      	str	r3, [r2, #88]	; 0x58
 8003af4:	4b3e      	ldr	r3, [pc, #248]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b00:	2301      	movs	r3, #1
 8003b02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b04:	4b3b      	ldr	r3, [pc, #236]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a3a      	ldr	r2, [pc, #232]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b10:	f7fe f89e 	bl	8001c50 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b16:	e009      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b18:	f7fe f89a 	bl	8001c50 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d902      	bls.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	74fb      	strb	r3, [r7, #19]
        break;
 8003b2a:	e005      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b2c:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0ef      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d15c      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b3e:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01f      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d019      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b68:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	4a20      	ldr	r2, [pc, #128]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	4a1c      	ldr	r2, [pc, #112]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b88:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d016      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9a:	f7fe f859 	bl	8001c50 <HAL_GetTick>
 8003b9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba0:	e00b      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba2:	f7fe f855 	bl	8001c50 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d902      	bls.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	74fb      	strb	r3, [r7, #19]
            break;
 8003bb8:	e006      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ec      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bde:	4904      	ldr	r1, [pc, #16]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003be6:	e009      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	74bb      	strb	r3, [r7, #18]
 8003bec:	e006      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfc:	7c7b      	ldrb	r3, [r7, #17]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d105      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c02:	4b9e      	ldr	r3, [pc, #632]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c06:	4a9d      	ldr	r2, [pc, #628]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c1a:	4b98      	ldr	r3, [pc, #608]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	f023 0203 	bic.w	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	4994      	ldr	r1, [pc, #592]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c3c:	4b8f      	ldr	r3, [pc, #572]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c42:	f023 020c 	bic.w	r2, r3, #12
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	498c      	ldr	r1, [pc, #560]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c5e:	4b87      	ldr	r3, [pc, #540]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	4983      	ldr	r1, [pc, #524]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c80:	4b7e      	ldr	r3, [pc, #504]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	497b      	ldr	r1, [pc, #492]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ca2:	4b76      	ldr	r3, [pc, #472]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb0:	4972      	ldr	r1, [pc, #456]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cc4:	4b6d      	ldr	r3, [pc, #436]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd2:	496a      	ldr	r1, [pc, #424]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ce6:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf4:	4961      	ldr	r1, [pc, #388]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d08:	4b5c      	ldr	r3, [pc, #368]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d16:	4959      	ldr	r1, [pc, #356]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d2a:	4b54      	ldr	r3, [pc, #336]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d38:	4950      	ldr	r1, [pc, #320]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d4c:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	4948      	ldr	r1, [pc, #288]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d6e:	4b43      	ldr	r3, [pc, #268]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	493f      	ldr	r1, [pc, #252]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d028      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d90:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9e:	4937      	ldr	r1, [pc, #220]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dae:	d106      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db0:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a31      	ldr	r2, [pc, #196]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dba:	60d3      	str	r3, [r2, #12]
 8003dbc:	e011      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dc6:	d10c      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 f8c8 	bl	8003f64 <RCCEx_PLLSAI1_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dd8:	7cfb      	ldrb	r3, [r7, #19]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dde:	7cfb      	ldrb	r3, [r7, #19]
 8003de0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d028      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dee:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	491f      	ldr	r1, [pc, #124]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0c:	d106      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4a1a      	ldr	r2, [pc, #104]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e18:	60d3      	str	r3, [r2, #12]
 8003e1a:	e011      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 f899 	bl	8003f64 <RCCEx_PLLSAI1_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d02b      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5a:	4908      	ldr	r1, [pc, #32]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e6a:	d109      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4a02      	ldr	r2, [pc, #8]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e76:	60d3      	str	r3, [r2, #12]
 8003e78:	e014      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 f867 	bl	8003f64 <RCCEx_PLLSAI1_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e9a:	7cfb      	ldrb	r3, [r7, #19]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d02f      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eb0:	4b2b      	ldr	r3, [pc, #172]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ebe:	4928      	ldr	r1, [pc, #160]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ece:	d10d      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f844 	bl	8003f64 <RCCEx_PLLSAI1_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d014      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ee6:	7cfb      	ldrb	r3, [r7, #19]
 8003ee8:	74bb      	strb	r3, [r7, #18]
 8003eea:	e011      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3320      	adds	r3, #32
 8003efa:	2102      	movs	r1, #2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f925 	bl	800414c <RCCEx_PLLSAI2_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f1c:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f2a:	490d      	ldr	r1, [pc, #52]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f3e:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f4e:	4904      	ldr	r1, [pc, #16]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f56:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000

08003f64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f72:	4b75      	ldr	r3, [pc, #468]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d018      	beq.n	8003fb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f7e:	4b72      	ldr	r3, [pc, #456]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0203 	and.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d10d      	bne.n	8003faa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
       ||
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f96:	4b6c      	ldr	r3, [pc, #432]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d047      	beq.n	800403a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
 8003fae:	e044      	b.n	800403a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d018      	beq.n	8003fea <RCCEx_PLLSAI1_Config+0x86>
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d825      	bhi.n	8004008 <RCCEx_PLLSAI1_Config+0xa4>
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d002      	beq.n	8003fc6 <RCCEx_PLLSAI1_Config+0x62>
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d009      	beq.n	8003fd8 <RCCEx_PLLSAI1_Config+0x74>
 8003fc4:	e020      	b.n	8004008 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fc6:	4b60      	ldr	r3, [pc, #384]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11d      	bne.n	800400e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd6:	e01a      	b.n	800400e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fd8:	4b5b      	ldr	r3, [pc, #364]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d116      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe8:	e013      	b.n	8004012 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fea:	4b57      	ldr	r3, [pc, #348]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10f      	bne.n	8004016 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ff6:	4b54      	ldr	r3, [pc, #336]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004006:	e006      	b.n	8004016 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
      break;
 800400c:	e004      	b.n	8004018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800400e:	bf00      	nop
 8004010:	e002      	b.n	8004018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004012:	bf00      	nop
 8004014:	e000      	b.n	8004018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004016:	bf00      	nop
    }

    if(status == HAL_OK)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10d      	bne.n	800403a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800401e:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6819      	ldr	r1, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	3b01      	subs	r3, #1
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	430b      	orrs	r3, r1
 8004034:	4944      	ldr	r1, [pc, #272]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004036:	4313      	orrs	r3, r2
 8004038:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d17d      	bne.n	800413c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004040:	4b41      	ldr	r3, [pc, #260]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a40      	ldr	r2, [pc, #256]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004046:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800404a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800404c:	f7fd fe00 	bl	8001c50 <HAL_GetTick>
 8004050:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004052:	e009      	b.n	8004068 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004054:	f7fd fdfc 	bl	8001c50 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d902      	bls.n	8004068 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	73fb      	strb	r3, [r7, #15]
        break;
 8004066:	e005      	b.n	8004074 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004068:	4b37      	ldr	r3, [pc, #220]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1ef      	bne.n	8004054 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d160      	bne.n	800413c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d111      	bne.n	80040a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004080:	4b31      	ldr	r3, [pc, #196]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6892      	ldr	r2, [r2, #8]
 8004090:	0211      	lsls	r1, r2, #8
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68d2      	ldr	r2, [r2, #12]
 8004096:	0912      	lsrs	r2, r2, #4
 8004098:	0452      	lsls	r2, r2, #17
 800409a:	430a      	orrs	r2, r1
 800409c:	492a      	ldr	r1, [pc, #168]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	610b      	str	r3, [r1, #16]
 80040a2:	e027      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d112      	bne.n	80040d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040aa:	4b27      	ldr	r3, [pc, #156]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6892      	ldr	r2, [r2, #8]
 80040ba:	0211      	lsls	r1, r2, #8
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6912      	ldr	r2, [r2, #16]
 80040c0:	0852      	lsrs	r2, r2, #1
 80040c2:	3a01      	subs	r2, #1
 80040c4:	0552      	lsls	r2, r2, #21
 80040c6:	430a      	orrs	r2, r1
 80040c8:	491f      	ldr	r1, [pc, #124]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	610b      	str	r3, [r1, #16]
 80040ce:	e011      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040d0:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6892      	ldr	r2, [r2, #8]
 80040e0:	0211      	lsls	r1, r2, #8
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6952      	ldr	r2, [r2, #20]
 80040e6:	0852      	lsrs	r2, r2, #1
 80040e8:	3a01      	subs	r2, #1
 80040ea:	0652      	lsls	r2, r2, #25
 80040ec:	430a      	orrs	r2, r1
 80040ee:	4916      	ldr	r1, [pc, #88]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040f4:	4b14      	ldr	r3, [pc, #80]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a13      	ldr	r2, [pc, #76]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fd fda6 	bl	8001c50 <HAL_GetTick>
 8004104:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004106:	e009      	b.n	800411c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004108:	f7fd fda2 	bl	8001c50 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d902      	bls.n	800411c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	73fb      	strb	r3, [r7, #15]
          break;
 800411a:	e005      	b.n	8004128 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ef      	beq.n	8004108 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	4904      	ldr	r1, [pc, #16]	; (8004148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004138:	4313      	orrs	r3, r2
 800413a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000

0800414c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800415a:	4b6a      	ldr	r3, [pc, #424]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d018      	beq.n	8004198 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004166:	4b67      	ldr	r3, [pc, #412]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0203 	and.w	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d10d      	bne.n	8004192 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
       ||
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800417e:	4b61      	ldr	r3, [pc, #388]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
       ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d047      	beq.n	8004222 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
 8004196:	e044      	b.n	8004222 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d018      	beq.n	80041d2 <RCCEx_PLLSAI2_Config+0x86>
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d825      	bhi.n	80041f0 <RCCEx_PLLSAI2_Config+0xa4>
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d002      	beq.n	80041ae <RCCEx_PLLSAI2_Config+0x62>
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d009      	beq.n	80041c0 <RCCEx_PLLSAI2_Config+0x74>
 80041ac:	e020      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041ae:	4b55      	ldr	r3, [pc, #340]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d11d      	bne.n	80041f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041be:	e01a      	b.n	80041f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041c0:	4b50      	ldr	r3, [pc, #320]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d116      	bne.n	80041fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d0:	e013      	b.n	80041fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041d2:	4b4c      	ldr	r3, [pc, #304]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10f      	bne.n	80041fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041de:	4b49      	ldr	r3, [pc, #292]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ee:	e006      	b.n	80041fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	e004      	b.n	8004200 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041f6:	bf00      	nop
 80041f8:	e002      	b.n	8004200 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041fa:	bf00      	nop
 80041fc:	e000      	b.n	8004200 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10d      	bne.n	8004222 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004206:	4b3f      	ldr	r3, [pc, #252]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6819      	ldr	r1, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	3b01      	subs	r3, #1
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	430b      	orrs	r3, r1
 800421c:	4939      	ldr	r1, [pc, #228]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421e:	4313      	orrs	r3, r2
 8004220:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d167      	bne.n	80042f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004228:	4b36      	ldr	r3, [pc, #216]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a35      	ldr	r2, [pc, #212]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004232:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004234:	f7fd fd0c 	bl	8001c50 <HAL_GetTick>
 8004238:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800423a:	e009      	b.n	8004250 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800423c:	f7fd fd08 	bl	8001c50 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d902      	bls.n	8004250 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	73fb      	strb	r3, [r7, #15]
        break;
 800424e:	e005      	b.n	800425c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004250:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1ef      	bne.n	800423c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d14a      	bne.n	80042f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d111      	bne.n	800428c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004268:	4b26      	ldr	r3, [pc, #152]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6892      	ldr	r2, [r2, #8]
 8004278:	0211      	lsls	r1, r2, #8
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68d2      	ldr	r2, [r2, #12]
 800427e:	0912      	lsrs	r2, r2, #4
 8004280:	0452      	lsls	r2, r2, #17
 8004282:	430a      	orrs	r2, r1
 8004284:	491f      	ldr	r1, [pc, #124]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004286:	4313      	orrs	r3, r2
 8004288:	614b      	str	r3, [r1, #20]
 800428a:	e011      	b.n	80042b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800428c:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004294:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6892      	ldr	r2, [r2, #8]
 800429c:	0211      	lsls	r1, r2, #8
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6912      	ldr	r2, [r2, #16]
 80042a2:	0852      	lsrs	r2, r2, #1
 80042a4:	3a01      	subs	r2, #1
 80042a6:	0652      	lsls	r2, r2, #25
 80042a8:	430a      	orrs	r2, r1
 80042aa:	4916      	ldr	r1, [pc, #88]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042b0:	4b14      	ldr	r3, [pc, #80]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a13      	ldr	r2, [pc, #76]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042bc:	f7fd fcc8 	bl	8001c50 <HAL_GetTick>
 80042c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042c2:	e009      	b.n	80042d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042c4:	f7fd fcc4 	bl	8001c50 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d902      	bls.n	80042d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	73fb      	strb	r3, [r7, #15]
          break;
 80042d6:	e005      	b.n	80042e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0ef      	beq.n	80042c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	4904      	ldr	r1, [pc, #16]	; (8004304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000

08004308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e095      	b.n	8004446 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	2b00      	cmp	r3, #0
 8004320:	d108      	bne.n	8004334 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432a:	d009      	beq.n	8004340 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	61da      	str	r2, [r3, #28]
 8004332:	e005      	b.n	8004340 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fd f9c8 	bl	80016f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004376:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004380:	d902      	bls.n	8004388 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e002      	b.n	800438e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800438c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004396:	d007      	beq.n	80043a8 <HAL_SPI_Init+0xa0>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043a0:	d002      	beq.n	80043a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	ea42 0103 	orr.w	r1, r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	0c1b      	lsrs	r3, r3, #16
 8004404:	f003 0204 	and.w	r2, r3, #4
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004424:	ea42 0103 	orr.w	r1, r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b088      	sub	sp, #32
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	4613      	mov	r3, r2
 800445c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_SPI_Transmit+0x22>
 800446c:	2302      	movs	r3, #2
 800446e:	e15f      	b.n	8004730 <HAL_SPI_Transmit+0x2e2>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004478:	f7fd fbea 	bl	8001c50 <HAL_GetTick>
 800447c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d002      	beq.n	8004494 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800448e:	2302      	movs	r3, #2
 8004490:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004492:	e148      	b.n	8004726 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_SPI_Transmit+0x52>
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d102      	bne.n	80044a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044a4:	e13f      	b.n	8004726 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2203      	movs	r2, #3
 80044aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	88fa      	ldrh	r2, [r7, #6]
 80044be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f0:	d10f      	bne.n	8004512 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004500:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004510:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d007      	beq.n	8004530 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800452e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004538:	d94f      	bls.n	80045da <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_SPI_Transmit+0xfa>
 8004542:	8afb      	ldrh	r3, [r7, #22]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d142      	bne.n	80045ce <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	881a      	ldrh	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	1c9a      	adds	r2, r3, #2
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800456c:	e02f      	b.n	80045ce <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b02      	cmp	r3, #2
 800457a:	d112      	bne.n	80045a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	881a      	ldrh	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	1c9a      	adds	r2, r3, #2
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045a0:	e015      	b.n	80045ce <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045a2:	f7fd fb55 	bl	8001c50 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d803      	bhi.n	80045ba <HAL_SPI_Transmit+0x16c>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d102      	bne.n	80045c0 <HAL_SPI_Transmit+0x172>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d106      	bne.n	80045ce <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80045cc:	e0ab      	b.n	8004726 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1ca      	bne.n	800456e <HAL_SPI_Transmit+0x120>
 80045d8:	e080      	b.n	80046dc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_SPI_Transmit+0x19a>
 80045e2:	8afb      	ldrh	r3, [r7, #22]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d174      	bne.n	80046d2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d912      	bls.n	8004618 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	881a      	ldrh	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	1c9a      	adds	r2, r3, #2
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b02      	subs	r3, #2
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004616:	e05c      	b.n	80046d2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800463e:	e048      	b.n	80046d2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b02      	cmp	r3, #2
 800464c:	d12b      	bne.n	80046a6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	d912      	bls.n	800467e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	881a      	ldrh	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	1c9a      	adds	r2, r3, #2
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b02      	subs	r3, #2
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800467c:	e029      	b.n	80046d2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	330c      	adds	r3, #12
 8004688:	7812      	ldrb	r2, [r2, #0]
 800468a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046a4:	e015      	b.n	80046d2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a6:	f7fd fad3 	bl	8001c50 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d803      	bhi.n	80046be <HAL_SPI_Transmit+0x270>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d102      	bne.n	80046c4 <HAL_SPI_Transmit+0x276>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d106      	bne.n	80046d2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80046d0:	e029      	b.n	8004726 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1b1      	bne.n	8004640 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	6839      	ldr	r1, [r7, #0]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fcf9 	bl	80050d8 <SPI_EndRxTxTransaction>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e003      	b.n	8004726 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800472e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3720      	adds	r7, #32
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d002      	beq.n	800475e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004758:	2302      	movs	r3, #2
 800475a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800475c:	e11a      	b.n	8004994 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004766:	d112      	bne.n	800478e <HAL_SPI_Receive+0x56>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10e      	bne.n	800478e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2204      	movs	r2, #4
 8004774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004778:	88fa      	ldrh	r2, [r7, #6]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	4613      	mov	r3, r2
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f90e 	bl	80049a6 <HAL_SPI_TransmitReceive>
 800478a:	4603      	mov	r3, r0
 800478c:	e107      	b.n	800499e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_SPI_Receive+0x64>
 8004798:	2302      	movs	r3, #2
 800479a:	e100      	b.n	800499e <HAL_SPI_Receive+0x266>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047a4:	f7fd fa54 	bl	8001c50 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_SPI_Receive+0x7e>
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047ba:	e0eb      	b.n	8004994 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2204      	movs	r2, #4
 80047c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	88fa      	ldrh	r2, [r7, #6]
 80047d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004806:	d908      	bls.n	800481a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004816:	605a      	str	r2, [r3, #4]
 8004818:	e007      	b.n	800482a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004828:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004832:	d10f      	bne.n	8004854 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004842:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004852:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d007      	beq.n	8004872 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004870:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800487a:	d86f      	bhi.n	800495c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800487c:	e034      	b.n	80048e8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d117      	bne.n	80048bc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f103 020c 	add.w	r2, r3, #12
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	7812      	ldrb	r2, [r2, #0]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80048ba:	e015      	b.n	80048e8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048bc:	f7fd f9c8 	bl	8001c50 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d803      	bhi.n	80048d4 <HAL_SPI_Receive+0x19c>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d2:	d102      	bne.n	80048da <HAL_SPI_Receive+0x1a2>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80048e6:	e055      	b.n	8004994 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1c4      	bne.n	800487e <HAL_SPI_Receive+0x146>
 80048f4:	e038      	b.n	8004968 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d115      	bne.n	8004930 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	b292      	uxth	r2, r2
 8004910:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	1c9a      	adds	r2, r3, #2
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800492e:	e015      	b.n	800495c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004930:	f7fd f98e 	bl	8001c50 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d803      	bhi.n	8004948 <HAL_SPI_Receive+0x210>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d102      	bne.n	800494e <HAL_SPI_Receive+0x216>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800495a:	e01b      	b.n	8004994 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1c6      	bne.n	80048f6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fb5b 	bl	8005028 <SPI_EndRxTransaction>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	75fb      	strb	r3, [r7, #23]
 800498a:	e003      	b.n	8004994 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800499c:	7dfb      	ldrb	r3, [r7, #23]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b08a      	sub	sp, #40	; 0x28
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049b4:	2301      	movs	r3, #1
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_SPI_TransmitReceive+0x26>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e20a      	b.n	8004de2 <HAL_SPI_TransmitReceive+0x43c>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049d4:	f7fd f93c 	bl	8001c50 <HAL_GetTick>
 80049d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80049e8:	887b      	ldrh	r3, [r7, #2]
 80049ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80049ec:	887b      	ldrh	r3, [r7, #2]
 80049ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049f0:	7efb      	ldrb	r3, [r7, #27]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d00e      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x6e>
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fc:	d106      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x66>
 8004a06:	7efb      	ldrb	r3, [r7, #27]
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d003      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a12:	e1e0      	b.n	8004dd6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_SPI_TransmitReceive+0x80>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_SPI_TransmitReceive+0x80>
 8004a20:	887b      	ldrh	r3, [r7, #2]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a2c:	e1d3      	b.n	8004dd6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d003      	beq.n	8004a42 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2205      	movs	r2, #5
 8004a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	887a      	ldrh	r2, [r7, #2]
 8004a52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	887a      	ldrh	r2, [r7, #2]
 8004a5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	887a      	ldrh	r2, [r7, #2]
 8004a68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	887a      	ldrh	r2, [r7, #2]
 8004a6e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a84:	d802      	bhi.n	8004a8c <HAL_SPI_TransmitReceive+0xe6>
 8004a86:	8a3b      	ldrh	r3, [r7, #16]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d908      	bls.n	8004a9e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a9a:	605a      	str	r2, [r3, #4]
 8004a9c:	e007      	b.n	8004aae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004aac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	d007      	beq.n	8004acc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ad4:	f240 8081 	bls.w	8004bda <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_SPI_TransmitReceive+0x140>
 8004ae0:	8a7b      	ldrh	r3, [r7, #18]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d16d      	bne.n	8004bc2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	881a      	ldrh	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	1c9a      	adds	r2, r3, #2
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b0a:	e05a      	b.n	8004bc2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d11b      	bne.n	8004b52 <HAL_SPI_TransmitReceive+0x1ac>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d016      	beq.n	8004b52 <HAL_SPI_TransmitReceive+0x1ac>
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d113      	bne.n	8004b52 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	881a      	ldrh	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	1c9a      	adds	r2, r3, #2
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d11c      	bne.n	8004b9a <HAL_SPI_TransmitReceive+0x1f4>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d016      	beq.n	8004b9a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	b292      	uxth	r2, r2
 8004b78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	1c9a      	adds	r2, r3, #2
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b96:	2301      	movs	r3, #1
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b9a:	f7fd f859 	bl	8001c50 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d80b      	bhi.n	8004bc2 <HAL_SPI_TransmitReceive+0x21c>
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d007      	beq.n	8004bc2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004bc0:	e109      	b.n	8004dd6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d19f      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x166>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d199      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x166>
 8004bd8:	e0e3      	b.n	8004da2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_SPI_TransmitReceive+0x244>
 8004be2:	8a7b      	ldrh	r3, [r7, #18]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	f040 80cf 	bne.w	8004d88 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d912      	bls.n	8004c1a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	881a      	ldrh	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	1c9a      	adds	r2, r3, #2
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b02      	subs	r3, #2
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c18:	e0b6      	b.n	8004d88 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	7812      	ldrb	r2, [r2, #0]
 8004c26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c40:	e0a2      	b.n	8004d88 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d134      	bne.n	8004cba <HAL_SPI_TransmitReceive+0x314>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d02f      	beq.n	8004cba <HAL_SPI_TransmitReceive+0x314>
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d12c      	bne.n	8004cba <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d912      	bls.n	8004c90 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	881a      	ldrh	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	1c9a      	adds	r2, r3, #2
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b02      	subs	r3, #2
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c8e:	e012      	b.n	8004cb6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	7812      	ldrb	r2, [r2, #0]
 8004c9c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d148      	bne.n	8004d5a <HAL_SPI_TransmitReceive+0x3b4>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d042      	beq.n	8004d5a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d923      	bls.n	8004d28 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	b292      	uxth	r2, r2
 8004cec:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	1c9a      	adds	r2, r3, #2
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b02      	subs	r3, #2
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d81f      	bhi.n	8004d56 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	e016      	b.n	8004d56 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f103 020c 	add.w	r2, r3, #12
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	7812      	ldrb	r2, [r2, #0]
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d56:	2301      	movs	r3, #1
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d5a:	f7fc ff79 	bl	8001c50 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d803      	bhi.n	8004d72 <HAL_SPI_TransmitReceive+0x3cc>
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d102      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x3d2>
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d107      	bne.n	8004d88 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004d86:	e026      	b.n	8004dd6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f47f af57 	bne.w	8004c42 <HAL_SPI_TransmitReceive+0x29c>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f47f af50 	bne.w	8004c42 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f996 	bl	80050d8 <SPI_EndRxTxTransaction>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dcc:	e003      	b.n	8004dd6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004dde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3728      	adds	r7, #40	; 0x28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dfc:	f7fc ff28 	bl	8001c50 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	4413      	add	r3, r2
 8004e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e0c:	f7fc ff20 	bl	8001c50 <HAL_GetTick>
 8004e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e12:	4b39      	ldr	r3, [pc, #228]	; (8004ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	015b      	lsls	r3, r3, #5
 8004e18:	0d1b      	lsrs	r3, r3, #20
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e22:	e054      	b.n	8004ece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d050      	beq.n	8004ece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e2c:	f7fc ff10 	bl	8001c50 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d902      	bls.n	8004e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d13d      	bne.n	8004ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e5a:	d111      	bne.n	8004e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e64:	d004      	beq.n	8004e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6e:	d107      	bne.n	8004e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e88:	d10f      	bne.n	8004eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e017      	b.n	8004eee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	bf0c      	ite	eq
 8004ede:	2301      	moveq	r3, #1
 8004ee0:	2300      	movne	r3, #0
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d19b      	bne.n	8004e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000034 	.word	0x20000034

08004efc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	; 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f0e:	f7fc fe9f 	bl	8001c50 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004f1e:	f7fc fe97 	bl	8001c50 <HAL_GetTick>
 8004f22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f2c:	4b3d      	ldr	r3, [pc, #244]	; (8005024 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	00da      	lsls	r2, r3, #3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	0d1b      	lsrs	r3, r3, #20
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f44:	e060      	b.n	8005008 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f4c:	d107      	bne.n	8004f5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d050      	beq.n	8005008 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f66:	f7fc fe73 	bl	8001c50 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d902      	bls.n	8004f7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d13d      	bne.n	8004ff8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f94:	d111      	bne.n	8004fba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9e:	d004      	beq.n	8004faa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa8:	d107      	bne.n	8004fba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc2:	d10f      	bne.n	8004fe4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fe2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e010      	b.n	800501a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	3b01      	subs	r3, #1
 8005006:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4013      	ands	r3, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	429a      	cmp	r2, r3
 8005016:	d196      	bne.n	8004f46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3728      	adds	r7, #40	; 0x28
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000034 	.word	0x20000034

08005028 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800503c:	d111      	bne.n	8005062 <SPI_EndRxTransaction+0x3a>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005046:	d004      	beq.n	8005052 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005050:	d107      	bne.n	8005062 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005060:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2200      	movs	r2, #0
 800506a:	2180      	movs	r1, #128	; 0x80
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7ff febd 	bl	8004dec <SPI_WaitFlagStateUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e023      	b.n	80050d0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005090:	d11d      	bne.n	80050ce <SPI_EndRxTransaction+0xa6>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800509a:	d004      	beq.n	80050a6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a4:	d113      	bne.n	80050ce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff ff22 	bl	8004efc <SPI_WaitFifoStateUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c2:	f043 0220 	orr.w	r2, r3, #32
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e000      	b.n	80050d0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff ff03 	bl	8004efc <SPI_WaitFifoStateUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005100:	f043 0220 	orr.w	r2, r3, #32
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e027      	b.n	800515c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	2180      	movs	r1, #128	; 0x80
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff fe68 	bl	8004dec <SPI_WaitFlagStateUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005126:	f043 0220 	orr.w	r2, r3, #32
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e014      	b.n	800515c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2200      	movs	r2, #0
 800513a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7ff fedc 	bl	8004efc <SPI_WaitFifoStateUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514e:	f043 0220 	orr.w	r2, r3, #32
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e000      	b.n	800515c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e049      	b.n	800520a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fc faf2 	bl	8001774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f000 fb7a 	bl	800589c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e049      	b.n	80052b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f841 	bl	80052c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3304      	adds	r3, #4
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f000 fb23 	bl	800589c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_TIM_PWM_Start+0x24>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	e03c      	b.n	8005372 <HAL_TIM_PWM_Start+0x9e>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d109      	bne.n	8005312 <HAL_TIM_PWM_Start+0x3e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	bf14      	ite	ne
 800530a:	2301      	movne	r3, #1
 800530c:	2300      	moveq	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	e02f      	b.n	8005372 <HAL_TIM_PWM_Start+0x9e>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d109      	bne.n	800532c <HAL_TIM_PWM_Start+0x58>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	e022      	b.n	8005372 <HAL_TIM_PWM_Start+0x9e>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b0c      	cmp	r3, #12
 8005330:	d109      	bne.n	8005346 <HAL_TIM_PWM_Start+0x72>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b01      	cmp	r3, #1
 800533c:	bf14      	ite	ne
 800533e:	2301      	movne	r3, #1
 8005340:	2300      	moveq	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	e015      	b.n	8005372 <HAL_TIM_PWM_Start+0x9e>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b10      	cmp	r3, #16
 800534a:	d109      	bne.n	8005360 <HAL_TIM_PWM_Start+0x8c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	e008      	b.n	8005372 <HAL_TIM_PWM_Start+0x9e>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	bf14      	ite	ne
 800536c:	2301      	movne	r3, #1
 800536e:	2300      	moveq	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e09c      	b.n	80054b4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d104      	bne.n	800538a <HAL_TIM_PWM_Start+0xb6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005388:	e023      	b.n	80053d2 <HAL_TIM_PWM_Start+0xfe>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b04      	cmp	r3, #4
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Start+0xc6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005398:	e01b      	b.n	80053d2 <HAL_TIM_PWM_Start+0xfe>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d104      	bne.n	80053aa <HAL_TIM_PWM_Start+0xd6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a8:	e013      	b.n	80053d2 <HAL_TIM_PWM_Start+0xfe>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b0c      	cmp	r3, #12
 80053ae:	d104      	bne.n	80053ba <HAL_TIM_PWM_Start+0xe6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053b8:	e00b      	b.n	80053d2 <HAL_TIM_PWM_Start+0xfe>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d104      	bne.n	80053ca <HAL_TIM_PWM_Start+0xf6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c8:	e003      	b.n	80053d2 <HAL_TIM_PWM_Start+0xfe>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2201      	movs	r2, #1
 80053d8:	6839      	ldr	r1, [r7, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fe68 	bl	80060b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a35      	ldr	r2, [pc, #212]	; (80054bc <HAL_TIM_PWM_Start+0x1e8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <HAL_TIM_PWM_Start+0x13e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a34      	ldr	r2, [pc, #208]	; (80054c0 <HAL_TIM_PWM_Start+0x1ec>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00e      	beq.n	8005412 <HAL_TIM_PWM_Start+0x13e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a32      	ldr	r2, [pc, #200]	; (80054c4 <HAL_TIM_PWM_Start+0x1f0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d009      	beq.n	8005412 <HAL_TIM_PWM_Start+0x13e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a31      	ldr	r2, [pc, #196]	; (80054c8 <HAL_TIM_PWM_Start+0x1f4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_TIM_PWM_Start+0x13e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a2f      	ldr	r2, [pc, #188]	; (80054cc <HAL_TIM_PWM_Start+0x1f8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d101      	bne.n	8005416 <HAL_TIM_PWM_Start+0x142>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <HAL_TIM_PWM_Start+0x144>
 8005416:	2300      	movs	r3, #0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800542a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a22      	ldr	r2, [pc, #136]	; (80054bc <HAL_TIM_PWM_Start+0x1e8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01d      	beq.n	8005472 <HAL_TIM_PWM_Start+0x19e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543e:	d018      	beq.n	8005472 <HAL_TIM_PWM_Start+0x19e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <HAL_TIM_PWM_Start+0x1fc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <HAL_TIM_PWM_Start+0x19e>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a21      	ldr	r2, [pc, #132]	; (80054d4 <HAL_TIM_PWM_Start+0x200>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00e      	beq.n	8005472 <HAL_TIM_PWM_Start+0x19e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1f      	ldr	r2, [pc, #124]	; (80054d8 <HAL_TIM_PWM_Start+0x204>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_TIM_PWM_Start+0x19e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <HAL_TIM_PWM_Start+0x1ec>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_TIM_PWM_Start+0x19e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <HAL_TIM_PWM_Start+0x1f0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d115      	bne.n	800549e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	4b18      	ldr	r3, [pc, #96]	; (80054dc <HAL_TIM_PWM_Start+0x208>)
 800547a:	4013      	ands	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b06      	cmp	r3, #6
 8005482:	d015      	beq.n	80054b0 <HAL_TIM_PWM_Start+0x1dc>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800548a:	d011      	beq.n	80054b0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549c:	e008      	b.n	80054b0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e000      	b.n	80054b2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40012c00 	.word	0x40012c00
 80054c0:	40013400 	.word	0x40013400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40000c00 	.word	0x40000c00
 80054dc:	00010007 	.word	0x00010007

080054e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e0ff      	b.n	80056fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b14      	cmp	r3, #20
 800550a:	f200 80f0 	bhi.w	80056ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005569 	.word	0x08005569
 8005518:	080056ef 	.word	0x080056ef
 800551c:	080056ef 	.word	0x080056ef
 8005520:	080056ef 	.word	0x080056ef
 8005524:	080055a9 	.word	0x080055a9
 8005528:	080056ef 	.word	0x080056ef
 800552c:	080056ef 	.word	0x080056ef
 8005530:	080056ef 	.word	0x080056ef
 8005534:	080055eb 	.word	0x080055eb
 8005538:	080056ef 	.word	0x080056ef
 800553c:	080056ef 	.word	0x080056ef
 8005540:	080056ef 	.word	0x080056ef
 8005544:	0800562b 	.word	0x0800562b
 8005548:	080056ef 	.word	0x080056ef
 800554c:	080056ef 	.word	0x080056ef
 8005550:	080056ef 	.word	0x080056ef
 8005554:	0800566d 	.word	0x0800566d
 8005558:	080056ef 	.word	0x080056ef
 800555c:	080056ef 	.word	0x080056ef
 8005560:	080056ef 	.word	0x080056ef
 8005564:	080056ad 	.word	0x080056ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fa2e 	bl	80059d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0208 	orr.w	r2, r2, #8
 8005582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0204 	bic.w	r2, r2, #4
 8005592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6999      	ldr	r1, [r3, #24]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	619a      	str	r2, [r3, #24]
      break;
 80055a6:	e0a5      	b.n	80056f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fa9e 	bl	8005af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6999      	ldr	r1, [r3, #24]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	021a      	lsls	r2, r3, #8
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	619a      	str	r2, [r3, #24]
      break;
 80055e8:	e084      	b.n	80056f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fb07 	bl	8005c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0208 	orr.w	r2, r2, #8
 8005604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0204 	bic.w	r2, r2, #4
 8005614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69d9      	ldr	r1, [r3, #28]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	61da      	str	r2, [r3, #28]
      break;
 8005628:	e064      	b.n	80056f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fb6f 	bl	8005d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69d9      	ldr	r1, [r3, #28]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	021a      	lsls	r2, r3, #8
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	61da      	str	r2, [r3, #28]
      break;
 800566a:	e043      	b.n	80056f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fbb8 	bl	8005de8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0208 	orr.w	r2, r2, #8
 8005686:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0204 	bic.w	r2, r2, #4
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056aa:	e023      	b.n	80056f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fbfc 	bl	8005eb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	021a      	lsls	r2, r3, #8
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056ec:	e002      	b.n	80056f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	75fb      	strb	r3, [r7, #23]
      break;
 80056f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop

08005708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_TIM_ConfigClockSource+0x1c>
 8005720:	2302      	movs	r3, #2
 8005722:	e0b6      	b.n	8005892 <HAL_TIM_ConfigClockSource+0x18a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800574e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005760:	d03e      	beq.n	80057e0 <HAL_TIM_ConfigClockSource+0xd8>
 8005762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005766:	f200 8087 	bhi.w	8005878 <HAL_TIM_ConfigClockSource+0x170>
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576e:	f000 8086 	beq.w	800587e <HAL_TIM_ConfigClockSource+0x176>
 8005772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005776:	d87f      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x170>
 8005778:	2b70      	cmp	r3, #112	; 0x70
 800577a:	d01a      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0xaa>
 800577c:	2b70      	cmp	r3, #112	; 0x70
 800577e:	d87b      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x170>
 8005780:	2b60      	cmp	r3, #96	; 0x60
 8005782:	d050      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x11e>
 8005784:	2b60      	cmp	r3, #96	; 0x60
 8005786:	d877      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x170>
 8005788:	2b50      	cmp	r3, #80	; 0x50
 800578a:	d03c      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0xfe>
 800578c:	2b50      	cmp	r3, #80	; 0x50
 800578e:	d873      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x170>
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d058      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x13e>
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d86f      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x170>
 8005798:	2b30      	cmp	r3, #48	; 0x30
 800579a:	d064      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x15e>
 800579c:	2b30      	cmp	r3, #48	; 0x30
 800579e:	d86b      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x170>
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d060      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x15e>
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d867      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x170>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d05c      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x15e>
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d05a      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x15e>
 80057b0:	e062      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057c2:	f000 fc55 	bl	8006070 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	609a      	str	r2, [r3, #8]
      break;
 80057de:	e04f      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057f0:	f000 fc3e 	bl	8006070 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005802:	609a      	str	r2, [r3, #8]
      break;
 8005804:	e03c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005812:	461a      	mov	r2, r3
 8005814:	f000 fbb2 	bl	8005f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2150      	movs	r1, #80	; 0x50
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fc0b 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005824:	e02c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005832:	461a      	mov	r2, r3
 8005834:	f000 fbd1 	bl	8005fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2160      	movs	r1, #96	; 0x60
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fbfb 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005844:	e01c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005852:	461a      	mov	r2, r3
 8005854:	f000 fb92 	bl	8005f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2140      	movs	r1, #64	; 0x40
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fbeb 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005864:	e00c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4619      	mov	r1, r3
 8005870:	4610      	mov	r0, r2
 8005872:	f000 fbe2 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005876:	e003      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
      break;
 800587c:	e000      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800587e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a40      	ldr	r2, [pc, #256]	; (80059b0 <TIM_Base_SetConfig+0x114>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d013      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ba:	d00f      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a3d      	ldr	r2, [pc, #244]	; (80059b4 <TIM_Base_SetConfig+0x118>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00b      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a3c      	ldr	r2, [pc, #240]	; (80059b8 <TIM_Base_SetConfig+0x11c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a3b      	ldr	r2, [pc, #236]	; (80059bc <TIM_Base_SetConfig+0x120>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a3a      	ldr	r2, [pc, #232]	; (80059c0 <TIM_Base_SetConfig+0x124>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d108      	bne.n	80058ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2f      	ldr	r2, [pc, #188]	; (80059b0 <TIM_Base_SetConfig+0x114>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d01f      	beq.n	8005936 <TIM_Base_SetConfig+0x9a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fc:	d01b      	beq.n	8005936 <TIM_Base_SetConfig+0x9a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2c      	ldr	r2, [pc, #176]	; (80059b4 <TIM_Base_SetConfig+0x118>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d017      	beq.n	8005936 <TIM_Base_SetConfig+0x9a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2b      	ldr	r2, [pc, #172]	; (80059b8 <TIM_Base_SetConfig+0x11c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d013      	beq.n	8005936 <TIM_Base_SetConfig+0x9a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2a      	ldr	r2, [pc, #168]	; (80059bc <TIM_Base_SetConfig+0x120>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00f      	beq.n	8005936 <TIM_Base_SetConfig+0x9a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a29      	ldr	r2, [pc, #164]	; (80059c0 <TIM_Base_SetConfig+0x124>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00b      	beq.n	8005936 <TIM_Base_SetConfig+0x9a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a28      	ldr	r2, [pc, #160]	; (80059c4 <TIM_Base_SetConfig+0x128>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d007      	beq.n	8005936 <TIM_Base_SetConfig+0x9a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a27      	ldr	r2, [pc, #156]	; (80059c8 <TIM_Base_SetConfig+0x12c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d003      	beq.n	8005936 <TIM_Base_SetConfig+0x9a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a26      	ldr	r2, [pc, #152]	; (80059cc <TIM_Base_SetConfig+0x130>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d108      	bne.n	8005948 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a10      	ldr	r2, [pc, #64]	; (80059b0 <TIM_Base_SetConfig+0x114>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00f      	beq.n	8005994 <TIM_Base_SetConfig+0xf8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a12      	ldr	r2, [pc, #72]	; (80059c0 <TIM_Base_SetConfig+0x124>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00b      	beq.n	8005994 <TIM_Base_SetConfig+0xf8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a11      	ldr	r2, [pc, #68]	; (80059c4 <TIM_Base_SetConfig+0x128>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d007      	beq.n	8005994 <TIM_Base_SetConfig+0xf8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a10      	ldr	r2, [pc, #64]	; (80059c8 <TIM_Base_SetConfig+0x12c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_Base_SetConfig+0xf8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a0f      	ldr	r2, [pc, #60]	; (80059cc <TIM_Base_SetConfig+0x130>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d103      	bne.n	800599c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	615a      	str	r2, [r3, #20]
}
 80059a2:	bf00      	nop
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40013400 	.word	0x40013400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40014400 	.word	0x40014400
 80059cc:	40014800 	.word	0x40014800

080059d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	f023 0201 	bic.w	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f023 0302 	bic.w	r3, r3, #2
 8005a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a2c      	ldr	r2, [pc, #176]	; (8005adc <TIM_OC1_SetConfig+0x10c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00f      	beq.n	8005a50 <TIM_OC1_SetConfig+0x80>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a2b      	ldr	r2, [pc, #172]	; (8005ae0 <TIM_OC1_SetConfig+0x110>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00b      	beq.n	8005a50 <TIM_OC1_SetConfig+0x80>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ae4 <TIM_OC1_SetConfig+0x114>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d007      	beq.n	8005a50 <TIM_OC1_SetConfig+0x80>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a29      	ldr	r2, [pc, #164]	; (8005ae8 <TIM_OC1_SetConfig+0x118>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC1_SetConfig+0x80>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a28      	ldr	r2, [pc, #160]	; (8005aec <TIM_OC1_SetConfig+0x11c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d10c      	bne.n	8005a6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f023 0308 	bic.w	r3, r3, #8
 8005a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f023 0304 	bic.w	r3, r3, #4
 8005a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a1b      	ldr	r2, [pc, #108]	; (8005adc <TIM_OC1_SetConfig+0x10c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00f      	beq.n	8005a92 <TIM_OC1_SetConfig+0xc2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <TIM_OC1_SetConfig+0x110>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00b      	beq.n	8005a92 <TIM_OC1_SetConfig+0xc2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a19      	ldr	r2, [pc, #100]	; (8005ae4 <TIM_OC1_SetConfig+0x114>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d007      	beq.n	8005a92 <TIM_OC1_SetConfig+0xc2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <TIM_OC1_SetConfig+0x118>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_OC1_SetConfig+0xc2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a17      	ldr	r2, [pc, #92]	; (8005aec <TIM_OC1_SetConfig+0x11c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d111      	bne.n	8005ab6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	621a      	str	r2, [r3, #32]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40013400 	.word	0x40013400
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800

08005af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f023 0210 	bic.w	r2, r3, #16
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0320 	bic.w	r3, r3, #32
 8005b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a28      	ldr	r2, [pc, #160]	; (8005bf0 <TIM_OC2_SetConfig+0x100>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC2_SetConfig+0x6c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a27      	ldr	r2, [pc, #156]	; (8005bf4 <TIM_OC2_SetConfig+0x104>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d10d      	bne.n	8005b78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a1d      	ldr	r2, [pc, #116]	; (8005bf0 <TIM_OC2_SetConfig+0x100>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00f      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xb0>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <TIM_OC2_SetConfig+0x104>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00b      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xb0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a1b      	ldr	r2, [pc, #108]	; (8005bf8 <TIM_OC2_SetConfig+0x108>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d007      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xb0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a1a      	ldr	r2, [pc, #104]	; (8005bfc <TIM_OC2_SetConfig+0x10c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xb0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <TIM_OC2_SetConfig+0x110>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d113      	bne.n	8005bc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40013400 	.word	0x40013400
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40014400 	.word	0x40014400
 8005c00:	40014800 	.word	0x40014800

08005c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a27      	ldr	r2, [pc, #156]	; (8005d00 <TIM_OC3_SetConfig+0xfc>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_OC3_SetConfig+0x6a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a26      	ldr	r2, [pc, #152]	; (8005d04 <TIM_OC3_SetConfig+0x100>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d10d      	bne.n	8005c8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <TIM_OC3_SetConfig+0xfc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00f      	beq.n	8005cb2 <TIM_OC3_SetConfig+0xae>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1b      	ldr	r2, [pc, #108]	; (8005d04 <TIM_OC3_SetConfig+0x100>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <TIM_OC3_SetConfig+0xae>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1a      	ldr	r2, [pc, #104]	; (8005d08 <TIM_OC3_SetConfig+0x104>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d007      	beq.n	8005cb2 <TIM_OC3_SetConfig+0xae>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a19      	ldr	r2, [pc, #100]	; (8005d0c <TIM_OC3_SetConfig+0x108>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_OC3_SetConfig+0xae>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a18      	ldr	r2, [pc, #96]	; (8005d10 <TIM_OC3_SetConfig+0x10c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d113      	bne.n	8005cda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	621a      	str	r2, [r3, #32]
}
 8005cf4:	bf00      	nop
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	40012c00 	.word	0x40012c00
 8005d04:	40013400 	.word	0x40013400
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40014400 	.word	0x40014400
 8005d10:	40014800 	.word	0x40014800

08005d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	031b      	lsls	r3, r3, #12
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a18      	ldr	r2, [pc, #96]	; (8005dd4 <TIM_OC4_SetConfig+0xc0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00f      	beq.n	8005d98 <TIM_OC4_SetConfig+0x84>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a17      	ldr	r2, [pc, #92]	; (8005dd8 <TIM_OC4_SetConfig+0xc4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00b      	beq.n	8005d98 <TIM_OC4_SetConfig+0x84>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <TIM_OC4_SetConfig+0xc8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d007      	beq.n	8005d98 <TIM_OC4_SetConfig+0x84>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <TIM_OC4_SetConfig+0xcc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_OC4_SetConfig+0x84>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a14      	ldr	r2, [pc, #80]	; (8005de4 <TIM_OC4_SetConfig+0xd0>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d109      	bne.n	8005dac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	019b      	lsls	r3, r3, #6
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40013400 	.word	0x40013400
 8005ddc:	40014000 	.word	0x40014000
 8005de0:	40014400 	.word	0x40014400
 8005de4:	40014800 	.word	0x40014800

08005de8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	041b      	lsls	r3, r3, #16
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a17      	ldr	r2, [pc, #92]	; (8005e9c <TIM_OC5_SetConfig+0xb4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00f      	beq.n	8005e62 <TIM_OC5_SetConfig+0x7a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <TIM_OC5_SetConfig+0xb8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00b      	beq.n	8005e62 <TIM_OC5_SetConfig+0x7a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <TIM_OC5_SetConfig+0xbc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d007      	beq.n	8005e62 <TIM_OC5_SetConfig+0x7a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <TIM_OC5_SetConfig+0xc0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_OC5_SetConfig+0x7a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a13      	ldr	r2, [pc, #76]	; (8005eac <TIM_OC5_SetConfig+0xc4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d109      	bne.n	8005e76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	621a      	str	r2, [r3, #32]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	40012c00 	.word	0x40012c00
 8005ea0:	40013400 	.word	0x40013400
 8005ea4:	40014000 	.word	0x40014000
 8005ea8:	40014400 	.word	0x40014400
 8005eac:	40014800 	.word	0x40014800

08005eb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	051b      	lsls	r3, r3, #20
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <TIM_OC6_SetConfig+0xb8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00f      	beq.n	8005f2c <TIM_OC6_SetConfig+0x7c>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a17      	ldr	r2, [pc, #92]	; (8005f6c <TIM_OC6_SetConfig+0xbc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <TIM_OC6_SetConfig+0x7c>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a16      	ldr	r2, [pc, #88]	; (8005f70 <TIM_OC6_SetConfig+0xc0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d007      	beq.n	8005f2c <TIM_OC6_SetConfig+0x7c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a15      	ldr	r2, [pc, #84]	; (8005f74 <TIM_OC6_SetConfig+0xc4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_OC6_SetConfig+0x7c>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a14      	ldr	r2, [pc, #80]	; (8005f78 <TIM_OC6_SetConfig+0xc8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d109      	bne.n	8005f40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	029b      	lsls	r3, r3, #10
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	621a      	str	r2, [r3, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40012c00 	.word	0x40012c00
 8005f6c:	40013400 	.word	0x40013400
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40014400 	.word	0x40014400
 8005f78:	40014800 	.word	0x40014800

08005f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f023 0201 	bic.w	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f023 030a 	bic.w	r3, r3, #10
 8005fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b087      	sub	sp, #28
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	f023 0210 	bic.w	r2, r3, #16
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	031b      	lsls	r3, r3, #12
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006016:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	f043 0307 	orr.w	r3, r3, #7
 800605c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	609a      	str	r2, [r3, #8]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800608a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	021a      	lsls	r2, r3, #8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	431a      	orrs	r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4313      	orrs	r3, r2
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	2201      	movs	r2, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1a      	ldr	r2, [r3, #32]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	43db      	mvns	r3, r3
 80060d2:	401a      	ands	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1a      	ldr	r2, [r3, #32]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	fa01 f303 	lsl.w	r3, r1, r3
 80060e8:	431a      	orrs	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	621a      	str	r2, [r3, #32]
}
 80060ee:	bf00      	nop
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
	...

080060fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006110:	2302      	movs	r3, #2
 8006112:	e068      	b.n	80061e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a2e      	ldr	r2, [pc, #184]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a2d      	ldr	r2, [pc, #180]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d108      	bne.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800614e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006160:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1e      	ldr	r2, [pc, #120]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d01d      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006186:	d018      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1b      	ldr	r2, [pc, #108]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d013      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1a      	ldr	r2, [pc, #104]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00e      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a18      	ldr	r2, [pc, #96]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d009      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a13      	ldr	r2, [pc, #76]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d004      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a14      	ldr	r2, [pc, #80]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d10c      	bne.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40013400 	.word	0x40013400
 80061fc:	40000400 	.word	0x40000400
 8006200:	40000800 	.word	0x40000800
 8006204:	40000c00 	.word	0x40000c00
 8006208:	40014000 	.word	0x40014000

0800620c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e040      	b.n	80062a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fb faf2 	bl	8001818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2224      	movs	r2, #36	; 0x24
 8006238:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fc34 	bl	8006ac0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f979 	bl	8006550 <UART_SetConfig>
 800625e:	4603      	mov	r3, r0
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e01b      	b.n	80062a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fcb3 	bl	8006c04 <UART_CheckIdleState>
 800629e:	4603      	mov	r3, r0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	; 0x28
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	4613      	mov	r3, r2
 80062b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d178      	bne.n	80063b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <HAL_UART_Transmit+0x24>
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e071      	b.n	80063b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2221      	movs	r2, #33	; 0x21
 80062dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062de:	f7fb fcb7 	bl	8001c50 <HAL_GetTick>
 80062e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	88fa      	ldrh	r2, [r7, #6]
 80062e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	88fa      	ldrh	r2, [r7, #6]
 80062f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fc:	d108      	bne.n	8006310 <HAL_UART_Transmit+0x68>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d104      	bne.n	8006310 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	e003      	b.n	8006318 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006318:	e030      	b.n	800637c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2200      	movs	r2, #0
 8006322:	2180      	movs	r1, #128	; 0x80
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 fd15 	bl	8006d54 <UART_WaitOnFlagUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d004      	beq.n	800633a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e03c      	b.n	80063b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10b      	bne.n	8006358 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	881a      	ldrh	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800634c:	b292      	uxth	r2, r2
 800634e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	3302      	adds	r3, #2
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	e008      	b.n	800636a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	781a      	ldrb	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	b292      	uxth	r2, r2
 8006362:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	3301      	adds	r3, #1
 8006368:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006370:	b29b      	uxth	r3, r3
 8006372:	3b01      	subs	r3, #1
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1c8      	bne.n	800631a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2200      	movs	r2, #0
 8006390:	2140      	movs	r1, #64	; 0x40
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fcde 	bl	8006d54 <UART_WaitOnFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d004      	beq.n	80063a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e005      	b.n	80063b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e000      	b.n	80063b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80063b2:	2302      	movs	r3, #2
  }
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3720      	adds	r7, #32
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	4613      	mov	r3, r2
 80063ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	f040 80b6 	bne.w	8006544 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_UART_Receive+0x28>
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e0ae      	b.n	8006546 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2222      	movs	r2, #34	; 0x22
 80063f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063fe:	f7fb fc27 	bl	8001c50 <HAL_GetTick>
 8006402:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	88fa      	ldrh	r2, [r7, #6]
 8006408:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	88fa      	ldrh	r2, [r7, #6]
 8006410:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641c:	d10e      	bne.n	800643c <HAL_UART_Receive+0x80>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d105      	bne.n	8006432 <HAL_UART_Receive+0x76>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f240 12ff 	movw	r2, #511	; 0x1ff
 800642c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006430:	e02d      	b.n	800648e <HAL_UART_Receive+0xd2>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	22ff      	movs	r2, #255	; 0xff
 8006436:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800643a:	e028      	b.n	800648e <HAL_UART_Receive+0xd2>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10d      	bne.n	8006460 <HAL_UART_Receive+0xa4>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <HAL_UART_Receive+0x9a>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	22ff      	movs	r2, #255	; 0xff
 8006450:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006454:	e01b      	b.n	800648e <HAL_UART_Receive+0xd2>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	227f      	movs	r2, #127	; 0x7f
 800645a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800645e:	e016      	b.n	800648e <HAL_UART_Receive+0xd2>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006468:	d10d      	bne.n	8006486 <HAL_UART_Receive+0xca>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <HAL_UART_Receive+0xc0>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	227f      	movs	r2, #127	; 0x7f
 8006476:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800647a:	e008      	b.n	800648e <HAL_UART_Receive+0xd2>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	223f      	movs	r2, #63	; 0x3f
 8006480:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006484:	e003      	b.n	800648e <HAL_UART_Receive+0xd2>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006494:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649e:	d108      	bne.n	80064b2 <HAL_UART_Receive+0xf6>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d104      	bne.n	80064b2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	e003      	b.n	80064ba <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80064ba:	e037      	b.n	800652c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2200      	movs	r2, #0
 80064c4:	2120      	movs	r1, #32
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fc44 	bl	8006d54 <UART_WaitOnFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e033      	b.n	8006546 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10c      	bne.n	80064fe <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	8a7b      	ldrh	r3, [r7, #18]
 80064ee:	4013      	ands	r3, r2
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	3302      	adds	r3, #2
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	e00d      	b.n	800651a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006504:	b29b      	uxth	r3, r3
 8006506:	b2da      	uxtb	r2, r3
 8006508:	8a7b      	ldrh	r3, [r7, #18]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	4013      	ands	r3, r2
 800650e:	b2da      	uxtb	r2, r3
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	3301      	adds	r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1c1      	bne.n	80064bc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	e000      	b.n	8006546 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006544:	2302      	movs	r3, #2
  }
}
 8006546:	4618      	mov	r0, r3
 8006548:	3720      	adds	r7, #32
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006554:	b08a      	sub	sp, #40	; 0x28
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	431a      	orrs	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	431a      	orrs	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	4313      	orrs	r3, r2
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4ba4      	ldr	r3, [pc, #656]	; (8006810 <UART_SetConfig+0x2c0>)
 8006580:	4013      	ands	r3, r2
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006588:	430b      	orrs	r3, r1
 800658a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a99      	ldr	r2, [pc, #612]	; (8006814 <UART_SetConfig+0x2c4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d004      	beq.n	80065bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b8:	4313      	orrs	r3, r2
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065cc:	430a      	orrs	r2, r1
 80065ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a90      	ldr	r2, [pc, #576]	; (8006818 <UART_SetConfig+0x2c8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d126      	bne.n	8006628 <UART_SetConfig+0xd8>
 80065da:	4b90      	ldr	r3, [pc, #576]	; (800681c <UART_SetConfig+0x2cc>)
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d81b      	bhi.n	8006620 <UART_SetConfig+0xd0>
 80065e8:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <UART_SetConfig+0xa0>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	08006601 	.word	0x08006601
 80065f4:	08006611 	.word	0x08006611
 80065f8:	08006609 	.word	0x08006609
 80065fc:	08006619 	.word	0x08006619
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006606:	e116      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006608:	2302      	movs	r3, #2
 800660a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800660e:	e112      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006610:	2304      	movs	r3, #4
 8006612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006616:	e10e      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006618:	2308      	movs	r3, #8
 800661a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800661e:	e10a      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006620:	2310      	movs	r3, #16
 8006622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006626:	e106      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a7c      	ldr	r2, [pc, #496]	; (8006820 <UART_SetConfig+0x2d0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d138      	bne.n	80066a4 <UART_SetConfig+0x154>
 8006632:	4b7a      	ldr	r3, [pc, #488]	; (800681c <UART_SetConfig+0x2cc>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006638:	f003 030c 	and.w	r3, r3, #12
 800663c:	2b0c      	cmp	r3, #12
 800663e:	d82d      	bhi.n	800669c <UART_SetConfig+0x14c>
 8006640:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0xf8>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	0800667d 	.word	0x0800667d
 800664c:	0800669d 	.word	0x0800669d
 8006650:	0800669d 	.word	0x0800669d
 8006654:	0800669d 	.word	0x0800669d
 8006658:	0800668d 	.word	0x0800668d
 800665c:	0800669d 	.word	0x0800669d
 8006660:	0800669d 	.word	0x0800669d
 8006664:	0800669d 	.word	0x0800669d
 8006668:	08006685 	.word	0x08006685
 800666c:	0800669d 	.word	0x0800669d
 8006670:	0800669d 	.word	0x0800669d
 8006674:	0800669d 	.word	0x0800669d
 8006678:	08006695 	.word	0x08006695
 800667c:	2300      	movs	r3, #0
 800667e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006682:	e0d8      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006684:	2302      	movs	r3, #2
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800668a:	e0d4      	b.n	8006836 <UART_SetConfig+0x2e6>
 800668c:	2304      	movs	r3, #4
 800668e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006692:	e0d0      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006694:	2308      	movs	r3, #8
 8006696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800669a:	e0cc      	b.n	8006836 <UART_SetConfig+0x2e6>
 800669c:	2310      	movs	r3, #16
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a2:	e0c8      	b.n	8006836 <UART_SetConfig+0x2e6>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a5e      	ldr	r2, [pc, #376]	; (8006824 <UART_SetConfig+0x2d4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d125      	bne.n	80066fa <UART_SetConfig+0x1aa>
 80066ae:	4b5b      	ldr	r3, [pc, #364]	; (800681c <UART_SetConfig+0x2cc>)
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066b8:	2b30      	cmp	r3, #48	; 0x30
 80066ba:	d016      	beq.n	80066ea <UART_SetConfig+0x19a>
 80066bc:	2b30      	cmp	r3, #48	; 0x30
 80066be:	d818      	bhi.n	80066f2 <UART_SetConfig+0x1a2>
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d00a      	beq.n	80066da <UART_SetConfig+0x18a>
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	d814      	bhi.n	80066f2 <UART_SetConfig+0x1a2>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <UART_SetConfig+0x182>
 80066cc:	2b10      	cmp	r3, #16
 80066ce:	d008      	beq.n	80066e2 <UART_SetConfig+0x192>
 80066d0:	e00f      	b.n	80066f2 <UART_SetConfig+0x1a2>
 80066d2:	2300      	movs	r3, #0
 80066d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d8:	e0ad      	b.n	8006836 <UART_SetConfig+0x2e6>
 80066da:	2302      	movs	r3, #2
 80066dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e0:	e0a9      	b.n	8006836 <UART_SetConfig+0x2e6>
 80066e2:	2304      	movs	r3, #4
 80066e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e8:	e0a5      	b.n	8006836 <UART_SetConfig+0x2e6>
 80066ea:	2308      	movs	r3, #8
 80066ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f0:	e0a1      	b.n	8006836 <UART_SetConfig+0x2e6>
 80066f2:	2310      	movs	r3, #16
 80066f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f8:	e09d      	b.n	8006836 <UART_SetConfig+0x2e6>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a4a      	ldr	r2, [pc, #296]	; (8006828 <UART_SetConfig+0x2d8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d125      	bne.n	8006750 <UART_SetConfig+0x200>
 8006704:	4b45      	ldr	r3, [pc, #276]	; (800681c <UART_SetConfig+0x2cc>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800670e:	2bc0      	cmp	r3, #192	; 0xc0
 8006710:	d016      	beq.n	8006740 <UART_SetConfig+0x1f0>
 8006712:	2bc0      	cmp	r3, #192	; 0xc0
 8006714:	d818      	bhi.n	8006748 <UART_SetConfig+0x1f8>
 8006716:	2b80      	cmp	r3, #128	; 0x80
 8006718:	d00a      	beq.n	8006730 <UART_SetConfig+0x1e0>
 800671a:	2b80      	cmp	r3, #128	; 0x80
 800671c:	d814      	bhi.n	8006748 <UART_SetConfig+0x1f8>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <UART_SetConfig+0x1d8>
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d008      	beq.n	8006738 <UART_SetConfig+0x1e8>
 8006726:	e00f      	b.n	8006748 <UART_SetConfig+0x1f8>
 8006728:	2300      	movs	r3, #0
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672e:	e082      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006730:	2302      	movs	r3, #2
 8006732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006736:	e07e      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673e:	e07a      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006746:	e076      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800674e:	e072      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a35      	ldr	r2, [pc, #212]	; (800682c <UART_SetConfig+0x2dc>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d12a      	bne.n	80067b0 <UART_SetConfig+0x260>
 800675a:	4b30      	ldr	r3, [pc, #192]	; (800681c <UART_SetConfig+0x2cc>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006768:	d01a      	beq.n	80067a0 <UART_SetConfig+0x250>
 800676a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800676e:	d81b      	bhi.n	80067a8 <UART_SetConfig+0x258>
 8006770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006774:	d00c      	beq.n	8006790 <UART_SetConfig+0x240>
 8006776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800677a:	d815      	bhi.n	80067a8 <UART_SetConfig+0x258>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <UART_SetConfig+0x238>
 8006780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006784:	d008      	beq.n	8006798 <UART_SetConfig+0x248>
 8006786:	e00f      	b.n	80067a8 <UART_SetConfig+0x258>
 8006788:	2300      	movs	r3, #0
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678e:	e052      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006790:	2302      	movs	r3, #2
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006796:	e04e      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679e:	e04a      	b.n	8006836 <UART_SetConfig+0x2e6>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a6:	e046      	b.n	8006836 <UART_SetConfig+0x2e6>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ae:	e042      	b.n	8006836 <UART_SetConfig+0x2e6>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a17      	ldr	r2, [pc, #92]	; (8006814 <UART_SetConfig+0x2c4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d13a      	bne.n	8006830 <UART_SetConfig+0x2e0>
 80067ba:	4b18      	ldr	r3, [pc, #96]	; (800681c <UART_SetConfig+0x2cc>)
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067c8:	d01a      	beq.n	8006800 <UART_SetConfig+0x2b0>
 80067ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ce:	d81b      	bhi.n	8006808 <UART_SetConfig+0x2b8>
 80067d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d4:	d00c      	beq.n	80067f0 <UART_SetConfig+0x2a0>
 80067d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067da:	d815      	bhi.n	8006808 <UART_SetConfig+0x2b8>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <UART_SetConfig+0x298>
 80067e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e4:	d008      	beq.n	80067f8 <UART_SetConfig+0x2a8>
 80067e6:	e00f      	b.n	8006808 <UART_SetConfig+0x2b8>
 80067e8:	2300      	movs	r3, #0
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ee:	e022      	b.n	8006836 <UART_SetConfig+0x2e6>
 80067f0:	2302      	movs	r3, #2
 80067f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f6:	e01e      	b.n	8006836 <UART_SetConfig+0x2e6>
 80067f8:	2304      	movs	r3, #4
 80067fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fe:	e01a      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006800:	2308      	movs	r3, #8
 8006802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006806:	e016      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006808:	2310      	movs	r3, #16
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680e:	e012      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006810:	efff69f3 	.word	0xefff69f3
 8006814:	40008000 	.word	0x40008000
 8006818:	40013800 	.word	0x40013800
 800681c:	40021000 	.word	0x40021000
 8006820:	40004400 	.word	0x40004400
 8006824:	40004800 	.word	0x40004800
 8006828:	40004c00 	.word	0x40004c00
 800682c:	40005000 	.word	0x40005000
 8006830:	2310      	movs	r3, #16
 8006832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a9f      	ldr	r2, [pc, #636]	; (8006ab8 <UART_SetConfig+0x568>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d17a      	bne.n	8006936 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006840:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006844:	2b08      	cmp	r3, #8
 8006846:	d824      	bhi.n	8006892 <UART_SetConfig+0x342>
 8006848:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <UART_SetConfig+0x300>)
 800684a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684e:	bf00      	nop
 8006850:	08006875 	.word	0x08006875
 8006854:	08006893 	.word	0x08006893
 8006858:	0800687d 	.word	0x0800687d
 800685c:	08006893 	.word	0x08006893
 8006860:	08006883 	.word	0x08006883
 8006864:	08006893 	.word	0x08006893
 8006868:	08006893 	.word	0x08006893
 800686c:	08006893 	.word	0x08006893
 8006870:	0800688b 	.word	0x0800688b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006874:	f7fd f800 	bl	8003878 <HAL_RCC_GetPCLK1Freq>
 8006878:	61f8      	str	r0, [r7, #28]
        break;
 800687a:	e010      	b.n	800689e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800687c:	4b8f      	ldr	r3, [pc, #572]	; (8006abc <UART_SetConfig+0x56c>)
 800687e:	61fb      	str	r3, [r7, #28]
        break;
 8006880:	e00d      	b.n	800689e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006882:	f7fc ff61 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8006886:	61f8      	str	r0, [r7, #28]
        break;
 8006888:	e009      	b.n	800689e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688e:	61fb      	str	r3, [r7, #28]
        break;
 8006890:	e005      	b.n	800689e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800689c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 80fb 	beq.w	8006a9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	4413      	add	r3, r2
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d305      	bcc.n	80068c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d903      	bls.n	80068ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068c8:	e0e8      	b.n	8006a9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	2200      	movs	r2, #0
 80068ce:	461c      	mov	r4, r3
 80068d0:	4615      	mov	r5, r2
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	022b      	lsls	r3, r5, #8
 80068dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80068e0:	0222      	lsls	r2, r4, #8
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	6849      	ldr	r1, [r1, #4]
 80068e6:	0849      	lsrs	r1, r1, #1
 80068e8:	2000      	movs	r0, #0
 80068ea:	4688      	mov	r8, r1
 80068ec:	4681      	mov	r9, r0
 80068ee:	eb12 0a08 	adds.w	sl, r2, r8
 80068f2:	eb43 0b09 	adc.w	fp, r3, r9
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006904:	4650      	mov	r0, sl
 8006906:	4659      	mov	r1, fp
 8006908:	f7f9 fcb2 	bl	8000270 <__aeabi_uldivmod>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4613      	mov	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800691a:	d308      	bcc.n	800692e <UART_SetConfig+0x3de>
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006922:	d204      	bcs.n	800692e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	60da      	str	r2, [r3, #12]
 800692c:	e0b6      	b.n	8006a9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006934:	e0b2      	b.n	8006a9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693e:	d15e      	bne.n	80069fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006944:	2b08      	cmp	r3, #8
 8006946:	d828      	bhi.n	800699a <UART_SetConfig+0x44a>
 8006948:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <UART_SetConfig+0x400>)
 800694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694e:	bf00      	nop
 8006950:	08006975 	.word	0x08006975
 8006954:	0800697d 	.word	0x0800697d
 8006958:	08006985 	.word	0x08006985
 800695c:	0800699b 	.word	0x0800699b
 8006960:	0800698b 	.word	0x0800698b
 8006964:	0800699b 	.word	0x0800699b
 8006968:	0800699b 	.word	0x0800699b
 800696c:	0800699b 	.word	0x0800699b
 8006970:	08006993 	.word	0x08006993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006974:	f7fc ff80 	bl	8003878 <HAL_RCC_GetPCLK1Freq>
 8006978:	61f8      	str	r0, [r7, #28]
        break;
 800697a:	e014      	b.n	80069a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800697c:	f7fc ff92 	bl	80038a4 <HAL_RCC_GetPCLK2Freq>
 8006980:	61f8      	str	r0, [r7, #28]
        break;
 8006982:	e010      	b.n	80069a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006984:	4b4d      	ldr	r3, [pc, #308]	; (8006abc <UART_SetConfig+0x56c>)
 8006986:	61fb      	str	r3, [r7, #28]
        break;
 8006988:	e00d      	b.n	80069a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800698a:	f7fc fedd 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 800698e:	61f8      	str	r0, [r7, #28]
        break;
 8006990:	e009      	b.n	80069a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006996:	61fb      	str	r3, [r7, #28]
        break;
 8006998:	e005      	b.n	80069a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d077      	beq.n	8006a9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	005a      	lsls	r2, r3, #1
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	441a      	add	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b0f      	cmp	r3, #15
 80069c6:	d916      	bls.n	80069f6 <UART_SetConfig+0x4a6>
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ce:	d212      	bcs.n	80069f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f023 030f 	bic.w	r3, r3, #15
 80069d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	085b      	lsrs	r3, r3, #1
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	8afb      	ldrh	r3, [r7, #22]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	8afa      	ldrh	r2, [r7, #22]
 80069f2:	60da      	str	r2, [r3, #12]
 80069f4:	e052      	b.n	8006a9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069fc:	e04e      	b.n	8006a9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d827      	bhi.n	8006a56 <UART_SetConfig+0x506>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <UART_SetConfig+0x4bc>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a31 	.word	0x08006a31
 8006a10:	08006a39 	.word	0x08006a39
 8006a14:	08006a41 	.word	0x08006a41
 8006a18:	08006a57 	.word	0x08006a57
 8006a1c:	08006a47 	.word	0x08006a47
 8006a20:	08006a57 	.word	0x08006a57
 8006a24:	08006a57 	.word	0x08006a57
 8006a28:	08006a57 	.word	0x08006a57
 8006a2c:	08006a4f 	.word	0x08006a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a30:	f7fc ff22 	bl	8003878 <HAL_RCC_GetPCLK1Freq>
 8006a34:	61f8      	str	r0, [r7, #28]
        break;
 8006a36:	e014      	b.n	8006a62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a38:	f7fc ff34 	bl	80038a4 <HAL_RCC_GetPCLK2Freq>
 8006a3c:	61f8      	str	r0, [r7, #28]
        break;
 8006a3e:	e010      	b.n	8006a62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a40:	4b1e      	ldr	r3, [pc, #120]	; (8006abc <UART_SetConfig+0x56c>)
 8006a42:	61fb      	str	r3, [r7, #28]
        break;
 8006a44:	e00d      	b.n	8006a62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a46:	f7fc fe7f 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8006a4a:	61f8      	str	r0, [r7, #28]
        break;
 8006a4c:	e009      	b.n	8006a62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a52:	61fb      	str	r3, [r7, #28]
        break;
 8006a54:	e005      	b.n	8006a62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a60:	bf00      	nop
    }

    if (pclk != 0U)
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d019      	beq.n	8006a9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	085a      	lsrs	r2, r3, #1
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	441a      	add	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	2b0f      	cmp	r3, #15
 8006a80:	d909      	bls.n	8006a96 <UART_SetConfig+0x546>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a88:	d205      	bcs.n	8006a96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60da      	str	r2, [r3, #12]
 8006a94:	e002      	b.n	8006a9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006aa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3728      	adds	r7, #40	; 0x28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ab6:	bf00      	nop
 8006ab8:	40008000 	.word	0x40008000
 8006abc:	00f42400 	.word	0x00f42400

08006ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00a      	beq.n	8006aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00a      	beq.n	8006b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01a      	beq.n	8006bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bbe:	d10a      	bne.n	8006bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	605a      	str	r2, [r3, #4]
  }
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b098      	sub	sp, #96	; 0x60
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c14:	f7fb f81c 	bl	8001c50 <HAL_GetTick>
 8006c18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d12e      	bne.n	8006c86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c30:	2200      	movs	r2, #0
 8006c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f88c 	bl	8006d54 <UART_WaitOnFlagUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d021      	beq.n	8006c86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c56:	653b      	str	r3, [r7, #80]	; 0x50
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c60:	647b      	str	r3, [r7, #68]	; 0x44
 8006c62:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e6      	bne.n	8006c42 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e062      	b.n	8006d4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d149      	bne.n	8006d28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f856 	bl	8006d54 <UART_WaitOnFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d03c      	beq.n	8006d28 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	623b      	str	r3, [r7, #32]
   return(result);
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e6      	bne.n	8006cae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0301 	bic.w	r3, r3, #1
 8006cf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d00:	61fa      	str	r2, [r7, #28]
 8006d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	69b9      	ldr	r1, [r7, #24]
 8006d06:	69fa      	ldr	r2, [r7, #28]
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e5      	bne.n	8006ce0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e011      	b.n	8006d4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3758      	adds	r7, #88	; 0x58
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	4613      	mov	r3, r2
 8006d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d64:	e049      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d045      	beq.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d6e:	f7fa ff6f 	bl	8001c50 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d302      	bcc.n	8006d84 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e048      	b.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d031      	beq.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d110      	bne.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2208      	movs	r2, #8
 8006daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 f838 	bl	8006e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2208      	movs	r2, #8
 8006db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e029      	b.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd4:	d111      	bne.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 f81e 	bl	8006e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e00f      	b.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69da      	ldr	r2, [r3, #28]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4013      	ands	r3, r2
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	bf0c      	ite	eq
 8006e0a:	2301      	moveq	r3, #1
 8006e0c:	2300      	movne	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d0a6      	beq.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b095      	sub	sp, #84	; 0x54
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e48:	643b      	str	r3, [r7, #64]	; 0x40
 8006e4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e6      	bne.n	8006e2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f023 0301 	bic.w	r3, r3, #1
 8006e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e5      	bne.n	8006e5c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d118      	bne.n	8006eca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f023 0310 	bic.w	r3, r3, #16
 8006eac:	647b      	str	r3, [r7, #68]	; 0x44
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb6:	61bb      	str	r3, [r7, #24]
 8006eb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6979      	ldr	r1, [r7, #20]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e6      	bne.n	8006e98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ede:	bf00      	nop
 8006ee0:	3754      	adds	r7, #84	; 0x54
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
	...

08006eec <calloc>:
 8006eec:	4b02      	ldr	r3, [pc, #8]	; (8006ef8 <calloc+0xc>)
 8006eee:	460a      	mov	r2, r1
 8006ef0:	4601      	mov	r1, r0
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	f000 b802 	b.w	8006efc <_calloc_r>
 8006ef8:	20000098 	.word	0x20000098

08006efc <_calloc_r>:
 8006efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006efe:	fba1 2402 	umull	r2, r4, r1, r2
 8006f02:	b94c      	cbnz	r4, 8006f18 <_calloc_r+0x1c>
 8006f04:	4611      	mov	r1, r2
 8006f06:	9201      	str	r2, [sp, #4]
 8006f08:	f000 f836 	bl	8006f78 <_malloc_r>
 8006f0c:	9a01      	ldr	r2, [sp, #4]
 8006f0e:	4605      	mov	r5, r0
 8006f10:	b930      	cbnz	r0, 8006f20 <_calloc_r+0x24>
 8006f12:	4628      	mov	r0, r5
 8006f14:	b003      	add	sp, #12
 8006f16:	bd30      	pop	{r4, r5, pc}
 8006f18:	220c      	movs	r2, #12
 8006f1a:	6002      	str	r2, [r0, #0]
 8006f1c:	2500      	movs	r5, #0
 8006f1e:	e7f8      	b.n	8006f12 <_calloc_r+0x16>
 8006f20:	4621      	mov	r1, r4
 8006f22:	f000 fac5 	bl	80074b0 <memset>
 8006f26:	e7f4      	b.n	8006f12 <_calloc_r+0x16>

08006f28 <free>:
 8006f28:	4b02      	ldr	r3, [pc, #8]	; (8006f34 <free+0xc>)
 8006f2a:	4601      	mov	r1, r0
 8006f2c:	6818      	ldr	r0, [r3, #0]
 8006f2e:	f000 bb4b 	b.w	80075c8 <_free_r>
 8006f32:	bf00      	nop
 8006f34:	20000098 	.word	0x20000098

08006f38 <sbrk_aligned>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	4e0e      	ldr	r6, [pc, #56]	; (8006f74 <sbrk_aligned+0x3c>)
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	6831      	ldr	r1, [r6, #0]
 8006f40:	4605      	mov	r5, r0
 8006f42:	b911      	cbnz	r1, 8006f4a <sbrk_aligned+0x12>
 8006f44:	f000 faf0 	bl	8007528 <_sbrk_r>
 8006f48:	6030      	str	r0, [r6, #0]
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 faeb 	bl	8007528 <_sbrk_r>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	d00a      	beq.n	8006f6c <sbrk_aligned+0x34>
 8006f56:	1cc4      	adds	r4, r0, #3
 8006f58:	f024 0403 	bic.w	r4, r4, #3
 8006f5c:	42a0      	cmp	r0, r4
 8006f5e:	d007      	beq.n	8006f70 <sbrk_aligned+0x38>
 8006f60:	1a21      	subs	r1, r4, r0
 8006f62:	4628      	mov	r0, r5
 8006f64:	f000 fae0 	bl	8007528 <_sbrk_r>
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d101      	bne.n	8006f70 <sbrk_aligned+0x38>
 8006f6c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f70:	4620      	mov	r0, r4
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	200002e0 	.word	0x200002e0

08006f78 <_malloc_r>:
 8006f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f7c:	1ccd      	adds	r5, r1, #3
 8006f7e:	f025 0503 	bic.w	r5, r5, #3
 8006f82:	3508      	adds	r5, #8
 8006f84:	2d0c      	cmp	r5, #12
 8006f86:	bf38      	it	cc
 8006f88:	250c      	movcc	r5, #12
 8006f8a:	2d00      	cmp	r5, #0
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	db01      	blt.n	8006f94 <_malloc_r+0x1c>
 8006f90:	42a9      	cmp	r1, r5
 8006f92:	d905      	bls.n	8006fa0 <_malloc_r+0x28>
 8006f94:	230c      	movs	r3, #12
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	2600      	movs	r6, #0
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fa0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007074 <_malloc_r+0xfc>
 8006fa4:	f000 f868 	bl	8007078 <__malloc_lock>
 8006fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fac:	461c      	mov	r4, r3
 8006fae:	bb5c      	cbnz	r4, 8007008 <_malloc_r+0x90>
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f7ff ffc0 	bl	8006f38 <sbrk_aligned>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	4604      	mov	r4, r0
 8006fbc:	d155      	bne.n	800706a <_malloc_r+0xf2>
 8006fbe:	f8d8 4000 	ldr.w	r4, [r8]
 8006fc2:	4626      	mov	r6, r4
 8006fc4:	2e00      	cmp	r6, #0
 8006fc6:	d145      	bne.n	8007054 <_malloc_r+0xdc>
 8006fc8:	2c00      	cmp	r4, #0
 8006fca:	d048      	beq.n	800705e <_malloc_r+0xe6>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	eb04 0903 	add.w	r9, r4, r3
 8006fd6:	f000 faa7 	bl	8007528 <_sbrk_r>
 8006fda:	4581      	cmp	r9, r0
 8006fdc:	d13f      	bne.n	800705e <_malloc_r+0xe6>
 8006fde:	6821      	ldr	r1, [r4, #0]
 8006fe0:	1a6d      	subs	r5, r5, r1
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f7ff ffa7 	bl	8006f38 <sbrk_aligned>
 8006fea:	3001      	adds	r0, #1
 8006fec:	d037      	beq.n	800705e <_malloc_r+0xe6>
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	442b      	add	r3, r5
 8006ff2:	6023      	str	r3, [r4, #0]
 8006ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d038      	beq.n	800706e <_malloc_r+0xf6>
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	42a2      	cmp	r2, r4
 8007000:	d12b      	bne.n	800705a <_malloc_r+0xe2>
 8007002:	2200      	movs	r2, #0
 8007004:	605a      	str	r2, [r3, #4]
 8007006:	e00f      	b.n	8007028 <_malloc_r+0xb0>
 8007008:	6822      	ldr	r2, [r4, #0]
 800700a:	1b52      	subs	r2, r2, r5
 800700c:	d41f      	bmi.n	800704e <_malloc_r+0xd6>
 800700e:	2a0b      	cmp	r2, #11
 8007010:	d917      	bls.n	8007042 <_malloc_r+0xca>
 8007012:	1961      	adds	r1, r4, r5
 8007014:	42a3      	cmp	r3, r4
 8007016:	6025      	str	r5, [r4, #0]
 8007018:	bf18      	it	ne
 800701a:	6059      	strne	r1, [r3, #4]
 800701c:	6863      	ldr	r3, [r4, #4]
 800701e:	bf08      	it	eq
 8007020:	f8c8 1000 	streq.w	r1, [r8]
 8007024:	5162      	str	r2, [r4, r5]
 8007026:	604b      	str	r3, [r1, #4]
 8007028:	4638      	mov	r0, r7
 800702a:	f104 060b 	add.w	r6, r4, #11
 800702e:	f000 f829 	bl	8007084 <__malloc_unlock>
 8007032:	f026 0607 	bic.w	r6, r6, #7
 8007036:	1d23      	adds	r3, r4, #4
 8007038:	1af2      	subs	r2, r6, r3
 800703a:	d0ae      	beq.n	8006f9a <_malloc_r+0x22>
 800703c:	1b9b      	subs	r3, r3, r6
 800703e:	50a3      	str	r3, [r4, r2]
 8007040:	e7ab      	b.n	8006f9a <_malloc_r+0x22>
 8007042:	42a3      	cmp	r3, r4
 8007044:	6862      	ldr	r2, [r4, #4]
 8007046:	d1dd      	bne.n	8007004 <_malloc_r+0x8c>
 8007048:	f8c8 2000 	str.w	r2, [r8]
 800704c:	e7ec      	b.n	8007028 <_malloc_r+0xb0>
 800704e:	4623      	mov	r3, r4
 8007050:	6864      	ldr	r4, [r4, #4]
 8007052:	e7ac      	b.n	8006fae <_malloc_r+0x36>
 8007054:	4634      	mov	r4, r6
 8007056:	6876      	ldr	r6, [r6, #4]
 8007058:	e7b4      	b.n	8006fc4 <_malloc_r+0x4c>
 800705a:	4613      	mov	r3, r2
 800705c:	e7cc      	b.n	8006ff8 <_malloc_r+0x80>
 800705e:	230c      	movs	r3, #12
 8007060:	603b      	str	r3, [r7, #0]
 8007062:	4638      	mov	r0, r7
 8007064:	f000 f80e 	bl	8007084 <__malloc_unlock>
 8007068:	e797      	b.n	8006f9a <_malloc_r+0x22>
 800706a:	6025      	str	r5, [r4, #0]
 800706c:	e7dc      	b.n	8007028 <_malloc_r+0xb0>
 800706e:	605b      	str	r3, [r3, #4]
 8007070:	deff      	udf	#255	; 0xff
 8007072:	bf00      	nop
 8007074:	200002dc 	.word	0x200002dc

08007078 <__malloc_lock>:
 8007078:	4801      	ldr	r0, [pc, #4]	; (8007080 <__malloc_lock+0x8>)
 800707a:	f000 baa2 	b.w	80075c2 <__retarget_lock_acquire_recursive>
 800707e:	bf00      	nop
 8007080:	20000424 	.word	0x20000424

08007084 <__malloc_unlock>:
 8007084:	4801      	ldr	r0, [pc, #4]	; (800708c <__malloc_unlock+0x8>)
 8007086:	f000 ba9d 	b.w	80075c4 <__retarget_lock_release_recursive>
 800708a:	bf00      	nop
 800708c:	20000424 	.word	0x20000424

08007090 <std>:
 8007090:	2300      	movs	r3, #0
 8007092:	b510      	push	{r4, lr}
 8007094:	4604      	mov	r4, r0
 8007096:	e9c0 3300 	strd	r3, r3, [r0]
 800709a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800709e:	6083      	str	r3, [r0, #8]
 80070a0:	8181      	strh	r1, [r0, #12]
 80070a2:	6643      	str	r3, [r0, #100]	; 0x64
 80070a4:	81c2      	strh	r2, [r0, #14]
 80070a6:	6183      	str	r3, [r0, #24]
 80070a8:	4619      	mov	r1, r3
 80070aa:	2208      	movs	r2, #8
 80070ac:	305c      	adds	r0, #92	; 0x5c
 80070ae:	f000 f9ff 	bl	80074b0 <memset>
 80070b2:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <std+0x58>)
 80070b4:	6263      	str	r3, [r4, #36]	; 0x24
 80070b6:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <std+0x5c>)
 80070b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80070ba:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <std+0x60>)
 80070bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070be:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <std+0x64>)
 80070c0:	6323      	str	r3, [r4, #48]	; 0x30
 80070c2:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <std+0x68>)
 80070c4:	6224      	str	r4, [r4, #32]
 80070c6:	429c      	cmp	r4, r3
 80070c8:	d006      	beq.n	80070d8 <std+0x48>
 80070ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80070ce:	4294      	cmp	r4, r2
 80070d0:	d002      	beq.n	80070d8 <std+0x48>
 80070d2:	33d0      	adds	r3, #208	; 0xd0
 80070d4:	429c      	cmp	r4, r3
 80070d6:	d105      	bne.n	80070e4 <std+0x54>
 80070d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e0:	f000 ba6e 	b.w	80075c0 <__retarget_lock_init_recursive>
 80070e4:	bd10      	pop	{r4, pc}
 80070e6:	bf00      	nop
 80070e8:	08007301 	.word	0x08007301
 80070ec:	08007323 	.word	0x08007323
 80070f0:	0800735b 	.word	0x0800735b
 80070f4:	0800737f 	.word	0x0800737f
 80070f8:	200002e4 	.word	0x200002e4

080070fc <stdio_exit_handler>:
 80070fc:	4a02      	ldr	r2, [pc, #8]	; (8007108 <stdio_exit_handler+0xc>)
 80070fe:	4903      	ldr	r1, [pc, #12]	; (800710c <stdio_exit_handler+0x10>)
 8007100:	4803      	ldr	r0, [pc, #12]	; (8007110 <stdio_exit_handler+0x14>)
 8007102:	f000 b869 	b.w	80071d8 <_fwalk_sglue>
 8007106:	bf00      	nop
 8007108:	20000040 	.word	0x20000040
 800710c:	08007d15 	.word	0x08007d15
 8007110:	2000004c 	.word	0x2000004c

08007114 <cleanup_stdio>:
 8007114:	6841      	ldr	r1, [r0, #4]
 8007116:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <cleanup_stdio+0x34>)
 8007118:	4299      	cmp	r1, r3
 800711a:	b510      	push	{r4, lr}
 800711c:	4604      	mov	r4, r0
 800711e:	d001      	beq.n	8007124 <cleanup_stdio+0x10>
 8007120:	f000 fdf8 	bl	8007d14 <_fflush_r>
 8007124:	68a1      	ldr	r1, [r4, #8]
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <cleanup_stdio+0x38>)
 8007128:	4299      	cmp	r1, r3
 800712a:	d002      	beq.n	8007132 <cleanup_stdio+0x1e>
 800712c:	4620      	mov	r0, r4
 800712e:	f000 fdf1 	bl	8007d14 <_fflush_r>
 8007132:	68e1      	ldr	r1, [r4, #12]
 8007134:	4b06      	ldr	r3, [pc, #24]	; (8007150 <cleanup_stdio+0x3c>)
 8007136:	4299      	cmp	r1, r3
 8007138:	d004      	beq.n	8007144 <cleanup_stdio+0x30>
 800713a:	4620      	mov	r0, r4
 800713c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007140:	f000 bde8 	b.w	8007d14 <_fflush_r>
 8007144:	bd10      	pop	{r4, pc}
 8007146:	bf00      	nop
 8007148:	200002e4 	.word	0x200002e4
 800714c:	2000034c 	.word	0x2000034c
 8007150:	200003b4 	.word	0x200003b4

08007154 <global_stdio_init.part.0>:
 8007154:	b510      	push	{r4, lr}
 8007156:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <global_stdio_init.part.0+0x30>)
 8007158:	4c0b      	ldr	r4, [pc, #44]	; (8007188 <global_stdio_init.part.0+0x34>)
 800715a:	4a0c      	ldr	r2, [pc, #48]	; (800718c <global_stdio_init.part.0+0x38>)
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	4620      	mov	r0, r4
 8007160:	2200      	movs	r2, #0
 8007162:	2104      	movs	r1, #4
 8007164:	f7ff ff94 	bl	8007090 <std>
 8007168:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800716c:	2201      	movs	r2, #1
 800716e:	2109      	movs	r1, #9
 8007170:	f7ff ff8e 	bl	8007090 <std>
 8007174:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007178:	2202      	movs	r2, #2
 800717a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800717e:	2112      	movs	r1, #18
 8007180:	f7ff bf86 	b.w	8007090 <std>
 8007184:	2000041c 	.word	0x2000041c
 8007188:	200002e4 	.word	0x200002e4
 800718c:	080070fd 	.word	0x080070fd

08007190 <__sfp_lock_acquire>:
 8007190:	4801      	ldr	r0, [pc, #4]	; (8007198 <__sfp_lock_acquire+0x8>)
 8007192:	f000 ba16 	b.w	80075c2 <__retarget_lock_acquire_recursive>
 8007196:	bf00      	nop
 8007198:	20000425 	.word	0x20000425

0800719c <__sfp_lock_release>:
 800719c:	4801      	ldr	r0, [pc, #4]	; (80071a4 <__sfp_lock_release+0x8>)
 800719e:	f000 ba11 	b.w	80075c4 <__retarget_lock_release_recursive>
 80071a2:	bf00      	nop
 80071a4:	20000425 	.word	0x20000425

080071a8 <__sinit>:
 80071a8:	b510      	push	{r4, lr}
 80071aa:	4604      	mov	r4, r0
 80071ac:	f7ff fff0 	bl	8007190 <__sfp_lock_acquire>
 80071b0:	6a23      	ldr	r3, [r4, #32]
 80071b2:	b11b      	cbz	r3, 80071bc <__sinit+0x14>
 80071b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b8:	f7ff bff0 	b.w	800719c <__sfp_lock_release>
 80071bc:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <__sinit+0x28>)
 80071be:	6223      	str	r3, [r4, #32]
 80071c0:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <__sinit+0x2c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1f5      	bne.n	80071b4 <__sinit+0xc>
 80071c8:	f7ff ffc4 	bl	8007154 <global_stdio_init.part.0>
 80071cc:	e7f2      	b.n	80071b4 <__sinit+0xc>
 80071ce:	bf00      	nop
 80071d0:	08007115 	.word	0x08007115
 80071d4:	2000041c 	.word	0x2000041c

080071d8 <_fwalk_sglue>:
 80071d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071dc:	4607      	mov	r7, r0
 80071de:	4688      	mov	r8, r1
 80071e0:	4614      	mov	r4, r2
 80071e2:	2600      	movs	r6, #0
 80071e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071e8:	f1b9 0901 	subs.w	r9, r9, #1
 80071ec:	d505      	bpl.n	80071fa <_fwalk_sglue+0x22>
 80071ee:	6824      	ldr	r4, [r4, #0]
 80071f0:	2c00      	cmp	r4, #0
 80071f2:	d1f7      	bne.n	80071e4 <_fwalk_sglue+0xc>
 80071f4:	4630      	mov	r0, r6
 80071f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fa:	89ab      	ldrh	r3, [r5, #12]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d907      	bls.n	8007210 <_fwalk_sglue+0x38>
 8007200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007204:	3301      	adds	r3, #1
 8007206:	d003      	beq.n	8007210 <_fwalk_sglue+0x38>
 8007208:	4629      	mov	r1, r5
 800720a:	4638      	mov	r0, r7
 800720c:	47c0      	blx	r8
 800720e:	4306      	orrs	r6, r0
 8007210:	3568      	adds	r5, #104	; 0x68
 8007212:	e7e9      	b.n	80071e8 <_fwalk_sglue+0x10>

08007214 <iprintf>:
 8007214:	b40f      	push	{r0, r1, r2, r3}
 8007216:	b507      	push	{r0, r1, r2, lr}
 8007218:	4906      	ldr	r1, [pc, #24]	; (8007234 <iprintf+0x20>)
 800721a:	ab04      	add	r3, sp, #16
 800721c:	6808      	ldr	r0, [r1, #0]
 800721e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007222:	6881      	ldr	r1, [r0, #8]
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	f000 fa45 	bl	80076b4 <_vfiprintf_r>
 800722a:	b003      	add	sp, #12
 800722c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007230:	b004      	add	sp, #16
 8007232:	4770      	bx	lr
 8007234:	20000098 	.word	0x20000098

08007238 <putchar>:
 8007238:	4b02      	ldr	r3, [pc, #8]	; (8007244 <putchar+0xc>)
 800723a:	4601      	mov	r1, r0
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	6882      	ldr	r2, [r0, #8]
 8007240:	f000 bdf2 	b.w	8007e28 <_putc_r>
 8007244:	20000098 	.word	0x20000098

08007248 <_puts_r>:
 8007248:	6a03      	ldr	r3, [r0, #32]
 800724a:	b570      	push	{r4, r5, r6, lr}
 800724c:	6884      	ldr	r4, [r0, #8]
 800724e:	4605      	mov	r5, r0
 8007250:	460e      	mov	r6, r1
 8007252:	b90b      	cbnz	r3, 8007258 <_puts_r+0x10>
 8007254:	f7ff ffa8 	bl	80071a8 <__sinit>
 8007258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800725a:	07db      	lsls	r3, r3, #31
 800725c:	d405      	bmi.n	800726a <_puts_r+0x22>
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	0598      	lsls	r0, r3, #22
 8007262:	d402      	bmi.n	800726a <_puts_r+0x22>
 8007264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007266:	f000 f9ac 	bl	80075c2 <__retarget_lock_acquire_recursive>
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	0719      	lsls	r1, r3, #28
 800726e:	d513      	bpl.n	8007298 <_puts_r+0x50>
 8007270:	6923      	ldr	r3, [r4, #16]
 8007272:	b18b      	cbz	r3, 8007298 <_puts_r+0x50>
 8007274:	3e01      	subs	r6, #1
 8007276:	68a3      	ldr	r3, [r4, #8]
 8007278:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800727c:	3b01      	subs	r3, #1
 800727e:	60a3      	str	r3, [r4, #8]
 8007280:	b9e9      	cbnz	r1, 80072be <_puts_r+0x76>
 8007282:	2b00      	cmp	r3, #0
 8007284:	da2e      	bge.n	80072e4 <_puts_r+0x9c>
 8007286:	4622      	mov	r2, r4
 8007288:	210a      	movs	r1, #10
 800728a:	4628      	mov	r0, r5
 800728c:	f000 f87b 	bl	8007386 <__swbuf_r>
 8007290:	3001      	adds	r0, #1
 8007292:	d007      	beq.n	80072a4 <_puts_r+0x5c>
 8007294:	250a      	movs	r5, #10
 8007296:	e007      	b.n	80072a8 <_puts_r+0x60>
 8007298:	4621      	mov	r1, r4
 800729a:	4628      	mov	r0, r5
 800729c:	f000 f8b0 	bl	8007400 <__swsetup_r>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d0e7      	beq.n	8007274 <_puts_r+0x2c>
 80072a4:	f04f 35ff 	mov.w	r5, #4294967295
 80072a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072aa:	07da      	lsls	r2, r3, #31
 80072ac:	d405      	bmi.n	80072ba <_puts_r+0x72>
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	059b      	lsls	r3, r3, #22
 80072b2:	d402      	bmi.n	80072ba <_puts_r+0x72>
 80072b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072b6:	f000 f985 	bl	80075c4 <__retarget_lock_release_recursive>
 80072ba:	4628      	mov	r0, r5
 80072bc:	bd70      	pop	{r4, r5, r6, pc}
 80072be:	2b00      	cmp	r3, #0
 80072c0:	da04      	bge.n	80072cc <_puts_r+0x84>
 80072c2:	69a2      	ldr	r2, [r4, #24]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	dc06      	bgt.n	80072d6 <_puts_r+0x8e>
 80072c8:	290a      	cmp	r1, #10
 80072ca:	d004      	beq.n	80072d6 <_puts_r+0x8e>
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	6022      	str	r2, [r4, #0]
 80072d2:	7019      	strb	r1, [r3, #0]
 80072d4:	e7cf      	b.n	8007276 <_puts_r+0x2e>
 80072d6:	4622      	mov	r2, r4
 80072d8:	4628      	mov	r0, r5
 80072da:	f000 f854 	bl	8007386 <__swbuf_r>
 80072de:	3001      	adds	r0, #1
 80072e0:	d1c9      	bne.n	8007276 <_puts_r+0x2e>
 80072e2:	e7df      	b.n	80072a4 <_puts_r+0x5c>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	250a      	movs	r5, #10
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	6022      	str	r2, [r4, #0]
 80072ec:	701d      	strb	r5, [r3, #0]
 80072ee:	e7db      	b.n	80072a8 <_puts_r+0x60>

080072f0 <puts>:
 80072f0:	4b02      	ldr	r3, [pc, #8]	; (80072fc <puts+0xc>)
 80072f2:	4601      	mov	r1, r0
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	f7ff bfa7 	b.w	8007248 <_puts_r>
 80072fa:	bf00      	nop
 80072fc:	20000098 	.word	0x20000098

08007300 <__sread>:
 8007300:	b510      	push	{r4, lr}
 8007302:	460c      	mov	r4, r1
 8007304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007308:	f000 f8fc 	bl	8007504 <_read_r>
 800730c:	2800      	cmp	r0, #0
 800730e:	bfab      	itete	ge
 8007310:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007312:	89a3      	ldrhlt	r3, [r4, #12]
 8007314:	181b      	addge	r3, r3, r0
 8007316:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800731a:	bfac      	ite	ge
 800731c:	6563      	strge	r3, [r4, #84]	; 0x54
 800731e:	81a3      	strhlt	r3, [r4, #12]
 8007320:	bd10      	pop	{r4, pc}

08007322 <__swrite>:
 8007322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007326:	461f      	mov	r7, r3
 8007328:	898b      	ldrh	r3, [r1, #12]
 800732a:	05db      	lsls	r3, r3, #23
 800732c:	4605      	mov	r5, r0
 800732e:	460c      	mov	r4, r1
 8007330:	4616      	mov	r6, r2
 8007332:	d505      	bpl.n	8007340 <__swrite+0x1e>
 8007334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007338:	2302      	movs	r3, #2
 800733a:	2200      	movs	r2, #0
 800733c:	f000 f8d0 	bl	80074e0 <_lseek_r>
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800734a:	81a3      	strh	r3, [r4, #12]
 800734c:	4632      	mov	r2, r6
 800734e:	463b      	mov	r3, r7
 8007350:	4628      	mov	r0, r5
 8007352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	f000 b8f7 	b.w	8007548 <_write_r>

0800735a <__sseek>:
 800735a:	b510      	push	{r4, lr}
 800735c:	460c      	mov	r4, r1
 800735e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007362:	f000 f8bd 	bl	80074e0 <_lseek_r>
 8007366:	1c43      	adds	r3, r0, #1
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	bf15      	itete	ne
 800736c:	6560      	strne	r0, [r4, #84]	; 0x54
 800736e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007372:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007376:	81a3      	strheq	r3, [r4, #12]
 8007378:	bf18      	it	ne
 800737a:	81a3      	strhne	r3, [r4, #12]
 800737c:	bd10      	pop	{r4, pc}

0800737e <__sclose>:
 800737e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007382:	f000 b89d 	b.w	80074c0 <_close_r>

08007386 <__swbuf_r>:
 8007386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007388:	460e      	mov	r6, r1
 800738a:	4614      	mov	r4, r2
 800738c:	4605      	mov	r5, r0
 800738e:	b118      	cbz	r0, 8007398 <__swbuf_r+0x12>
 8007390:	6a03      	ldr	r3, [r0, #32]
 8007392:	b90b      	cbnz	r3, 8007398 <__swbuf_r+0x12>
 8007394:	f7ff ff08 	bl	80071a8 <__sinit>
 8007398:	69a3      	ldr	r3, [r4, #24]
 800739a:	60a3      	str	r3, [r4, #8]
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	071a      	lsls	r2, r3, #28
 80073a0:	d525      	bpl.n	80073ee <__swbuf_r+0x68>
 80073a2:	6923      	ldr	r3, [r4, #16]
 80073a4:	b31b      	cbz	r3, 80073ee <__swbuf_r+0x68>
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	6922      	ldr	r2, [r4, #16]
 80073aa:	1a98      	subs	r0, r3, r2
 80073ac:	6963      	ldr	r3, [r4, #20]
 80073ae:	b2f6      	uxtb	r6, r6
 80073b0:	4283      	cmp	r3, r0
 80073b2:	4637      	mov	r7, r6
 80073b4:	dc04      	bgt.n	80073c0 <__swbuf_r+0x3a>
 80073b6:	4621      	mov	r1, r4
 80073b8:	4628      	mov	r0, r5
 80073ba:	f000 fcab 	bl	8007d14 <_fflush_r>
 80073be:	b9e0      	cbnz	r0, 80073fa <__swbuf_r+0x74>
 80073c0:	68a3      	ldr	r3, [r4, #8]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	60a3      	str	r3, [r4, #8]
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	6022      	str	r2, [r4, #0]
 80073cc:	701e      	strb	r6, [r3, #0]
 80073ce:	6962      	ldr	r2, [r4, #20]
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d004      	beq.n	80073e0 <__swbuf_r+0x5a>
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	07db      	lsls	r3, r3, #31
 80073da:	d506      	bpl.n	80073ea <__swbuf_r+0x64>
 80073dc:	2e0a      	cmp	r6, #10
 80073de:	d104      	bne.n	80073ea <__swbuf_r+0x64>
 80073e0:	4621      	mov	r1, r4
 80073e2:	4628      	mov	r0, r5
 80073e4:	f000 fc96 	bl	8007d14 <_fflush_r>
 80073e8:	b938      	cbnz	r0, 80073fa <__swbuf_r+0x74>
 80073ea:	4638      	mov	r0, r7
 80073ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ee:	4621      	mov	r1, r4
 80073f0:	4628      	mov	r0, r5
 80073f2:	f000 f805 	bl	8007400 <__swsetup_r>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d0d5      	beq.n	80073a6 <__swbuf_r+0x20>
 80073fa:	f04f 37ff 	mov.w	r7, #4294967295
 80073fe:	e7f4      	b.n	80073ea <__swbuf_r+0x64>

08007400 <__swsetup_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4b2a      	ldr	r3, [pc, #168]	; (80074ac <__swsetup_r+0xac>)
 8007404:	4605      	mov	r5, r0
 8007406:	6818      	ldr	r0, [r3, #0]
 8007408:	460c      	mov	r4, r1
 800740a:	b118      	cbz	r0, 8007414 <__swsetup_r+0x14>
 800740c:	6a03      	ldr	r3, [r0, #32]
 800740e:	b90b      	cbnz	r3, 8007414 <__swsetup_r+0x14>
 8007410:	f7ff feca 	bl	80071a8 <__sinit>
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800741a:	0718      	lsls	r0, r3, #28
 800741c:	d422      	bmi.n	8007464 <__swsetup_r+0x64>
 800741e:	06d9      	lsls	r1, r3, #27
 8007420:	d407      	bmi.n	8007432 <__swsetup_r+0x32>
 8007422:	2309      	movs	r3, #9
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800742a:	81a3      	strh	r3, [r4, #12]
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	e034      	b.n	800749c <__swsetup_r+0x9c>
 8007432:	0758      	lsls	r0, r3, #29
 8007434:	d512      	bpl.n	800745c <__swsetup_r+0x5c>
 8007436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007438:	b141      	cbz	r1, 800744c <__swsetup_r+0x4c>
 800743a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800743e:	4299      	cmp	r1, r3
 8007440:	d002      	beq.n	8007448 <__swsetup_r+0x48>
 8007442:	4628      	mov	r0, r5
 8007444:	f000 f8c0 	bl	80075c8 <_free_r>
 8007448:	2300      	movs	r3, #0
 800744a:	6363      	str	r3, [r4, #52]	; 0x34
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007452:	81a3      	strh	r3, [r4, #12]
 8007454:	2300      	movs	r3, #0
 8007456:	6063      	str	r3, [r4, #4]
 8007458:	6923      	ldr	r3, [r4, #16]
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	89a3      	ldrh	r3, [r4, #12]
 800745e:	f043 0308 	orr.w	r3, r3, #8
 8007462:	81a3      	strh	r3, [r4, #12]
 8007464:	6923      	ldr	r3, [r4, #16]
 8007466:	b94b      	cbnz	r3, 800747c <__swsetup_r+0x7c>
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800746e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007472:	d003      	beq.n	800747c <__swsetup_r+0x7c>
 8007474:	4621      	mov	r1, r4
 8007476:	4628      	mov	r0, r5
 8007478:	f000 fc9a 	bl	8007db0 <__smakebuf_r>
 800747c:	89a0      	ldrh	r0, [r4, #12]
 800747e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007482:	f010 0301 	ands.w	r3, r0, #1
 8007486:	d00a      	beq.n	800749e <__swsetup_r+0x9e>
 8007488:	2300      	movs	r3, #0
 800748a:	60a3      	str	r3, [r4, #8]
 800748c:	6963      	ldr	r3, [r4, #20]
 800748e:	425b      	negs	r3, r3
 8007490:	61a3      	str	r3, [r4, #24]
 8007492:	6923      	ldr	r3, [r4, #16]
 8007494:	b943      	cbnz	r3, 80074a8 <__swsetup_r+0xa8>
 8007496:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800749a:	d1c4      	bne.n	8007426 <__swsetup_r+0x26>
 800749c:	bd38      	pop	{r3, r4, r5, pc}
 800749e:	0781      	lsls	r1, r0, #30
 80074a0:	bf58      	it	pl
 80074a2:	6963      	ldrpl	r3, [r4, #20]
 80074a4:	60a3      	str	r3, [r4, #8]
 80074a6:	e7f4      	b.n	8007492 <__swsetup_r+0x92>
 80074a8:	2000      	movs	r0, #0
 80074aa:	e7f7      	b.n	800749c <__swsetup_r+0x9c>
 80074ac:	20000098 	.word	0x20000098

080074b0 <memset>:
 80074b0:	4402      	add	r2, r0
 80074b2:	4603      	mov	r3, r0
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d100      	bne.n	80074ba <memset+0xa>
 80074b8:	4770      	bx	lr
 80074ba:	f803 1b01 	strb.w	r1, [r3], #1
 80074be:	e7f9      	b.n	80074b4 <memset+0x4>

080074c0 <_close_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4d06      	ldr	r5, [pc, #24]	; (80074dc <_close_r+0x1c>)
 80074c4:	2300      	movs	r3, #0
 80074c6:	4604      	mov	r4, r0
 80074c8:	4608      	mov	r0, r1
 80074ca:	602b      	str	r3, [r5, #0]
 80074cc:	f7fa faa9 	bl	8001a22 <_close>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d102      	bne.n	80074da <_close_r+0x1a>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	b103      	cbz	r3, 80074da <_close_r+0x1a>
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	20000420 	.word	0x20000420

080074e0 <_lseek_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4d07      	ldr	r5, [pc, #28]	; (8007500 <_lseek_r+0x20>)
 80074e4:	4604      	mov	r4, r0
 80074e6:	4608      	mov	r0, r1
 80074e8:	4611      	mov	r1, r2
 80074ea:	2200      	movs	r2, #0
 80074ec:	602a      	str	r2, [r5, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f7fa fabe 	bl	8001a70 <_lseek>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_lseek_r+0x1e>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_lseek_r+0x1e>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	20000420 	.word	0x20000420

08007504 <_read_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4d07      	ldr	r5, [pc, #28]	; (8007524 <_read_r+0x20>)
 8007508:	4604      	mov	r4, r0
 800750a:	4608      	mov	r0, r1
 800750c:	4611      	mov	r1, r2
 800750e:	2200      	movs	r2, #0
 8007510:	602a      	str	r2, [r5, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	f7fa fa4c 	bl	80019b0 <_read>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_read_r+0x1e>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_read_r+0x1e>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	20000420 	.word	0x20000420

08007528 <_sbrk_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d06      	ldr	r5, [pc, #24]	; (8007544 <_sbrk_r+0x1c>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	f7fa faaa 	bl	8001a8c <_sbrk>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_sbrk_r+0x1a>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_sbrk_r+0x1a>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	20000420 	.word	0x20000420

08007548 <_write_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4d07      	ldr	r5, [pc, #28]	; (8007568 <_write_r+0x20>)
 800754c:	4604      	mov	r4, r0
 800754e:	4608      	mov	r0, r1
 8007550:	4611      	mov	r1, r2
 8007552:	2200      	movs	r2, #0
 8007554:	602a      	str	r2, [r5, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	f7fa fa47 	bl	80019ea <_write>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_write_r+0x1e>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_write_r+0x1e>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	20000420 	.word	0x20000420

0800756c <__errno>:
 800756c:	4b01      	ldr	r3, [pc, #4]	; (8007574 <__errno+0x8>)
 800756e:	6818      	ldr	r0, [r3, #0]
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20000098 	.word	0x20000098

08007578 <__libc_init_array>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	4d0d      	ldr	r5, [pc, #52]	; (80075b0 <__libc_init_array+0x38>)
 800757c:	4c0d      	ldr	r4, [pc, #52]	; (80075b4 <__libc_init_array+0x3c>)
 800757e:	1b64      	subs	r4, r4, r5
 8007580:	10a4      	asrs	r4, r4, #2
 8007582:	2600      	movs	r6, #0
 8007584:	42a6      	cmp	r6, r4
 8007586:	d109      	bne.n	800759c <__libc_init_array+0x24>
 8007588:	4d0b      	ldr	r5, [pc, #44]	; (80075b8 <__libc_init_array+0x40>)
 800758a:	4c0c      	ldr	r4, [pc, #48]	; (80075bc <__libc_init_array+0x44>)
 800758c:	f000 fca2 	bl	8007ed4 <_init>
 8007590:	1b64      	subs	r4, r4, r5
 8007592:	10a4      	asrs	r4, r4, #2
 8007594:	2600      	movs	r6, #0
 8007596:	42a6      	cmp	r6, r4
 8007598:	d105      	bne.n	80075a6 <__libc_init_array+0x2e>
 800759a:	bd70      	pop	{r4, r5, r6, pc}
 800759c:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a0:	4798      	blx	r3
 80075a2:	3601      	adds	r6, #1
 80075a4:	e7ee      	b.n	8007584 <__libc_init_array+0xc>
 80075a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075aa:	4798      	blx	r3
 80075ac:	3601      	adds	r6, #1
 80075ae:	e7f2      	b.n	8007596 <__libc_init_array+0x1e>
 80075b0:	08008700 	.word	0x08008700
 80075b4:	08008700 	.word	0x08008700
 80075b8:	08008700 	.word	0x08008700
 80075bc:	08008704 	.word	0x08008704

080075c0 <__retarget_lock_init_recursive>:
 80075c0:	4770      	bx	lr

080075c2 <__retarget_lock_acquire_recursive>:
 80075c2:	4770      	bx	lr

080075c4 <__retarget_lock_release_recursive>:
 80075c4:	4770      	bx	lr
	...

080075c8 <_free_r>:
 80075c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ca:	2900      	cmp	r1, #0
 80075cc:	d044      	beq.n	8007658 <_free_r+0x90>
 80075ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d2:	9001      	str	r0, [sp, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f1a1 0404 	sub.w	r4, r1, #4
 80075da:	bfb8      	it	lt
 80075dc:	18e4      	addlt	r4, r4, r3
 80075de:	f7ff fd4b 	bl	8007078 <__malloc_lock>
 80075e2:	4a1e      	ldr	r2, [pc, #120]	; (800765c <_free_r+0x94>)
 80075e4:	9801      	ldr	r0, [sp, #4]
 80075e6:	6813      	ldr	r3, [r2, #0]
 80075e8:	b933      	cbnz	r3, 80075f8 <_free_r+0x30>
 80075ea:	6063      	str	r3, [r4, #4]
 80075ec:	6014      	str	r4, [r2, #0]
 80075ee:	b003      	add	sp, #12
 80075f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075f4:	f7ff bd46 	b.w	8007084 <__malloc_unlock>
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	d908      	bls.n	800760e <_free_r+0x46>
 80075fc:	6825      	ldr	r5, [r4, #0]
 80075fe:	1961      	adds	r1, r4, r5
 8007600:	428b      	cmp	r3, r1
 8007602:	bf01      	itttt	eq
 8007604:	6819      	ldreq	r1, [r3, #0]
 8007606:	685b      	ldreq	r3, [r3, #4]
 8007608:	1949      	addeq	r1, r1, r5
 800760a:	6021      	streq	r1, [r4, #0]
 800760c:	e7ed      	b.n	80075ea <_free_r+0x22>
 800760e:	461a      	mov	r2, r3
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	b10b      	cbz	r3, 8007618 <_free_r+0x50>
 8007614:	42a3      	cmp	r3, r4
 8007616:	d9fa      	bls.n	800760e <_free_r+0x46>
 8007618:	6811      	ldr	r1, [r2, #0]
 800761a:	1855      	adds	r5, r2, r1
 800761c:	42a5      	cmp	r5, r4
 800761e:	d10b      	bne.n	8007638 <_free_r+0x70>
 8007620:	6824      	ldr	r4, [r4, #0]
 8007622:	4421      	add	r1, r4
 8007624:	1854      	adds	r4, r2, r1
 8007626:	42a3      	cmp	r3, r4
 8007628:	6011      	str	r1, [r2, #0]
 800762a:	d1e0      	bne.n	80075ee <_free_r+0x26>
 800762c:	681c      	ldr	r4, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	6053      	str	r3, [r2, #4]
 8007632:	440c      	add	r4, r1
 8007634:	6014      	str	r4, [r2, #0]
 8007636:	e7da      	b.n	80075ee <_free_r+0x26>
 8007638:	d902      	bls.n	8007640 <_free_r+0x78>
 800763a:	230c      	movs	r3, #12
 800763c:	6003      	str	r3, [r0, #0]
 800763e:	e7d6      	b.n	80075ee <_free_r+0x26>
 8007640:	6825      	ldr	r5, [r4, #0]
 8007642:	1961      	adds	r1, r4, r5
 8007644:	428b      	cmp	r3, r1
 8007646:	bf04      	itt	eq
 8007648:	6819      	ldreq	r1, [r3, #0]
 800764a:	685b      	ldreq	r3, [r3, #4]
 800764c:	6063      	str	r3, [r4, #4]
 800764e:	bf04      	itt	eq
 8007650:	1949      	addeq	r1, r1, r5
 8007652:	6021      	streq	r1, [r4, #0]
 8007654:	6054      	str	r4, [r2, #4]
 8007656:	e7ca      	b.n	80075ee <_free_r+0x26>
 8007658:	b003      	add	sp, #12
 800765a:	bd30      	pop	{r4, r5, pc}
 800765c:	200002dc 	.word	0x200002dc

08007660 <__sfputc_r>:
 8007660:	6893      	ldr	r3, [r2, #8]
 8007662:	3b01      	subs	r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	b410      	push	{r4}
 8007668:	6093      	str	r3, [r2, #8]
 800766a:	da08      	bge.n	800767e <__sfputc_r+0x1e>
 800766c:	6994      	ldr	r4, [r2, #24]
 800766e:	42a3      	cmp	r3, r4
 8007670:	db01      	blt.n	8007676 <__sfputc_r+0x16>
 8007672:	290a      	cmp	r1, #10
 8007674:	d103      	bne.n	800767e <__sfputc_r+0x1e>
 8007676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800767a:	f7ff be84 	b.w	8007386 <__swbuf_r>
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	1c58      	adds	r0, r3, #1
 8007682:	6010      	str	r0, [r2, #0]
 8007684:	7019      	strb	r1, [r3, #0]
 8007686:	4608      	mov	r0, r1
 8007688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800768c:	4770      	bx	lr

0800768e <__sfputs_r>:
 800768e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007690:	4606      	mov	r6, r0
 8007692:	460f      	mov	r7, r1
 8007694:	4614      	mov	r4, r2
 8007696:	18d5      	adds	r5, r2, r3
 8007698:	42ac      	cmp	r4, r5
 800769a:	d101      	bne.n	80076a0 <__sfputs_r+0x12>
 800769c:	2000      	movs	r0, #0
 800769e:	e007      	b.n	80076b0 <__sfputs_r+0x22>
 80076a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a4:	463a      	mov	r2, r7
 80076a6:	4630      	mov	r0, r6
 80076a8:	f7ff ffda 	bl	8007660 <__sfputc_r>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d1f3      	bne.n	8007698 <__sfputs_r+0xa>
 80076b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076b4 <_vfiprintf_r>:
 80076b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b8:	460d      	mov	r5, r1
 80076ba:	b09d      	sub	sp, #116	; 0x74
 80076bc:	4614      	mov	r4, r2
 80076be:	4698      	mov	r8, r3
 80076c0:	4606      	mov	r6, r0
 80076c2:	b118      	cbz	r0, 80076cc <_vfiprintf_r+0x18>
 80076c4:	6a03      	ldr	r3, [r0, #32]
 80076c6:	b90b      	cbnz	r3, 80076cc <_vfiprintf_r+0x18>
 80076c8:	f7ff fd6e 	bl	80071a8 <__sinit>
 80076cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ce:	07d9      	lsls	r1, r3, #31
 80076d0:	d405      	bmi.n	80076de <_vfiprintf_r+0x2a>
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	059a      	lsls	r2, r3, #22
 80076d6:	d402      	bmi.n	80076de <_vfiprintf_r+0x2a>
 80076d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076da:	f7ff ff72 	bl	80075c2 <__retarget_lock_acquire_recursive>
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	071b      	lsls	r3, r3, #28
 80076e2:	d501      	bpl.n	80076e8 <_vfiprintf_r+0x34>
 80076e4:	692b      	ldr	r3, [r5, #16]
 80076e6:	b99b      	cbnz	r3, 8007710 <_vfiprintf_r+0x5c>
 80076e8:	4629      	mov	r1, r5
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7ff fe88 	bl	8007400 <__swsetup_r>
 80076f0:	b170      	cbz	r0, 8007710 <_vfiprintf_r+0x5c>
 80076f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076f4:	07dc      	lsls	r4, r3, #31
 80076f6:	d504      	bpl.n	8007702 <_vfiprintf_r+0x4e>
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	b01d      	add	sp, #116	; 0x74
 80076fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007702:	89ab      	ldrh	r3, [r5, #12]
 8007704:	0598      	lsls	r0, r3, #22
 8007706:	d4f7      	bmi.n	80076f8 <_vfiprintf_r+0x44>
 8007708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800770a:	f7ff ff5b 	bl	80075c4 <__retarget_lock_release_recursive>
 800770e:	e7f3      	b.n	80076f8 <_vfiprintf_r+0x44>
 8007710:	2300      	movs	r3, #0
 8007712:	9309      	str	r3, [sp, #36]	; 0x24
 8007714:	2320      	movs	r3, #32
 8007716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800771a:	f8cd 800c 	str.w	r8, [sp, #12]
 800771e:	2330      	movs	r3, #48	; 0x30
 8007720:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80078d4 <_vfiprintf_r+0x220>
 8007724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007728:	f04f 0901 	mov.w	r9, #1
 800772c:	4623      	mov	r3, r4
 800772e:	469a      	mov	sl, r3
 8007730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007734:	b10a      	cbz	r2, 800773a <_vfiprintf_r+0x86>
 8007736:	2a25      	cmp	r2, #37	; 0x25
 8007738:	d1f9      	bne.n	800772e <_vfiprintf_r+0x7a>
 800773a:	ebba 0b04 	subs.w	fp, sl, r4
 800773e:	d00b      	beq.n	8007758 <_vfiprintf_r+0xa4>
 8007740:	465b      	mov	r3, fp
 8007742:	4622      	mov	r2, r4
 8007744:	4629      	mov	r1, r5
 8007746:	4630      	mov	r0, r6
 8007748:	f7ff ffa1 	bl	800768e <__sfputs_r>
 800774c:	3001      	adds	r0, #1
 800774e:	f000 80a9 	beq.w	80078a4 <_vfiprintf_r+0x1f0>
 8007752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007754:	445a      	add	r2, fp
 8007756:	9209      	str	r2, [sp, #36]	; 0x24
 8007758:	f89a 3000 	ldrb.w	r3, [sl]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 80a1 	beq.w	80078a4 <_vfiprintf_r+0x1f0>
 8007762:	2300      	movs	r3, #0
 8007764:	f04f 32ff 	mov.w	r2, #4294967295
 8007768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800776c:	f10a 0a01 	add.w	sl, sl, #1
 8007770:	9304      	str	r3, [sp, #16]
 8007772:	9307      	str	r3, [sp, #28]
 8007774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007778:	931a      	str	r3, [sp, #104]	; 0x68
 800777a:	4654      	mov	r4, sl
 800777c:	2205      	movs	r2, #5
 800777e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007782:	4854      	ldr	r0, [pc, #336]	; (80078d4 <_vfiprintf_r+0x220>)
 8007784:	f7f8 fd24 	bl	80001d0 <memchr>
 8007788:	9a04      	ldr	r2, [sp, #16]
 800778a:	b9d8      	cbnz	r0, 80077c4 <_vfiprintf_r+0x110>
 800778c:	06d1      	lsls	r1, r2, #27
 800778e:	bf44      	itt	mi
 8007790:	2320      	movmi	r3, #32
 8007792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007796:	0713      	lsls	r3, r2, #28
 8007798:	bf44      	itt	mi
 800779a:	232b      	movmi	r3, #43	; 0x2b
 800779c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a0:	f89a 3000 	ldrb.w	r3, [sl]
 80077a4:	2b2a      	cmp	r3, #42	; 0x2a
 80077a6:	d015      	beq.n	80077d4 <_vfiprintf_r+0x120>
 80077a8:	9a07      	ldr	r2, [sp, #28]
 80077aa:	4654      	mov	r4, sl
 80077ac:	2000      	movs	r0, #0
 80077ae:	f04f 0c0a 	mov.w	ip, #10
 80077b2:	4621      	mov	r1, r4
 80077b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077b8:	3b30      	subs	r3, #48	; 0x30
 80077ba:	2b09      	cmp	r3, #9
 80077bc:	d94d      	bls.n	800785a <_vfiprintf_r+0x1a6>
 80077be:	b1b0      	cbz	r0, 80077ee <_vfiprintf_r+0x13a>
 80077c0:	9207      	str	r2, [sp, #28]
 80077c2:	e014      	b.n	80077ee <_vfiprintf_r+0x13a>
 80077c4:	eba0 0308 	sub.w	r3, r0, r8
 80077c8:	fa09 f303 	lsl.w	r3, r9, r3
 80077cc:	4313      	orrs	r3, r2
 80077ce:	9304      	str	r3, [sp, #16]
 80077d0:	46a2      	mov	sl, r4
 80077d2:	e7d2      	b.n	800777a <_vfiprintf_r+0xc6>
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	1d19      	adds	r1, r3, #4
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	9103      	str	r1, [sp, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bfbb      	ittet	lt
 80077e0:	425b      	neglt	r3, r3
 80077e2:	f042 0202 	orrlt.w	r2, r2, #2
 80077e6:	9307      	strge	r3, [sp, #28]
 80077e8:	9307      	strlt	r3, [sp, #28]
 80077ea:	bfb8      	it	lt
 80077ec:	9204      	strlt	r2, [sp, #16]
 80077ee:	7823      	ldrb	r3, [r4, #0]
 80077f0:	2b2e      	cmp	r3, #46	; 0x2e
 80077f2:	d10c      	bne.n	800780e <_vfiprintf_r+0x15a>
 80077f4:	7863      	ldrb	r3, [r4, #1]
 80077f6:	2b2a      	cmp	r3, #42	; 0x2a
 80077f8:	d134      	bne.n	8007864 <_vfiprintf_r+0x1b0>
 80077fa:	9b03      	ldr	r3, [sp, #12]
 80077fc:	1d1a      	adds	r2, r3, #4
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	9203      	str	r2, [sp, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	bfb8      	it	lt
 8007806:	f04f 33ff 	movlt.w	r3, #4294967295
 800780a:	3402      	adds	r4, #2
 800780c:	9305      	str	r3, [sp, #20]
 800780e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80078e4 <_vfiprintf_r+0x230>
 8007812:	7821      	ldrb	r1, [r4, #0]
 8007814:	2203      	movs	r2, #3
 8007816:	4650      	mov	r0, sl
 8007818:	f7f8 fcda 	bl	80001d0 <memchr>
 800781c:	b138      	cbz	r0, 800782e <_vfiprintf_r+0x17a>
 800781e:	9b04      	ldr	r3, [sp, #16]
 8007820:	eba0 000a 	sub.w	r0, r0, sl
 8007824:	2240      	movs	r2, #64	; 0x40
 8007826:	4082      	lsls	r2, r0
 8007828:	4313      	orrs	r3, r2
 800782a:	3401      	adds	r4, #1
 800782c:	9304      	str	r3, [sp, #16]
 800782e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007832:	4829      	ldr	r0, [pc, #164]	; (80078d8 <_vfiprintf_r+0x224>)
 8007834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007838:	2206      	movs	r2, #6
 800783a:	f7f8 fcc9 	bl	80001d0 <memchr>
 800783e:	2800      	cmp	r0, #0
 8007840:	d03f      	beq.n	80078c2 <_vfiprintf_r+0x20e>
 8007842:	4b26      	ldr	r3, [pc, #152]	; (80078dc <_vfiprintf_r+0x228>)
 8007844:	bb1b      	cbnz	r3, 800788e <_vfiprintf_r+0x1da>
 8007846:	9b03      	ldr	r3, [sp, #12]
 8007848:	3307      	adds	r3, #7
 800784a:	f023 0307 	bic.w	r3, r3, #7
 800784e:	3308      	adds	r3, #8
 8007850:	9303      	str	r3, [sp, #12]
 8007852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007854:	443b      	add	r3, r7
 8007856:	9309      	str	r3, [sp, #36]	; 0x24
 8007858:	e768      	b.n	800772c <_vfiprintf_r+0x78>
 800785a:	fb0c 3202 	mla	r2, ip, r2, r3
 800785e:	460c      	mov	r4, r1
 8007860:	2001      	movs	r0, #1
 8007862:	e7a6      	b.n	80077b2 <_vfiprintf_r+0xfe>
 8007864:	2300      	movs	r3, #0
 8007866:	3401      	adds	r4, #1
 8007868:	9305      	str	r3, [sp, #20]
 800786a:	4619      	mov	r1, r3
 800786c:	f04f 0c0a 	mov.w	ip, #10
 8007870:	4620      	mov	r0, r4
 8007872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007876:	3a30      	subs	r2, #48	; 0x30
 8007878:	2a09      	cmp	r2, #9
 800787a:	d903      	bls.n	8007884 <_vfiprintf_r+0x1d0>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0c6      	beq.n	800780e <_vfiprintf_r+0x15a>
 8007880:	9105      	str	r1, [sp, #20]
 8007882:	e7c4      	b.n	800780e <_vfiprintf_r+0x15a>
 8007884:	fb0c 2101 	mla	r1, ip, r1, r2
 8007888:	4604      	mov	r4, r0
 800788a:	2301      	movs	r3, #1
 800788c:	e7f0      	b.n	8007870 <_vfiprintf_r+0x1bc>
 800788e:	ab03      	add	r3, sp, #12
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	462a      	mov	r2, r5
 8007894:	4b12      	ldr	r3, [pc, #72]	; (80078e0 <_vfiprintf_r+0x22c>)
 8007896:	a904      	add	r1, sp, #16
 8007898:	4630      	mov	r0, r6
 800789a:	f3af 8000 	nop.w
 800789e:	4607      	mov	r7, r0
 80078a0:	1c78      	adds	r0, r7, #1
 80078a2:	d1d6      	bne.n	8007852 <_vfiprintf_r+0x19e>
 80078a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078a6:	07d9      	lsls	r1, r3, #31
 80078a8:	d405      	bmi.n	80078b6 <_vfiprintf_r+0x202>
 80078aa:	89ab      	ldrh	r3, [r5, #12]
 80078ac:	059a      	lsls	r2, r3, #22
 80078ae:	d402      	bmi.n	80078b6 <_vfiprintf_r+0x202>
 80078b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078b2:	f7ff fe87 	bl	80075c4 <__retarget_lock_release_recursive>
 80078b6:	89ab      	ldrh	r3, [r5, #12]
 80078b8:	065b      	lsls	r3, r3, #25
 80078ba:	f53f af1d 	bmi.w	80076f8 <_vfiprintf_r+0x44>
 80078be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078c0:	e71c      	b.n	80076fc <_vfiprintf_r+0x48>
 80078c2:	ab03      	add	r3, sp, #12
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	462a      	mov	r2, r5
 80078c8:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <_vfiprintf_r+0x22c>)
 80078ca:	a904      	add	r1, sp, #16
 80078cc:	4630      	mov	r0, r6
 80078ce:	f000 f879 	bl	80079c4 <_printf_i>
 80078d2:	e7e4      	b.n	800789e <_vfiprintf_r+0x1ea>
 80078d4:	080086c4 	.word	0x080086c4
 80078d8:	080086ce 	.word	0x080086ce
 80078dc:	00000000 	.word	0x00000000
 80078e0:	0800768f 	.word	0x0800768f
 80078e4:	080086ca 	.word	0x080086ca

080078e8 <_printf_common>:
 80078e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ec:	4616      	mov	r6, r2
 80078ee:	4699      	mov	r9, r3
 80078f0:	688a      	ldr	r2, [r1, #8]
 80078f2:	690b      	ldr	r3, [r1, #16]
 80078f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078f8:	4293      	cmp	r3, r2
 80078fa:	bfb8      	it	lt
 80078fc:	4613      	movlt	r3, r2
 80078fe:	6033      	str	r3, [r6, #0]
 8007900:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007904:	4607      	mov	r7, r0
 8007906:	460c      	mov	r4, r1
 8007908:	b10a      	cbz	r2, 800790e <_printf_common+0x26>
 800790a:	3301      	adds	r3, #1
 800790c:	6033      	str	r3, [r6, #0]
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	0699      	lsls	r1, r3, #26
 8007912:	bf42      	ittt	mi
 8007914:	6833      	ldrmi	r3, [r6, #0]
 8007916:	3302      	addmi	r3, #2
 8007918:	6033      	strmi	r3, [r6, #0]
 800791a:	6825      	ldr	r5, [r4, #0]
 800791c:	f015 0506 	ands.w	r5, r5, #6
 8007920:	d106      	bne.n	8007930 <_printf_common+0x48>
 8007922:	f104 0a19 	add.w	sl, r4, #25
 8007926:	68e3      	ldr	r3, [r4, #12]
 8007928:	6832      	ldr	r2, [r6, #0]
 800792a:	1a9b      	subs	r3, r3, r2
 800792c:	42ab      	cmp	r3, r5
 800792e:	dc26      	bgt.n	800797e <_printf_common+0x96>
 8007930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007934:	1e13      	subs	r3, r2, #0
 8007936:	6822      	ldr	r2, [r4, #0]
 8007938:	bf18      	it	ne
 800793a:	2301      	movne	r3, #1
 800793c:	0692      	lsls	r2, r2, #26
 800793e:	d42b      	bmi.n	8007998 <_printf_common+0xb0>
 8007940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007944:	4649      	mov	r1, r9
 8007946:	4638      	mov	r0, r7
 8007948:	47c0      	blx	r8
 800794a:	3001      	adds	r0, #1
 800794c:	d01e      	beq.n	800798c <_printf_common+0xa4>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	6922      	ldr	r2, [r4, #16]
 8007952:	f003 0306 	and.w	r3, r3, #6
 8007956:	2b04      	cmp	r3, #4
 8007958:	bf02      	ittt	eq
 800795a:	68e5      	ldreq	r5, [r4, #12]
 800795c:	6833      	ldreq	r3, [r6, #0]
 800795e:	1aed      	subeq	r5, r5, r3
 8007960:	68a3      	ldr	r3, [r4, #8]
 8007962:	bf0c      	ite	eq
 8007964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007968:	2500      	movne	r5, #0
 800796a:	4293      	cmp	r3, r2
 800796c:	bfc4      	itt	gt
 800796e:	1a9b      	subgt	r3, r3, r2
 8007970:	18ed      	addgt	r5, r5, r3
 8007972:	2600      	movs	r6, #0
 8007974:	341a      	adds	r4, #26
 8007976:	42b5      	cmp	r5, r6
 8007978:	d11a      	bne.n	80079b0 <_printf_common+0xc8>
 800797a:	2000      	movs	r0, #0
 800797c:	e008      	b.n	8007990 <_printf_common+0xa8>
 800797e:	2301      	movs	r3, #1
 8007980:	4652      	mov	r2, sl
 8007982:	4649      	mov	r1, r9
 8007984:	4638      	mov	r0, r7
 8007986:	47c0      	blx	r8
 8007988:	3001      	adds	r0, #1
 800798a:	d103      	bne.n	8007994 <_printf_common+0xac>
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007994:	3501      	adds	r5, #1
 8007996:	e7c6      	b.n	8007926 <_printf_common+0x3e>
 8007998:	18e1      	adds	r1, r4, r3
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	2030      	movs	r0, #48	; 0x30
 800799e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079a2:	4422      	add	r2, r4
 80079a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079ac:	3302      	adds	r3, #2
 80079ae:	e7c7      	b.n	8007940 <_printf_common+0x58>
 80079b0:	2301      	movs	r3, #1
 80079b2:	4622      	mov	r2, r4
 80079b4:	4649      	mov	r1, r9
 80079b6:	4638      	mov	r0, r7
 80079b8:	47c0      	blx	r8
 80079ba:	3001      	adds	r0, #1
 80079bc:	d0e6      	beq.n	800798c <_printf_common+0xa4>
 80079be:	3601      	adds	r6, #1
 80079c0:	e7d9      	b.n	8007976 <_printf_common+0x8e>
	...

080079c4 <_printf_i>:
 80079c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079c8:	7e0f      	ldrb	r7, [r1, #24]
 80079ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079cc:	2f78      	cmp	r7, #120	; 0x78
 80079ce:	4691      	mov	r9, r2
 80079d0:	4680      	mov	r8, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	469a      	mov	sl, r3
 80079d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079da:	d807      	bhi.n	80079ec <_printf_i+0x28>
 80079dc:	2f62      	cmp	r7, #98	; 0x62
 80079de:	d80a      	bhi.n	80079f6 <_printf_i+0x32>
 80079e0:	2f00      	cmp	r7, #0
 80079e2:	f000 80d4 	beq.w	8007b8e <_printf_i+0x1ca>
 80079e6:	2f58      	cmp	r7, #88	; 0x58
 80079e8:	f000 80c0 	beq.w	8007b6c <_printf_i+0x1a8>
 80079ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079f4:	e03a      	b.n	8007a6c <_printf_i+0xa8>
 80079f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079fa:	2b15      	cmp	r3, #21
 80079fc:	d8f6      	bhi.n	80079ec <_printf_i+0x28>
 80079fe:	a101      	add	r1, pc, #4	; (adr r1, 8007a04 <_printf_i+0x40>)
 8007a00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a04:	08007a5d 	.word	0x08007a5d
 8007a08:	08007a71 	.word	0x08007a71
 8007a0c:	080079ed 	.word	0x080079ed
 8007a10:	080079ed 	.word	0x080079ed
 8007a14:	080079ed 	.word	0x080079ed
 8007a18:	080079ed 	.word	0x080079ed
 8007a1c:	08007a71 	.word	0x08007a71
 8007a20:	080079ed 	.word	0x080079ed
 8007a24:	080079ed 	.word	0x080079ed
 8007a28:	080079ed 	.word	0x080079ed
 8007a2c:	080079ed 	.word	0x080079ed
 8007a30:	08007b75 	.word	0x08007b75
 8007a34:	08007a9d 	.word	0x08007a9d
 8007a38:	08007b2f 	.word	0x08007b2f
 8007a3c:	080079ed 	.word	0x080079ed
 8007a40:	080079ed 	.word	0x080079ed
 8007a44:	08007b97 	.word	0x08007b97
 8007a48:	080079ed 	.word	0x080079ed
 8007a4c:	08007a9d 	.word	0x08007a9d
 8007a50:	080079ed 	.word	0x080079ed
 8007a54:	080079ed 	.word	0x080079ed
 8007a58:	08007b37 	.word	0x08007b37
 8007a5c:	682b      	ldr	r3, [r5, #0]
 8007a5e:	1d1a      	adds	r2, r3, #4
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	602a      	str	r2, [r5, #0]
 8007a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e09f      	b.n	8007bb0 <_printf_i+0x1ec>
 8007a70:	6820      	ldr	r0, [r4, #0]
 8007a72:	682b      	ldr	r3, [r5, #0]
 8007a74:	0607      	lsls	r7, r0, #24
 8007a76:	f103 0104 	add.w	r1, r3, #4
 8007a7a:	6029      	str	r1, [r5, #0]
 8007a7c:	d501      	bpl.n	8007a82 <_printf_i+0xbe>
 8007a7e:	681e      	ldr	r6, [r3, #0]
 8007a80:	e003      	b.n	8007a8a <_printf_i+0xc6>
 8007a82:	0646      	lsls	r6, r0, #25
 8007a84:	d5fb      	bpl.n	8007a7e <_printf_i+0xba>
 8007a86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a8a:	2e00      	cmp	r6, #0
 8007a8c:	da03      	bge.n	8007a96 <_printf_i+0xd2>
 8007a8e:	232d      	movs	r3, #45	; 0x2d
 8007a90:	4276      	negs	r6, r6
 8007a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a96:	485a      	ldr	r0, [pc, #360]	; (8007c00 <_printf_i+0x23c>)
 8007a98:	230a      	movs	r3, #10
 8007a9a:	e012      	b.n	8007ac2 <_printf_i+0xfe>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	6820      	ldr	r0, [r4, #0]
 8007aa0:	1d19      	adds	r1, r3, #4
 8007aa2:	6029      	str	r1, [r5, #0]
 8007aa4:	0605      	lsls	r5, r0, #24
 8007aa6:	d501      	bpl.n	8007aac <_printf_i+0xe8>
 8007aa8:	681e      	ldr	r6, [r3, #0]
 8007aaa:	e002      	b.n	8007ab2 <_printf_i+0xee>
 8007aac:	0641      	lsls	r1, r0, #25
 8007aae:	d5fb      	bpl.n	8007aa8 <_printf_i+0xe4>
 8007ab0:	881e      	ldrh	r6, [r3, #0]
 8007ab2:	4853      	ldr	r0, [pc, #332]	; (8007c00 <_printf_i+0x23c>)
 8007ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ab6:	bf0c      	ite	eq
 8007ab8:	2308      	moveq	r3, #8
 8007aba:	230a      	movne	r3, #10
 8007abc:	2100      	movs	r1, #0
 8007abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ac2:	6865      	ldr	r5, [r4, #4]
 8007ac4:	60a5      	str	r5, [r4, #8]
 8007ac6:	2d00      	cmp	r5, #0
 8007ac8:	bfa2      	ittt	ge
 8007aca:	6821      	ldrge	r1, [r4, #0]
 8007acc:	f021 0104 	bicge.w	r1, r1, #4
 8007ad0:	6021      	strge	r1, [r4, #0]
 8007ad2:	b90e      	cbnz	r6, 8007ad8 <_printf_i+0x114>
 8007ad4:	2d00      	cmp	r5, #0
 8007ad6:	d04b      	beq.n	8007b70 <_printf_i+0x1ac>
 8007ad8:	4615      	mov	r5, r2
 8007ada:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ade:	fb03 6711 	mls	r7, r3, r1, r6
 8007ae2:	5dc7      	ldrb	r7, [r0, r7]
 8007ae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ae8:	4637      	mov	r7, r6
 8007aea:	42bb      	cmp	r3, r7
 8007aec:	460e      	mov	r6, r1
 8007aee:	d9f4      	bls.n	8007ada <_printf_i+0x116>
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d10b      	bne.n	8007b0c <_printf_i+0x148>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	07de      	lsls	r6, r3, #31
 8007af8:	d508      	bpl.n	8007b0c <_printf_i+0x148>
 8007afa:	6923      	ldr	r3, [r4, #16]
 8007afc:	6861      	ldr	r1, [r4, #4]
 8007afe:	4299      	cmp	r1, r3
 8007b00:	bfde      	ittt	le
 8007b02:	2330      	movle	r3, #48	; 0x30
 8007b04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b0c:	1b52      	subs	r2, r2, r5
 8007b0e:	6122      	str	r2, [r4, #16]
 8007b10:	f8cd a000 	str.w	sl, [sp]
 8007b14:	464b      	mov	r3, r9
 8007b16:	aa03      	add	r2, sp, #12
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	f7ff fee4 	bl	80078e8 <_printf_common>
 8007b20:	3001      	adds	r0, #1
 8007b22:	d14a      	bne.n	8007bba <_printf_i+0x1f6>
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295
 8007b28:	b004      	add	sp, #16
 8007b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	f043 0320 	orr.w	r3, r3, #32
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	4833      	ldr	r0, [pc, #204]	; (8007c04 <_printf_i+0x240>)
 8007b38:	2778      	movs	r7, #120	; 0x78
 8007b3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	6829      	ldr	r1, [r5, #0]
 8007b42:	061f      	lsls	r7, r3, #24
 8007b44:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b48:	d402      	bmi.n	8007b50 <_printf_i+0x18c>
 8007b4a:	065f      	lsls	r7, r3, #25
 8007b4c:	bf48      	it	mi
 8007b4e:	b2b6      	uxthmi	r6, r6
 8007b50:	07df      	lsls	r7, r3, #31
 8007b52:	bf48      	it	mi
 8007b54:	f043 0320 	orrmi.w	r3, r3, #32
 8007b58:	6029      	str	r1, [r5, #0]
 8007b5a:	bf48      	it	mi
 8007b5c:	6023      	strmi	r3, [r4, #0]
 8007b5e:	b91e      	cbnz	r6, 8007b68 <_printf_i+0x1a4>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	f023 0320 	bic.w	r3, r3, #32
 8007b66:	6023      	str	r3, [r4, #0]
 8007b68:	2310      	movs	r3, #16
 8007b6a:	e7a7      	b.n	8007abc <_printf_i+0xf8>
 8007b6c:	4824      	ldr	r0, [pc, #144]	; (8007c00 <_printf_i+0x23c>)
 8007b6e:	e7e4      	b.n	8007b3a <_printf_i+0x176>
 8007b70:	4615      	mov	r5, r2
 8007b72:	e7bd      	b.n	8007af0 <_printf_i+0x12c>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	6826      	ldr	r6, [r4, #0]
 8007b78:	6961      	ldr	r1, [r4, #20]
 8007b7a:	1d18      	adds	r0, r3, #4
 8007b7c:	6028      	str	r0, [r5, #0]
 8007b7e:	0635      	lsls	r5, r6, #24
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	d501      	bpl.n	8007b88 <_printf_i+0x1c4>
 8007b84:	6019      	str	r1, [r3, #0]
 8007b86:	e002      	b.n	8007b8e <_printf_i+0x1ca>
 8007b88:	0670      	lsls	r0, r6, #25
 8007b8a:	d5fb      	bpl.n	8007b84 <_printf_i+0x1c0>
 8007b8c:	8019      	strh	r1, [r3, #0]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	6123      	str	r3, [r4, #16]
 8007b92:	4615      	mov	r5, r2
 8007b94:	e7bc      	b.n	8007b10 <_printf_i+0x14c>
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	1d1a      	adds	r2, r3, #4
 8007b9a:	602a      	str	r2, [r5, #0]
 8007b9c:	681d      	ldr	r5, [r3, #0]
 8007b9e:	6862      	ldr	r2, [r4, #4]
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f7f8 fb14 	bl	80001d0 <memchr>
 8007ba8:	b108      	cbz	r0, 8007bae <_printf_i+0x1ea>
 8007baa:	1b40      	subs	r0, r0, r5
 8007bac:	6060      	str	r0, [r4, #4]
 8007bae:	6863      	ldr	r3, [r4, #4]
 8007bb0:	6123      	str	r3, [r4, #16]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb8:	e7aa      	b.n	8007b10 <_printf_i+0x14c>
 8007bba:	6923      	ldr	r3, [r4, #16]
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	47d0      	blx	sl
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d0ad      	beq.n	8007b24 <_printf_i+0x160>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	079b      	lsls	r3, r3, #30
 8007bcc:	d413      	bmi.n	8007bf6 <_printf_i+0x232>
 8007bce:	68e0      	ldr	r0, [r4, #12]
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	4298      	cmp	r0, r3
 8007bd4:	bfb8      	it	lt
 8007bd6:	4618      	movlt	r0, r3
 8007bd8:	e7a6      	b.n	8007b28 <_printf_i+0x164>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	4632      	mov	r2, r6
 8007bde:	4649      	mov	r1, r9
 8007be0:	4640      	mov	r0, r8
 8007be2:	47d0      	blx	sl
 8007be4:	3001      	adds	r0, #1
 8007be6:	d09d      	beq.n	8007b24 <_printf_i+0x160>
 8007be8:	3501      	adds	r5, #1
 8007bea:	68e3      	ldr	r3, [r4, #12]
 8007bec:	9903      	ldr	r1, [sp, #12]
 8007bee:	1a5b      	subs	r3, r3, r1
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	dcf2      	bgt.n	8007bda <_printf_i+0x216>
 8007bf4:	e7eb      	b.n	8007bce <_printf_i+0x20a>
 8007bf6:	2500      	movs	r5, #0
 8007bf8:	f104 0619 	add.w	r6, r4, #25
 8007bfc:	e7f5      	b.n	8007bea <_printf_i+0x226>
 8007bfe:	bf00      	nop
 8007c00:	080086d5 	.word	0x080086d5
 8007c04:	080086e6 	.word	0x080086e6

08007c08 <__sflush_r>:
 8007c08:	898a      	ldrh	r2, [r1, #12]
 8007c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0e:	4605      	mov	r5, r0
 8007c10:	0710      	lsls	r0, r2, #28
 8007c12:	460c      	mov	r4, r1
 8007c14:	d458      	bmi.n	8007cc8 <__sflush_r+0xc0>
 8007c16:	684b      	ldr	r3, [r1, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dc05      	bgt.n	8007c28 <__sflush_r+0x20>
 8007c1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	dc02      	bgt.n	8007c28 <__sflush_r+0x20>
 8007c22:	2000      	movs	r0, #0
 8007c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	d0f9      	beq.n	8007c22 <__sflush_r+0x1a>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c34:	682f      	ldr	r7, [r5, #0]
 8007c36:	6a21      	ldr	r1, [r4, #32]
 8007c38:	602b      	str	r3, [r5, #0]
 8007c3a:	d032      	beq.n	8007ca2 <__sflush_r+0x9a>
 8007c3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	075a      	lsls	r2, r3, #29
 8007c42:	d505      	bpl.n	8007c50 <__sflush_r+0x48>
 8007c44:	6863      	ldr	r3, [r4, #4]
 8007c46:	1ac0      	subs	r0, r0, r3
 8007c48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c4a:	b10b      	cbz	r3, 8007c50 <__sflush_r+0x48>
 8007c4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c4e:	1ac0      	subs	r0, r0, r3
 8007c50:	2300      	movs	r3, #0
 8007c52:	4602      	mov	r2, r0
 8007c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c56:	6a21      	ldr	r1, [r4, #32]
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b0      	blx	r6
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	d106      	bne.n	8007c70 <__sflush_r+0x68>
 8007c62:	6829      	ldr	r1, [r5, #0]
 8007c64:	291d      	cmp	r1, #29
 8007c66:	d82b      	bhi.n	8007cc0 <__sflush_r+0xb8>
 8007c68:	4a29      	ldr	r2, [pc, #164]	; (8007d10 <__sflush_r+0x108>)
 8007c6a:	410a      	asrs	r2, r1
 8007c6c:	07d6      	lsls	r6, r2, #31
 8007c6e:	d427      	bmi.n	8007cc0 <__sflush_r+0xb8>
 8007c70:	2200      	movs	r2, #0
 8007c72:	6062      	str	r2, [r4, #4]
 8007c74:	04d9      	lsls	r1, r3, #19
 8007c76:	6922      	ldr	r2, [r4, #16]
 8007c78:	6022      	str	r2, [r4, #0]
 8007c7a:	d504      	bpl.n	8007c86 <__sflush_r+0x7e>
 8007c7c:	1c42      	adds	r2, r0, #1
 8007c7e:	d101      	bne.n	8007c84 <__sflush_r+0x7c>
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	b903      	cbnz	r3, 8007c86 <__sflush_r+0x7e>
 8007c84:	6560      	str	r0, [r4, #84]	; 0x54
 8007c86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c88:	602f      	str	r7, [r5, #0]
 8007c8a:	2900      	cmp	r1, #0
 8007c8c:	d0c9      	beq.n	8007c22 <__sflush_r+0x1a>
 8007c8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c92:	4299      	cmp	r1, r3
 8007c94:	d002      	beq.n	8007c9c <__sflush_r+0x94>
 8007c96:	4628      	mov	r0, r5
 8007c98:	f7ff fc96 	bl	80075c8 <_free_r>
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	6360      	str	r0, [r4, #52]	; 0x34
 8007ca0:	e7c0      	b.n	8007c24 <__sflush_r+0x1c>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b0      	blx	r6
 8007ca8:	1c41      	adds	r1, r0, #1
 8007caa:	d1c8      	bne.n	8007c3e <__sflush_r+0x36>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0c5      	beq.n	8007c3e <__sflush_r+0x36>
 8007cb2:	2b1d      	cmp	r3, #29
 8007cb4:	d001      	beq.n	8007cba <__sflush_r+0xb2>
 8007cb6:	2b16      	cmp	r3, #22
 8007cb8:	d101      	bne.n	8007cbe <__sflush_r+0xb6>
 8007cba:	602f      	str	r7, [r5, #0]
 8007cbc:	e7b1      	b.n	8007c22 <__sflush_r+0x1a>
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	e7ad      	b.n	8007c24 <__sflush_r+0x1c>
 8007cc8:	690f      	ldr	r7, [r1, #16]
 8007cca:	2f00      	cmp	r7, #0
 8007ccc:	d0a9      	beq.n	8007c22 <__sflush_r+0x1a>
 8007cce:	0793      	lsls	r3, r2, #30
 8007cd0:	680e      	ldr	r6, [r1, #0]
 8007cd2:	bf08      	it	eq
 8007cd4:	694b      	ldreq	r3, [r1, #20]
 8007cd6:	600f      	str	r7, [r1, #0]
 8007cd8:	bf18      	it	ne
 8007cda:	2300      	movne	r3, #0
 8007cdc:	eba6 0807 	sub.w	r8, r6, r7
 8007ce0:	608b      	str	r3, [r1, #8]
 8007ce2:	f1b8 0f00 	cmp.w	r8, #0
 8007ce6:	dd9c      	ble.n	8007c22 <__sflush_r+0x1a>
 8007ce8:	6a21      	ldr	r1, [r4, #32]
 8007cea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cec:	4643      	mov	r3, r8
 8007cee:	463a      	mov	r2, r7
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b0      	blx	r6
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	dc06      	bgt.n	8007d06 <__sflush_r+0xfe>
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cfe:	81a3      	strh	r3, [r4, #12]
 8007d00:	f04f 30ff 	mov.w	r0, #4294967295
 8007d04:	e78e      	b.n	8007c24 <__sflush_r+0x1c>
 8007d06:	4407      	add	r7, r0
 8007d08:	eba8 0800 	sub.w	r8, r8, r0
 8007d0c:	e7e9      	b.n	8007ce2 <__sflush_r+0xda>
 8007d0e:	bf00      	nop
 8007d10:	dfbffffe 	.word	0xdfbffffe

08007d14 <_fflush_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	690b      	ldr	r3, [r1, #16]
 8007d18:	4605      	mov	r5, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	b913      	cbnz	r3, 8007d24 <_fflush_r+0x10>
 8007d1e:	2500      	movs	r5, #0
 8007d20:	4628      	mov	r0, r5
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	b118      	cbz	r0, 8007d2e <_fflush_r+0x1a>
 8007d26:	6a03      	ldr	r3, [r0, #32]
 8007d28:	b90b      	cbnz	r3, 8007d2e <_fflush_r+0x1a>
 8007d2a:	f7ff fa3d 	bl	80071a8 <__sinit>
 8007d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0f3      	beq.n	8007d1e <_fflush_r+0xa>
 8007d36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d38:	07d0      	lsls	r0, r2, #31
 8007d3a:	d404      	bmi.n	8007d46 <_fflush_r+0x32>
 8007d3c:	0599      	lsls	r1, r3, #22
 8007d3e:	d402      	bmi.n	8007d46 <_fflush_r+0x32>
 8007d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d42:	f7ff fc3e 	bl	80075c2 <__retarget_lock_acquire_recursive>
 8007d46:	4628      	mov	r0, r5
 8007d48:	4621      	mov	r1, r4
 8007d4a:	f7ff ff5d 	bl	8007c08 <__sflush_r>
 8007d4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d50:	07da      	lsls	r2, r3, #31
 8007d52:	4605      	mov	r5, r0
 8007d54:	d4e4      	bmi.n	8007d20 <_fflush_r+0xc>
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	059b      	lsls	r3, r3, #22
 8007d5a:	d4e1      	bmi.n	8007d20 <_fflush_r+0xc>
 8007d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d5e:	f7ff fc31 	bl	80075c4 <__retarget_lock_release_recursive>
 8007d62:	e7dd      	b.n	8007d20 <_fflush_r+0xc>

08007d64 <__swhatbuf_r>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	460c      	mov	r4, r1
 8007d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	b096      	sub	sp, #88	; 0x58
 8007d70:	4615      	mov	r5, r2
 8007d72:	461e      	mov	r6, r3
 8007d74:	da0d      	bge.n	8007d92 <__swhatbuf_r+0x2e>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d7c:	f04f 0100 	mov.w	r1, #0
 8007d80:	bf0c      	ite	eq
 8007d82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007d86:	2340      	movne	r3, #64	; 0x40
 8007d88:	2000      	movs	r0, #0
 8007d8a:	6031      	str	r1, [r6, #0]
 8007d8c:	602b      	str	r3, [r5, #0]
 8007d8e:	b016      	add	sp, #88	; 0x58
 8007d90:	bd70      	pop	{r4, r5, r6, pc}
 8007d92:	466a      	mov	r2, sp
 8007d94:	f000 f87c 	bl	8007e90 <_fstat_r>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	dbec      	blt.n	8007d76 <__swhatbuf_r+0x12>
 8007d9c:	9901      	ldr	r1, [sp, #4]
 8007d9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007da2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007da6:	4259      	negs	r1, r3
 8007da8:	4159      	adcs	r1, r3
 8007daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dae:	e7eb      	b.n	8007d88 <__swhatbuf_r+0x24>

08007db0 <__smakebuf_r>:
 8007db0:	898b      	ldrh	r3, [r1, #12]
 8007db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007db4:	079d      	lsls	r5, r3, #30
 8007db6:	4606      	mov	r6, r0
 8007db8:	460c      	mov	r4, r1
 8007dba:	d507      	bpl.n	8007dcc <__smakebuf_r+0x1c>
 8007dbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	6123      	str	r3, [r4, #16]
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	6163      	str	r3, [r4, #20]
 8007dc8:	b002      	add	sp, #8
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	ab01      	add	r3, sp, #4
 8007dce:	466a      	mov	r2, sp
 8007dd0:	f7ff ffc8 	bl	8007d64 <__swhatbuf_r>
 8007dd4:	9900      	ldr	r1, [sp, #0]
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f7ff f8cd 	bl	8006f78 <_malloc_r>
 8007dde:	b948      	cbnz	r0, 8007df4 <__smakebuf_r+0x44>
 8007de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007de4:	059a      	lsls	r2, r3, #22
 8007de6:	d4ef      	bmi.n	8007dc8 <__smakebuf_r+0x18>
 8007de8:	f023 0303 	bic.w	r3, r3, #3
 8007dec:	f043 0302 	orr.w	r3, r3, #2
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	e7e3      	b.n	8007dbc <__smakebuf_r+0xc>
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	6020      	str	r0, [r4, #0]
 8007df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfc:	81a3      	strh	r3, [r4, #12]
 8007dfe:	9b00      	ldr	r3, [sp, #0]
 8007e00:	6163      	str	r3, [r4, #20]
 8007e02:	9b01      	ldr	r3, [sp, #4]
 8007e04:	6120      	str	r0, [r4, #16]
 8007e06:	b15b      	cbz	r3, 8007e20 <__smakebuf_r+0x70>
 8007e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f000 f851 	bl	8007eb4 <_isatty_r>
 8007e12:	b128      	cbz	r0, 8007e20 <__smakebuf_r+0x70>
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	f023 0303 	bic.w	r3, r3, #3
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	81a3      	strh	r3, [r4, #12]
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	431d      	orrs	r5, r3
 8007e24:	81a5      	strh	r5, [r4, #12]
 8007e26:	e7cf      	b.n	8007dc8 <__smakebuf_r+0x18>

08007e28 <_putc_r>:
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	4614      	mov	r4, r2
 8007e2e:	4606      	mov	r6, r0
 8007e30:	b118      	cbz	r0, 8007e3a <_putc_r+0x12>
 8007e32:	6a03      	ldr	r3, [r0, #32]
 8007e34:	b90b      	cbnz	r3, 8007e3a <_putc_r+0x12>
 8007e36:	f7ff f9b7 	bl	80071a8 <__sinit>
 8007e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e3c:	07d8      	lsls	r0, r3, #31
 8007e3e:	d405      	bmi.n	8007e4c <_putc_r+0x24>
 8007e40:	89a3      	ldrh	r3, [r4, #12]
 8007e42:	0599      	lsls	r1, r3, #22
 8007e44:	d402      	bmi.n	8007e4c <_putc_r+0x24>
 8007e46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e48:	f7ff fbbb 	bl	80075c2 <__retarget_lock_acquire_recursive>
 8007e4c:	68a3      	ldr	r3, [r4, #8]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	60a3      	str	r3, [r4, #8]
 8007e54:	da05      	bge.n	8007e62 <_putc_r+0x3a>
 8007e56:	69a2      	ldr	r2, [r4, #24]
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	db12      	blt.n	8007e82 <_putc_r+0x5a>
 8007e5c:	b2eb      	uxtb	r3, r5
 8007e5e:	2b0a      	cmp	r3, #10
 8007e60:	d00f      	beq.n	8007e82 <_putc_r+0x5a>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	6022      	str	r2, [r4, #0]
 8007e68:	701d      	strb	r5, [r3, #0]
 8007e6a:	b2ed      	uxtb	r5, r5
 8007e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e6e:	07da      	lsls	r2, r3, #31
 8007e70:	d405      	bmi.n	8007e7e <_putc_r+0x56>
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	059b      	lsls	r3, r3, #22
 8007e76:	d402      	bmi.n	8007e7e <_putc_r+0x56>
 8007e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e7a:	f7ff fba3 	bl	80075c4 <__retarget_lock_release_recursive>
 8007e7e:	4628      	mov	r0, r5
 8007e80:	bd70      	pop	{r4, r5, r6, pc}
 8007e82:	4629      	mov	r1, r5
 8007e84:	4622      	mov	r2, r4
 8007e86:	4630      	mov	r0, r6
 8007e88:	f7ff fa7d 	bl	8007386 <__swbuf_r>
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	e7ed      	b.n	8007e6c <_putc_r+0x44>

08007e90 <_fstat_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4d07      	ldr	r5, [pc, #28]	; (8007eb0 <_fstat_r+0x20>)
 8007e94:	2300      	movs	r3, #0
 8007e96:	4604      	mov	r4, r0
 8007e98:	4608      	mov	r0, r1
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	602b      	str	r3, [r5, #0]
 8007e9e:	f7f9 fdcc 	bl	8001a3a <_fstat>
 8007ea2:	1c43      	adds	r3, r0, #1
 8007ea4:	d102      	bne.n	8007eac <_fstat_r+0x1c>
 8007ea6:	682b      	ldr	r3, [r5, #0]
 8007ea8:	b103      	cbz	r3, 8007eac <_fstat_r+0x1c>
 8007eaa:	6023      	str	r3, [r4, #0]
 8007eac:	bd38      	pop	{r3, r4, r5, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000420 	.word	0x20000420

08007eb4 <_isatty_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4d06      	ldr	r5, [pc, #24]	; (8007ed0 <_isatty_r+0x1c>)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4604      	mov	r4, r0
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	602b      	str	r3, [r5, #0]
 8007ec0:	f7f9 fdcb 	bl	8001a5a <_isatty>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_isatty_r+0x1a>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_isatty_r+0x1a>
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	20000420 	.word	0x20000420

08007ed4 <_init>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	bf00      	nop
 8007ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eda:	bc08      	pop	{r3}
 8007edc:	469e      	mov	lr, r3
 8007ede:	4770      	bx	lr

08007ee0 <_fini>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr
